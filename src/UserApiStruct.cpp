#include "stdafx.h"
#include "UserApiStruct.h"

//字符编码转换
//数据类型转换(不包含数据结构转换)
//char  <=> c
//char* <=> y
//int   <=> i
//short <=> h
//double<=> d
//bool  => pybool => p => int(0/1)
//char*中文=>PyCTP_PyCTP_PyUnicode_DecodeGB2312
//struct <=> dict

#define PyCTP_PyDict_FromStruct_BEGIN(_in_name, _in_format) \
        PyObject *args = nullptr; PyObject *keywords = nullptr; PyObject *delptr = nullptr; \
        if(dict == nullptr || _in_name == nullptr) return 0; \
        if (PyDict_Check(dict)){ args = PyTuple_New(0); keywords = dict; delptr = args;} \
        else if (PyTuple_Check(dict)){ args = dict; keywords = PyDict_New(); delptr = keywords;} \
        else{return 0;} \
        if (!PyArg_ParseTupleAndKeywords(args, keywords, _in_format, const_cast<char **>(kwlist)
#define PyCTP_PyDict_FromStruct_END )){Py_DECREF(delptr); return 0;}
#define PyCTP_PyDict_FromStruct_RETURN Py_DECREF(delptr); return 1;

int PyCTP_Struct_FromPyDict(CThostFtdcDisseminationField *pDisseminationField, PyObject *dict)
{
	static char *kwlist[] = {"SequenceSeries", "SequenceNo", nullptr};
	short pDisseminationField_SequenceSeries = 0;
	int pDisseminationField_SequenceNo = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pDisseminationField, "|hi")
		, &pDisseminationField_SequenceSeries
		, &pDisseminationField_SequenceNo
	PyCTP_PyDict_FromStruct_END
		pDisseminationField->SequenceSeries = pDisseminationField_SequenceSeries;
		pDisseminationField->SequenceNo = pDisseminationField_SequenceNo;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcDisseminationField *pDisseminationField)
{
	if(pDisseminationField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:h,s:i}"
		, "SequenceSeries", pDisseminationField->SequenceSeries
		, "SequenceNo", pDisseminationField->SequenceNo
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqUserLoginField *pReqUserLoginField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "BrokerID", "UserID", "Password", "UserProductInfo", "InterfaceProductInfo", "ProtocolInfo", "MacAddress", "OneTimePassword", "ClientIPAddress", "LoginRemark", "ClientIPPort", nullptr};
	char *pReqUserLoginField_TradingDay = nullptr;
	char *pReqUserLoginField_BrokerID = nullptr;
	char *pReqUserLoginField_UserID = nullptr;
	char *pReqUserLoginField_Password = nullptr;
	char *pReqUserLoginField_UserProductInfo = nullptr;
	char *pReqUserLoginField_InterfaceProductInfo = nullptr;
	char *pReqUserLoginField_ProtocolInfo = nullptr;
	char *pReqUserLoginField_MacAddress = nullptr;
	char *pReqUserLoginField_OneTimePassword = nullptr;
	char *pReqUserLoginField_ClientIPAddress = nullptr;
	char *pReqUserLoginField_LoginRemark = nullptr;
	int pReqUserLoginField_ClientIPPort = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pReqUserLoginField, "|yyyyyyyyyyyi")
		, &pReqUserLoginField_TradingDay
		, &pReqUserLoginField_BrokerID
		, &pReqUserLoginField_UserID
		, &pReqUserLoginField_Password
		, &pReqUserLoginField_UserProductInfo
		, &pReqUserLoginField_InterfaceProductInfo
		, &pReqUserLoginField_ProtocolInfo
		, &pReqUserLoginField_MacAddress
		, &pReqUserLoginField_OneTimePassword
		, &pReqUserLoginField_ClientIPAddress
		, &pReqUserLoginField_LoginRemark
		, &pReqUserLoginField_ClientIPPort
	PyCTP_PyDict_FromStruct_END
		if(pReqUserLoginField_TradingDay != nullptr){ strcpy_s(pReqUserLoginField->TradingDay, pReqUserLoginField_TradingDay); pReqUserLoginField_TradingDay = nullptr; }
		if(pReqUserLoginField_BrokerID != nullptr){ strcpy_s(pReqUserLoginField->BrokerID, pReqUserLoginField_BrokerID); pReqUserLoginField_BrokerID = nullptr; }
		if(pReqUserLoginField_UserID != nullptr){ strcpy_s(pReqUserLoginField->UserID, pReqUserLoginField_UserID); pReqUserLoginField_UserID = nullptr; }
		if(pReqUserLoginField_Password != nullptr){ strcpy_s(pReqUserLoginField->Password, pReqUserLoginField_Password); pReqUserLoginField_Password = nullptr; }
		if(pReqUserLoginField_UserProductInfo != nullptr){ strcpy_s(pReqUserLoginField->UserProductInfo, pReqUserLoginField_UserProductInfo); pReqUserLoginField_UserProductInfo = nullptr; }
		if(pReqUserLoginField_InterfaceProductInfo != nullptr){ strcpy_s(pReqUserLoginField->InterfaceProductInfo, pReqUserLoginField_InterfaceProductInfo); pReqUserLoginField_InterfaceProductInfo = nullptr; }
		if(pReqUserLoginField_ProtocolInfo != nullptr){ strcpy_s(pReqUserLoginField->ProtocolInfo, pReqUserLoginField_ProtocolInfo); pReqUserLoginField_ProtocolInfo = nullptr; }
		if(pReqUserLoginField_MacAddress != nullptr){ strcpy_s(pReqUserLoginField->MacAddress, pReqUserLoginField_MacAddress); pReqUserLoginField_MacAddress = nullptr; }
		if(pReqUserLoginField_OneTimePassword != nullptr){ strcpy_s(pReqUserLoginField->OneTimePassword, pReqUserLoginField_OneTimePassword); pReqUserLoginField_OneTimePassword = nullptr; }
		if(pReqUserLoginField_ClientIPAddress != nullptr){ strcpy_s(pReqUserLoginField->ClientIPAddress, pReqUserLoginField_ClientIPAddress); pReqUserLoginField_ClientIPAddress = nullptr; }
		if(pReqUserLoginField_LoginRemark != nullptr){ strcpy_s(pReqUserLoginField->LoginRemark, pReqUserLoginField_LoginRemark); pReqUserLoginField_LoginRemark = nullptr; }
		pReqUserLoginField->ClientIPPort = pReqUserLoginField_ClientIPPort;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqUserLoginField *pReqUserLoginField)
{
	if(pReqUserLoginField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i}"
		, "TradingDay", pReqUserLoginField->TradingDay
		, "BrokerID", pReqUserLoginField->BrokerID
		, "UserID", pReqUserLoginField->UserID
		, "Password", pReqUserLoginField->Password
		, "UserProductInfo", pReqUserLoginField->UserProductInfo
		, "InterfaceProductInfo", pReqUserLoginField->InterfaceProductInfo
		, "ProtocolInfo", pReqUserLoginField->ProtocolInfo
		, "MacAddress", pReqUserLoginField->MacAddress
		, "OneTimePassword", pReqUserLoginField->OneTimePassword
		, "ClientIPAddress", pReqUserLoginField->ClientIPAddress
		, "LoginRemark", pReqUserLoginField->LoginRemark
		, "ClientIPPort", pReqUserLoginField->ClientIPPort
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcRspUserLoginField *pRspUserLoginField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "LoginTime", "BrokerID", "UserID", "SystemName", "FrontID", "SessionID", "MaxOrderRef", "SHFETime", "DCETime", "CZCETime", "FFEXTime", "INETime", nullptr};
	char *pRspUserLoginField_TradingDay = nullptr;
	char *pRspUserLoginField_LoginTime = nullptr;
	char *pRspUserLoginField_BrokerID = nullptr;
	char *pRspUserLoginField_UserID = nullptr;
	char *pRspUserLoginField_SystemName = nullptr;
	int pRspUserLoginField_FrontID = 0;
	int pRspUserLoginField_SessionID = 0;
	char *pRspUserLoginField_MaxOrderRef = nullptr;
	char *pRspUserLoginField_SHFETime = nullptr;
	char *pRspUserLoginField_DCETime = nullptr;
	char *pRspUserLoginField_CZCETime = nullptr;
	char *pRspUserLoginField_FFEXTime = nullptr;
	char *pRspUserLoginField_INETime = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pRspUserLoginField, "|yyyyyiiyyyyyy")
		, &pRspUserLoginField_TradingDay
		, &pRspUserLoginField_LoginTime
		, &pRspUserLoginField_BrokerID
		, &pRspUserLoginField_UserID
		, &pRspUserLoginField_SystemName
		, &pRspUserLoginField_FrontID
		, &pRspUserLoginField_SessionID
		, &pRspUserLoginField_MaxOrderRef
		, &pRspUserLoginField_SHFETime
		, &pRspUserLoginField_DCETime
		, &pRspUserLoginField_CZCETime
		, &pRspUserLoginField_FFEXTime
		, &pRspUserLoginField_INETime
	PyCTP_PyDict_FromStruct_END
		if(pRspUserLoginField_TradingDay != nullptr){ strcpy_s(pRspUserLoginField->TradingDay, pRspUserLoginField_TradingDay); pRspUserLoginField_TradingDay = nullptr; }
		if(pRspUserLoginField_LoginTime != nullptr){ strcpy_s(pRspUserLoginField->LoginTime, pRspUserLoginField_LoginTime); pRspUserLoginField_LoginTime = nullptr; }
		if(pRspUserLoginField_BrokerID != nullptr){ strcpy_s(pRspUserLoginField->BrokerID, pRspUserLoginField_BrokerID); pRspUserLoginField_BrokerID = nullptr; }
		if(pRspUserLoginField_UserID != nullptr){ strcpy_s(pRspUserLoginField->UserID, pRspUserLoginField_UserID); pRspUserLoginField_UserID = nullptr; }
		if(pRspUserLoginField_SystemName != nullptr){ strcpy_s(pRspUserLoginField->SystemName, pRspUserLoginField_SystemName); pRspUserLoginField_SystemName = nullptr; }
		pRspUserLoginField->FrontID = pRspUserLoginField_FrontID;
		pRspUserLoginField->SessionID = pRspUserLoginField_SessionID;
		if(pRspUserLoginField_MaxOrderRef != nullptr){ strcpy_s(pRspUserLoginField->MaxOrderRef, pRspUserLoginField_MaxOrderRef); pRspUserLoginField_MaxOrderRef = nullptr; }
		if(pRspUserLoginField_SHFETime != nullptr){ strcpy_s(pRspUserLoginField->SHFETime, pRspUserLoginField_SHFETime); pRspUserLoginField_SHFETime = nullptr; }
		if(pRspUserLoginField_DCETime != nullptr){ strcpy_s(pRspUserLoginField->DCETime, pRspUserLoginField_DCETime); pRspUserLoginField_DCETime = nullptr; }
		if(pRspUserLoginField_CZCETime != nullptr){ strcpy_s(pRspUserLoginField->CZCETime, pRspUserLoginField_CZCETime); pRspUserLoginField_CZCETime = nullptr; }
		if(pRspUserLoginField_FFEXTime != nullptr){ strcpy_s(pRspUserLoginField->FFEXTime, pRspUserLoginField_FFEXTime); pRspUserLoginField_FFEXTime = nullptr; }
		if(pRspUserLoginField_INETime != nullptr){ strcpy_s(pRspUserLoginField->INETime, pRspUserLoginField_INETime); pRspUserLoginField_INETime = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcRspUserLoginField *pRspUserLoginField)
{
	if(pRspUserLoginField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "TradingDay", pRspUserLoginField->TradingDay
		, "LoginTime", pRspUserLoginField->LoginTime
		, "BrokerID", pRspUserLoginField->BrokerID
		, "UserID", pRspUserLoginField->UserID
		, "SystemName", pRspUserLoginField->SystemName
		, "FrontID", pRspUserLoginField->FrontID
		, "SessionID", pRspUserLoginField->SessionID
		, "MaxOrderRef", pRspUserLoginField->MaxOrderRef
		, "SHFETime", pRspUserLoginField->SHFETime
		, "DCETime", pRspUserLoginField->DCETime
		, "CZCETime", pRspUserLoginField->CZCETime
		, "FFEXTime", pRspUserLoginField->FFEXTime
		, "INETime", pRspUserLoginField->INETime
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcUserLogoutField *pUserLogoutField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", nullptr};
	char *pUserLogoutField_BrokerID = nullptr;
	char *pUserLogoutField_UserID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pUserLogoutField, "|yy")
		, &pUserLogoutField_BrokerID
		, &pUserLogoutField_UserID
	PyCTP_PyDict_FromStruct_END
		if(pUserLogoutField_BrokerID != nullptr){ strcpy_s(pUserLogoutField->BrokerID, pUserLogoutField_BrokerID); pUserLogoutField_BrokerID = nullptr; }
		if(pUserLogoutField_UserID != nullptr){ strcpy_s(pUserLogoutField->UserID, pUserLogoutField_UserID); pUserLogoutField_UserID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcUserLogoutField *pUserLogoutField)
{
	if(pUserLogoutField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pUserLogoutField->BrokerID
		, "UserID", pUserLogoutField->UserID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcForceUserLogoutField *pForceUserLogoutField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", nullptr};
	char *pForceUserLogoutField_BrokerID = nullptr;
	char *pForceUserLogoutField_UserID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pForceUserLogoutField, "|yy")
		, &pForceUserLogoutField_BrokerID
		, &pForceUserLogoutField_UserID
	PyCTP_PyDict_FromStruct_END
		if(pForceUserLogoutField_BrokerID != nullptr){ strcpy_s(pForceUserLogoutField->BrokerID, pForceUserLogoutField_BrokerID); pForceUserLogoutField_BrokerID = nullptr; }
		if(pForceUserLogoutField_UserID != nullptr){ strcpy_s(pForceUserLogoutField->UserID, pForceUserLogoutField_UserID); pForceUserLogoutField_UserID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcForceUserLogoutField *pForceUserLogoutField)
{
	if(pForceUserLogoutField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pForceUserLogoutField->BrokerID
		, "UserID", pForceUserLogoutField->UserID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqAuthenticateField *pReqAuthenticateField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "UserProductInfo", "AuthCode", "AppID", nullptr};
	char *pReqAuthenticateField_BrokerID = nullptr;
	char *pReqAuthenticateField_UserID = nullptr;
	char *pReqAuthenticateField_UserProductInfo = nullptr;
	char *pReqAuthenticateField_AuthCode = nullptr;
	char *pReqAuthenticateField_AppID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pReqAuthenticateField, "|yyyyy")
		, &pReqAuthenticateField_BrokerID
		, &pReqAuthenticateField_UserID
		, &pReqAuthenticateField_UserProductInfo
		, &pReqAuthenticateField_AuthCode
		, &pReqAuthenticateField_AppID
	PyCTP_PyDict_FromStruct_END
		if(pReqAuthenticateField_BrokerID != nullptr){ strcpy_s(pReqAuthenticateField->BrokerID, pReqAuthenticateField_BrokerID); pReqAuthenticateField_BrokerID = nullptr; }
		if(pReqAuthenticateField_UserID != nullptr){ strcpy_s(pReqAuthenticateField->UserID, pReqAuthenticateField_UserID); pReqAuthenticateField_UserID = nullptr; }
		if(pReqAuthenticateField_UserProductInfo != nullptr){ strcpy_s(pReqAuthenticateField->UserProductInfo, pReqAuthenticateField_UserProductInfo); pReqAuthenticateField_UserProductInfo = nullptr; }
		if(pReqAuthenticateField_AuthCode != nullptr){ strcpy_s(pReqAuthenticateField->AuthCode, pReqAuthenticateField_AuthCode); pReqAuthenticateField_AuthCode = nullptr; }
		if(pReqAuthenticateField_AppID != nullptr){ strcpy_s(pReqAuthenticateField->AppID, pReqAuthenticateField_AppID); pReqAuthenticateField_AppID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqAuthenticateField *pReqAuthenticateField)
{
	if(pReqAuthenticateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pReqAuthenticateField->BrokerID
		, "UserID", pReqAuthenticateField->UserID
		, "UserProductInfo", pReqAuthenticateField->UserProductInfo
		, "AuthCode", pReqAuthenticateField->AuthCode
		, "AppID", pReqAuthenticateField->AppID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcRspAuthenticateField *pRspAuthenticateField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "UserProductInfo", "AppID", "AppType", nullptr};
	char *pRspAuthenticateField_BrokerID = nullptr;
	char *pRspAuthenticateField_UserID = nullptr;
	char *pRspAuthenticateField_UserProductInfo = nullptr;
	char *pRspAuthenticateField_AppID = nullptr;
	char pRspAuthenticateField_AppType = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pRspAuthenticateField, "|yyyyc")
		, &pRspAuthenticateField_BrokerID
		, &pRspAuthenticateField_UserID
		, &pRspAuthenticateField_UserProductInfo
		, &pRspAuthenticateField_AppID
		, &pRspAuthenticateField_AppType
	PyCTP_PyDict_FromStruct_END
		if(pRspAuthenticateField_BrokerID != nullptr){ strcpy_s(pRspAuthenticateField->BrokerID, pRspAuthenticateField_BrokerID); pRspAuthenticateField_BrokerID = nullptr; }
		if(pRspAuthenticateField_UserID != nullptr){ strcpy_s(pRspAuthenticateField->UserID, pRspAuthenticateField_UserID); pRspAuthenticateField_UserID = nullptr; }
		if(pRspAuthenticateField_UserProductInfo != nullptr){ strcpy_s(pRspAuthenticateField->UserProductInfo, pRspAuthenticateField_UserProductInfo); pRspAuthenticateField_UserProductInfo = nullptr; }
		if(pRspAuthenticateField_AppID != nullptr){ strcpy_s(pRspAuthenticateField->AppID, pRspAuthenticateField_AppID); pRspAuthenticateField_AppID = nullptr; }
		pRspAuthenticateField->AppType = pRspAuthenticateField_AppType;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcRspAuthenticateField *pRspAuthenticateField)
{
	if(pRspAuthenticateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:c}"
		, "BrokerID", pRspAuthenticateField->BrokerID
		, "UserID", pRspAuthenticateField->UserID
		, "UserProductInfo", pRspAuthenticateField->UserProductInfo
		, "AppID", pRspAuthenticateField->AppID
		, "AppType", pRspAuthenticateField->AppType
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcAuthenticationInfoField *pAuthenticationInfoField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "UserProductInfo", "AuthInfo", "IsResult", "AppID", "AppType", nullptr};
	char *pAuthenticationInfoField_BrokerID = nullptr;
	char *pAuthenticationInfoField_UserID = nullptr;
	char *pAuthenticationInfoField_UserProductInfo = nullptr;
	char *pAuthenticationInfoField_AuthInfo = nullptr;
	int pAuthenticationInfoField_IsResult = 0;
	char *pAuthenticationInfoField_AppID = nullptr;
	char pAuthenticationInfoField_AppType = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pAuthenticationInfoField, "|yyyyiyc")
		, &pAuthenticationInfoField_BrokerID
		, &pAuthenticationInfoField_UserID
		, &pAuthenticationInfoField_UserProductInfo
		, &pAuthenticationInfoField_AuthInfo
		, &pAuthenticationInfoField_IsResult
		, &pAuthenticationInfoField_AppID
		, &pAuthenticationInfoField_AppType
	PyCTP_PyDict_FromStruct_END
		if(pAuthenticationInfoField_BrokerID != nullptr){ strcpy_s(pAuthenticationInfoField->BrokerID, pAuthenticationInfoField_BrokerID); pAuthenticationInfoField_BrokerID = nullptr; }
		if(pAuthenticationInfoField_UserID != nullptr){ strcpy_s(pAuthenticationInfoField->UserID, pAuthenticationInfoField_UserID); pAuthenticationInfoField_UserID = nullptr; }
		if(pAuthenticationInfoField_UserProductInfo != nullptr){ strcpy_s(pAuthenticationInfoField->UserProductInfo, pAuthenticationInfoField_UserProductInfo); pAuthenticationInfoField_UserProductInfo = nullptr; }
		if(pAuthenticationInfoField_AuthInfo != nullptr){ strcpy_s(pAuthenticationInfoField->AuthInfo, pAuthenticationInfoField_AuthInfo); pAuthenticationInfoField_AuthInfo = nullptr; }
		pAuthenticationInfoField->IsResult = pAuthenticationInfoField_IsResult;
		if(pAuthenticationInfoField_AppID != nullptr){ strcpy_s(pAuthenticationInfoField->AppID, pAuthenticationInfoField_AppID); pAuthenticationInfoField_AppID = nullptr; }
		pAuthenticationInfoField->AppType = pAuthenticationInfoField_AppType;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcAuthenticationInfoField *pAuthenticationInfoField)
{
	if(pAuthenticationInfoField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:i,s:y,s:c}"
		, "BrokerID", pAuthenticationInfoField->BrokerID
		, "UserID", pAuthenticationInfoField->UserID
		, "UserProductInfo", pAuthenticationInfoField->UserProductInfo
		, "AuthInfo", pAuthenticationInfoField->AuthInfo
		, "IsResult", pAuthenticationInfoField->IsResult
		, "AppID", pAuthenticationInfoField->AppID
		, "AppType", pAuthenticationInfoField->AppType
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcRspUserLogin2Field *pRspUserLogin2Field, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "LoginTime", "BrokerID", "UserID", "SystemName", "FrontID", "SessionID", "MaxOrderRef", "SHFETime", "DCETime", "CZCETime", "FFEXTime", "INETime", "RandomString", nullptr};
	char *pRspUserLogin2Field_TradingDay = nullptr;
	char *pRspUserLogin2Field_LoginTime = nullptr;
	char *pRspUserLogin2Field_BrokerID = nullptr;
	char *pRspUserLogin2Field_UserID = nullptr;
	char *pRspUserLogin2Field_SystemName = nullptr;
	int pRspUserLogin2Field_FrontID = 0;
	int pRspUserLogin2Field_SessionID = 0;
	char *pRspUserLogin2Field_MaxOrderRef = nullptr;
	char *pRspUserLogin2Field_SHFETime = nullptr;
	char *pRspUserLogin2Field_DCETime = nullptr;
	char *pRspUserLogin2Field_CZCETime = nullptr;
	char *pRspUserLogin2Field_FFEXTime = nullptr;
	char *pRspUserLogin2Field_INETime = nullptr;
	char *pRspUserLogin2Field_RandomString = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pRspUserLogin2Field, "|yyyyyiiyyyyyyy")
		, &pRspUserLogin2Field_TradingDay
		, &pRspUserLogin2Field_LoginTime
		, &pRspUserLogin2Field_BrokerID
		, &pRspUserLogin2Field_UserID
		, &pRspUserLogin2Field_SystemName
		, &pRspUserLogin2Field_FrontID
		, &pRspUserLogin2Field_SessionID
		, &pRspUserLogin2Field_MaxOrderRef
		, &pRspUserLogin2Field_SHFETime
		, &pRspUserLogin2Field_DCETime
		, &pRspUserLogin2Field_CZCETime
		, &pRspUserLogin2Field_FFEXTime
		, &pRspUserLogin2Field_INETime
		, &pRspUserLogin2Field_RandomString
	PyCTP_PyDict_FromStruct_END
		if(pRspUserLogin2Field_TradingDay != nullptr){ strcpy_s(pRspUserLogin2Field->TradingDay, pRspUserLogin2Field_TradingDay); pRspUserLogin2Field_TradingDay = nullptr; }
		if(pRspUserLogin2Field_LoginTime != nullptr){ strcpy_s(pRspUserLogin2Field->LoginTime, pRspUserLogin2Field_LoginTime); pRspUserLogin2Field_LoginTime = nullptr; }
		if(pRspUserLogin2Field_BrokerID != nullptr){ strcpy_s(pRspUserLogin2Field->BrokerID, pRspUserLogin2Field_BrokerID); pRspUserLogin2Field_BrokerID = nullptr; }
		if(pRspUserLogin2Field_UserID != nullptr){ strcpy_s(pRspUserLogin2Field->UserID, pRspUserLogin2Field_UserID); pRspUserLogin2Field_UserID = nullptr; }
		if(pRspUserLogin2Field_SystemName != nullptr){ strcpy_s(pRspUserLogin2Field->SystemName, pRspUserLogin2Field_SystemName); pRspUserLogin2Field_SystemName = nullptr; }
		pRspUserLogin2Field->FrontID = pRspUserLogin2Field_FrontID;
		pRspUserLogin2Field->SessionID = pRspUserLogin2Field_SessionID;
		if(pRspUserLogin2Field_MaxOrderRef != nullptr){ strcpy_s(pRspUserLogin2Field->MaxOrderRef, pRspUserLogin2Field_MaxOrderRef); pRspUserLogin2Field_MaxOrderRef = nullptr; }
		if(pRspUserLogin2Field_SHFETime != nullptr){ strcpy_s(pRspUserLogin2Field->SHFETime, pRspUserLogin2Field_SHFETime); pRspUserLogin2Field_SHFETime = nullptr; }
		if(pRspUserLogin2Field_DCETime != nullptr){ strcpy_s(pRspUserLogin2Field->DCETime, pRspUserLogin2Field_DCETime); pRspUserLogin2Field_DCETime = nullptr; }
		if(pRspUserLogin2Field_CZCETime != nullptr){ strcpy_s(pRspUserLogin2Field->CZCETime, pRspUserLogin2Field_CZCETime); pRspUserLogin2Field_CZCETime = nullptr; }
		if(pRspUserLogin2Field_FFEXTime != nullptr){ strcpy_s(pRspUserLogin2Field->FFEXTime, pRspUserLogin2Field_FFEXTime); pRspUserLogin2Field_FFEXTime = nullptr; }
		if(pRspUserLogin2Field_INETime != nullptr){ strcpy_s(pRspUserLogin2Field->INETime, pRspUserLogin2Field_INETime); pRspUserLogin2Field_INETime = nullptr; }
		if(pRspUserLogin2Field_RandomString != nullptr){ strcpy_s(pRspUserLogin2Field->RandomString, pRspUserLogin2Field_RandomString); pRspUserLogin2Field_RandomString = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcRspUserLogin2Field *pRspUserLogin2Field)
{
	if(pRspUserLogin2Field == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "TradingDay", pRspUserLogin2Field->TradingDay
		, "LoginTime", pRspUserLogin2Field->LoginTime
		, "BrokerID", pRspUserLogin2Field->BrokerID
		, "UserID", pRspUserLogin2Field->UserID
		, "SystemName", pRspUserLogin2Field->SystemName
		, "FrontID", pRspUserLogin2Field->FrontID
		, "SessionID", pRspUserLogin2Field->SessionID
		, "MaxOrderRef", pRspUserLogin2Field->MaxOrderRef
		, "SHFETime", pRspUserLogin2Field->SHFETime
		, "DCETime", pRspUserLogin2Field->DCETime
		, "CZCETime", pRspUserLogin2Field->CZCETime
		, "FFEXTime", pRspUserLogin2Field->FFEXTime
		, "INETime", pRspUserLogin2Field->INETime
		, "RandomString", pRspUserLogin2Field->RandomString
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTransferHeaderField *pTransferHeaderField, PyObject *dict)
{
	static char *kwlist[] = {"Version", "TradeCode", "TradeDate", "TradeTime", "TradeSerial", "FutureID", "BankID", "BankBrchID", "OperNo", "DeviceID", "RecordNum", "SessionID", "RequestID", nullptr};
	char *pTransferHeaderField_Version = nullptr;
	char *pTransferHeaderField_TradeCode = nullptr;
	char *pTransferHeaderField_TradeDate = nullptr;
	char *pTransferHeaderField_TradeTime = nullptr;
	char *pTransferHeaderField_TradeSerial = nullptr;
	char *pTransferHeaderField_FutureID = nullptr;
	char *pTransferHeaderField_BankID = nullptr;
	char *pTransferHeaderField_BankBrchID = nullptr;
	char *pTransferHeaderField_OperNo = nullptr;
	char *pTransferHeaderField_DeviceID = nullptr;
	char *pTransferHeaderField_RecordNum = nullptr;
	int pTransferHeaderField_SessionID = 0;
	int pTransferHeaderField_RequestID = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pTransferHeaderField, "|yyyyyyyyyyyii")
		, &pTransferHeaderField_Version
		, &pTransferHeaderField_TradeCode
		, &pTransferHeaderField_TradeDate
		, &pTransferHeaderField_TradeTime
		, &pTransferHeaderField_TradeSerial
		, &pTransferHeaderField_FutureID
		, &pTransferHeaderField_BankID
		, &pTransferHeaderField_BankBrchID
		, &pTransferHeaderField_OperNo
		, &pTransferHeaderField_DeviceID
		, &pTransferHeaderField_RecordNum
		, &pTransferHeaderField_SessionID
		, &pTransferHeaderField_RequestID
	PyCTP_PyDict_FromStruct_END
		if(pTransferHeaderField_Version != nullptr){ strcpy_s(pTransferHeaderField->Version, pTransferHeaderField_Version); pTransferHeaderField_Version = nullptr; }
		if(pTransferHeaderField_TradeCode != nullptr){ strcpy_s(pTransferHeaderField->TradeCode, pTransferHeaderField_TradeCode); pTransferHeaderField_TradeCode = nullptr; }
		if(pTransferHeaderField_TradeDate != nullptr){ strcpy_s(pTransferHeaderField->TradeDate, pTransferHeaderField_TradeDate); pTransferHeaderField_TradeDate = nullptr; }
		if(pTransferHeaderField_TradeTime != nullptr){ strcpy_s(pTransferHeaderField->TradeTime, pTransferHeaderField_TradeTime); pTransferHeaderField_TradeTime = nullptr; }
		if(pTransferHeaderField_TradeSerial != nullptr){ strcpy_s(pTransferHeaderField->TradeSerial, pTransferHeaderField_TradeSerial); pTransferHeaderField_TradeSerial = nullptr; }
		if(pTransferHeaderField_FutureID != nullptr){ strcpy_s(pTransferHeaderField->FutureID, pTransferHeaderField_FutureID); pTransferHeaderField_FutureID = nullptr; }
		if(pTransferHeaderField_BankID != nullptr){ strcpy_s(pTransferHeaderField->BankID, pTransferHeaderField_BankID); pTransferHeaderField_BankID = nullptr; }
		if(pTransferHeaderField_BankBrchID != nullptr){ strcpy_s(pTransferHeaderField->BankBrchID, pTransferHeaderField_BankBrchID); pTransferHeaderField_BankBrchID = nullptr; }
		if(pTransferHeaderField_OperNo != nullptr){ strcpy_s(pTransferHeaderField->OperNo, pTransferHeaderField_OperNo); pTransferHeaderField_OperNo = nullptr; }
		if(pTransferHeaderField_DeviceID != nullptr){ strcpy_s(pTransferHeaderField->DeviceID, pTransferHeaderField_DeviceID); pTransferHeaderField_DeviceID = nullptr; }
		if(pTransferHeaderField_RecordNum != nullptr){ strcpy_s(pTransferHeaderField->RecordNum, pTransferHeaderField_RecordNum); pTransferHeaderField_RecordNum = nullptr; }
		pTransferHeaderField->SessionID = pTransferHeaderField_SessionID;
		pTransferHeaderField->RequestID = pTransferHeaderField_RequestID;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTransferHeaderField *pTransferHeaderField)
{
	if(pTransferHeaderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:i}"
		, "Version", pTransferHeaderField->Version
		, "TradeCode", pTransferHeaderField->TradeCode
		, "TradeDate", pTransferHeaderField->TradeDate
		, "TradeTime", pTransferHeaderField->TradeTime
		, "TradeSerial", pTransferHeaderField->TradeSerial
		, "FutureID", pTransferHeaderField->FutureID
		, "BankID", pTransferHeaderField->BankID
		, "BankBrchID", pTransferHeaderField->BankBrchID
		, "OperNo", pTransferHeaderField->OperNo
		, "DeviceID", pTransferHeaderField->DeviceID
		, "RecordNum", pTransferHeaderField->RecordNum
		, "SessionID", pTransferHeaderField->SessionID
		, "RequestID", pTransferHeaderField->RequestID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTransferBankToFutureReqField *pTransferBankToFutureReqField, PyObject *dict)
{
	static char *kwlist[] = {"FutureAccount", "FuturePwdFlag", "FutureAccPwd", "TradeAmt", "CustFee", "CurrencyCode", nullptr};
	char *pTransferBankToFutureReqField_FutureAccount = nullptr;
	char pTransferBankToFutureReqField_FuturePwdFlag = 0;
	char *pTransferBankToFutureReqField_FutureAccPwd = nullptr;
	double pTransferBankToFutureReqField_TradeAmt = 0.0;
	double pTransferBankToFutureReqField_CustFee = 0.0;
	char *pTransferBankToFutureReqField_CurrencyCode = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTransferBankToFutureReqField, "|ycyddy")
		, &pTransferBankToFutureReqField_FutureAccount
		, &pTransferBankToFutureReqField_FuturePwdFlag
		, &pTransferBankToFutureReqField_FutureAccPwd
		, &pTransferBankToFutureReqField_TradeAmt
		, &pTransferBankToFutureReqField_CustFee
		, &pTransferBankToFutureReqField_CurrencyCode
	PyCTP_PyDict_FromStruct_END
		if(pTransferBankToFutureReqField_FutureAccount != nullptr){ strcpy_s(pTransferBankToFutureReqField->FutureAccount, pTransferBankToFutureReqField_FutureAccount); pTransferBankToFutureReqField_FutureAccount = nullptr; }
		pTransferBankToFutureReqField->FuturePwdFlag = pTransferBankToFutureReqField_FuturePwdFlag;
		if(pTransferBankToFutureReqField_FutureAccPwd != nullptr){ strcpy_s(pTransferBankToFutureReqField->FutureAccPwd, pTransferBankToFutureReqField_FutureAccPwd); pTransferBankToFutureReqField_FutureAccPwd = nullptr; }
		pTransferBankToFutureReqField->TradeAmt = pTransferBankToFutureReqField_TradeAmt;
		pTransferBankToFutureReqField->CustFee = pTransferBankToFutureReqField_CustFee;
		if(pTransferBankToFutureReqField_CurrencyCode != nullptr){ strcpy_s(pTransferBankToFutureReqField->CurrencyCode, pTransferBankToFutureReqField_CurrencyCode); pTransferBankToFutureReqField_CurrencyCode = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTransferBankToFutureReqField *pTransferBankToFutureReqField)
{
	if(pTransferBankToFutureReqField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:d,s:d,s:y}"
		, "FutureAccount", pTransferBankToFutureReqField->FutureAccount
		, "FuturePwdFlag", pTransferBankToFutureReqField->FuturePwdFlag
		, "FutureAccPwd", pTransferBankToFutureReqField->FutureAccPwd
		, "TradeAmt", pTransferBankToFutureReqField->TradeAmt
		, "CustFee", pTransferBankToFutureReqField->CustFee
		, "CurrencyCode", pTransferBankToFutureReqField->CurrencyCode
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTransferBankToFutureRspField *pTransferBankToFutureRspField, PyObject *dict)
{
	static char *kwlist[] = {"RetCode", "RetInfo", "FutureAccount", "TradeAmt", "CustFee", "CurrencyCode", nullptr};
	char *pTransferBankToFutureRspField_RetCode = nullptr;
	char *pTransferBankToFutureRspField_RetInfo = nullptr;
	char *pTransferBankToFutureRspField_FutureAccount = nullptr;
	double pTransferBankToFutureRspField_TradeAmt = 0.0;
	double pTransferBankToFutureRspField_CustFee = 0.0;
	char *pTransferBankToFutureRspField_CurrencyCode = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTransferBankToFutureRspField, "|yyyddy")
		, &pTransferBankToFutureRspField_RetCode
		, &pTransferBankToFutureRspField_RetInfo
		, &pTransferBankToFutureRspField_FutureAccount
		, &pTransferBankToFutureRspField_TradeAmt
		, &pTransferBankToFutureRspField_CustFee
		, &pTransferBankToFutureRspField_CurrencyCode
	PyCTP_PyDict_FromStruct_END
		if(pTransferBankToFutureRspField_RetCode != nullptr){ strcpy_s(pTransferBankToFutureRspField->RetCode, pTransferBankToFutureRspField_RetCode); pTransferBankToFutureRspField_RetCode = nullptr; }
		if(pTransferBankToFutureRspField_RetInfo != nullptr){ strcpy_s(pTransferBankToFutureRspField->RetInfo, pTransferBankToFutureRspField_RetInfo); pTransferBankToFutureRspField_RetInfo = nullptr; }
		if(pTransferBankToFutureRspField_FutureAccount != nullptr){ strcpy_s(pTransferBankToFutureRspField->FutureAccount, pTransferBankToFutureRspField_FutureAccount); pTransferBankToFutureRspField_FutureAccount = nullptr; }
		pTransferBankToFutureRspField->TradeAmt = pTransferBankToFutureRspField_TradeAmt;
		pTransferBankToFutureRspField->CustFee = pTransferBankToFutureRspField_CustFee;
		if(pTransferBankToFutureRspField_CurrencyCode != nullptr){ strcpy_s(pTransferBankToFutureRspField->CurrencyCode, pTransferBankToFutureRspField_CurrencyCode); pTransferBankToFutureRspField_CurrencyCode = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTransferBankToFutureRspField *pTransferBankToFutureRspField)
{
	if(pTransferBankToFutureRspField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:d,s:d,s:y}"
		, "RetCode", pTransferBankToFutureRspField->RetCode
		, "RetInfo", pTransferBankToFutureRspField->RetInfo
		, "FutureAccount", pTransferBankToFutureRspField->FutureAccount
		, "TradeAmt", pTransferBankToFutureRspField->TradeAmt
		, "CustFee", pTransferBankToFutureRspField->CustFee
		, "CurrencyCode", pTransferBankToFutureRspField->CurrencyCode
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTransferFutureToBankReqField *pTransferFutureToBankReqField, PyObject *dict)
{
	static char *kwlist[] = {"FutureAccount", "FuturePwdFlag", "FutureAccPwd", "TradeAmt", "CustFee", "CurrencyCode", nullptr};
	char *pTransferFutureToBankReqField_FutureAccount = nullptr;
	char pTransferFutureToBankReqField_FuturePwdFlag = 0;
	char *pTransferFutureToBankReqField_FutureAccPwd = nullptr;
	double pTransferFutureToBankReqField_TradeAmt = 0.0;
	double pTransferFutureToBankReqField_CustFee = 0.0;
	char *pTransferFutureToBankReqField_CurrencyCode = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTransferFutureToBankReqField, "|ycyddy")
		, &pTransferFutureToBankReqField_FutureAccount
		, &pTransferFutureToBankReqField_FuturePwdFlag
		, &pTransferFutureToBankReqField_FutureAccPwd
		, &pTransferFutureToBankReqField_TradeAmt
		, &pTransferFutureToBankReqField_CustFee
		, &pTransferFutureToBankReqField_CurrencyCode
	PyCTP_PyDict_FromStruct_END
		if(pTransferFutureToBankReqField_FutureAccount != nullptr){ strcpy_s(pTransferFutureToBankReqField->FutureAccount, pTransferFutureToBankReqField_FutureAccount); pTransferFutureToBankReqField_FutureAccount = nullptr; }
		pTransferFutureToBankReqField->FuturePwdFlag = pTransferFutureToBankReqField_FuturePwdFlag;
		if(pTransferFutureToBankReqField_FutureAccPwd != nullptr){ strcpy_s(pTransferFutureToBankReqField->FutureAccPwd, pTransferFutureToBankReqField_FutureAccPwd); pTransferFutureToBankReqField_FutureAccPwd = nullptr; }
		pTransferFutureToBankReqField->TradeAmt = pTransferFutureToBankReqField_TradeAmt;
		pTransferFutureToBankReqField->CustFee = pTransferFutureToBankReqField_CustFee;
		if(pTransferFutureToBankReqField_CurrencyCode != nullptr){ strcpy_s(pTransferFutureToBankReqField->CurrencyCode, pTransferFutureToBankReqField_CurrencyCode); pTransferFutureToBankReqField_CurrencyCode = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTransferFutureToBankReqField *pTransferFutureToBankReqField)
{
	if(pTransferFutureToBankReqField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:d,s:d,s:y}"
		, "FutureAccount", pTransferFutureToBankReqField->FutureAccount
		, "FuturePwdFlag", pTransferFutureToBankReqField->FuturePwdFlag
		, "FutureAccPwd", pTransferFutureToBankReqField->FutureAccPwd
		, "TradeAmt", pTransferFutureToBankReqField->TradeAmt
		, "CustFee", pTransferFutureToBankReqField->CustFee
		, "CurrencyCode", pTransferFutureToBankReqField->CurrencyCode
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTransferFutureToBankRspField *pTransferFutureToBankRspField, PyObject *dict)
{
	static char *kwlist[] = {"RetCode", "RetInfo", "FutureAccount", "TradeAmt", "CustFee", "CurrencyCode", nullptr};
	char *pTransferFutureToBankRspField_RetCode = nullptr;
	char *pTransferFutureToBankRspField_RetInfo = nullptr;
	char *pTransferFutureToBankRspField_FutureAccount = nullptr;
	double pTransferFutureToBankRspField_TradeAmt = 0.0;
	double pTransferFutureToBankRspField_CustFee = 0.0;
	char *pTransferFutureToBankRspField_CurrencyCode = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTransferFutureToBankRspField, "|yyyddy")
		, &pTransferFutureToBankRspField_RetCode
		, &pTransferFutureToBankRspField_RetInfo
		, &pTransferFutureToBankRspField_FutureAccount
		, &pTransferFutureToBankRspField_TradeAmt
		, &pTransferFutureToBankRspField_CustFee
		, &pTransferFutureToBankRspField_CurrencyCode
	PyCTP_PyDict_FromStruct_END
		if(pTransferFutureToBankRspField_RetCode != nullptr){ strcpy_s(pTransferFutureToBankRspField->RetCode, pTransferFutureToBankRspField_RetCode); pTransferFutureToBankRspField_RetCode = nullptr; }
		if(pTransferFutureToBankRspField_RetInfo != nullptr){ strcpy_s(pTransferFutureToBankRspField->RetInfo, pTransferFutureToBankRspField_RetInfo); pTransferFutureToBankRspField_RetInfo = nullptr; }
		if(pTransferFutureToBankRspField_FutureAccount != nullptr){ strcpy_s(pTransferFutureToBankRspField->FutureAccount, pTransferFutureToBankRspField_FutureAccount); pTransferFutureToBankRspField_FutureAccount = nullptr; }
		pTransferFutureToBankRspField->TradeAmt = pTransferFutureToBankRspField_TradeAmt;
		pTransferFutureToBankRspField->CustFee = pTransferFutureToBankRspField_CustFee;
		if(pTransferFutureToBankRspField_CurrencyCode != nullptr){ strcpy_s(pTransferFutureToBankRspField->CurrencyCode, pTransferFutureToBankRspField_CurrencyCode); pTransferFutureToBankRspField_CurrencyCode = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTransferFutureToBankRspField *pTransferFutureToBankRspField)
{
	if(pTransferFutureToBankRspField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:d,s:d,s:y}"
		, "RetCode", pTransferFutureToBankRspField->RetCode
		, "RetInfo", pTransferFutureToBankRspField->RetInfo
		, "FutureAccount", pTransferFutureToBankRspField->FutureAccount
		, "TradeAmt", pTransferFutureToBankRspField->TradeAmt
		, "CustFee", pTransferFutureToBankRspField->CustFee
		, "CurrencyCode", pTransferFutureToBankRspField->CurrencyCode
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTransferQryBankReqField *pTransferQryBankReqField, PyObject *dict)
{
	static char *kwlist[] = {"FutureAccount", "FuturePwdFlag", "FutureAccPwd", "CurrencyCode", nullptr};
	char *pTransferQryBankReqField_FutureAccount = nullptr;
	char pTransferQryBankReqField_FuturePwdFlag = 0;
	char *pTransferQryBankReqField_FutureAccPwd = nullptr;
	char *pTransferQryBankReqField_CurrencyCode = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTransferQryBankReqField, "|ycyy")
		, &pTransferQryBankReqField_FutureAccount
		, &pTransferQryBankReqField_FuturePwdFlag
		, &pTransferQryBankReqField_FutureAccPwd
		, &pTransferQryBankReqField_CurrencyCode
	PyCTP_PyDict_FromStruct_END
		if(pTransferQryBankReqField_FutureAccount != nullptr){ strcpy_s(pTransferQryBankReqField->FutureAccount, pTransferQryBankReqField_FutureAccount); pTransferQryBankReqField_FutureAccount = nullptr; }
		pTransferQryBankReqField->FuturePwdFlag = pTransferQryBankReqField_FuturePwdFlag;
		if(pTransferQryBankReqField_FutureAccPwd != nullptr){ strcpy_s(pTransferQryBankReqField->FutureAccPwd, pTransferQryBankReqField_FutureAccPwd); pTransferQryBankReqField_FutureAccPwd = nullptr; }
		if(pTransferQryBankReqField_CurrencyCode != nullptr){ strcpy_s(pTransferQryBankReqField->CurrencyCode, pTransferQryBankReqField_CurrencyCode); pTransferQryBankReqField_CurrencyCode = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTransferQryBankReqField *pTransferQryBankReqField)
{
	if(pTransferQryBankReqField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y}"
		, "FutureAccount", pTransferQryBankReqField->FutureAccount
		, "FuturePwdFlag", pTransferQryBankReqField->FuturePwdFlag
		, "FutureAccPwd", pTransferQryBankReqField->FutureAccPwd
		, "CurrencyCode", pTransferQryBankReqField->CurrencyCode
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTransferQryBankRspField *pTransferQryBankRspField, PyObject *dict)
{
	static char *kwlist[] = {"RetCode", "RetInfo", "FutureAccount", "TradeAmt", "UseAmt", "FetchAmt", "CurrencyCode", nullptr};
	char *pTransferQryBankRspField_RetCode = nullptr;
	char *pTransferQryBankRspField_RetInfo = nullptr;
	char *pTransferQryBankRspField_FutureAccount = nullptr;
	double pTransferQryBankRspField_TradeAmt = 0.0;
	double pTransferQryBankRspField_UseAmt = 0.0;
	double pTransferQryBankRspField_FetchAmt = 0.0;
	char *pTransferQryBankRspField_CurrencyCode = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTransferQryBankRspField, "|yyydddy")
		, &pTransferQryBankRspField_RetCode
		, &pTransferQryBankRspField_RetInfo
		, &pTransferQryBankRspField_FutureAccount
		, &pTransferQryBankRspField_TradeAmt
		, &pTransferQryBankRspField_UseAmt
		, &pTransferQryBankRspField_FetchAmt
		, &pTransferQryBankRspField_CurrencyCode
	PyCTP_PyDict_FromStruct_END
		if(pTransferQryBankRspField_RetCode != nullptr){ strcpy_s(pTransferQryBankRspField->RetCode, pTransferQryBankRspField_RetCode); pTransferQryBankRspField_RetCode = nullptr; }
		if(pTransferQryBankRspField_RetInfo != nullptr){ strcpy_s(pTransferQryBankRspField->RetInfo, pTransferQryBankRspField_RetInfo); pTransferQryBankRspField_RetInfo = nullptr; }
		if(pTransferQryBankRspField_FutureAccount != nullptr){ strcpy_s(pTransferQryBankRspField->FutureAccount, pTransferQryBankRspField_FutureAccount); pTransferQryBankRspField_FutureAccount = nullptr; }
		pTransferQryBankRspField->TradeAmt = pTransferQryBankRspField_TradeAmt;
		pTransferQryBankRspField->UseAmt = pTransferQryBankRspField_UseAmt;
		pTransferQryBankRspField->FetchAmt = pTransferQryBankRspField_FetchAmt;
		if(pTransferQryBankRspField_CurrencyCode != nullptr){ strcpy_s(pTransferQryBankRspField->CurrencyCode, pTransferQryBankRspField_CurrencyCode); pTransferQryBankRspField_CurrencyCode = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTransferQryBankRspField *pTransferQryBankRspField)
{
	if(pTransferQryBankRspField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:d,s:d,s:d,s:y}"
		, "RetCode", pTransferQryBankRspField->RetCode
		, "RetInfo", pTransferQryBankRspField->RetInfo
		, "FutureAccount", pTransferQryBankRspField->FutureAccount
		, "TradeAmt", pTransferQryBankRspField->TradeAmt
		, "UseAmt", pTransferQryBankRspField->UseAmt
		, "FetchAmt", pTransferQryBankRspField->FetchAmt
		, "CurrencyCode", pTransferQryBankRspField->CurrencyCode
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTransferQryDetailReqField *pTransferQryDetailReqField, PyObject *dict)
{
	static char *kwlist[] = {"FutureAccount", nullptr};
	char *pTransferQryDetailReqField_FutureAccount = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTransferQryDetailReqField, "|y")
		, &pTransferQryDetailReqField_FutureAccount
	PyCTP_PyDict_FromStruct_END
		if(pTransferQryDetailReqField_FutureAccount != nullptr){ strcpy_s(pTransferQryDetailReqField->FutureAccount, pTransferQryDetailReqField_FutureAccount); pTransferQryDetailReqField_FutureAccount = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTransferQryDetailReqField *pTransferQryDetailReqField)
{
	if(pTransferQryDetailReqField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y}"
		, "FutureAccount", pTransferQryDetailReqField->FutureAccount
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTransferQryDetailRspField *pTransferQryDetailRspField, PyObject *dict)
{
	static char *kwlist[] = {"TradeDate", "TradeTime", "TradeCode", "FutureSerial", "FutureID", "FutureAccount", "BankSerial", "BankID", "BankBrchID", "BankAccount", "CertCode", "CurrencyCode", "TxAmount", "Flag", nullptr};
	char *pTransferQryDetailRspField_TradeDate = nullptr;
	char *pTransferQryDetailRspField_TradeTime = nullptr;
	char *pTransferQryDetailRspField_TradeCode = nullptr;
	int pTransferQryDetailRspField_FutureSerial = 0;
	char *pTransferQryDetailRspField_FutureID = nullptr;
	char *pTransferQryDetailRspField_FutureAccount = nullptr;
	int pTransferQryDetailRspField_BankSerial = 0;
	char *pTransferQryDetailRspField_BankID = nullptr;
	char *pTransferQryDetailRspField_BankBrchID = nullptr;
	char *pTransferQryDetailRspField_BankAccount = nullptr;
	char *pTransferQryDetailRspField_CertCode = nullptr;
	char *pTransferQryDetailRspField_CurrencyCode = nullptr;
	double pTransferQryDetailRspField_TxAmount = 0.0;
	char pTransferQryDetailRspField_Flag = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pTransferQryDetailRspField, "|yyyiyyiyyyyydc")
		, &pTransferQryDetailRspField_TradeDate
		, &pTransferQryDetailRspField_TradeTime
		, &pTransferQryDetailRspField_TradeCode
		, &pTransferQryDetailRspField_FutureSerial
		, &pTransferQryDetailRspField_FutureID
		, &pTransferQryDetailRspField_FutureAccount
		, &pTransferQryDetailRspField_BankSerial
		, &pTransferQryDetailRspField_BankID
		, &pTransferQryDetailRspField_BankBrchID
		, &pTransferQryDetailRspField_BankAccount
		, &pTransferQryDetailRspField_CertCode
		, &pTransferQryDetailRspField_CurrencyCode
		, &pTransferQryDetailRspField_TxAmount
		, &pTransferQryDetailRspField_Flag
	PyCTP_PyDict_FromStruct_END
		if(pTransferQryDetailRspField_TradeDate != nullptr){ strcpy_s(pTransferQryDetailRspField->TradeDate, pTransferQryDetailRspField_TradeDate); pTransferQryDetailRspField_TradeDate = nullptr; }
		if(pTransferQryDetailRspField_TradeTime != nullptr){ strcpy_s(pTransferQryDetailRspField->TradeTime, pTransferQryDetailRspField_TradeTime); pTransferQryDetailRspField_TradeTime = nullptr; }
		if(pTransferQryDetailRspField_TradeCode != nullptr){ strcpy_s(pTransferQryDetailRspField->TradeCode, pTransferQryDetailRspField_TradeCode); pTransferQryDetailRspField_TradeCode = nullptr; }
		pTransferQryDetailRspField->FutureSerial = pTransferQryDetailRspField_FutureSerial;
		if(pTransferQryDetailRspField_FutureID != nullptr){ strcpy_s(pTransferQryDetailRspField->FutureID, pTransferQryDetailRspField_FutureID); pTransferQryDetailRspField_FutureID = nullptr; }
		if(pTransferQryDetailRspField_FutureAccount != nullptr){ strcpy_s(pTransferQryDetailRspField->FutureAccount, pTransferQryDetailRspField_FutureAccount); pTransferQryDetailRspField_FutureAccount = nullptr; }
		pTransferQryDetailRspField->BankSerial = pTransferQryDetailRspField_BankSerial;
		if(pTransferQryDetailRspField_BankID != nullptr){ strcpy_s(pTransferQryDetailRspField->BankID, pTransferQryDetailRspField_BankID); pTransferQryDetailRspField_BankID = nullptr; }
		if(pTransferQryDetailRspField_BankBrchID != nullptr){ strcpy_s(pTransferQryDetailRspField->BankBrchID, pTransferQryDetailRspField_BankBrchID); pTransferQryDetailRspField_BankBrchID = nullptr; }
		if(pTransferQryDetailRspField_BankAccount != nullptr){ strcpy_s(pTransferQryDetailRspField->BankAccount, pTransferQryDetailRspField_BankAccount); pTransferQryDetailRspField_BankAccount = nullptr; }
		if(pTransferQryDetailRspField_CertCode != nullptr){ strcpy_s(pTransferQryDetailRspField->CertCode, pTransferQryDetailRspField_CertCode); pTransferQryDetailRspField_CertCode = nullptr; }
		if(pTransferQryDetailRspField_CurrencyCode != nullptr){ strcpy_s(pTransferQryDetailRspField->CurrencyCode, pTransferQryDetailRspField_CurrencyCode); pTransferQryDetailRspField_CurrencyCode = nullptr; }
		pTransferQryDetailRspField->TxAmount = pTransferQryDetailRspField_TxAmount;
		pTransferQryDetailRspField->Flag = pTransferQryDetailRspField_Flag;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTransferQryDetailRspField *pTransferQryDetailRspField)
{
	if(pTransferQryDetailRspField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:i,s:y,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:d,s:c}"
		, "TradeDate", pTransferQryDetailRspField->TradeDate
		, "TradeTime", pTransferQryDetailRspField->TradeTime
		, "TradeCode", pTransferQryDetailRspField->TradeCode
		, "FutureSerial", pTransferQryDetailRspField->FutureSerial
		, "FutureID", pTransferQryDetailRspField->FutureID
		, "FutureAccount", pTransferQryDetailRspField->FutureAccount
		, "BankSerial", pTransferQryDetailRspField->BankSerial
		, "BankID", pTransferQryDetailRspField->BankID
		, "BankBrchID", pTransferQryDetailRspField->BankBrchID
		, "BankAccount", pTransferQryDetailRspField->BankAccount
		, "CertCode", pTransferQryDetailRspField->CertCode
		, "CurrencyCode", pTransferQryDetailRspField->CurrencyCode
		, "TxAmount", pTransferQryDetailRspField->TxAmount
		, "Flag", pTransferQryDetailRspField->Flag
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcRspInfoField *pRspInfoField, PyObject *dict)
{
	static char *kwlist[] = {"ErrorID", "ErrorMsg", nullptr};
	int pRspInfoField_ErrorID = 0;
	char *pRspInfoField_ErrorMsg = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pRspInfoField, "|iy")
		, &pRspInfoField_ErrorID
		, &pRspInfoField_ErrorMsg
	PyCTP_PyDict_FromStruct_END
		pRspInfoField->ErrorID = pRspInfoField_ErrorID;
		if(pRspInfoField_ErrorMsg != nullptr){ strcpy_s(pRspInfoField->ErrorMsg, pRspInfoField_ErrorMsg); pRspInfoField_ErrorMsg = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcRspInfoField *pRspInfoField)
{
	if(pRspInfoField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i,s:y}"
		, "ErrorID", pRspInfoField->ErrorID
		, "ErrorMsg", pRspInfoField->ErrorMsg
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeField *pExchangeField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "ExchangeName", "ExchangeProperty", nullptr};
	char *pExchangeField_ExchangeID = nullptr;
	char *pExchangeField_ExchangeName = nullptr;
	char pExchangeField_ExchangeProperty = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeField, "|yyc")
		, &pExchangeField_ExchangeID
		, &pExchangeField_ExchangeName
		, &pExchangeField_ExchangeProperty
	PyCTP_PyDict_FromStruct_END
		if(pExchangeField_ExchangeID != nullptr){ strcpy_s(pExchangeField->ExchangeID, pExchangeField_ExchangeID); pExchangeField_ExchangeID = nullptr; }
		if(pExchangeField_ExchangeName != nullptr){ strcpy_s(pExchangeField->ExchangeName, pExchangeField_ExchangeName); pExchangeField_ExchangeName = nullptr; }
		pExchangeField->ExchangeProperty = pExchangeField_ExchangeProperty;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeField *pExchangeField)
{
	if(pExchangeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c}"
		, "ExchangeID", pExchangeField->ExchangeID
		, "ExchangeName", pExchangeField->ExchangeName
		, "ExchangeProperty", pExchangeField->ExchangeProperty
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcProductField *pProductField, PyObject *dict)
{
	static char *kwlist[] = {"ProductID", "ProductName", "ExchangeID", "ProductClass", "VolumeMultiple", "PriceTick", "MaxMarketOrderVolume", "MinMarketOrderVolume", "MaxLimitOrderVolume", "MinLimitOrderVolume", "PositionType", "PositionDateType", "CloseDealType", "TradeCurrencyID", "MortgageFundUseRange", "ExchangeProductID", "UnderlyingMultiple", nullptr};
	char *pProductField_ProductID = nullptr;
	char *pProductField_ProductName = nullptr;
	char *pProductField_ExchangeID = nullptr;
	char pProductField_ProductClass = 0;
	int pProductField_VolumeMultiple = 0;
	double pProductField_PriceTick = 0.0;
	int pProductField_MaxMarketOrderVolume = 0;
	int pProductField_MinMarketOrderVolume = 0;
	int pProductField_MaxLimitOrderVolume = 0;
	int pProductField_MinLimitOrderVolume = 0;
	char pProductField_PositionType = 0;
	char pProductField_PositionDateType = 0;
	char pProductField_CloseDealType = 0;
	char *pProductField_TradeCurrencyID = nullptr;
	char pProductField_MortgageFundUseRange = 0;
	char *pProductField_ExchangeProductID = nullptr;
	double pProductField_UnderlyingMultiple = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pProductField, "|yyycidiiiicccycyd")
		, &pProductField_ProductID
		, &pProductField_ProductName
		, &pProductField_ExchangeID
		, &pProductField_ProductClass
		, &pProductField_VolumeMultiple
		, &pProductField_PriceTick
		, &pProductField_MaxMarketOrderVolume
		, &pProductField_MinMarketOrderVolume
		, &pProductField_MaxLimitOrderVolume
		, &pProductField_MinLimitOrderVolume
		, &pProductField_PositionType
		, &pProductField_PositionDateType
		, &pProductField_CloseDealType
		, &pProductField_TradeCurrencyID
		, &pProductField_MortgageFundUseRange
		, &pProductField_ExchangeProductID
		, &pProductField_UnderlyingMultiple
	PyCTP_PyDict_FromStruct_END
		if(pProductField_ProductID != nullptr){ strcpy_s(pProductField->ProductID, pProductField_ProductID); pProductField_ProductID = nullptr; }
		if(pProductField_ProductName != nullptr){ strcpy_s(pProductField->ProductName, pProductField_ProductName); pProductField_ProductName = nullptr; }
		if(pProductField_ExchangeID != nullptr){ strcpy_s(pProductField->ExchangeID, pProductField_ExchangeID); pProductField_ExchangeID = nullptr; }
		pProductField->ProductClass = pProductField_ProductClass;
		pProductField->VolumeMultiple = pProductField_VolumeMultiple;
		pProductField->PriceTick = pProductField_PriceTick;
		pProductField->MaxMarketOrderVolume = pProductField_MaxMarketOrderVolume;
		pProductField->MinMarketOrderVolume = pProductField_MinMarketOrderVolume;
		pProductField->MaxLimitOrderVolume = pProductField_MaxLimitOrderVolume;
		pProductField->MinLimitOrderVolume = pProductField_MinLimitOrderVolume;
		pProductField->PositionType = pProductField_PositionType;
		pProductField->PositionDateType = pProductField_PositionDateType;
		pProductField->CloseDealType = pProductField_CloseDealType;
		if(pProductField_TradeCurrencyID != nullptr){ strcpy_s(pProductField->TradeCurrencyID, pProductField_TradeCurrencyID); pProductField_TradeCurrencyID = nullptr; }
		pProductField->MortgageFundUseRange = pProductField_MortgageFundUseRange;
		if(pProductField_ExchangeProductID != nullptr){ strcpy_s(pProductField->ExchangeProductID, pProductField_ExchangeProductID); pProductField_ExchangeProductID = nullptr; }
		pProductField->UnderlyingMultiple = pProductField_UnderlyingMultiple;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcProductField *pProductField)
{
	if(pProductField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:c,s:i,s:d,s:i,s:i,s:i,s:i,s:c,s:c,s:c,s:y,s:c,s:y,s:d}"
		, "ProductID", pProductField->ProductID
		, "ProductName", pProductField->ProductName
		, "ExchangeID", pProductField->ExchangeID
		, "ProductClass", pProductField->ProductClass
		, "VolumeMultiple", pProductField->VolumeMultiple
		, "PriceTick", pProductField->PriceTick
		, "MaxMarketOrderVolume", pProductField->MaxMarketOrderVolume
		, "MinMarketOrderVolume", pProductField->MinMarketOrderVolume
		, "MaxLimitOrderVolume", pProductField->MaxLimitOrderVolume
		, "MinLimitOrderVolume", pProductField->MinLimitOrderVolume
		, "PositionType", pProductField->PositionType
		, "PositionDateType", pProductField->PositionDateType
		, "CloseDealType", pProductField->CloseDealType
		, "TradeCurrencyID", pProductField->TradeCurrencyID
		, "MortgageFundUseRange", pProductField->MortgageFundUseRange
		, "ExchangeProductID", pProductField->ExchangeProductID
		, "UnderlyingMultiple", pProductField->UnderlyingMultiple
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInstrumentField *pInstrumentField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "ExchangeID", "InstrumentName", "ExchangeInstID", "ProductID", "ProductClass", "DeliveryYear", "DeliveryMonth", "MaxMarketOrderVolume", "MinMarketOrderVolume", "MaxLimitOrderVolume", "MinLimitOrderVolume", "VolumeMultiple", "PriceTick", "CreateDate", "OpenDate", "ExpireDate", "StartDelivDate", "EndDelivDate", "InstLifePhase", "IsTrading", "PositionType", "PositionDateType", "LongMarginRatio", "ShortMarginRatio", "MaxMarginSideAlgorithm", "UnderlyingInstrID", "StrikePrice", "OptionsType", "UnderlyingMultiple", "CombinationType", nullptr};
	char *pInstrumentField_InstrumentID = nullptr;
	char *pInstrumentField_ExchangeID = nullptr;
	char *pInstrumentField_InstrumentName = nullptr;
	char *pInstrumentField_ExchangeInstID = nullptr;
	char *pInstrumentField_ProductID = nullptr;
	char pInstrumentField_ProductClass = 0;
	int pInstrumentField_DeliveryYear = 0;
	int pInstrumentField_DeliveryMonth = 0;
	int pInstrumentField_MaxMarketOrderVolume = 0;
	int pInstrumentField_MinMarketOrderVolume = 0;
	int pInstrumentField_MaxLimitOrderVolume = 0;
	int pInstrumentField_MinLimitOrderVolume = 0;
	int pInstrumentField_VolumeMultiple = 0;
	double pInstrumentField_PriceTick = 0.0;
	char *pInstrumentField_CreateDate = nullptr;
	char *pInstrumentField_OpenDate = nullptr;
	char *pInstrumentField_ExpireDate = nullptr;
	char *pInstrumentField_StartDelivDate = nullptr;
	char *pInstrumentField_EndDelivDate = nullptr;
	char pInstrumentField_InstLifePhase = 0;
	int pInstrumentField_IsTrading = 0;
	char pInstrumentField_PositionType = 0;
	char pInstrumentField_PositionDateType = 0;
	double pInstrumentField_LongMarginRatio = 0.0;
	double pInstrumentField_ShortMarginRatio = 0.0;
	char pInstrumentField_MaxMarginSideAlgorithm = 0;
	char *pInstrumentField_UnderlyingInstrID = nullptr;
	double pInstrumentField_StrikePrice = 0.0;
	char pInstrumentField_OptionsType = 0;
	double pInstrumentField_UnderlyingMultiple = 0.0;
	char pInstrumentField_CombinationType = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pInstrumentField, "|yyyyyciiiiiiidyyyyyciccddcydcdc")
		, &pInstrumentField_InstrumentID
		, &pInstrumentField_ExchangeID
		, &pInstrumentField_InstrumentName
		, &pInstrumentField_ExchangeInstID
		, &pInstrumentField_ProductID
		, &pInstrumentField_ProductClass
		, &pInstrumentField_DeliveryYear
		, &pInstrumentField_DeliveryMonth
		, &pInstrumentField_MaxMarketOrderVolume
		, &pInstrumentField_MinMarketOrderVolume
		, &pInstrumentField_MaxLimitOrderVolume
		, &pInstrumentField_MinLimitOrderVolume
		, &pInstrumentField_VolumeMultiple
		, &pInstrumentField_PriceTick
		, &pInstrumentField_CreateDate
		, &pInstrumentField_OpenDate
		, &pInstrumentField_ExpireDate
		, &pInstrumentField_StartDelivDate
		, &pInstrumentField_EndDelivDate
		, &pInstrumentField_InstLifePhase
		, &pInstrumentField_IsTrading
		, &pInstrumentField_PositionType
		, &pInstrumentField_PositionDateType
		, &pInstrumentField_LongMarginRatio
		, &pInstrumentField_ShortMarginRatio
		, &pInstrumentField_MaxMarginSideAlgorithm
		, &pInstrumentField_UnderlyingInstrID
		, &pInstrumentField_StrikePrice
		, &pInstrumentField_OptionsType
		, &pInstrumentField_UnderlyingMultiple
		, &pInstrumentField_CombinationType
	PyCTP_PyDict_FromStruct_END
		if(pInstrumentField_InstrumentID != nullptr){ strcpy_s(pInstrumentField->InstrumentID, pInstrumentField_InstrumentID); pInstrumentField_InstrumentID = nullptr; }
		if(pInstrumentField_ExchangeID != nullptr){ strcpy_s(pInstrumentField->ExchangeID, pInstrumentField_ExchangeID); pInstrumentField_ExchangeID = nullptr; }
		if(pInstrumentField_InstrumentName != nullptr){ strcpy_s(pInstrumentField->InstrumentName, pInstrumentField_InstrumentName); pInstrumentField_InstrumentName = nullptr; }
		if(pInstrumentField_ExchangeInstID != nullptr){ strcpy_s(pInstrumentField->ExchangeInstID, pInstrumentField_ExchangeInstID); pInstrumentField_ExchangeInstID = nullptr; }
		if(pInstrumentField_ProductID != nullptr){ strcpy_s(pInstrumentField->ProductID, pInstrumentField_ProductID); pInstrumentField_ProductID = nullptr; }
		pInstrumentField->ProductClass = pInstrumentField_ProductClass;
		pInstrumentField->DeliveryYear = pInstrumentField_DeliveryYear;
		pInstrumentField->DeliveryMonth = pInstrumentField_DeliveryMonth;
		pInstrumentField->MaxMarketOrderVolume = pInstrumentField_MaxMarketOrderVolume;
		pInstrumentField->MinMarketOrderVolume = pInstrumentField_MinMarketOrderVolume;
		pInstrumentField->MaxLimitOrderVolume = pInstrumentField_MaxLimitOrderVolume;
		pInstrumentField->MinLimitOrderVolume = pInstrumentField_MinLimitOrderVolume;
		pInstrumentField->VolumeMultiple = pInstrumentField_VolumeMultiple;
		pInstrumentField->PriceTick = pInstrumentField_PriceTick;
		if(pInstrumentField_CreateDate != nullptr){ strcpy_s(pInstrumentField->CreateDate, pInstrumentField_CreateDate); pInstrumentField_CreateDate = nullptr; }
		if(pInstrumentField_OpenDate != nullptr){ strcpy_s(pInstrumentField->OpenDate, pInstrumentField_OpenDate); pInstrumentField_OpenDate = nullptr; }
		if(pInstrumentField_ExpireDate != nullptr){ strcpy_s(pInstrumentField->ExpireDate, pInstrumentField_ExpireDate); pInstrumentField_ExpireDate = nullptr; }
		if(pInstrumentField_StartDelivDate != nullptr){ strcpy_s(pInstrumentField->StartDelivDate, pInstrumentField_StartDelivDate); pInstrumentField_StartDelivDate = nullptr; }
		if(pInstrumentField_EndDelivDate != nullptr){ strcpy_s(pInstrumentField->EndDelivDate, pInstrumentField_EndDelivDate); pInstrumentField_EndDelivDate = nullptr; }
		pInstrumentField->InstLifePhase = pInstrumentField_InstLifePhase;
		pInstrumentField->IsTrading = pInstrumentField_IsTrading;
		pInstrumentField->PositionType = pInstrumentField_PositionType;
		pInstrumentField->PositionDateType = pInstrumentField_PositionDateType;
		pInstrumentField->LongMarginRatio = pInstrumentField_LongMarginRatio;
		pInstrumentField->ShortMarginRatio = pInstrumentField_ShortMarginRatio;
		pInstrumentField->MaxMarginSideAlgorithm = pInstrumentField_MaxMarginSideAlgorithm;
		if(pInstrumentField_UnderlyingInstrID != nullptr){ strcpy_s(pInstrumentField->UnderlyingInstrID, pInstrumentField_UnderlyingInstrID); pInstrumentField_UnderlyingInstrID = nullptr; }
		pInstrumentField->StrikePrice = pInstrumentField_StrikePrice;
		pInstrumentField->OptionsType = pInstrumentField_OptionsType;
		pInstrumentField->UnderlyingMultiple = pInstrumentField_UnderlyingMultiple;
		pInstrumentField->CombinationType = pInstrumentField_CombinationType;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInstrumentField *pInstrumentField)
{
	if(pInstrumentField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:c,s:i,s:i,s:i,s:i,s:i,s:i,s:i,s:d,s:y,s:y,s:y,s:y,s:y,s:c,s:i,s:c,s:c,s:d,s:d,s:c,s:y,s:d,s:c,s:d,s:c}"
		, "InstrumentID", pInstrumentField->InstrumentID
		, "ExchangeID", pInstrumentField->ExchangeID
		, "InstrumentName", pInstrumentField->InstrumentName
		, "ExchangeInstID", pInstrumentField->ExchangeInstID
		, "ProductID", pInstrumentField->ProductID
		, "ProductClass", pInstrumentField->ProductClass
		, "DeliveryYear", pInstrumentField->DeliveryYear
		, "DeliveryMonth", pInstrumentField->DeliveryMonth
		, "MaxMarketOrderVolume", pInstrumentField->MaxMarketOrderVolume
		, "MinMarketOrderVolume", pInstrumentField->MinMarketOrderVolume
		, "MaxLimitOrderVolume", pInstrumentField->MaxLimitOrderVolume
		, "MinLimitOrderVolume", pInstrumentField->MinLimitOrderVolume
		, "VolumeMultiple", pInstrumentField->VolumeMultiple
		, "PriceTick", pInstrumentField->PriceTick
		, "CreateDate", pInstrumentField->CreateDate
		, "OpenDate", pInstrumentField->OpenDate
		, "ExpireDate", pInstrumentField->ExpireDate
		, "StartDelivDate", pInstrumentField->StartDelivDate
		, "EndDelivDate", pInstrumentField->EndDelivDate
		, "InstLifePhase", pInstrumentField->InstLifePhase
		, "IsTrading", pInstrumentField->IsTrading
		, "PositionType", pInstrumentField->PositionType
		, "PositionDateType", pInstrumentField->PositionDateType
		, "LongMarginRatio", pInstrumentField->LongMarginRatio
		, "ShortMarginRatio", pInstrumentField->ShortMarginRatio
		, "MaxMarginSideAlgorithm", pInstrumentField->MaxMarginSideAlgorithm
		, "UnderlyingInstrID", pInstrumentField->UnderlyingInstrID
		, "StrikePrice", pInstrumentField->StrikePrice
		, "OptionsType", pInstrumentField->OptionsType
		, "UnderlyingMultiple", pInstrumentField->UnderlyingMultiple
		, "CombinationType", pInstrumentField->CombinationType
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcBrokerField *pBrokerField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "BrokerAbbr", "BrokerName", "IsActive", nullptr};
	char *pBrokerField_BrokerID = nullptr;
	char *pBrokerField_BrokerAbbr = nullptr;
	char *pBrokerField_BrokerName = nullptr;
	int pBrokerField_IsActive = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pBrokerField, "|yyyi")
		, &pBrokerField_BrokerID
		, &pBrokerField_BrokerAbbr
		, &pBrokerField_BrokerName
		, &pBrokerField_IsActive
	PyCTP_PyDict_FromStruct_END
		if(pBrokerField_BrokerID != nullptr){ strcpy_s(pBrokerField->BrokerID, pBrokerField_BrokerID); pBrokerField_BrokerID = nullptr; }
		if(pBrokerField_BrokerAbbr != nullptr){ strcpy_s(pBrokerField->BrokerAbbr, pBrokerField_BrokerAbbr); pBrokerField_BrokerAbbr = nullptr; }
		if(pBrokerField_BrokerName != nullptr){ strcpy_s(pBrokerField->BrokerName, pBrokerField_BrokerName); pBrokerField_BrokerName = nullptr; }
		pBrokerField->IsActive = pBrokerField_IsActive;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcBrokerField *pBrokerField)
{
	if(pBrokerField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:i}"
		, "BrokerID", pBrokerField->BrokerID
		, "BrokerAbbr", pBrokerField->BrokerAbbr
		, "BrokerName", pBrokerField->BrokerName
		, "IsActive", pBrokerField->IsActive
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTraderField *pTraderField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "TraderID", "ParticipantID", "Password", "InstallCount", "BrokerID", nullptr};
	char *pTraderField_ExchangeID = nullptr;
	char *pTraderField_TraderID = nullptr;
	char *pTraderField_ParticipantID = nullptr;
	char *pTraderField_Password = nullptr;
	int pTraderField_InstallCount = 0;
	char *pTraderField_BrokerID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTraderField, "|yyyyiy")
		, &pTraderField_ExchangeID
		, &pTraderField_TraderID
		, &pTraderField_ParticipantID
		, &pTraderField_Password
		, &pTraderField_InstallCount
		, &pTraderField_BrokerID
	PyCTP_PyDict_FromStruct_END
		if(pTraderField_ExchangeID != nullptr){ strcpy_s(pTraderField->ExchangeID, pTraderField_ExchangeID); pTraderField_ExchangeID = nullptr; }
		if(pTraderField_TraderID != nullptr){ strcpy_s(pTraderField->TraderID, pTraderField_TraderID); pTraderField_TraderID = nullptr; }
		if(pTraderField_ParticipantID != nullptr){ strcpy_s(pTraderField->ParticipantID, pTraderField_ParticipantID); pTraderField_ParticipantID = nullptr; }
		if(pTraderField_Password != nullptr){ strcpy_s(pTraderField->Password, pTraderField_Password); pTraderField_Password = nullptr; }
		pTraderField->InstallCount = pTraderField_InstallCount;
		if(pTraderField_BrokerID != nullptr){ strcpy_s(pTraderField->BrokerID, pTraderField_BrokerID); pTraderField_BrokerID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTraderField *pTraderField)
{
	if(pTraderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:i,s:y}"
		, "ExchangeID", pTraderField->ExchangeID
		, "TraderID", pTraderField->TraderID
		, "ParticipantID", pTraderField->ParticipantID
		, "Password", pTraderField->Password
		, "InstallCount", pTraderField->InstallCount
		, "BrokerID", pTraderField->BrokerID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInvestorField *pInvestorField, PyObject *dict)
{
	static char *kwlist[] = {"InvestorID", "BrokerID", "InvestorGroupID", "InvestorName", "IdentifiedCardType", "IdentifiedCardNo", "IsActive", "Telephone", "Address", "OpenDate", "Mobile", "CommModelID", "MarginModelID", nullptr};
	char *pInvestorField_InvestorID = nullptr;
	char *pInvestorField_BrokerID = nullptr;
	char *pInvestorField_InvestorGroupID = nullptr;
	char *pInvestorField_InvestorName = nullptr;
	char pInvestorField_IdentifiedCardType = 0;
	char *pInvestorField_IdentifiedCardNo = nullptr;
	int pInvestorField_IsActive = 0;
	char *pInvestorField_Telephone = nullptr;
	char *pInvestorField_Address = nullptr;
	char *pInvestorField_OpenDate = nullptr;
	char *pInvestorField_Mobile = nullptr;
	char *pInvestorField_CommModelID = nullptr;
	char *pInvestorField_MarginModelID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInvestorField, "|yyyycyiyyyyyy")
		, &pInvestorField_InvestorID
		, &pInvestorField_BrokerID
		, &pInvestorField_InvestorGroupID
		, &pInvestorField_InvestorName
		, &pInvestorField_IdentifiedCardType
		, &pInvestorField_IdentifiedCardNo
		, &pInvestorField_IsActive
		, &pInvestorField_Telephone
		, &pInvestorField_Address
		, &pInvestorField_OpenDate
		, &pInvestorField_Mobile
		, &pInvestorField_CommModelID
		, &pInvestorField_MarginModelID
	PyCTP_PyDict_FromStruct_END
		if(pInvestorField_InvestorID != nullptr){ strcpy_s(pInvestorField->InvestorID, pInvestorField_InvestorID); pInvestorField_InvestorID = nullptr; }
		if(pInvestorField_BrokerID != nullptr){ strcpy_s(pInvestorField->BrokerID, pInvestorField_BrokerID); pInvestorField_BrokerID = nullptr; }
		if(pInvestorField_InvestorGroupID != nullptr){ strcpy_s(pInvestorField->InvestorGroupID, pInvestorField_InvestorGroupID); pInvestorField_InvestorGroupID = nullptr; }
		if(pInvestorField_InvestorName != nullptr){ strcpy_s(pInvestorField->InvestorName, pInvestorField_InvestorName); pInvestorField_InvestorName = nullptr; }
		pInvestorField->IdentifiedCardType = pInvestorField_IdentifiedCardType;
		if(pInvestorField_IdentifiedCardNo != nullptr){ strcpy_s(pInvestorField->IdentifiedCardNo, pInvestorField_IdentifiedCardNo); pInvestorField_IdentifiedCardNo = nullptr; }
		pInvestorField->IsActive = pInvestorField_IsActive;
		if(pInvestorField_Telephone != nullptr){ strcpy_s(pInvestorField->Telephone, pInvestorField_Telephone); pInvestorField_Telephone = nullptr; }
		if(pInvestorField_Address != nullptr){ strcpy_s(pInvestorField->Address, pInvestorField_Address); pInvestorField_Address = nullptr; }
		if(pInvestorField_OpenDate != nullptr){ strcpy_s(pInvestorField->OpenDate, pInvestorField_OpenDate); pInvestorField_OpenDate = nullptr; }
		if(pInvestorField_Mobile != nullptr){ strcpy_s(pInvestorField->Mobile, pInvestorField_Mobile); pInvestorField_Mobile = nullptr; }
		if(pInvestorField_CommModelID != nullptr){ strcpy_s(pInvestorField->CommModelID, pInvestorField_CommModelID); pInvestorField_CommModelID = nullptr; }
		if(pInvestorField_MarginModelID != nullptr){ strcpy_s(pInvestorField->MarginModelID, pInvestorField_MarginModelID); pInvestorField_MarginModelID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInvestorField *pInvestorField)
{
	if(pInvestorField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:c,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "InvestorID", pInvestorField->InvestorID
		, "BrokerID", pInvestorField->BrokerID
		, "InvestorGroupID", pInvestorField->InvestorGroupID
		, "InvestorName", pInvestorField->InvestorName
		, "IdentifiedCardType", pInvestorField->IdentifiedCardType
		, "IdentifiedCardNo", pInvestorField->IdentifiedCardNo
		, "IsActive", pInvestorField->IsActive
		, "Telephone", pInvestorField->Telephone
		, "Address", pInvestorField->Address
		, "OpenDate", pInvestorField->OpenDate
		, "Mobile", pInvestorField->Mobile
		, "CommModelID", pInvestorField->CommModelID
		, "MarginModelID", pInvestorField->MarginModelID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTradingCodeField *pTradingCodeField, PyObject *dict)
{
	static char *kwlist[] = {"InvestorID", "BrokerID", "ExchangeID", "ClientID", "IsActive", "ClientIDType", "BranchID", "BizType", "InvestUnitID", nullptr};
	char *pTradingCodeField_InvestorID = nullptr;
	char *pTradingCodeField_BrokerID = nullptr;
	char *pTradingCodeField_ExchangeID = nullptr;
	char *pTradingCodeField_ClientID = nullptr;
	int pTradingCodeField_IsActive = 0;
	char pTradingCodeField_ClientIDType = 0;
	char *pTradingCodeField_BranchID = nullptr;
	char pTradingCodeField_BizType = 0;
	char *pTradingCodeField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTradingCodeField, "|yyyyicycy")
		, &pTradingCodeField_InvestorID
		, &pTradingCodeField_BrokerID
		, &pTradingCodeField_ExchangeID
		, &pTradingCodeField_ClientID
		, &pTradingCodeField_IsActive
		, &pTradingCodeField_ClientIDType
		, &pTradingCodeField_BranchID
		, &pTradingCodeField_BizType
		, &pTradingCodeField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pTradingCodeField_InvestorID != nullptr){ strcpy_s(pTradingCodeField->InvestorID, pTradingCodeField_InvestorID); pTradingCodeField_InvestorID = nullptr; }
		if(pTradingCodeField_BrokerID != nullptr){ strcpy_s(pTradingCodeField->BrokerID, pTradingCodeField_BrokerID); pTradingCodeField_BrokerID = nullptr; }
		if(pTradingCodeField_ExchangeID != nullptr){ strcpy_s(pTradingCodeField->ExchangeID, pTradingCodeField_ExchangeID); pTradingCodeField_ExchangeID = nullptr; }
		if(pTradingCodeField_ClientID != nullptr){ strcpy_s(pTradingCodeField->ClientID, pTradingCodeField_ClientID); pTradingCodeField_ClientID = nullptr; }
		pTradingCodeField->IsActive = pTradingCodeField_IsActive;
		pTradingCodeField->ClientIDType = pTradingCodeField_ClientIDType;
		if(pTradingCodeField_BranchID != nullptr){ strcpy_s(pTradingCodeField->BranchID, pTradingCodeField_BranchID); pTradingCodeField_BranchID = nullptr; }
		pTradingCodeField->BizType = pTradingCodeField_BizType;
		if(pTradingCodeField_InvestUnitID != nullptr){ strcpy_s(pTradingCodeField->InvestUnitID, pTradingCodeField_InvestUnitID); pTradingCodeField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTradingCodeField *pTradingCodeField)
{
	if(pTradingCodeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:i,s:c,s:y,s:c,s:y}"
		, "InvestorID", pTradingCodeField->InvestorID
		, "BrokerID", pTradingCodeField->BrokerID
		, "ExchangeID", pTradingCodeField->ExchangeID
		, "ClientID", pTradingCodeField->ClientID
		, "IsActive", pTradingCodeField->IsActive
		, "ClientIDType", pTradingCodeField->ClientIDType
		, "BranchID", pTradingCodeField->BranchID
		, "BizType", pTradingCodeField->BizType
		, "InvestUnitID", pTradingCodeField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcPartBrokerField *pPartBrokerField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "ExchangeID", "ParticipantID", "IsActive", nullptr};
	char *pPartBrokerField_BrokerID = nullptr;
	char *pPartBrokerField_ExchangeID = nullptr;
	char *pPartBrokerField_ParticipantID = nullptr;
	int pPartBrokerField_IsActive = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pPartBrokerField, "|yyyi")
		, &pPartBrokerField_BrokerID
		, &pPartBrokerField_ExchangeID
		, &pPartBrokerField_ParticipantID
		, &pPartBrokerField_IsActive
	PyCTP_PyDict_FromStruct_END
		if(pPartBrokerField_BrokerID != nullptr){ strcpy_s(pPartBrokerField->BrokerID, pPartBrokerField_BrokerID); pPartBrokerField_BrokerID = nullptr; }
		if(pPartBrokerField_ExchangeID != nullptr){ strcpy_s(pPartBrokerField->ExchangeID, pPartBrokerField_ExchangeID); pPartBrokerField_ExchangeID = nullptr; }
		if(pPartBrokerField_ParticipantID != nullptr){ strcpy_s(pPartBrokerField->ParticipantID, pPartBrokerField_ParticipantID); pPartBrokerField_ParticipantID = nullptr; }
		pPartBrokerField->IsActive = pPartBrokerField_IsActive;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcPartBrokerField *pPartBrokerField)
{
	if(pPartBrokerField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:i}"
		, "BrokerID", pPartBrokerField->BrokerID
		, "ExchangeID", pPartBrokerField->ExchangeID
		, "ParticipantID", pPartBrokerField->ParticipantID
		, "IsActive", pPartBrokerField->IsActive
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSuperUserField *pSuperUserField, PyObject *dict)
{
	static char *kwlist[] = {"UserID", "UserName", "Password", "IsActive", nullptr};
	char *pSuperUserField_UserID = nullptr;
	char *pSuperUserField_UserName = nullptr;
	char *pSuperUserField_Password = nullptr;
	int pSuperUserField_IsActive = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pSuperUserField, "|yyyi")
		, &pSuperUserField_UserID
		, &pSuperUserField_UserName
		, &pSuperUserField_Password
		, &pSuperUserField_IsActive
	PyCTP_PyDict_FromStruct_END
		if(pSuperUserField_UserID != nullptr){ strcpy_s(pSuperUserField->UserID, pSuperUserField_UserID); pSuperUserField_UserID = nullptr; }
		if(pSuperUserField_UserName != nullptr){ strcpy_s(pSuperUserField->UserName, pSuperUserField_UserName); pSuperUserField_UserName = nullptr; }
		if(pSuperUserField_Password != nullptr){ strcpy_s(pSuperUserField->Password, pSuperUserField_Password); pSuperUserField_Password = nullptr; }
		pSuperUserField->IsActive = pSuperUserField_IsActive;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSuperUserField *pSuperUserField)
{
	if(pSuperUserField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:i}"
		, "UserID", pSuperUserField->UserID
		, "UserName", pSuperUserField->UserName
		, "Password", pSuperUserField->Password
		, "IsActive", pSuperUserField->IsActive
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSuperUserFunctionField *pSuperUserFunctionField, PyObject *dict)
{
	static char *kwlist[] = {"UserID", "FunctionCode", nullptr};
	char *pSuperUserFunctionField_UserID = nullptr;
	char pSuperUserFunctionField_FunctionCode = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pSuperUserFunctionField, "|yc")
		, &pSuperUserFunctionField_UserID
		, &pSuperUserFunctionField_FunctionCode
	PyCTP_PyDict_FromStruct_END
		if(pSuperUserFunctionField_UserID != nullptr){ strcpy_s(pSuperUserFunctionField->UserID, pSuperUserFunctionField_UserID); pSuperUserFunctionField_UserID = nullptr; }
		pSuperUserFunctionField->FunctionCode = pSuperUserFunctionField_FunctionCode;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSuperUserFunctionField *pSuperUserFunctionField)
{
	if(pSuperUserFunctionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c}"
		, "UserID", pSuperUserFunctionField->UserID
		, "FunctionCode", pSuperUserFunctionField->FunctionCode
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInvestorGroupField *pInvestorGroupField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorGroupID", "InvestorGroupName", nullptr};
	char *pInvestorGroupField_BrokerID = nullptr;
	char *pInvestorGroupField_InvestorGroupID = nullptr;
	char *pInvestorGroupField_InvestorGroupName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInvestorGroupField, "|yyy")
		, &pInvestorGroupField_BrokerID
		, &pInvestorGroupField_InvestorGroupID
		, &pInvestorGroupField_InvestorGroupName
	PyCTP_PyDict_FromStruct_END
		if(pInvestorGroupField_BrokerID != nullptr){ strcpy_s(pInvestorGroupField->BrokerID, pInvestorGroupField_BrokerID); pInvestorGroupField_BrokerID = nullptr; }
		if(pInvestorGroupField_InvestorGroupID != nullptr){ strcpy_s(pInvestorGroupField->InvestorGroupID, pInvestorGroupField_InvestorGroupID); pInvestorGroupField_InvestorGroupID = nullptr; }
		if(pInvestorGroupField_InvestorGroupName != nullptr){ strcpy_s(pInvestorGroupField->InvestorGroupName, pInvestorGroupField_InvestorGroupName); pInvestorGroupField_InvestorGroupName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInvestorGroupField *pInvestorGroupField)
{
	if(pInvestorGroupField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pInvestorGroupField->BrokerID
		, "InvestorGroupID", pInvestorGroupField->InvestorGroupID
		, "InvestorGroupName", pInvestorGroupField->InvestorGroupName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTradingAccountField *pTradingAccountField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "AccountID", "PreMortgage", "PreCredit", "PreDeposit", "PreBalance", "PreMargin", "InterestBase", "Interest", "Deposit", "Withdraw", "FrozenMargin", "FrozenCash", "FrozenCommission", "CurrMargin", "CashIn", "Commission", "CloseProfit", "PositionProfit", "Balance", "Available", "WithdrawQuota", "Reserve", "TradingDay", "SettlementID", "Credit", "Mortgage", "ExchangeMargin", "DeliveryMargin", "ExchangeDeliveryMargin", "ReserveBalance", "CurrencyID", "PreFundMortgageIn", "PreFundMortgageOut", "FundMortgageIn", "FundMortgageOut", "FundMortgageAvailable", "MortgageableFund", "SpecProductMargin", "SpecProductFrozenMargin", "SpecProductCommission", "SpecProductFrozenCommission", "SpecProductPositionProfit", "SpecProductCloseProfit", "SpecProductPositionProfitByAlg", "SpecProductExchangeMargin", "BizType", "FrozenSwap", "RemainSwap", nullptr};
	char *pTradingAccountField_BrokerID = nullptr;
	char *pTradingAccountField_AccountID = nullptr;
	double pTradingAccountField_PreMortgage = 0.0;
	double pTradingAccountField_PreCredit = 0.0;
	double pTradingAccountField_PreDeposit = 0.0;
	double pTradingAccountField_PreBalance = 0.0;
	double pTradingAccountField_PreMargin = 0.0;
	double pTradingAccountField_InterestBase = 0.0;
	double pTradingAccountField_Interest = 0.0;
	double pTradingAccountField_Deposit = 0.0;
	double pTradingAccountField_Withdraw = 0.0;
	double pTradingAccountField_FrozenMargin = 0.0;
	double pTradingAccountField_FrozenCash = 0.0;
	double pTradingAccountField_FrozenCommission = 0.0;
	double pTradingAccountField_CurrMargin = 0.0;
	double pTradingAccountField_CashIn = 0.0;
	double pTradingAccountField_Commission = 0.0;
	double pTradingAccountField_CloseProfit = 0.0;
	double pTradingAccountField_PositionProfit = 0.0;
	double pTradingAccountField_Balance = 0.0;
	double pTradingAccountField_Available = 0.0;
	double pTradingAccountField_WithdrawQuota = 0.0;
	double pTradingAccountField_Reserve = 0.0;
	char *pTradingAccountField_TradingDay = nullptr;
	int pTradingAccountField_SettlementID = 0;
	double pTradingAccountField_Credit = 0.0;
	double pTradingAccountField_Mortgage = 0.0;
	double pTradingAccountField_ExchangeMargin = 0.0;
	double pTradingAccountField_DeliveryMargin = 0.0;
	double pTradingAccountField_ExchangeDeliveryMargin = 0.0;
	double pTradingAccountField_ReserveBalance = 0.0;
	char *pTradingAccountField_CurrencyID = nullptr;
	double pTradingAccountField_PreFundMortgageIn = 0.0;
	double pTradingAccountField_PreFundMortgageOut = 0.0;
	double pTradingAccountField_FundMortgageIn = 0.0;
	double pTradingAccountField_FundMortgageOut = 0.0;
	double pTradingAccountField_FundMortgageAvailable = 0.0;
	double pTradingAccountField_MortgageableFund = 0.0;
	double pTradingAccountField_SpecProductMargin = 0.0;
	double pTradingAccountField_SpecProductFrozenMargin = 0.0;
	double pTradingAccountField_SpecProductCommission = 0.0;
	double pTradingAccountField_SpecProductFrozenCommission = 0.0;
	double pTradingAccountField_SpecProductPositionProfit = 0.0;
	double pTradingAccountField_SpecProductCloseProfit = 0.0;
	double pTradingAccountField_SpecProductPositionProfitByAlg = 0.0;
	double pTradingAccountField_SpecProductExchangeMargin = 0.0;
	char pTradingAccountField_BizType = 0;
	double pTradingAccountField_FrozenSwap = 0.0;
	double pTradingAccountField_RemainSwap = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pTradingAccountField, "|yydddddddddddddddddddddyiddddddyddddddddddddddcdd")
		, &pTradingAccountField_BrokerID
		, &pTradingAccountField_AccountID
		, &pTradingAccountField_PreMortgage
		, &pTradingAccountField_PreCredit
		, &pTradingAccountField_PreDeposit
		, &pTradingAccountField_PreBalance
		, &pTradingAccountField_PreMargin
		, &pTradingAccountField_InterestBase
		, &pTradingAccountField_Interest
		, &pTradingAccountField_Deposit
		, &pTradingAccountField_Withdraw
		, &pTradingAccountField_FrozenMargin
		, &pTradingAccountField_FrozenCash
		, &pTradingAccountField_FrozenCommission
		, &pTradingAccountField_CurrMargin
		, &pTradingAccountField_CashIn
		, &pTradingAccountField_Commission
		, &pTradingAccountField_CloseProfit
		, &pTradingAccountField_PositionProfit
		, &pTradingAccountField_Balance
		, &pTradingAccountField_Available
		, &pTradingAccountField_WithdrawQuota
		, &pTradingAccountField_Reserve
		, &pTradingAccountField_TradingDay
		, &pTradingAccountField_SettlementID
		, &pTradingAccountField_Credit
		, &pTradingAccountField_Mortgage
		, &pTradingAccountField_ExchangeMargin
		, &pTradingAccountField_DeliveryMargin
		, &pTradingAccountField_ExchangeDeliveryMargin
		, &pTradingAccountField_ReserveBalance
		, &pTradingAccountField_CurrencyID
		, &pTradingAccountField_PreFundMortgageIn
		, &pTradingAccountField_PreFundMortgageOut
		, &pTradingAccountField_FundMortgageIn
		, &pTradingAccountField_FundMortgageOut
		, &pTradingAccountField_FundMortgageAvailable
		, &pTradingAccountField_MortgageableFund
		, &pTradingAccountField_SpecProductMargin
		, &pTradingAccountField_SpecProductFrozenMargin
		, &pTradingAccountField_SpecProductCommission
		, &pTradingAccountField_SpecProductFrozenCommission
		, &pTradingAccountField_SpecProductPositionProfit
		, &pTradingAccountField_SpecProductCloseProfit
		, &pTradingAccountField_SpecProductPositionProfitByAlg
		, &pTradingAccountField_SpecProductExchangeMargin
		, &pTradingAccountField_BizType
		, &pTradingAccountField_FrozenSwap
		, &pTradingAccountField_RemainSwap
	PyCTP_PyDict_FromStruct_END
		if(pTradingAccountField_BrokerID != nullptr){ strcpy_s(pTradingAccountField->BrokerID, pTradingAccountField_BrokerID); pTradingAccountField_BrokerID = nullptr; }
		if(pTradingAccountField_AccountID != nullptr){ strcpy_s(pTradingAccountField->AccountID, pTradingAccountField_AccountID); pTradingAccountField_AccountID = nullptr; }
		pTradingAccountField->PreMortgage = pTradingAccountField_PreMortgage;
		pTradingAccountField->PreCredit = pTradingAccountField_PreCredit;
		pTradingAccountField->PreDeposit = pTradingAccountField_PreDeposit;
		pTradingAccountField->PreBalance = pTradingAccountField_PreBalance;
		pTradingAccountField->PreMargin = pTradingAccountField_PreMargin;
		pTradingAccountField->InterestBase = pTradingAccountField_InterestBase;
		pTradingAccountField->Interest = pTradingAccountField_Interest;
		pTradingAccountField->Deposit = pTradingAccountField_Deposit;
		pTradingAccountField->Withdraw = pTradingAccountField_Withdraw;
		pTradingAccountField->FrozenMargin = pTradingAccountField_FrozenMargin;
		pTradingAccountField->FrozenCash = pTradingAccountField_FrozenCash;
		pTradingAccountField->FrozenCommission = pTradingAccountField_FrozenCommission;
		pTradingAccountField->CurrMargin = pTradingAccountField_CurrMargin;
		pTradingAccountField->CashIn = pTradingAccountField_CashIn;
		pTradingAccountField->Commission = pTradingAccountField_Commission;
		pTradingAccountField->CloseProfit = pTradingAccountField_CloseProfit;
		pTradingAccountField->PositionProfit = pTradingAccountField_PositionProfit;
		pTradingAccountField->Balance = pTradingAccountField_Balance;
		pTradingAccountField->Available = pTradingAccountField_Available;
		pTradingAccountField->WithdrawQuota = pTradingAccountField_WithdrawQuota;
		pTradingAccountField->Reserve = pTradingAccountField_Reserve;
		if(pTradingAccountField_TradingDay != nullptr){ strcpy_s(pTradingAccountField->TradingDay, pTradingAccountField_TradingDay); pTradingAccountField_TradingDay = nullptr; }
		pTradingAccountField->SettlementID = pTradingAccountField_SettlementID;
		pTradingAccountField->Credit = pTradingAccountField_Credit;
		pTradingAccountField->Mortgage = pTradingAccountField_Mortgage;
		pTradingAccountField->ExchangeMargin = pTradingAccountField_ExchangeMargin;
		pTradingAccountField->DeliveryMargin = pTradingAccountField_DeliveryMargin;
		pTradingAccountField->ExchangeDeliveryMargin = pTradingAccountField_ExchangeDeliveryMargin;
		pTradingAccountField->ReserveBalance = pTradingAccountField_ReserveBalance;
		if(pTradingAccountField_CurrencyID != nullptr){ strcpy_s(pTradingAccountField->CurrencyID, pTradingAccountField_CurrencyID); pTradingAccountField_CurrencyID = nullptr; }
		pTradingAccountField->PreFundMortgageIn = pTradingAccountField_PreFundMortgageIn;
		pTradingAccountField->PreFundMortgageOut = pTradingAccountField_PreFundMortgageOut;
		pTradingAccountField->FundMortgageIn = pTradingAccountField_FundMortgageIn;
		pTradingAccountField->FundMortgageOut = pTradingAccountField_FundMortgageOut;
		pTradingAccountField->FundMortgageAvailable = pTradingAccountField_FundMortgageAvailable;
		pTradingAccountField->MortgageableFund = pTradingAccountField_MortgageableFund;
		pTradingAccountField->SpecProductMargin = pTradingAccountField_SpecProductMargin;
		pTradingAccountField->SpecProductFrozenMargin = pTradingAccountField_SpecProductFrozenMargin;
		pTradingAccountField->SpecProductCommission = pTradingAccountField_SpecProductCommission;
		pTradingAccountField->SpecProductFrozenCommission = pTradingAccountField_SpecProductFrozenCommission;
		pTradingAccountField->SpecProductPositionProfit = pTradingAccountField_SpecProductPositionProfit;
		pTradingAccountField->SpecProductCloseProfit = pTradingAccountField_SpecProductCloseProfit;
		pTradingAccountField->SpecProductPositionProfitByAlg = pTradingAccountField_SpecProductPositionProfitByAlg;
		pTradingAccountField->SpecProductExchangeMargin = pTradingAccountField_SpecProductExchangeMargin;
		pTradingAccountField->BizType = pTradingAccountField_BizType;
		pTradingAccountField->FrozenSwap = pTradingAccountField_FrozenSwap;
		pTradingAccountField->RemainSwap = pTradingAccountField_RemainSwap;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTradingAccountField *pTradingAccountField)
{
	if(pTradingAccountField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:y,s:i,s:d,s:d,s:d,s:d,s:d,s:d,s:y,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:c,s:d,s:d}"
		, "BrokerID", pTradingAccountField->BrokerID
		, "AccountID", pTradingAccountField->AccountID
		, "PreMortgage", pTradingAccountField->PreMortgage
		, "PreCredit", pTradingAccountField->PreCredit
		, "PreDeposit", pTradingAccountField->PreDeposit
		, "PreBalance", pTradingAccountField->PreBalance
		, "PreMargin", pTradingAccountField->PreMargin
		, "InterestBase", pTradingAccountField->InterestBase
		, "Interest", pTradingAccountField->Interest
		, "Deposit", pTradingAccountField->Deposit
		, "Withdraw", pTradingAccountField->Withdraw
		, "FrozenMargin", pTradingAccountField->FrozenMargin
		, "FrozenCash", pTradingAccountField->FrozenCash
		, "FrozenCommission", pTradingAccountField->FrozenCommission
		, "CurrMargin", pTradingAccountField->CurrMargin
		, "CashIn", pTradingAccountField->CashIn
		, "Commission", pTradingAccountField->Commission
		, "CloseProfit", pTradingAccountField->CloseProfit
		, "PositionProfit", pTradingAccountField->PositionProfit
		, "Balance", pTradingAccountField->Balance
		, "Available", pTradingAccountField->Available
		, "WithdrawQuota", pTradingAccountField->WithdrawQuota
		, "Reserve", pTradingAccountField->Reserve
		, "TradingDay", pTradingAccountField->TradingDay
		, "SettlementID", pTradingAccountField->SettlementID
		, "Credit", pTradingAccountField->Credit
		, "Mortgage", pTradingAccountField->Mortgage
		, "ExchangeMargin", pTradingAccountField->ExchangeMargin
		, "DeliveryMargin", pTradingAccountField->DeliveryMargin
		, "ExchangeDeliveryMargin", pTradingAccountField->ExchangeDeliveryMargin
		, "ReserveBalance", pTradingAccountField->ReserveBalance
		, "CurrencyID", pTradingAccountField->CurrencyID
		, "PreFundMortgageIn", pTradingAccountField->PreFundMortgageIn
		, "PreFundMortgageOut", pTradingAccountField->PreFundMortgageOut
		, "FundMortgageIn", pTradingAccountField->FundMortgageIn
		, "FundMortgageOut", pTradingAccountField->FundMortgageOut
		, "FundMortgageAvailable", pTradingAccountField->FundMortgageAvailable
		, "MortgageableFund", pTradingAccountField->MortgageableFund
		, "SpecProductMargin", pTradingAccountField->SpecProductMargin
		, "SpecProductFrozenMargin", pTradingAccountField->SpecProductFrozenMargin
		, "SpecProductCommission", pTradingAccountField->SpecProductCommission
		, "SpecProductFrozenCommission", pTradingAccountField->SpecProductFrozenCommission
		, "SpecProductPositionProfit", pTradingAccountField->SpecProductPositionProfit
		, "SpecProductCloseProfit", pTradingAccountField->SpecProductCloseProfit
		, "SpecProductPositionProfitByAlg", pTradingAccountField->SpecProductPositionProfitByAlg
		, "SpecProductExchangeMargin", pTradingAccountField->SpecProductExchangeMargin
		, "BizType", pTradingAccountField->BizType
		, "FrozenSwap", pTradingAccountField->FrozenSwap
		, "RemainSwap", pTradingAccountField->RemainSwap
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInvestorPositionField *pInvestorPositionField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "BrokerID", "InvestorID", "PosiDirection", "HedgeFlag", "PositionDate", "YdPosition", "Position", "LongFrozen", "ShortFrozen", "LongFrozenAmount", "ShortFrozenAmount", "OpenVolume", "CloseVolume", "OpenAmount", "CloseAmount", "PositionCost", "PreMargin", "UseMargin", "FrozenMargin", "FrozenCash", "FrozenCommission", "CashIn", "Commission", "CloseProfit", "PositionProfit", "PreSettlementPrice", "SettlementPrice", "TradingDay", "SettlementID", "OpenCost", "ExchangeMargin", "CombPosition", "CombLongFrozen", "CombShortFrozen", "CloseProfitByDate", "CloseProfitByTrade", "TodayPosition", "MarginRateByMoney", "MarginRateByVolume", "StrikeFrozen", "StrikeFrozenAmount", "AbandonFrozen", "ExchangeID", "YdStrikeFrozen", "InvestUnitID", nullptr};
	char *pInvestorPositionField_InstrumentID = nullptr;
	char *pInvestorPositionField_BrokerID = nullptr;
	char *pInvestorPositionField_InvestorID = nullptr;
	char pInvestorPositionField_PosiDirection = 0;
	char pInvestorPositionField_HedgeFlag = 0;
	char pInvestorPositionField_PositionDate = 0;
	int pInvestorPositionField_YdPosition = 0;
	int pInvestorPositionField_Position = 0;
	int pInvestorPositionField_LongFrozen = 0;
	int pInvestorPositionField_ShortFrozen = 0;
	double pInvestorPositionField_LongFrozenAmount = 0.0;
	double pInvestorPositionField_ShortFrozenAmount = 0.0;
	int pInvestorPositionField_OpenVolume = 0;
	int pInvestorPositionField_CloseVolume = 0;
	double pInvestorPositionField_OpenAmount = 0.0;
	double pInvestorPositionField_CloseAmount = 0.0;
	double pInvestorPositionField_PositionCost = 0.0;
	double pInvestorPositionField_PreMargin = 0.0;
	double pInvestorPositionField_UseMargin = 0.0;
	double pInvestorPositionField_FrozenMargin = 0.0;
	double pInvestorPositionField_FrozenCash = 0.0;
	double pInvestorPositionField_FrozenCommission = 0.0;
	double pInvestorPositionField_CashIn = 0.0;
	double pInvestorPositionField_Commission = 0.0;
	double pInvestorPositionField_CloseProfit = 0.0;
	double pInvestorPositionField_PositionProfit = 0.0;
	double pInvestorPositionField_PreSettlementPrice = 0.0;
	double pInvestorPositionField_SettlementPrice = 0.0;
	char *pInvestorPositionField_TradingDay = nullptr;
	int pInvestorPositionField_SettlementID = 0;
	double pInvestorPositionField_OpenCost = 0.0;
	double pInvestorPositionField_ExchangeMargin = 0.0;
	int pInvestorPositionField_CombPosition = 0;
	int pInvestorPositionField_CombLongFrozen = 0;
	int pInvestorPositionField_CombShortFrozen = 0;
	double pInvestorPositionField_CloseProfitByDate = 0.0;
	double pInvestorPositionField_CloseProfitByTrade = 0.0;
	int pInvestorPositionField_TodayPosition = 0;
	double pInvestorPositionField_MarginRateByMoney = 0.0;
	double pInvestorPositionField_MarginRateByVolume = 0.0;
	int pInvestorPositionField_StrikeFrozen = 0;
	double pInvestorPositionField_StrikeFrozenAmount = 0.0;
	int pInvestorPositionField_AbandonFrozen = 0;
	char *pInvestorPositionField_ExchangeID = nullptr;
	int pInvestorPositionField_YdStrikeFrozen = 0;
	char *pInvestorPositionField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInvestorPositionField, "|yyyccciiiiddiiddddddddddddddyiddiiiddiddidiyiy")
		, &pInvestorPositionField_InstrumentID
		, &pInvestorPositionField_BrokerID
		, &pInvestorPositionField_InvestorID
		, &pInvestorPositionField_PosiDirection
		, &pInvestorPositionField_HedgeFlag
		, &pInvestorPositionField_PositionDate
		, &pInvestorPositionField_YdPosition
		, &pInvestorPositionField_Position
		, &pInvestorPositionField_LongFrozen
		, &pInvestorPositionField_ShortFrozen
		, &pInvestorPositionField_LongFrozenAmount
		, &pInvestorPositionField_ShortFrozenAmount
		, &pInvestorPositionField_OpenVolume
		, &pInvestorPositionField_CloseVolume
		, &pInvestorPositionField_OpenAmount
		, &pInvestorPositionField_CloseAmount
		, &pInvestorPositionField_PositionCost
		, &pInvestorPositionField_PreMargin
		, &pInvestorPositionField_UseMargin
		, &pInvestorPositionField_FrozenMargin
		, &pInvestorPositionField_FrozenCash
		, &pInvestorPositionField_FrozenCommission
		, &pInvestorPositionField_CashIn
		, &pInvestorPositionField_Commission
		, &pInvestorPositionField_CloseProfit
		, &pInvestorPositionField_PositionProfit
		, &pInvestorPositionField_PreSettlementPrice
		, &pInvestorPositionField_SettlementPrice
		, &pInvestorPositionField_TradingDay
		, &pInvestorPositionField_SettlementID
		, &pInvestorPositionField_OpenCost
		, &pInvestorPositionField_ExchangeMargin
		, &pInvestorPositionField_CombPosition
		, &pInvestorPositionField_CombLongFrozen
		, &pInvestorPositionField_CombShortFrozen
		, &pInvestorPositionField_CloseProfitByDate
		, &pInvestorPositionField_CloseProfitByTrade
		, &pInvestorPositionField_TodayPosition
		, &pInvestorPositionField_MarginRateByMoney
		, &pInvestorPositionField_MarginRateByVolume
		, &pInvestorPositionField_StrikeFrozen
		, &pInvestorPositionField_StrikeFrozenAmount
		, &pInvestorPositionField_AbandonFrozen
		, &pInvestorPositionField_ExchangeID
		, &pInvestorPositionField_YdStrikeFrozen
		, &pInvestorPositionField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pInvestorPositionField_InstrumentID != nullptr){ strcpy_s(pInvestorPositionField->InstrumentID, pInvestorPositionField_InstrumentID); pInvestorPositionField_InstrumentID = nullptr; }
		if(pInvestorPositionField_BrokerID != nullptr){ strcpy_s(pInvestorPositionField->BrokerID, pInvestorPositionField_BrokerID); pInvestorPositionField_BrokerID = nullptr; }
		if(pInvestorPositionField_InvestorID != nullptr){ strcpy_s(pInvestorPositionField->InvestorID, pInvestorPositionField_InvestorID); pInvestorPositionField_InvestorID = nullptr; }
		pInvestorPositionField->PosiDirection = pInvestorPositionField_PosiDirection;
		pInvestorPositionField->HedgeFlag = pInvestorPositionField_HedgeFlag;
		pInvestorPositionField->PositionDate = pInvestorPositionField_PositionDate;
		pInvestorPositionField->YdPosition = pInvestorPositionField_YdPosition;
		pInvestorPositionField->Position = pInvestorPositionField_Position;
		pInvestorPositionField->LongFrozen = pInvestorPositionField_LongFrozen;
		pInvestorPositionField->ShortFrozen = pInvestorPositionField_ShortFrozen;
		pInvestorPositionField->LongFrozenAmount = pInvestorPositionField_LongFrozenAmount;
		pInvestorPositionField->ShortFrozenAmount = pInvestorPositionField_ShortFrozenAmount;
		pInvestorPositionField->OpenVolume = pInvestorPositionField_OpenVolume;
		pInvestorPositionField->CloseVolume = pInvestorPositionField_CloseVolume;
		pInvestorPositionField->OpenAmount = pInvestorPositionField_OpenAmount;
		pInvestorPositionField->CloseAmount = pInvestorPositionField_CloseAmount;
		pInvestorPositionField->PositionCost = pInvestorPositionField_PositionCost;
		pInvestorPositionField->PreMargin = pInvestorPositionField_PreMargin;
		pInvestorPositionField->UseMargin = pInvestorPositionField_UseMargin;
		pInvestorPositionField->FrozenMargin = pInvestorPositionField_FrozenMargin;
		pInvestorPositionField->FrozenCash = pInvestorPositionField_FrozenCash;
		pInvestorPositionField->FrozenCommission = pInvestorPositionField_FrozenCommission;
		pInvestorPositionField->CashIn = pInvestorPositionField_CashIn;
		pInvestorPositionField->Commission = pInvestorPositionField_Commission;
		pInvestorPositionField->CloseProfit = pInvestorPositionField_CloseProfit;
		pInvestorPositionField->PositionProfit = pInvestorPositionField_PositionProfit;
		pInvestorPositionField->PreSettlementPrice = pInvestorPositionField_PreSettlementPrice;
		pInvestorPositionField->SettlementPrice = pInvestorPositionField_SettlementPrice;
		if(pInvestorPositionField_TradingDay != nullptr){ strcpy_s(pInvestorPositionField->TradingDay, pInvestorPositionField_TradingDay); pInvestorPositionField_TradingDay = nullptr; }
		pInvestorPositionField->SettlementID = pInvestorPositionField_SettlementID;
		pInvestorPositionField->OpenCost = pInvestorPositionField_OpenCost;
		pInvestorPositionField->ExchangeMargin = pInvestorPositionField_ExchangeMargin;
		pInvestorPositionField->CombPosition = pInvestorPositionField_CombPosition;
		pInvestorPositionField->CombLongFrozen = pInvestorPositionField_CombLongFrozen;
		pInvestorPositionField->CombShortFrozen = pInvestorPositionField_CombShortFrozen;
		pInvestorPositionField->CloseProfitByDate = pInvestorPositionField_CloseProfitByDate;
		pInvestorPositionField->CloseProfitByTrade = pInvestorPositionField_CloseProfitByTrade;
		pInvestorPositionField->TodayPosition = pInvestorPositionField_TodayPosition;
		pInvestorPositionField->MarginRateByMoney = pInvestorPositionField_MarginRateByMoney;
		pInvestorPositionField->MarginRateByVolume = pInvestorPositionField_MarginRateByVolume;
		pInvestorPositionField->StrikeFrozen = pInvestorPositionField_StrikeFrozen;
		pInvestorPositionField->StrikeFrozenAmount = pInvestorPositionField_StrikeFrozenAmount;
		pInvestorPositionField->AbandonFrozen = pInvestorPositionField_AbandonFrozen;
		if(pInvestorPositionField_ExchangeID != nullptr){ strcpy_s(pInvestorPositionField->ExchangeID, pInvestorPositionField_ExchangeID); pInvestorPositionField_ExchangeID = nullptr; }
		pInvestorPositionField->YdStrikeFrozen = pInvestorPositionField_YdStrikeFrozen;
		if(pInvestorPositionField_InvestUnitID != nullptr){ strcpy_s(pInvestorPositionField->InvestUnitID, pInvestorPositionField_InvestUnitID); pInvestorPositionField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInvestorPositionField *pInvestorPositionField)
{
	if(pInvestorPositionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:c,s:c,s:c,s:i,s:i,s:i,s:i,s:d,s:d,s:i,s:i,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:y,s:i,s:d,s:d,s:i,s:i,s:i,s:d,s:d,s:i,s:d,s:d,s:i,s:d,s:i,s:y,s:i,s:y}"
		, "InstrumentID", pInvestorPositionField->InstrumentID
		, "BrokerID", pInvestorPositionField->BrokerID
		, "InvestorID", pInvestorPositionField->InvestorID
		, "PosiDirection", pInvestorPositionField->PosiDirection
		, "HedgeFlag", pInvestorPositionField->HedgeFlag
		, "PositionDate", pInvestorPositionField->PositionDate
		, "YdPosition", pInvestorPositionField->YdPosition
		, "Position", pInvestorPositionField->Position
		, "LongFrozen", pInvestorPositionField->LongFrozen
		, "ShortFrozen", pInvestorPositionField->ShortFrozen
		, "LongFrozenAmount", pInvestorPositionField->LongFrozenAmount
		, "ShortFrozenAmount", pInvestorPositionField->ShortFrozenAmount
		, "OpenVolume", pInvestorPositionField->OpenVolume
		, "CloseVolume", pInvestorPositionField->CloseVolume
		, "OpenAmount", pInvestorPositionField->OpenAmount
		, "CloseAmount", pInvestorPositionField->CloseAmount
		, "PositionCost", pInvestorPositionField->PositionCost
		, "PreMargin", pInvestorPositionField->PreMargin
		, "UseMargin", pInvestorPositionField->UseMargin
		, "FrozenMargin", pInvestorPositionField->FrozenMargin
		, "FrozenCash", pInvestorPositionField->FrozenCash
		, "FrozenCommission", pInvestorPositionField->FrozenCommission
		, "CashIn", pInvestorPositionField->CashIn
		, "Commission", pInvestorPositionField->Commission
		, "CloseProfit", pInvestorPositionField->CloseProfit
		, "PositionProfit", pInvestorPositionField->PositionProfit
		, "PreSettlementPrice", pInvestorPositionField->PreSettlementPrice
		, "SettlementPrice", pInvestorPositionField->SettlementPrice
		, "TradingDay", pInvestorPositionField->TradingDay
		, "SettlementID", pInvestorPositionField->SettlementID
		, "OpenCost", pInvestorPositionField->OpenCost
		, "ExchangeMargin", pInvestorPositionField->ExchangeMargin
		, "CombPosition", pInvestorPositionField->CombPosition
		, "CombLongFrozen", pInvestorPositionField->CombLongFrozen
		, "CombShortFrozen", pInvestorPositionField->CombShortFrozen
		, "CloseProfitByDate", pInvestorPositionField->CloseProfitByDate
		, "CloseProfitByTrade", pInvestorPositionField->CloseProfitByTrade
		, "TodayPosition", pInvestorPositionField->TodayPosition
		, "MarginRateByMoney", pInvestorPositionField->MarginRateByMoney
		, "MarginRateByVolume", pInvestorPositionField->MarginRateByVolume
		, "StrikeFrozen", pInvestorPositionField->StrikeFrozen
		, "StrikeFrozenAmount", pInvestorPositionField->StrikeFrozenAmount
		, "AbandonFrozen", pInvestorPositionField->AbandonFrozen
		, "ExchangeID", pInvestorPositionField->ExchangeID
		, "YdStrikeFrozen", pInvestorPositionField->YdStrikeFrozen
		, "InvestUnitID", pInvestorPositionField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInstrumentMarginRateField *pInstrumentMarginRateField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "InvestorRange", "BrokerID", "InvestorID", "HedgeFlag", "LongMarginRatioByMoney", "LongMarginRatioByVolume", "ShortMarginRatioByMoney", "ShortMarginRatioByVolume", "IsRelative", "ExchangeID", "InvestUnitID", nullptr};
	char *pInstrumentMarginRateField_InstrumentID = nullptr;
	char pInstrumentMarginRateField_InvestorRange = 0;
	char *pInstrumentMarginRateField_BrokerID = nullptr;
	char *pInstrumentMarginRateField_InvestorID = nullptr;
	char pInstrumentMarginRateField_HedgeFlag = 0;
	double pInstrumentMarginRateField_LongMarginRatioByMoney = 0.0;
	double pInstrumentMarginRateField_LongMarginRatioByVolume = 0.0;
	double pInstrumentMarginRateField_ShortMarginRatioByMoney = 0.0;
	double pInstrumentMarginRateField_ShortMarginRatioByVolume = 0.0;
	int pInstrumentMarginRateField_IsRelative = 0;
	char *pInstrumentMarginRateField_ExchangeID = nullptr;
	char *pInstrumentMarginRateField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInstrumentMarginRateField, "|ycyycddddiyy")
		, &pInstrumentMarginRateField_InstrumentID
		, &pInstrumentMarginRateField_InvestorRange
		, &pInstrumentMarginRateField_BrokerID
		, &pInstrumentMarginRateField_InvestorID
		, &pInstrumentMarginRateField_HedgeFlag
		, &pInstrumentMarginRateField_LongMarginRatioByMoney
		, &pInstrumentMarginRateField_LongMarginRatioByVolume
		, &pInstrumentMarginRateField_ShortMarginRatioByMoney
		, &pInstrumentMarginRateField_ShortMarginRatioByVolume
		, &pInstrumentMarginRateField_IsRelative
		, &pInstrumentMarginRateField_ExchangeID
		, &pInstrumentMarginRateField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pInstrumentMarginRateField_InstrumentID != nullptr){ strcpy_s(pInstrumentMarginRateField->InstrumentID, pInstrumentMarginRateField_InstrumentID); pInstrumentMarginRateField_InstrumentID = nullptr; }
		pInstrumentMarginRateField->InvestorRange = pInstrumentMarginRateField_InvestorRange;
		if(pInstrumentMarginRateField_BrokerID != nullptr){ strcpy_s(pInstrumentMarginRateField->BrokerID, pInstrumentMarginRateField_BrokerID); pInstrumentMarginRateField_BrokerID = nullptr; }
		if(pInstrumentMarginRateField_InvestorID != nullptr){ strcpy_s(pInstrumentMarginRateField->InvestorID, pInstrumentMarginRateField_InvestorID); pInstrumentMarginRateField_InvestorID = nullptr; }
		pInstrumentMarginRateField->HedgeFlag = pInstrumentMarginRateField_HedgeFlag;
		pInstrumentMarginRateField->LongMarginRatioByMoney = pInstrumentMarginRateField_LongMarginRatioByMoney;
		pInstrumentMarginRateField->LongMarginRatioByVolume = pInstrumentMarginRateField_LongMarginRatioByVolume;
		pInstrumentMarginRateField->ShortMarginRatioByMoney = pInstrumentMarginRateField_ShortMarginRatioByMoney;
		pInstrumentMarginRateField->ShortMarginRatioByVolume = pInstrumentMarginRateField_ShortMarginRatioByVolume;
		pInstrumentMarginRateField->IsRelative = pInstrumentMarginRateField_IsRelative;
		if(pInstrumentMarginRateField_ExchangeID != nullptr){ strcpy_s(pInstrumentMarginRateField->ExchangeID, pInstrumentMarginRateField_ExchangeID); pInstrumentMarginRateField_ExchangeID = nullptr; }
		if(pInstrumentMarginRateField_InvestUnitID != nullptr){ strcpy_s(pInstrumentMarginRateField->InvestUnitID, pInstrumentMarginRateField_InvestUnitID); pInstrumentMarginRateField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInstrumentMarginRateField *pInstrumentMarginRateField)
{
	if(pInstrumentMarginRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y,s:c,s:d,s:d,s:d,s:d,s:i,s:y,s:y}"
		, "InstrumentID", pInstrumentMarginRateField->InstrumentID
		, "InvestorRange", pInstrumentMarginRateField->InvestorRange
		, "BrokerID", pInstrumentMarginRateField->BrokerID
		, "InvestorID", pInstrumentMarginRateField->InvestorID
		, "HedgeFlag", pInstrumentMarginRateField->HedgeFlag
		, "LongMarginRatioByMoney", pInstrumentMarginRateField->LongMarginRatioByMoney
		, "LongMarginRatioByVolume", pInstrumentMarginRateField->LongMarginRatioByVolume
		, "ShortMarginRatioByMoney", pInstrumentMarginRateField->ShortMarginRatioByMoney
		, "ShortMarginRatioByVolume", pInstrumentMarginRateField->ShortMarginRatioByVolume
		, "IsRelative", pInstrumentMarginRateField->IsRelative
		, "ExchangeID", pInstrumentMarginRateField->ExchangeID
		, "InvestUnitID", pInstrumentMarginRateField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInstrumentCommissionRateField *pInstrumentCommissionRateField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "InvestorRange", "BrokerID", "InvestorID", "OpenRatioByMoney", "OpenRatioByVolume", "CloseRatioByMoney", "CloseRatioByVolume", "CloseTodayRatioByMoney", "CloseTodayRatioByVolume", "ExchangeID", "BizType", "InvestUnitID", nullptr};
	char *pInstrumentCommissionRateField_InstrumentID = nullptr;
	char pInstrumentCommissionRateField_InvestorRange = 0;
	char *pInstrumentCommissionRateField_BrokerID = nullptr;
	char *pInstrumentCommissionRateField_InvestorID = nullptr;
	double pInstrumentCommissionRateField_OpenRatioByMoney = 0.0;
	double pInstrumentCommissionRateField_OpenRatioByVolume = 0.0;
	double pInstrumentCommissionRateField_CloseRatioByMoney = 0.0;
	double pInstrumentCommissionRateField_CloseRatioByVolume = 0.0;
	double pInstrumentCommissionRateField_CloseTodayRatioByMoney = 0.0;
	double pInstrumentCommissionRateField_CloseTodayRatioByVolume = 0.0;
	char *pInstrumentCommissionRateField_ExchangeID = nullptr;
	char pInstrumentCommissionRateField_BizType = 0;
	char *pInstrumentCommissionRateField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInstrumentCommissionRateField, "|ycyyddddddycy")
		, &pInstrumentCommissionRateField_InstrumentID
		, &pInstrumentCommissionRateField_InvestorRange
		, &pInstrumentCommissionRateField_BrokerID
		, &pInstrumentCommissionRateField_InvestorID
		, &pInstrumentCommissionRateField_OpenRatioByMoney
		, &pInstrumentCommissionRateField_OpenRatioByVolume
		, &pInstrumentCommissionRateField_CloseRatioByMoney
		, &pInstrumentCommissionRateField_CloseRatioByVolume
		, &pInstrumentCommissionRateField_CloseTodayRatioByMoney
		, &pInstrumentCommissionRateField_CloseTodayRatioByVolume
		, &pInstrumentCommissionRateField_ExchangeID
		, &pInstrumentCommissionRateField_BizType
		, &pInstrumentCommissionRateField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pInstrumentCommissionRateField_InstrumentID != nullptr){ strcpy_s(pInstrumentCommissionRateField->InstrumentID, pInstrumentCommissionRateField_InstrumentID); pInstrumentCommissionRateField_InstrumentID = nullptr; }
		pInstrumentCommissionRateField->InvestorRange = pInstrumentCommissionRateField_InvestorRange;
		if(pInstrumentCommissionRateField_BrokerID != nullptr){ strcpy_s(pInstrumentCommissionRateField->BrokerID, pInstrumentCommissionRateField_BrokerID); pInstrumentCommissionRateField_BrokerID = nullptr; }
		if(pInstrumentCommissionRateField_InvestorID != nullptr){ strcpy_s(pInstrumentCommissionRateField->InvestorID, pInstrumentCommissionRateField_InvestorID); pInstrumentCommissionRateField_InvestorID = nullptr; }
		pInstrumentCommissionRateField->OpenRatioByMoney = pInstrumentCommissionRateField_OpenRatioByMoney;
		pInstrumentCommissionRateField->OpenRatioByVolume = pInstrumentCommissionRateField_OpenRatioByVolume;
		pInstrumentCommissionRateField->CloseRatioByMoney = pInstrumentCommissionRateField_CloseRatioByMoney;
		pInstrumentCommissionRateField->CloseRatioByVolume = pInstrumentCommissionRateField_CloseRatioByVolume;
		pInstrumentCommissionRateField->CloseTodayRatioByMoney = pInstrumentCommissionRateField_CloseTodayRatioByMoney;
		pInstrumentCommissionRateField->CloseTodayRatioByVolume = pInstrumentCommissionRateField_CloseTodayRatioByVolume;
		if(pInstrumentCommissionRateField_ExchangeID != nullptr){ strcpy_s(pInstrumentCommissionRateField->ExchangeID, pInstrumentCommissionRateField_ExchangeID); pInstrumentCommissionRateField_ExchangeID = nullptr; }
		pInstrumentCommissionRateField->BizType = pInstrumentCommissionRateField_BizType;
		if(pInstrumentCommissionRateField_InvestUnitID != nullptr){ strcpy_s(pInstrumentCommissionRateField->InvestUnitID, pInstrumentCommissionRateField_InvestUnitID); pInstrumentCommissionRateField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInstrumentCommissionRateField *pInstrumentCommissionRateField)
{
	if(pInstrumentCommissionRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y,s:d,s:d,s:d,s:d,s:d,s:d,s:y,s:c,s:y}"
		, "InstrumentID", pInstrumentCommissionRateField->InstrumentID
		, "InvestorRange", pInstrumentCommissionRateField->InvestorRange
		, "BrokerID", pInstrumentCommissionRateField->BrokerID
		, "InvestorID", pInstrumentCommissionRateField->InvestorID
		, "OpenRatioByMoney", pInstrumentCommissionRateField->OpenRatioByMoney
		, "OpenRatioByVolume", pInstrumentCommissionRateField->OpenRatioByVolume
		, "CloseRatioByMoney", pInstrumentCommissionRateField->CloseRatioByMoney
		, "CloseRatioByVolume", pInstrumentCommissionRateField->CloseRatioByVolume
		, "CloseTodayRatioByMoney", pInstrumentCommissionRateField->CloseTodayRatioByMoney
		, "CloseTodayRatioByVolume", pInstrumentCommissionRateField->CloseTodayRatioByVolume
		, "ExchangeID", pInstrumentCommissionRateField->ExchangeID
		, "BizType", pInstrumentCommissionRateField->BizType
		, "InvestUnitID", pInstrumentCommissionRateField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcDepthMarketDataField *pDepthMarketDataField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "InstrumentID", "ExchangeID", "ExchangeInstID", "LastPrice", "PreSettlementPrice", "PreClosePrice", "PreOpenInterest", "OpenPrice", "HighestPrice", "LowestPrice", "Volume", "Turnover", "OpenInterest", "ClosePrice", "SettlementPrice", "UpperLimitPrice", "LowerLimitPrice", "PreDelta", "CurrDelta", "UpdateTime", "UpdateMillisec", "BidPrice1", "BidVolume1", "AskPrice1", "AskVolume1", "BidPrice2", "BidVolume2", "AskPrice2", "AskVolume2", "BidPrice3", "BidVolume3", "AskPrice3", "AskVolume3", "BidPrice4", "BidVolume4", "AskPrice4", "AskVolume4", "BidPrice5", "BidVolume5", "AskPrice5", "AskVolume5", "AveragePrice", "ActionDay", nullptr};
	char *pDepthMarketDataField_TradingDay = nullptr;
	char *pDepthMarketDataField_InstrumentID = nullptr;
	char *pDepthMarketDataField_ExchangeID = nullptr;
	char *pDepthMarketDataField_ExchangeInstID = nullptr;
	double pDepthMarketDataField_LastPrice = 0.0;
	double pDepthMarketDataField_PreSettlementPrice = 0.0;
	double pDepthMarketDataField_PreClosePrice = 0.0;
	double pDepthMarketDataField_PreOpenInterest = 0.0;
	double pDepthMarketDataField_OpenPrice = 0.0;
	double pDepthMarketDataField_HighestPrice = 0.0;
	double pDepthMarketDataField_LowestPrice = 0.0;
	int pDepthMarketDataField_Volume = 0;
	double pDepthMarketDataField_Turnover = 0.0;
	double pDepthMarketDataField_OpenInterest = 0.0;
	double pDepthMarketDataField_ClosePrice = 0.0;
	double pDepthMarketDataField_SettlementPrice = 0.0;
	double pDepthMarketDataField_UpperLimitPrice = 0.0;
	double pDepthMarketDataField_LowerLimitPrice = 0.0;
	double pDepthMarketDataField_PreDelta = 0.0;
	double pDepthMarketDataField_CurrDelta = 0.0;
	char *pDepthMarketDataField_UpdateTime = nullptr;
	int pDepthMarketDataField_UpdateMillisec = 0;
	double pDepthMarketDataField_BidPrice1 = 0.0;
	int pDepthMarketDataField_BidVolume1 = 0;
	double pDepthMarketDataField_AskPrice1 = 0.0;
	int pDepthMarketDataField_AskVolume1 = 0;
	double pDepthMarketDataField_BidPrice2 = 0.0;
	int pDepthMarketDataField_BidVolume2 = 0;
	double pDepthMarketDataField_AskPrice2 = 0.0;
	int pDepthMarketDataField_AskVolume2 = 0;
	double pDepthMarketDataField_BidPrice3 = 0.0;
	int pDepthMarketDataField_BidVolume3 = 0;
	double pDepthMarketDataField_AskPrice3 = 0.0;
	int pDepthMarketDataField_AskVolume3 = 0;
	double pDepthMarketDataField_BidPrice4 = 0.0;
	int pDepthMarketDataField_BidVolume4 = 0;
	double pDepthMarketDataField_AskPrice4 = 0.0;
	int pDepthMarketDataField_AskVolume4 = 0;
	double pDepthMarketDataField_BidPrice5 = 0.0;
	int pDepthMarketDataField_BidVolume5 = 0;
	double pDepthMarketDataField_AskPrice5 = 0.0;
	int pDepthMarketDataField_AskVolume5 = 0;
	double pDepthMarketDataField_AveragePrice = 0.0;
	char *pDepthMarketDataField_ActionDay = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pDepthMarketDataField, "|yyyydddddddiddddddddyidididididididididididy")
		, &pDepthMarketDataField_TradingDay
		, &pDepthMarketDataField_InstrumentID
		, &pDepthMarketDataField_ExchangeID
		, &pDepthMarketDataField_ExchangeInstID
		, &pDepthMarketDataField_LastPrice
		, &pDepthMarketDataField_PreSettlementPrice
		, &pDepthMarketDataField_PreClosePrice
		, &pDepthMarketDataField_PreOpenInterest
		, &pDepthMarketDataField_OpenPrice
		, &pDepthMarketDataField_HighestPrice
		, &pDepthMarketDataField_LowestPrice
		, &pDepthMarketDataField_Volume
		, &pDepthMarketDataField_Turnover
		, &pDepthMarketDataField_OpenInterest
		, &pDepthMarketDataField_ClosePrice
		, &pDepthMarketDataField_SettlementPrice
		, &pDepthMarketDataField_UpperLimitPrice
		, &pDepthMarketDataField_LowerLimitPrice
		, &pDepthMarketDataField_PreDelta
		, &pDepthMarketDataField_CurrDelta
		, &pDepthMarketDataField_UpdateTime
		, &pDepthMarketDataField_UpdateMillisec
		, &pDepthMarketDataField_BidPrice1
		, &pDepthMarketDataField_BidVolume1
		, &pDepthMarketDataField_AskPrice1
		, &pDepthMarketDataField_AskVolume1
		, &pDepthMarketDataField_BidPrice2
		, &pDepthMarketDataField_BidVolume2
		, &pDepthMarketDataField_AskPrice2
		, &pDepthMarketDataField_AskVolume2
		, &pDepthMarketDataField_BidPrice3
		, &pDepthMarketDataField_BidVolume3
		, &pDepthMarketDataField_AskPrice3
		, &pDepthMarketDataField_AskVolume3
		, &pDepthMarketDataField_BidPrice4
		, &pDepthMarketDataField_BidVolume4
		, &pDepthMarketDataField_AskPrice4
		, &pDepthMarketDataField_AskVolume4
		, &pDepthMarketDataField_BidPrice5
		, &pDepthMarketDataField_BidVolume5
		, &pDepthMarketDataField_AskPrice5
		, &pDepthMarketDataField_AskVolume5
		, &pDepthMarketDataField_AveragePrice
		, &pDepthMarketDataField_ActionDay
	PyCTP_PyDict_FromStruct_END
		if(pDepthMarketDataField_TradingDay != nullptr){ strcpy_s(pDepthMarketDataField->TradingDay, pDepthMarketDataField_TradingDay); pDepthMarketDataField_TradingDay = nullptr; }
		if(pDepthMarketDataField_InstrumentID != nullptr){ strcpy_s(pDepthMarketDataField->InstrumentID, pDepthMarketDataField_InstrumentID); pDepthMarketDataField_InstrumentID = nullptr; }
		if(pDepthMarketDataField_ExchangeID != nullptr){ strcpy_s(pDepthMarketDataField->ExchangeID, pDepthMarketDataField_ExchangeID); pDepthMarketDataField_ExchangeID = nullptr; }
		if(pDepthMarketDataField_ExchangeInstID != nullptr){ strcpy_s(pDepthMarketDataField->ExchangeInstID, pDepthMarketDataField_ExchangeInstID); pDepthMarketDataField_ExchangeInstID = nullptr; }
		pDepthMarketDataField->LastPrice = pDepthMarketDataField_LastPrice;
		pDepthMarketDataField->PreSettlementPrice = pDepthMarketDataField_PreSettlementPrice;
		pDepthMarketDataField->PreClosePrice = pDepthMarketDataField_PreClosePrice;
		pDepthMarketDataField->PreOpenInterest = pDepthMarketDataField_PreOpenInterest;
		pDepthMarketDataField->OpenPrice = pDepthMarketDataField_OpenPrice;
		pDepthMarketDataField->HighestPrice = pDepthMarketDataField_HighestPrice;
		pDepthMarketDataField->LowestPrice = pDepthMarketDataField_LowestPrice;
		pDepthMarketDataField->Volume = pDepthMarketDataField_Volume;
		pDepthMarketDataField->Turnover = pDepthMarketDataField_Turnover;
		pDepthMarketDataField->OpenInterest = pDepthMarketDataField_OpenInterest;
		pDepthMarketDataField->ClosePrice = pDepthMarketDataField_ClosePrice;
		pDepthMarketDataField->SettlementPrice = pDepthMarketDataField_SettlementPrice;
		pDepthMarketDataField->UpperLimitPrice = pDepthMarketDataField_UpperLimitPrice;
		pDepthMarketDataField->LowerLimitPrice = pDepthMarketDataField_LowerLimitPrice;
		pDepthMarketDataField->PreDelta = pDepthMarketDataField_PreDelta;
		pDepthMarketDataField->CurrDelta = pDepthMarketDataField_CurrDelta;
		if(pDepthMarketDataField_UpdateTime != nullptr){ strcpy_s(pDepthMarketDataField->UpdateTime, pDepthMarketDataField_UpdateTime); pDepthMarketDataField_UpdateTime = nullptr; }
		pDepthMarketDataField->UpdateMillisec = pDepthMarketDataField_UpdateMillisec;
		pDepthMarketDataField->BidPrice1 = pDepthMarketDataField_BidPrice1;
		pDepthMarketDataField->BidVolume1 = pDepthMarketDataField_BidVolume1;
		pDepthMarketDataField->AskPrice1 = pDepthMarketDataField_AskPrice1;
		pDepthMarketDataField->AskVolume1 = pDepthMarketDataField_AskVolume1;
		pDepthMarketDataField->BidPrice2 = pDepthMarketDataField_BidPrice2;
		pDepthMarketDataField->BidVolume2 = pDepthMarketDataField_BidVolume2;
		pDepthMarketDataField->AskPrice2 = pDepthMarketDataField_AskPrice2;
		pDepthMarketDataField->AskVolume2 = pDepthMarketDataField_AskVolume2;
		pDepthMarketDataField->BidPrice3 = pDepthMarketDataField_BidPrice3;
		pDepthMarketDataField->BidVolume3 = pDepthMarketDataField_BidVolume3;
		pDepthMarketDataField->AskPrice3 = pDepthMarketDataField_AskPrice3;
		pDepthMarketDataField->AskVolume3 = pDepthMarketDataField_AskVolume3;
		pDepthMarketDataField->BidPrice4 = pDepthMarketDataField_BidPrice4;
		pDepthMarketDataField->BidVolume4 = pDepthMarketDataField_BidVolume4;
		pDepthMarketDataField->AskPrice4 = pDepthMarketDataField_AskPrice4;
		pDepthMarketDataField->AskVolume4 = pDepthMarketDataField_AskVolume4;
		pDepthMarketDataField->BidPrice5 = pDepthMarketDataField_BidPrice5;
		pDepthMarketDataField->BidVolume5 = pDepthMarketDataField_BidVolume5;
		pDepthMarketDataField->AskPrice5 = pDepthMarketDataField_AskPrice5;
		pDepthMarketDataField->AskVolume5 = pDepthMarketDataField_AskVolume5;
		pDepthMarketDataField->AveragePrice = pDepthMarketDataField_AveragePrice;
		if(pDepthMarketDataField_ActionDay != nullptr){ strcpy_s(pDepthMarketDataField->ActionDay, pDepthMarketDataField_ActionDay); pDepthMarketDataField_ActionDay = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcDepthMarketDataField *pDepthMarketDataField)
{
	if(pDepthMarketDataField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:i,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:y,s:i,s:d,s:i,s:d,s:i,s:d,s:i,s:d,s:i,s:d,s:i,s:d,s:i,s:d,s:i,s:d,s:i,s:d,s:i,s:d,s:i,s:d,s:y}"
		, "TradingDay", pDepthMarketDataField->TradingDay
		, "InstrumentID", pDepthMarketDataField->InstrumentID
		, "ExchangeID", pDepthMarketDataField->ExchangeID
		, "ExchangeInstID", pDepthMarketDataField->ExchangeInstID
		, "LastPrice", pDepthMarketDataField->LastPrice
		, "PreSettlementPrice", pDepthMarketDataField->PreSettlementPrice
		, "PreClosePrice", pDepthMarketDataField->PreClosePrice
		, "PreOpenInterest", pDepthMarketDataField->PreOpenInterest
		, "OpenPrice", pDepthMarketDataField->OpenPrice
		, "HighestPrice", pDepthMarketDataField->HighestPrice
		, "LowestPrice", pDepthMarketDataField->LowestPrice
		, "Volume", pDepthMarketDataField->Volume
		, "Turnover", pDepthMarketDataField->Turnover
		, "OpenInterest", pDepthMarketDataField->OpenInterest
		, "ClosePrice", pDepthMarketDataField->ClosePrice
		, "SettlementPrice", pDepthMarketDataField->SettlementPrice
		, "UpperLimitPrice", pDepthMarketDataField->UpperLimitPrice
		, "LowerLimitPrice", pDepthMarketDataField->LowerLimitPrice
		, "PreDelta", pDepthMarketDataField->PreDelta
		, "CurrDelta", pDepthMarketDataField->CurrDelta
		, "UpdateTime", pDepthMarketDataField->UpdateTime
		, "UpdateMillisec", pDepthMarketDataField->UpdateMillisec
		, "BidPrice1", pDepthMarketDataField->BidPrice1
		, "BidVolume1", pDepthMarketDataField->BidVolume1
		, "AskPrice1", pDepthMarketDataField->AskPrice1
		, "AskVolume1", pDepthMarketDataField->AskVolume1
		, "BidPrice2", pDepthMarketDataField->BidPrice2
		, "BidVolume2", pDepthMarketDataField->BidVolume2
		, "AskPrice2", pDepthMarketDataField->AskPrice2
		, "AskVolume2", pDepthMarketDataField->AskVolume2
		, "BidPrice3", pDepthMarketDataField->BidPrice3
		, "BidVolume3", pDepthMarketDataField->BidVolume3
		, "AskPrice3", pDepthMarketDataField->AskPrice3
		, "AskVolume3", pDepthMarketDataField->AskVolume3
		, "BidPrice4", pDepthMarketDataField->BidPrice4
		, "BidVolume4", pDepthMarketDataField->BidVolume4
		, "AskPrice4", pDepthMarketDataField->AskPrice4
		, "AskVolume4", pDepthMarketDataField->AskVolume4
		, "BidPrice5", pDepthMarketDataField->BidPrice5
		, "BidVolume5", pDepthMarketDataField->BidVolume5
		, "AskPrice5", pDepthMarketDataField->AskPrice5
		, "AskVolume5", pDepthMarketDataField->AskVolume5
		, "AveragePrice", pDepthMarketDataField->AveragePrice
		, "ActionDay", pDepthMarketDataField->ActionDay
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInstrumentTradingRightField *pInstrumentTradingRightField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "InvestorRange", "BrokerID", "InvestorID", "TradingRight", nullptr};
	char *pInstrumentTradingRightField_InstrumentID = nullptr;
	char pInstrumentTradingRightField_InvestorRange = 0;
	char *pInstrumentTradingRightField_BrokerID = nullptr;
	char *pInstrumentTradingRightField_InvestorID = nullptr;
	char pInstrumentTradingRightField_TradingRight = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pInstrumentTradingRightField, "|ycyyc")
		, &pInstrumentTradingRightField_InstrumentID
		, &pInstrumentTradingRightField_InvestorRange
		, &pInstrumentTradingRightField_BrokerID
		, &pInstrumentTradingRightField_InvestorID
		, &pInstrumentTradingRightField_TradingRight
	PyCTP_PyDict_FromStruct_END
		if(pInstrumentTradingRightField_InstrumentID != nullptr){ strcpy_s(pInstrumentTradingRightField->InstrumentID, pInstrumentTradingRightField_InstrumentID); pInstrumentTradingRightField_InstrumentID = nullptr; }
		pInstrumentTradingRightField->InvestorRange = pInstrumentTradingRightField_InvestorRange;
		if(pInstrumentTradingRightField_BrokerID != nullptr){ strcpy_s(pInstrumentTradingRightField->BrokerID, pInstrumentTradingRightField_BrokerID); pInstrumentTradingRightField_BrokerID = nullptr; }
		if(pInstrumentTradingRightField_InvestorID != nullptr){ strcpy_s(pInstrumentTradingRightField->InvestorID, pInstrumentTradingRightField_InvestorID); pInstrumentTradingRightField_InvestorID = nullptr; }
		pInstrumentTradingRightField->TradingRight = pInstrumentTradingRightField_TradingRight;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInstrumentTradingRightField *pInstrumentTradingRightField)
{
	if(pInstrumentTradingRightField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y,s:c}"
		, "InstrumentID", pInstrumentTradingRightField->InstrumentID
		, "InvestorRange", pInstrumentTradingRightField->InvestorRange
		, "BrokerID", pInstrumentTradingRightField->BrokerID
		, "InvestorID", pInstrumentTradingRightField->InvestorID
		, "TradingRight", pInstrumentTradingRightField->TradingRight
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcBrokerUserField *pBrokerUserField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "UserName", "UserType", "IsActive", "IsUsingOTP", "IsAuthForce", nullptr};
	char *pBrokerUserField_BrokerID = nullptr;
	char *pBrokerUserField_UserID = nullptr;
	char *pBrokerUserField_UserName = nullptr;
	char pBrokerUserField_UserType = 0;
	int pBrokerUserField_IsActive = 0;
	int pBrokerUserField_IsUsingOTP = 0;
	int pBrokerUserField_IsAuthForce = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pBrokerUserField, "|yyyciii")
		, &pBrokerUserField_BrokerID
		, &pBrokerUserField_UserID
		, &pBrokerUserField_UserName
		, &pBrokerUserField_UserType
		, &pBrokerUserField_IsActive
		, &pBrokerUserField_IsUsingOTP
		, &pBrokerUserField_IsAuthForce
	PyCTP_PyDict_FromStruct_END
		if(pBrokerUserField_BrokerID != nullptr){ strcpy_s(pBrokerUserField->BrokerID, pBrokerUserField_BrokerID); pBrokerUserField_BrokerID = nullptr; }
		if(pBrokerUserField_UserID != nullptr){ strcpy_s(pBrokerUserField->UserID, pBrokerUserField_UserID); pBrokerUserField_UserID = nullptr; }
		if(pBrokerUserField_UserName != nullptr){ strcpy_s(pBrokerUserField->UserName, pBrokerUserField_UserName); pBrokerUserField_UserName = nullptr; }
		pBrokerUserField->UserType = pBrokerUserField_UserType;
		pBrokerUserField->IsActive = pBrokerUserField_IsActive;
		pBrokerUserField->IsUsingOTP = pBrokerUserField_IsUsingOTP;
		pBrokerUserField->IsAuthForce = pBrokerUserField_IsAuthForce;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcBrokerUserField *pBrokerUserField)
{
	if(pBrokerUserField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:c,s:i,s:i,s:i}"
		, "BrokerID", pBrokerUserField->BrokerID
		, "UserID", pBrokerUserField->UserID
		, "UserName", pBrokerUserField->UserName
		, "UserType", pBrokerUserField->UserType
		, "IsActive", pBrokerUserField->IsActive
		, "IsUsingOTP", pBrokerUserField->IsUsingOTP
		, "IsAuthForce", pBrokerUserField->IsAuthForce
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcBrokerUserPasswordField *pBrokerUserPasswordField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "Password", "LastUpdateTime", "LastLoginTime", "ExpireDate", "WeakExpireDate", nullptr};
	char *pBrokerUserPasswordField_BrokerID = nullptr;
	char *pBrokerUserPasswordField_UserID = nullptr;
	char *pBrokerUserPasswordField_Password = nullptr;
	char *pBrokerUserPasswordField_LastUpdateTime = nullptr;
	char *pBrokerUserPasswordField_LastLoginTime = nullptr;
	char *pBrokerUserPasswordField_ExpireDate = nullptr;
	char *pBrokerUserPasswordField_WeakExpireDate = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pBrokerUserPasswordField, "|yyyyyyy")
		, &pBrokerUserPasswordField_BrokerID
		, &pBrokerUserPasswordField_UserID
		, &pBrokerUserPasswordField_Password
		, &pBrokerUserPasswordField_LastUpdateTime
		, &pBrokerUserPasswordField_LastLoginTime
		, &pBrokerUserPasswordField_ExpireDate
		, &pBrokerUserPasswordField_WeakExpireDate
	PyCTP_PyDict_FromStruct_END
		if(pBrokerUserPasswordField_BrokerID != nullptr){ strcpy_s(pBrokerUserPasswordField->BrokerID, pBrokerUserPasswordField_BrokerID); pBrokerUserPasswordField_BrokerID = nullptr; }
		if(pBrokerUserPasswordField_UserID != nullptr){ strcpy_s(pBrokerUserPasswordField->UserID, pBrokerUserPasswordField_UserID); pBrokerUserPasswordField_UserID = nullptr; }
		if(pBrokerUserPasswordField_Password != nullptr){ strcpy_s(pBrokerUserPasswordField->Password, pBrokerUserPasswordField_Password); pBrokerUserPasswordField_Password = nullptr; }
		if(pBrokerUserPasswordField_LastUpdateTime != nullptr){ strcpy_s(pBrokerUserPasswordField->LastUpdateTime, pBrokerUserPasswordField_LastUpdateTime); pBrokerUserPasswordField_LastUpdateTime = nullptr; }
		if(pBrokerUserPasswordField_LastLoginTime != nullptr){ strcpy_s(pBrokerUserPasswordField->LastLoginTime, pBrokerUserPasswordField_LastLoginTime); pBrokerUserPasswordField_LastLoginTime = nullptr; }
		if(pBrokerUserPasswordField_ExpireDate != nullptr){ strcpy_s(pBrokerUserPasswordField->ExpireDate, pBrokerUserPasswordField_ExpireDate); pBrokerUserPasswordField_ExpireDate = nullptr; }
		if(pBrokerUserPasswordField_WeakExpireDate != nullptr){ strcpy_s(pBrokerUserPasswordField->WeakExpireDate, pBrokerUserPasswordField_WeakExpireDate); pBrokerUserPasswordField_WeakExpireDate = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcBrokerUserPasswordField *pBrokerUserPasswordField)
{
	if(pBrokerUserPasswordField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pBrokerUserPasswordField->BrokerID
		, "UserID", pBrokerUserPasswordField->UserID
		, "Password", pBrokerUserPasswordField->Password
		, "LastUpdateTime", pBrokerUserPasswordField->LastUpdateTime
		, "LastLoginTime", pBrokerUserPasswordField->LastLoginTime
		, "ExpireDate", pBrokerUserPasswordField->ExpireDate
		, "WeakExpireDate", pBrokerUserPasswordField->WeakExpireDate
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcBrokerUserFunctionField *pBrokerUserFunctionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "BrokerFunctionCode", nullptr};
	char *pBrokerUserFunctionField_BrokerID = nullptr;
	char *pBrokerUserFunctionField_UserID = nullptr;
	char pBrokerUserFunctionField_BrokerFunctionCode = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pBrokerUserFunctionField, "|yyc")
		, &pBrokerUserFunctionField_BrokerID
		, &pBrokerUserFunctionField_UserID
		, &pBrokerUserFunctionField_BrokerFunctionCode
	PyCTP_PyDict_FromStruct_END
		if(pBrokerUserFunctionField_BrokerID != nullptr){ strcpy_s(pBrokerUserFunctionField->BrokerID, pBrokerUserFunctionField_BrokerID); pBrokerUserFunctionField_BrokerID = nullptr; }
		if(pBrokerUserFunctionField_UserID != nullptr){ strcpy_s(pBrokerUserFunctionField->UserID, pBrokerUserFunctionField_UserID); pBrokerUserFunctionField_UserID = nullptr; }
		pBrokerUserFunctionField->BrokerFunctionCode = pBrokerUserFunctionField_BrokerFunctionCode;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcBrokerUserFunctionField *pBrokerUserFunctionField)
{
	if(pBrokerUserFunctionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c}"
		, "BrokerID", pBrokerUserFunctionField->BrokerID
		, "UserID", pBrokerUserFunctionField->UserID
		, "BrokerFunctionCode", pBrokerUserFunctionField->BrokerFunctionCode
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTraderOfferField *pTraderOfferField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "TraderID", "ParticipantID", "Password", "InstallID", "OrderLocalID", "TraderConnectStatus", "ConnectRequestDate", "ConnectRequestTime", "LastReportDate", "LastReportTime", "ConnectDate", "ConnectTime", "StartDate", "StartTime", "TradingDay", "BrokerID", "MaxTradeID", "MaxOrderMessageReference", nullptr};
	char *pTraderOfferField_ExchangeID = nullptr;
	char *pTraderOfferField_TraderID = nullptr;
	char *pTraderOfferField_ParticipantID = nullptr;
	char *pTraderOfferField_Password = nullptr;
	int pTraderOfferField_InstallID = 0;
	char *pTraderOfferField_OrderLocalID = nullptr;
	char pTraderOfferField_TraderConnectStatus = 0;
	char *pTraderOfferField_ConnectRequestDate = nullptr;
	char *pTraderOfferField_ConnectRequestTime = nullptr;
	char *pTraderOfferField_LastReportDate = nullptr;
	char *pTraderOfferField_LastReportTime = nullptr;
	char *pTraderOfferField_ConnectDate = nullptr;
	char *pTraderOfferField_ConnectTime = nullptr;
	char *pTraderOfferField_StartDate = nullptr;
	char *pTraderOfferField_StartTime = nullptr;
	char *pTraderOfferField_TradingDay = nullptr;
	char *pTraderOfferField_BrokerID = nullptr;
	char *pTraderOfferField_MaxTradeID = nullptr;
	char *pTraderOfferField_MaxOrderMessageReference = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTraderOfferField, "|yyyyiycyyyyyyyyyyyy")
		, &pTraderOfferField_ExchangeID
		, &pTraderOfferField_TraderID
		, &pTraderOfferField_ParticipantID
		, &pTraderOfferField_Password
		, &pTraderOfferField_InstallID
		, &pTraderOfferField_OrderLocalID
		, &pTraderOfferField_TraderConnectStatus
		, &pTraderOfferField_ConnectRequestDate
		, &pTraderOfferField_ConnectRequestTime
		, &pTraderOfferField_LastReportDate
		, &pTraderOfferField_LastReportTime
		, &pTraderOfferField_ConnectDate
		, &pTraderOfferField_ConnectTime
		, &pTraderOfferField_StartDate
		, &pTraderOfferField_StartTime
		, &pTraderOfferField_TradingDay
		, &pTraderOfferField_BrokerID
		, &pTraderOfferField_MaxTradeID
		, &pTraderOfferField_MaxOrderMessageReference
	PyCTP_PyDict_FromStruct_END
		if(pTraderOfferField_ExchangeID != nullptr){ strcpy_s(pTraderOfferField->ExchangeID, pTraderOfferField_ExchangeID); pTraderOfferField_ExchangeID = nullptr; }
		if(pTraderOfferField_TraderID != nullptr){ strcpy_s(pTraderOfferField->TraderID, pTraderOfferField_TraderID); pTraderOfferField_TraderID = nullptr; }
		if(pTraderOfferField_ParticipantID != nullptr){ strcpy_s(pTraderOfferField->ParticipantID, pTraderOfferField_ParticipantID); pTraderOfferField_ParticipantID = nullptr; }
		if(pTraderOfferField_Password != nullptr){ strcpy_s(pTraderOfferField->Password, pTraderOfferField_Password); pTraderOfferField_Password = nullptr; }
		pTraderOfferField->InstallID = pTraderOfferField_InstallID;
		if(pTraderOfferField_OrderLocalID != nullptr){ strcpy_s(pTraderOfferField->OrderLocalID, pTraderOfferField_OrderLocalID); pTraderOfferField_OrderLocalID = nullptr; }
		pTraderOfferField->TraderConnectStatus = pTraderOfferField_TraderConnectStatus;
		if(pTraderOfferField_ConnectRequestDate != nullptr){ strcpy_s(pTraderOfferField->ConnectRequestDate, pTraderOfferField_ConnectRequestDate); pTraderOfferField_ConnectRequestDate = nullptr; }
		if(pTraderOfferField_ConnectRequestTime != nullptr){ strcpy_s(pTraderOfferField->ConnectRequestTime, pTraderOfferField_ConnectRequestTime); pTraderOfferField_ConnectRequestTime = nullptr; }
		if(pTraderOfferField_LastReportDate != nullptr){ strcpy_s(pTraderOfferField->LastReportDate, pTraderOfferField_LastReportDate); pTraderOfferField_LastReportDate = nullptr; }
		if(pTraderOfferField_LastReportTime != nullptr){ strcpy_s(pTraderOfferField->LastReportTime, pTraderOfferField_LastReportTime); pTraderOfferField_LastReportTime = nullptr; }
		if(pTraderOfferField_ConnectDate != nullptr){ strcpy_s(pTraderOfferField->ConnectDate, pTraderOfferField_ConnectDate); pTraderOfferField_ConnectDate = nullptr; }
		if(pTraderOfferField_ConnectTime != nullptr){ strcpy_s(pTraderOfferField->ConnectTime, pTraderOfferField_ConnectTime); pTraderOfferField_ConnectTime = nullptr; }
		if(pTraderOfferField_StartDate != nullptr){ strcpy_s(pTraderOfferField->StartDate, pTraderOfferField_StartDate); pTraderOfferField_StartDate = nullptr; }
		if(pTraderOfferField_StartTime != nullptr){ strcpy_s(pTraderOfferField->StartTime, pTraderOfferField_StartTime); pTraderOfferField_StartTime = nullptr; }
		if(pTraderOfferField_TradingDay != nullptr){ strcpy_s(pTraderOfferField->TradingDay, pTraderOfferField_TradingDay); pTraderOfferField_TradingDay = nullptr; }
		if(pTraderOfferField_BrokerID != nullptr){ strcpy_s(pTraderOfferField->BrokerID, pTraderOfferField_BrokerID); pTraderOfferField_BrokerID = nullptr; }
		if(pTraderOfferField_MaxTradeID != nullptr){ strcpy_s(pTraderOfferField->MaxTradeID, pTraderOfferField_MaxTradeID); pTraderOfferField_MaxTradeID = nullptr; }
		if(pTraderOfferField_MaxOrderMessageReference != nullptr){ strcpy_s(pTraderOfferField->MaxOrderMessageReference, pTraderOfferField_MaxOrderMessageReference); pTraderOfferField_MaxOrderMessageReference = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTraderOfferField *pTraderOfferField)
{
	if(pTraderOfferField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:i,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "ExchangeID", pTraderOfferField->ExchangeID
		, "TraderID", pTraderOfferField->TraderID
		, "ParticipantID", pTraderOfferField->ParticipantID
		, "Password", pTraderOfferField->Password
		, "InstallID", pTraderOfferField->InstallID
		, "OrderLocalID", pTraderOfferField->OrderLocalID
		, "TraderConnectStatus", pTraderOfferField->TraderConnectStatus
		, "ConnectRequestDate", pTraderOfferField->ConnectRequestDate
		, "ConnectRequestTime", pTraderOfferField->ConnectRequestTime
		, "LastReportDate", pTraderOfferField->LastReportDate
		, "LastReportTime", pTraderOfferField->LastReportTime
		, "ConnectDate", pTraderOfferField->ConnectDate
		, "ConnectTime", pTraderOfferField->ConnectTime
		, "StartDate", pTraderOfferField->StartDate
		, "StartTime", pTraderOfferField->StartTime
		, "TradingDay", pTraderOfferField->TradingDay
		, "BrokerID", pTraderOfferField->BrokerID
		, "MaxTradeID", pTraderOfferField->MaxTradeID
		, "MaxOrderMessageReference", pTraderOfferField->MaxOrderMessageReference
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSettlementInfoField *pSettlementInfoField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "SettlementID", "BrokerID", "InvestorID", "SequenceNo", "Content", "AccountID", "CurrencyID", nullptr};
	char *pSettlementInfoField_TradingDay = nullptr;
	int pSettlementInfoField_SettlementID = 0;
	char *pSettlementInfoField_BrokerID = nullptr;
	char *pSettlementInfoField_InvestorID = nullptr;
	int pSettlementInfoField_SequenceNo = 0;
	char *pSettlementInfoField_Content = nullptr;
	char *pSettlementInfoField_AccountID = nullptr;
	char *pSettlementInfoField_CurrencyID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pSettlementInfoField, "|yiyyiyyy")
		, &pSettlementInfoField_TradingDay
		, &pSettlementInfoField_SettlementID
		, &pSettlementInfoField_BrokerID
		, &pSettlementInfoField_InvestorID
		, &pSettlementInfoField_SequenceNo
		, &pSettlementInfoField_Content
		, &pSettlementInfoField_AccountID
		, &pSettlementInfoField_CurrencyID
	PyCTP_PyDict_FromStruct_END
		if(pSettlementInfoField_TradingDay != nullptr){ strcpy_s(pSettlementInfoField->TradingDay, pSettlementInfoField_TradingDay); pSettlementInfoField_TradingDay = nullptr; }
		pSettlementInfoField->SettlementID = pSettlementInfoField_SettlementID;
		if(pSettlementInfoField_BrokerID != nullptr){ strcpy_s(pSettlementInfoField->BrokerID, pSettlementInfoField_BrokerID); pSettlementInfoField_BrokerID = nullptr; }
		if(pSettlementInfoField_InvestorID != nullptr){ strcpy_s(pSettlementInfoField->InvestorID, pSettlementInfoField_InvestorID); pSettlementInfoField_InvestorID = nullptr; }
		pSettlementInfoField->SequenceNo = pSettlementInfoField_SequenceNo;
		if(pSettlementInfoField_Content != nullptr){ strcpy_s(pSettlementInfoField->Content, pSettlementInfoField_Content); pSettlementInfoField_Content = nullptr; }
		if(pSettlementInfoField_AccountID != nullptr){ strcpy_s(pSettlementInfoField->AccountID, pSettlementInfoField_AccountID); pSettlementInfoField_AccountID = nullptr; }
		if(pSettlementInfoField_CurrencyID != nullptr){ strcpy_s(pSettlementInfoField->CurrencyID, pSettlementInfoField_CurrencyID); pSettlementInfoField_CurrencyID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSettlementInfoField *pSettlementInfoField)
{
	if(pSettlementInfoField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:i,s:y,s:y,s:i,s:y,s:y,s:y}"
		, "TradingDay", pSettlementInfoField->TradingDay
		, "SettlementID", pSettlementInfoField->SettlementID
		, "BrokerID", pSettlementInfoField->BrokerID
		, "InvestorID", pSettlementInfoField->InvestorID
		, "SequenceNo", pSettlementInfoField->SequenceNo
		, "Content", pSettlementInfoField->Content
		, "AccountID", pSettlementInfoField->AccountID
		, "CurrencyID", pSettlementInfoField->CurrencyID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInstrumentMarginRateAdjustField *pInstrumentMarginRateAdjustField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "InvestorRange", "BrokerID", "InvestorID", "HedgeFlag", "LongMarginRatioByMoney", "LongMarginRatioByVolume", "ShortMarginRatioByMoney", "ShortMarginRatioByVolume", "IsRelative", nullptr};
	char *pInstrumentMarginRateAdjustField_InstrumentID = nullptr;
	char pInstrumentMarginRateAdjustField_InvestorRange = 0;
	char *pInstrumentMarginRateAdjustField_BrokerID = nullptr;
	char *pInstrumentMarginRateAdjustField_InvestorID = nullptr;
	char pInstrumentMarginRateAdjustField_HedgeFlag = 0;
	double pInstrumentMarginRateAdjustField_LongMarginRatioByMoney = 0.0;
	double pInstrumentMarginRateAdjustField_LongMarginRatioByVolume = 0.0;
	double pInstrumentMarginRateAdjustField_ShortMarginRatioByMoney = 0.0;
	double pInstrumentMarginRateAdjustField_ShortMarginRatioByVolume = 0.0;
	int pInstrumentMarginRateAdjustField_IsRelative = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pInstrumentMarginRateAdjustField, "|ycyycddddi")
		, &pInstrumentMarginRateAdjustField_InstrumentID
		, &pInstrumentMarginRateAdjustField_InvestorRange
		, &pInstrumentMarginRateAdjustField_BrokerID
		, &pInstrumentMarginRateAdjustField_InvestorID
		, &pInstrumentMarginRateAdjustField_HedgeFlag
		, &pInstrumentMarginRateAdjustField_LongMarginRatioByMoney
		, &pInstrumentMarginRateAdjustField_LongMarginRatioByVolume
		, &pInstrumentMarginRateAdjustField_ShortMarginRatioByMoney
		, &pInstrumentMarginRateAdjustField_ShortMarginRatioByVolume
		, &pInstrumentMarginRateAdjustField_IsRelative
	PyCTP_PyDict_FromStruct_END
		if(pInstrumentMarginRateAdjustField_InstrumentID != nullptr){ strcpy_s(pInstrumentMarginRateAdjustField->InstrumentID, pInstrumentMarginRateAdjustField_InstrumentID); pInstrumentMarginRateAdjustField_InstrumentID = nullptr; }
		pInstrumentMarginRateAdjustField->InvestorRange = pInstrumentMarginRateAdjustField_InvestorRange;
		if(pInstrumentMarginRateAdjustField_BrokerID != nullptr){ strcpy_s(pInstrumentMarginRateAdjustField->BrokerID, pInstrumentMarginRateAdjustField_BrokerID); pInstrumentMarginRateAdjustField_BrokerID = nullptr; }
		if(pInstrumentMarginRateAdjustField_InvestorID != nullptr){ strcpy_s(pInstrumentMarginRateAdjustField->InvestorID, pInstrumentMarginRateAdjustField_InvestorID); pInstrumentMarginRateAdjustField_InvestorID = nullptr; }
		pInstrumentMarginRateAdjustField->HedgeFlag = pInstrumentMarginRateAdjustField_HedgeFlag;
		pInstrumentMarginRateAdjustField->LongMarginRatioByMoney = pInstrumentMarginRateAdjustField_LongMarginRatioByMoney;
		pInstrumentMarginRateAdjustField->LongMarginRatioByVolume = pInstrumentMarginRateAdjustField_LongMarginRatioByVolume;
		pInstrumentMarginRateAdjustField->ShortMarginRatioByMoney = pInstrumentMarginRateAdjustField_ShortMarginRatioByMoney;
		pInstrumentMarginRateAdjustField->ShortMarginRatioByVolume = pInstrumentMarginRateAdjustField_ShortMarginRatioByVolume;
		pInstrumentMarginRateAdjustField->IsRelative = pInstrumentMarginRateAdjustField_IsRelative;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInstrumentMarginRateAdjustField *pInstrumentMarginRateAdjustField)
{
	if(pInstrumentMarginRateAdjustField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y,s:c,s:d,s:d,s:d,s:d,s:i}"
		, "InstrumentID", pInstrumentMarginRateAdjustField->InstrumentID
		, "InvestorRange", pInstrumentMarginRateAdjustField->InvestorRange
		, "BrokerID", pInstrumentMarginRateAdjustField->BrokerID
		, "InvestorID", pInstrumentMarginRateAdjustField->InvestorID
		, "HedgeFlag", pInstrumentMarginRateAdjustField->HedgeFlag
		, "LongMarginRatioByMoney", pInstrumentMarginRateAdjustField->LongMarginRatioByMoney
		, "LongMarginRatioByVolume", pInstrumentMarginRateAdjustField->LongMarginRatioByVolume
		, "ShortMarginRatioByMoney", pInstrumentMarginRateAdjustField->ShortMarginRatioByMoney
		, "ShortMarginRatioByVolume", pInstrumentMarginRateAdjustField->ShortMarginRatioByVolume
		, "IsRelative", pInstrumentMarginRateAdjustField->IsRelative
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeMarginRateField *pExchangeMarginRateField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InstrumentID", "HedgeFlag", "LongMarginRatioByMoney", "LongMarginRatioByVolume", "ShortMarginRatioByMoney", "ShortMarginRatioByVolume", "ExchangeID", nullptr};
	char *pExchangeMarginRateField_BrokerID = nullptr;
	char *pExchangeMarginRateField_InstrumentID = nullptr;
	char pExchangeMarginRateField_HedgeFlag = 0;
	double pExchangeMarginRateField_LongMarginRatioByMoney = 0.0;
	double pExchangeMarginRateField_LongMarginRatioByVolume = 0.0;
	double pExchangeMarginRateField_ShortMarginRatioByMoney = 0.0;
	double pExchangeMarginRateField_ShortMarginRatioByVolume = 0.0;
	char *pExchangeMarginRateField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeMarginRateField, "|yycddddy")
		, &pExchangeMarginRateField_BrokerID
		, &pExchangeMarginRateField_InstrumentID
		, &pExchangeMarginRateField_HedgeFlag
		, &pExchangeMarginRateField_LongMarginRatioByMoney
		, &pExchangeMarginRateField_LongMarginRatioByVolume
		, &pExchangeMarginRateField_ShortMarginRatioByMoney
		, &pExchangeMarginRateField_ShortMarginRatioByVolume
		, &pExchangeMarginRateField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pExchangeMarginRateField_BrokerID != nullptr){ strcpy_s(pExchangeMarginRateField->BrokerID, pExchangeMarginRateField_BrokerID); pExchangeMarginRateField_BrokerID = nullptr; }
		if(pExchangeMarginRateField_InstrumentID != nullptr){ strcpy_s(pExchangeMarginRateField->InstrumentID, pExchangeMarginRateField_InstrumentID); pExchangeMarginRateField_InstrumentID = nullptr; }
		pExchangeMarginRateField->HedgeFlag = pExchangeMarginRateField_HedgeFlag;
		pExchangeMarginRateField->LongMarginRatioByMoney = pExchangeMarginRateField_LongMarginRatioByMoney;
		pExchangeMarginRateField->LongMarginRatioByVolume = pExchangeMarginRateField_LongMarginRatioByVolume;
		pExchangeMarginRateField->ShortMarginRatioByMoney = pExchangeMarginRateField_ShortMarginRatioByMoney;
		pExchangeMarginRateField->ShortMarginRatioByVolume = pExchangeMarginRateField_ShortMarginRatioByVolume;
		if(pExchangeMarginRateField_ExchangeID != nullptr){ strcpy_s(pExchangeMarginRateField->ExchangeID, pExchangeMarginRateField_ExchangeID); pExchangeMarginRateField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeMarginRateField *pExchangeMarginRateField)
{
	if(pExchangeMarginRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c,s:d,s:d,s:d,s:d,s:y}"
		, "BrokerID", pExchangeMarginRateField->BrokerID
		, "InstrumentID", pExchangeMarginRateField->InstrumentID
		, "HedgeFlag", pExchangeMarginRateField->HedgeFlag
		, "LongMarginRatioByMoney", pExchangeMarginRateField->LongMarginRatioByMoney
		, "LongMarginRatioByVolume", pExchangeMarginRateField->LongMarginRatioByVolume
		, "ShortMarginRatioByMoney", pExchangeMarginRateField->ShortMarginRatioByMoney
		, "ShortMarginRatioByVolume", pExchangeMarginRateField->ShortMarginRatioByVolume
		, "ExchangeID", pExchangeMarginRateField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeMarginRateAdjustField *pExchangeMarginRateAdjustField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InstrumentID", "HedgeFlag", "LongMarginRatioByMoney", "LongMarginRatioByVolume", "ShortMarginRatioByMoney", "ShortMarginRatioByVolume", "ExchLongMarginRatioByMoney", "ExchLongMarginRatioByVolume", "ExchShortMarginRatioByMoney", "ExchShortMarginRatioByVolume", "NoLongMarginRatioByMoney", "NoLongMarginRatioByVolume", "NoShortMarginRatioByMoney", "NoShortMarginRatioByVolume", nullptr};
	char *pExchangeMarginRateAdjustField_BrokerID = nullptr;
	char *pExchangeMarginRateAdjustField_InstrumentID = nullptr;
	char pExchangeMarginRateAdjustField_HedgeFlag = 0;
	double pExchangeMarginRateAdjustField_LongMarginRatioByMoney = 0.0;
	double pExchangeMarginRateAdjustField_LongMarginRatioByVolume = 0.0;
	double pExchangeMarginRateAdjustField_ShortMarginRatioByMoney = 0.0;
	double pExchangeMarginRateAdjustField_ShortMarginRatioByVolume = 0.0;
	double pExchangeMarginRateAdjustField_ExchLongMarginRatioByMoney = 0.0;
	double pExchangeMarginRateAdjustField_ExchLongMarginRatioByVolume = 0.0;
	double pExchangeMarginRateAdjustField_ExchShortMarginRatioByMoney = 0.0;
	double pExchangeMarginRateAdjustField_ExchShortMarginRatioByVolume = 0.0;
	double pExchangeMarginRateAdjustField_NoLongMarginRatioByMoney = 0.0;
	double pExchangeMarginRateAdjustField_NoLongMarginRatioByVolume = 0.0;
	double pExchangeMarginRateAdjustField_NoShortMarginRatioByMoney = 0.0;
	double pExchangeMarginRateAdjustField_NoShortMarginRatioByVolume = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeMarginRateAdjustField, "|yycdddddddddddd")
		, &pExchangeMarginRateAdjustField_BrokerID
		, &pExchangeMarginRateAdjustField_InstrumentID
		, &pExchangeMarginRateAdjustField_HedgeFlag
		, &pExchangeMarginRateAdjustField_LongMarginRatioByMoney
		, &pExchangeMarginRateAdjustField_LongMarginRatioByVolume
		, &pExchangeMarginRateAdjustField_ShortMarginRatioByMoney
		, &pExchangeMarginRateAdjustField_ShortMarginRatioByVolume
		, &pExchangeMarginRateAdjustField_ExchLongMarginRatioByMoney
		, &pExchangeMarginRateAdjustField_ExchLongMarginRatioByVolume
		, &pExchangeMarginRateAdjustField_ExchShortMarginRatioByMoney
		, &pExchangeMarginRateAdjustField_ExchShortMarginRatioByVolume
		, &pExchangeMarginRateAdjustField_NoLongMarginRatioByMoney
		, &pExchangeMarginRateAdjustField_NoLongMarginRatioByVolume
		, &pExchangeMarginRateAdjustField_NoShortMarginRatioByMoney
		, &pExchangeMarginRateAdjustField_NoShortMarginRatioByVolume
	PyCTP_PyDict_FromStruct_END
		if(pExchangeMarginRateAdjustField_BrokerID != nullptr){ strcpy_s(pExchangeMarginRateAdjustField->BrokerID, pExchangeMarginRateAdjustField_BrokerID); pExchangeMarginRateAdjustField_BrokerID = nullptr; }
		if(pExchangeMarginRateAdjustField_InstrumentID != nullptr){ strcpy_s(pExchangeMarginRateAdjustField->InstrumentID, pExchangeMarginRateAdjustField_InstrumentID); pExchangeMarginRateAdjustField_InstrumentID = nullptr; }
		pExchangeMarginRateAdjustField->HedgeFlag = pExchangeMarginRateAdjustField_HedgeFlag;
		pExchangeMarginRateAdjustField->LongMarginRatioByMoney = pExchangeMarginRateAdjustField_LongMarginRatioByMoney;
		pExchangeMarginRateAdjustField->LongMarginRatioByVolume = pExchangeMarginRateAdjustField_LongMarginRatioByVolume;
		pExchangeMarginRateAdjustField->ShortMarginRatioByMoney = pExchangeMarginRateAdjustField_ShortMarginRatioByMoney;
		pExchangeMarginRateAdjustField->ShortMarginRatioByVolume = pExchangeMarginRateAdjustField_ShortMarginRatioByVolume;
		pExchangeMarginRateAdjustField->ExchLongMarginRatioByMoney = pExchangeMarginRateAdjustField_ExchLongMarginRatioByMoney;
		pExchangeMarginRateAdjustField->ExchLongMarginRatioByVolume = pExchangeMarginRateAdjustField_ExchLongMarginRatioByVolume;
		pExchangeMarginRateAdjustField->ExchShortMarginRatioByMoney = pExchangeMarginRateAdjustField_ExchShortMarginRatioByMoney;
		pExchangeMarginRateAdjustField->ExchShortMarginRatioByVolume = pExchangeMarginRateAdjustField_ExchShortMarginRatioByVolume;
		pExchangeMarginRateAdjustField->NoLongMarginRatioByMoney = pExchangeMarginRateAdjustField_NoLongMarginRatioByMoney;
		pExchangeMarginRateAdjustField->NoLongMarginRatioByVolume = pExchangeMarginRateAdjustField_NoLongMarginRatioByVolume;
		pExchangeMarginRateAdjustField->NoShortMarginRatioByMoney = pExchangeMarginRateAdjustField_NoShortMarginRatioByMoney;
		pExchangeMarginRateAdjustField->NoShortMarginRatioByVolume = pExchangeMarginRateAdjustField_NoShortMarginRatioByVolume;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeMarginRateAdjustField *pExchangeMarginRateAdjustField)
{
	if(pExchangeMarginRateAdjustField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d}"
		, "BrokerID", pExchangeMarginRateAdjustField->BrokerID
		, "InstrumentID", pExchangeMarginRateAdjustField->InstrumentID
		, "HedgeFlag", pExchangeMarginRateAdjustField->HedgeFlag
		, "LongMarginRatioByMoney", pExchangeMarginRateAdjustField->LongMarginRatioByMoney
		, "LongMarginRatioByVolume", pExchangeMarginRateAdjustField->LongMarginRatioByVolume
		, "ShortMarginRatioByMoney", pExchangeMarginRateAdjustField->ShortMarginRatioByMoney
		, "ShortMarginRatioByVolume", pExchangeMarginRateAdjustField->ShortMarginRatioByVolume
		, "ExchLongMarginRatioByMoney", pExchangeMarginRateAdjustField->ExchLongMarginRatioByMoney
		, "ExchLongMarginRatioByVolume", pExchangeMarginRateAdjustField->ExchLongMarginRatioByVolume
		, "ExchShortMarginRatioByMoney", pExchangeMarginRateAdjustField->ExchShortMarginRatioByMoney
		, "ExchShortMarginRatioByVolume", pExchangeMarginRateAdjustField->ExchShortMarginRatioByVolume
		, "NoLongMarginRatioByMoney", pExchangeMarginRateAdjustField->NoLongMarginRatioByMoney
		, "NoLongMarginRatioByVolume", pExchangeMarginRateAdjustField->NoLongMarginRatioByVolume
		, "NoShortMarginRatioByMoney", pExchangeMarginRateAdjustField->NoShortMarginRatioByMoney
		, "NoShortMarginRatioByVolume", pExchangeMarginRateAdjustField->NoShortMarginRatioByVolume
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeRateField *pExchangeRateField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "FromCurrencyID", "FromCurrencyUnit", "ToCurrencyID", "ExchangeRate", nullptr};
	char *pExchangeRateField_BrokerID = nullptr;
	char *pExchangeRateField_FromCurrencyID = nullptr;
	double pExchangeRateField_FromCurrencyUnit = 0.0;
	char *pExchangeRateField_ToCurrencyID = nullptr;
	double pExchangeRateField_ExchangeRate = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeRateField, "|yydyd")
		, &pExchangeRateField_BrokerID
		, &pExchangeRateField_FromCurrencyID
		, &pExchangeRateField_FromCurrencyUnit
		, &pExchangeRateField_ToCurrencyID
		, &pExchangeRateField_ExchangeRate
	PyCTP_PyDict_FromStruct_END
		if(pExchangeRateField_BrokerID != nullptr){ strcpy_s(pExchangeRateField->BrokerID, pExchangeRateField_BrokerID); pExchangeRateField_BrokerID = nullptr; }
		if(pExchangeRateField_FromCurrencyID != nullptr){ strcpy_s(pExchangeRateField->FromCurrencyID, pExchangeRateField_FromCurrencyID); pExchangeRateField_FromCurrencyID = nullptr; }
		pExchangeRateField->FromCurrencyUnit = pExchangeRateField_FromCurrencyUnit;
		if(pExchangeRateField_ToCurrencyID != nullptr){ strcpy_s(pExchangeRateField->ToCurrencyID, pExchangeRateField_ToCurrencyID); pExchangeRateField_ToCurrencyID = nullptr; }
		pExchangeRateField->ExchangeRate = pExchangeRateField_ExchangeRate;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeRateField *pExchangeRateField)
{
	if(pExchangeRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:d,s:y,s:d}"
		, "BrokerID", pExchangeRateField->BrokerID
		, "FromCurrencyID", pExchangeRateField->FromCurrencyID
		, "FromCurrencyUnit", pExchangeRateField->FromCurrencyUnit
		, "ToCurrencyID", pExchangeRateField->ToCurrencyID
		, "ExchangeRate", pExchangeRateField->ExchangeRate
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSettlementRefField *pSettlementRefField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "SettlementID", nullptr};
	char *pSettlementRefField_TradingDay = nullptr;
	int pSettlementRefField_SettlementID = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pSettlementRefField, "|yi")
		, &pSettlementRefField_TradingDay
		, &pSettlementRefField_SettlementID
	PyCTP_PyDict_FromStruct_END
		if(pSettlementRefField_TradingDay != nullptr){ strcpy_s(pSettlementRefField->TradingDay, pSettlementRefField_TradingDay); pSettlementRefField_TradingDay = nullptr; }
		pSettlementRefField->SettlementID = pSettlementRefField_SettlementID;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSettlementRefField *pSettlementRefField)
{
	if(pSettlementRefField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:i}"
		, "TradingDay", pSettlementRefField->TradingDay
		, "SettlementID", pSettlementRefField->SettlementID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcCurrentTimeField *pCurrentTimeField, PyObject *dict)
{
	static char *kwlist[] = {"CurrDate", "CurrTime", "CurrMillisec", "ActionDay", nullptr};
	char *pCurrentTimeField_CurrDate = nullptr;
	char *pCurrentTimeField_CurrTime = nullptr;
	int pCurrentTimeField_CurrMillisec = 0;
	char *pCurrentTimeField_ActionDay = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pCurrentTimeField, "|yyiy")
		, &pCurrentTimeField_CurrDate
		, &pCurrentTimeField_CurrTime
		, &pCurrentTimeField_CurrMillisec
		, &pCurrentTimeField_ActionDay
	PyCTP_PyDict_FromStruct_END
		if(pCurrentTimeField_CurrDate != nullptr){ strcpy_s(pCurrentTimeField->CurrDate, pCurrentTimeField_CurrDate); pCurrentTimeField_CurrDate = nullptr; }
		if(pCurrentTimeField_CurrTime != nullptr){ strcpy_s(pCurrentTimeField->CurrTime, pCurrentTimeField_CurrTime); pCurrentTimeField_CurrTime = nullptr; }
		pCurrentTimeField->CurrMillisec = pCurrentTimeField_CurrMillisec;
		if(pCurrentTimeField_ActionDay != nullptr){ strcpy_s(pCurrentTimeField->ActionDay, pCurrentTimeField_ActionDay); pCurrentTimeField_ActionDay = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcCurrentTimeField *pCurrentTimeField)
{
	if(pCurrentTimeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i,s:y}"
		, "CurrDate", pCurrentTimeField->CurrDate
		, "CurrTime", pCurrentTimeField->CurrTime
		, "CurrMillisec", pCurrentTimeField->CurrMillisec
		, "ActionDay", pCurrentTimeField->ActionDay
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcCommPhaseField *pCommPhaseField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "CommPhaseNo", "SystemID", nullptr};
	char *pCommPhaseField_TradingDay = nullptr;
	short pCommPhaseField_CommPhaseNo = 0;
	char *pCommPhaseField_SystemID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pCommPhaseField, "|yhy")
		, &pCommPhaseField_TradingDay
		, &pCommPhaseField_CommPhaseNo
		, &pCommPhaseField_SystemID
	PyCTP_PyDict_FromStruct_END
		if(pCommPhaseField_TradingDay != nullptr){ strcpy_s(pCommPhaseField->TradingDay, pCommPhaseField_TradingDay); pCommPhaseField_TradingDay = nullptr; }
		pCommPhaseField->CommPhaseNo = pCommPhaseField_CommPhaseNo;
		if(pCommPhaseField_SystemID != nullptr){ strcpy_s(pCommPhaseField->SystemID, pCommPhaseField_SystemID); pCommPhaseField_SystemID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcCommPhaseField *pCommPhaseField)
{
	if(pCommPhaseField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:h,s:y}"
		, "TradingDay", pCommPhaseField->TradingDay
		, "CommPhaseNo", pCommPhaseField->CommPhaseNo
		, "SystemID", pCommPhaseField->SystemID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcLoginInfoField *pLoginInfoField, PyObject *dict)
{
	static char *kwlist[] = {"FrontID", "SessionID", "BrokerID", "UserID", "LoginDate", "LoginTime", "IPAddress", "UserProductInfo", "InterfaceProductInfo", "ProtocolInfo", "SystemName", "PasswordDeprecated", "MaxOrderRef", "SHFETime", "DCETime", "CZCETime", "FFEXTime", "MacAddress", "OneTimePassword", "INETime", "IsQryControl", "LoginRemark", "Password", nullptr};
	int pLoginInfoField_FrontID = 0;
	int pLoginInfoField_SessionID = 0;
	char *pLoginInfoField_BrokerID = nullptr;
	char *pLoginInfoField_UserID = nullptr;
	char *pLoginInfoField_LoginDate = nullptr;
	char *pLoginInfoField_LoginTime = nullptr;
	char *pLoginInfoField_IPAddress = nullptr;
	char *pLoginInfoField_UserProductInfo = nullptr;
	char *pLoginInfoField_InterfaceProductInfo = nullptr;
	char *pLoginInfoField_ProtocolInfo = nullptr;
	char *pLoginInfoField_SystemName = nullptr;
	char *pLoginInfoField_PasswordDeprecated = nullptr;
	char *pLoginInfoField_MaxOrderRef = nullptr;
	char *pLoginInfoField_SHFETime = nullptr;
	char *pLoginInfoField_DCETime = nullptr;
	char *pLoginInfoField_CZCETime = nullptr;
	char *pLoginInfoField_FFEXTime = nullptr;
	char *pLoginInfoField_MacAddress = nullptr;
	char *pLoginInfoField_OneTimePassword = nullptr;
	char *pLoginInfoField_INETime = nullptr;
	int pLoginInfoField_IsQryControl = 0;
	char *pLoginInfoField_LoginRemark = nullptr;
	char *pLoginInfoField_Password = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pLoginInfoField, "|iiyyyyyyyyyyyyyyyyyyiyy")
		, &pLoginInfoField_FrontID
		, &pLoginInfoField_SessionID
		, &pLoginInfoField_BrokerID
		, &pLoginInfoField_UserID
		, &pLoginInfoField_LoginDate
		, &pLoginInfoField_LoginTime
		, &pLoginInfoField_IPAddress
		, &pLoginInfoField_UserProductInfo
		, &pLoginInfoField_InterfaceProductInfo
		, &pLoginInfoField_ProtocolInfo
		, &pLoginInfoField_SystemName
		, &pLoginInfoField_PasswordDeprecated
		, &pLoginInfoField_MaxOrderRef
		, &pLoginInfoField_SHFETime
		, &pLoginInfoField_DCETime
		, &pLoginInfoField_CZCETime
		, &pLoginInfoField_FFEXTime
		, &pLoginInfoField_MacAddress
		, &pLoginInfoField_OneTimePassword
		, &pLoginInfoField_INETime
		, &pLoginInfoField_IsQryControl
		, &pLoginInfoField_LoginRemark
		, &pLoginInfoField_Password
	PyCTP_PyDict_FromStruct_END
		pLoginInfoField->FrontID = pLoginInfoField_FrontID;
		pLoginInfoField->SessionID = pLoginInfoField_SessionID;
		if(pLoginInfoField_BrokerID != nullptr){ strcpy_s(pLoginInfoField->BrokerID, pLoginInfoField_BrokerID); pLoginInfoField_BrokerID = nullptr; }
		if(pLoginInfoField_UserID != nullptr){ strcpy_s(pLoginInfoField->UserID, pLoginInfoField_UserID); pLoginInfoField_UserID = nullptr; }
		if(pLoginInfoField_LoginDate != nullptr){ strcpy_s(pLoginInfoField->LoginDate, pLoginInfoField_LoginDate); pLoginInfoField_LoginDate = nullptr; }
		if(pLoginInfoField_LoginTime != nullptr){ strcpy_s(pLoginInfoField->LoginTime, pLoginInfoField_LoginTime); pLoginInfoField_LoginTime = nullptr; }
		if(pLoginInfoField_IPAddress != nullptr){ strcpy_s(pLoginInfoField->IPAddress, pLoginInfoField_IPAddress); pLoginInfoField_IPAddress = nullptr; }
		if(pLoginInfoField_UserProductInfo != nullptr){ strcpy_s(pLoginInfoField->UserProductInfo, pLoginInfoField_UserProductInfo); pLoginInfoField_UserProductInfo = nullptr; }
		if(pLoginInfoField_InterfaceProductInfo != nullptr){ strcpy_s(pLoginInfoField->InterfaceProductInfo, pLoginInfoField_InterfaceProductInfo); pLoginInfoField_InterfaceProductInfo = nullptr; }
		if(pLoginInfoField_ProtocolInfo != nullptr){ strcpy_s(pLoginInfoField->ProtocolInfo, pLoginInfoField_ProtocolInfo); pLoginInfoField_ProtocolInfo = nullptr; }
		if(pLoginInfoField_SystemName != nullptr){ strcpy_s(pLoginInfoField->SystemName, pLoginInfoField_SystemName); pLoginInfoField_SystemName = nullptr; }
		if(pLoginInfoField_PasswordDeprecated != nullptr){ strcpy_s(pLoginInfoField->PasswordDeprecated, pLoginInfoField_PasswordDeprecated); pLoginInfoField_PasswordDeprecated = nullptr; }
		if(pLoginInfoField_MaxOrderRef != nullptr){ strcpy_s(pLoginInfoField->MaxOrderRef, pLoginInfoField_MaxOrderRef); pLoginInfoField_MaxOrderRef = nullptr; }
		if(pLoginInfoField_SHFETime != nullptr){ strcpy_s(pLoginInfoField->SHFETime, pLoginInfoField_SHFETime); pLoginInfoField_SHFETime = nullptr; }
		if(pLoginInfoField_DCETime != nullptr){ strcpy_s(pLoginInfoField->DCETime, pLoginInfoField_DCETime); pLoginInfoField_DCETime = nullptr; }
		if(pLoginInfoField_CZCETime != nullptr){ strcpy_s(pLoginInfoField->CZCETime, pLoginInfoField_CZCETime); pLoginInfoField_CZCETime = nullptr; }
		if(pLoginInfoField_FFEXTime != nullptr){ strcpy_s(pLoginInfoField->FFEXTime, pLoginInfoField_FFEXTime); pLoginInfoField_FFEXTime = nullptr; }
		if(pLoginInfoField_MacAddress != nullptr){ strcpy_s(pLoginInfoField->MacAddress, pLoginInfoField_MacAddress); pLoginInfoField_MacAddress = nullptr; }
		if(pLoginInfoField_OneTimePassword != nullptr){ strcpy_s(pLoginInfoField->OneTimePassword, pLoginInfoField_OneTimePassword); pLoginInfoField_OneTimePassword = nullptr; }
		if(pLoginInfoField_INETime != nullptr){ strcpy_s(pLoginInfoField->INETime, pLoginInfoField_INETime); pLoginInfoField_INETime = nullptr; }
		pLoginInfoField->IsQryControl = pLoginInfoField_IsQryControl;
		if(pLoginInfoField_LoginRemark != nullptr){ strcpy_s(pLoginInfoField->LoginRemark, pLoginInfoField_LoginRemark); pLoginInfoField_LoginRemark = nullptr; }
		if(pLoginInfoField_Password != nullptr){ strcpy_s(pLoginInfoField->Password, pLoginInfoField_Password); pLoginInfoField_Password = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcLoginInfoField *pLoginInfoField)
{
	if(pLoginInfoField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:y,s:y}"
		, "FrontID", pLoginInfoField->FrontID
		, "SessionID", pLoginInfoField->SessionID
		, "BrokerID", pLoginInfoField->BrokerID
		, "UserID", pLoginInfoField->UserID
		, "LoginDate", pLoginInfoField->LoginDate
		, "LoginTime", pLoginInfoField->LoginTime
		, "IPAddress", pLoginInfoField->IPAddress
		, "UserProductInfo", pLoginInfoField->UserProductInfo
		, "InterfaceProductInfo", pLoginInfoField->InterfaceProductInfo
		, "ProtocolInfo", pLoginInfoField->ProtocolInfo
		, "SystemName", pLoginInfoField->SystemName
		, "PasswordDeprecated", pLoginInfoField->PasswordDeprecated
		, "MaxOrderRef", pLoginInfoField->MaxOrderRef
		, "SHFETime", pLoginInfoField->SHFETime
		, "DCETime", pLoginInfoField->DCETime
		, "CZCETime", pLoginInfoField->CZCETime
		, "FFEXTime", pLoginInfoField->FFEXTime
		, "MacAddress", pLoginInfoField->MacAddress
		, "OneTimePassword", pLoginInfoField->OneTimePassword
		, "INETime", pLoginInfoField->INETime
		, "IsQryControl", pLoginInfoField->IsQryControl
		, "LoginRemark", pLoginInfoField->LoginRemark
		, "Password", pLoginInfoField->Password
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcLogoutAllField *pLogoutAllField, PyObject *dict)
{
	static char *kwlist[] = {"FrontID", "SessionID", "SystemName", nullptr};
	int pLogoutAllField_FrontID = 0;
	int pLogoutAllField_SessionID = 0;
	char *pLogoutAllField_SystemName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pLogoutAllField, "|iiy")
		, &pLogoutAllField_FrontID
		, &pLogoutAllField_SessionID
		, &pLogoutAllField_SystemName
	PyCTP_PyDict_FromStruct_END
		pLogoutAllField->FrontID = pLogoutAllField_FrontID;
		pLogoutAllField->SessionID = pLogoutAllField_SessionID;
		if(pLogoutAllField_SystemName != nullptr){ strcpy_s(pLogoutAllField->SystemName, pLogoutAllField_SystemName); pLogoutAllField_SystemName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcLogoutAllField *pLogoutAllField)
{
	if(pLogoutAllField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i,s:i,s:y}"
		, "FrontID", pLogoutAllField->FrontID
		, "SessionID", pLogoutAllField->SessionID
		, "SystemName", pLogoutAllField->SystemName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcFrontStatusField *pFrontStatusField, PyObject *dict)
{
	static char *kwlist[] = {"FrontID", "LastReportDate", "LastReportTime", "IsActive", nullptr};
	int pFrontStatusField_FrontID = 0;
	char *pFrontStatusField_LastReportDate = nullptr;
	char *pFrontStatusField_LastReportTime = nullptr;
	int pFrontStatusField_IsActive = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pFrontStatusField, "|iyyi")
		, &pFrontStatusField_FrontID
		, &pFrontStatusField_LastReportDate
		, &pFrontStatusField_LastReportTime
		, &pFrontStatusField_IsActive
	PyCTP_PyDict_FromStruct_END
		pFrontStatusField->FrontID = pFrontStatusField_FrontID;
		if(pFrontStatusField_LastReportDate != nullptr){ strcpy_s(pFrontStatusField->LastReportDate, pFrontStatusField_LastReportDate); pFrontStatusField_LastReportDate = nullptr; }
		if(pFrontStatusField_LastReportTime != nullptr){ strcpy_s(pFrontStatusField->LastReportTime, pFrontStatusField_LastReportTime); pFrontStatusField_LastReportTime = nullptr; }
		pFrontStatusField->IsActive = pFrontStatusField_IsActive;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcFrontStatusField *pFrontStatusField)
{
	if(pFrontStatusField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i,s:y,s:y,s:i}"
		, "FrontID", pFrontStatusField->FrontID
		, "LastReportDate", pFrontStatusField->LastReportDate
		, "LastReportTime", pFrontStatusField->LastReportTime
		, "IsActive", pFrontStatusField->IsActive
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcUserPasswordUpdateField *pUserPasswordUpdateField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "OldPassword", "NewPassword", nullptr};
	char *pUserPasswordUpdateField_BrokerID = nullptr;
	char *pUserPasswordUpdateField_UserID = nullptr;
	char *pUserPasswordUpdateField_OldPassword = nullptr;
	char *pUserPasswordUpdateField_NewPassword = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pUserPasswordUpdateField, "|yyyy")
		, &pUserPasswordUpdateField_BrokerID
		, &pUserPasswordUpdateField_UserID
		, &pUserPasswordUpdateField_OldPassword
		, &pUserPasswordUpdateField_NewPassword
	PyCTP_PyDict_FromStruct_END
		if(pUserPasswordUpdateField_BrokerID != nullptr){ strcpy_s(pUserPasswordUpdateField->BrokerID, pUserPasswordUpdateField_BrokerID); pUserPasswordUpdateField_BrokerID = nullptr; }
		if(pUserPasswordUpdateField_UserID != nullptr){ strcpy_s(pUserPasswordUpdateField->UserID, pUserPasswordUpdateField_UserID); pUserPasswordUpdateField_UserID = nullptr; }
		if(pUserPasswordUpdateField_OldPassword != nullptr){ strcpy_s(pUserPasswordUpdateField->OldPassword, pUserPasswordUpdateField_OldPassword); pUserPasswordUpdateField_OldPassword = nullptr; }
		if(pUserPasswordUpdateField_NewPassword != nullptr){ strcpy_s(pUserPasswordUpdateField->NewPassword, pUserPasswordUpdateField_NewPassword); pUserPasswordUpdateField_NewPassword = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcUserPasswordUpdateField *pUserPasswordUpdateField)
{
	if(pUserPasswordUpdateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y}"
		, "BrokerID", pUserPasswordUpdateField->BrokerID
		, "UserID", pUserPasswordUpdateField->UserID
		, "OldPassword", pUserPasswordUpdateField->OldPassword
		, "NewPassword", pUserPasswordUpdateField->NewPassword
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInputOrderField *pInputOrderField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "OrderRef", "UserID", "OrderPriceType", "Direction", "CombOffsetFlag", "CombHedgeFlag", "LimitPrice", "VolumeTotalOriginal", "TimeCondition", "GTDDate", "VolumeCondition", "MinVolume", "ContingentCondition", "StopPrice", "ForceCloseReason", "IsAutoSuspend", "BusinessUnit", "RequestID", "UserForceClose", "IsSwapOrder", "ExchangeID", "InvestUnitID", "AccountID", "CurrencyID", "ClientID", "IPAddress", "MacAddress", nullptr};
	char *pInputOrderField_BrokerID = nullptr;
	char *pInputOrderField_InvestorID = nullptr;
	char *pInputOrderField_InstrumentID = nullptr;
	char *pInputOrderField_OrderRef = nullptr;
	char *pInputOrderField_UserID = nullptr;
	char pInputOrderField_OrderPriceType = 0;
	char pInputOrderField_Direction = 0;
	char *pInputOrderField_CombOffsetFlag = nullptr;
	char *pInputOrderField_CombHedgeFlag = nullptr;
	double pInputOrderField_LimitPrice = 0.0;
	int pInputOrderField_VolumeTotalOriginal = 0;
	char pInputOrderField_TimeCondition = 0;
	char *pInputOrderField_GTDDate = nullptr;
	char pInputOrderField_VolumeCondition = 0;
	int pInputOrderField_MinVolume = 0;
	char pInputOrderField_ContingentCondition = 0;
	double pInputOrderField_StopPrice = 0.0;
	char pInputOrderField_ForceCloseReason = 0;
	int pInputOrderField_IsAutoSuspend = 0;
	char *pInputOrderField_BusinessUnit = nullptr;
	int pInputOrderField_RequestID = 0;
	int pInputOrderField_UserForceClose = 0;
	int pInputOrderField_IsSwapOrder = 0;
	char *pInputOrderField_ExchangeID = nullptr;
	char *pInputOrderField_InvestUnitID = nullptr;
	char *pInputOrderField_AccountID = nullptr;
	char *pInputOrderField_CurrencyID = nullptr;
	char *pInputOrderField_ClientID = nullptr;
	char *pInputOrderField_IPAddress = nullptr;
	char *pInputOrderField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInputOrderField, "|yyyyyccyydicycicdciyiiiyyyyyyy")
		, &pInputOrderField_BrokerID
		, &pInputOrderField_InvestorID
		, &pInputOrderField_InstrumentID
		, &pInputOrderField_OrderRef
		, &pInputOrderField_UserID
		, &pInputOrderField_OrderPriceType
		, &pInputOrderField_Direction
		, &pInputOrderField_CombOffsetFlag
		, &pInputOrderField_CombHedgeFlag
		, &pInputOrderField_LimitPrice
		, &pInputOrderField_VolumeTotalOriginal
		, &pInputOrderField_TimeCondition
		, &pInputOrderField_GTDDate
		, &pInputOrderField_VolumeCondition
		, &pInputOrderField_MinVolume
		, &pInputOrderField_ContingentCondition
		, &pInputOrderField_StopPrice
		, &pInputOrderField_ForceCloseReason
		, &pInputOrderField_IsAutoSuspend
		, &pInputOrderField_BusinessUnit
		, &pInputOrderField_RequestID
		, &pInputOrderField_UserForceClose
		, &pInputOrderField_IsSwapOrder
		, &pInputOrderField_ExchangeID
		, &pInputOrderField_InvestUnitID
		, &pInputOrderField_AccountID
		, &pInputOrderField_CurrencyID
		, &pInputOrderField_ClientID
		, &pInputOrderField_IPAddress
		, &pInputOrderField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pInputOrderField_BrokerID != nullptr){ strcpy_s(pInputOrderField->BrokerID, pInputOrderField_BrokerID); pInputOrderField_BrokerID = nullptr; }
		if(pInputOrderField_InvestorID != nullptr){ strcpy_s(pInputOrderField->InvestorID, pInputOrderField_InvestorID); pInputOrderField_InvestorID = nullptr; }
		if(pInputOrderField_InstrumentID != nullptr){ strcpy_s(pInputOrderField->InstrumentID, pInputOrderField_InstrumentID); pInputOrderField_InstrumentID = nullptr; }
		if(pInputOrderField_OrderRef != nullptr){ strcpy_s(pInputOrderField->OrderRef, pInputOrderField_OrderRef); pInputOrderField_OrderRef = nullptr; }
		if(pInputOrderField_UserID != nullptr){ strcpy_s(pInputOrderField->UserID, pInputOrderField_UserID); pInputOrderField_UserID = nullptr; }
		pInputOrderField->OrderPriceType = pInputOrderField_OrderPriceType;
		pInputOrderField->Direction = pInputOrderField_Direction;
		if(pInputOrderField_CombOffsetFlag != nullptr){ strcpy_s(pInputOrderField->CombOffsetFlag, pInputOrderField_CombOffsetFlag); pInputOrderField_CombOffsetFlag = nullptr; }
		if(pInputOrderField_CombHedgeFlag != nullptr){ strcpy_s(pInputOrderField->CombHedgeFlag, pInputOrderField_CombHedgeFlag); pInputOrderField_CombHedgeFlag = nullptr; }
		pInputOrderField->LimitPrice = pInputOrderField_LimitPrice;
		pInputOrderField->VolumeTotalOriginal = pInputOrderField_VolumeTotalOriginal;
		pInputOrderField->TimeCondition = pInputOrderField_TimeCondition;
		if(pInputOrderField_GTDDate != nullptr){ strcpy_s(pInputOrderField->GTDDate, pInputOrderField_GTDDate); pInputOrderField_GTDDate = nullptr; }
		pInputOrderField->VolumeCondition = pInputOrderField_VolumeCondition;
		pInputOrderField->MinVolume = pInputOrderField_MinVolume;
		pInputOrderField->ContingentCondition = pInputOrderField_ContingentCondition;
		pInputOrderField->StopPrice = pInputOrderField_StopPrice;
		pInputOrderField->ForceCloseReason = pInputOrderField_ForceCloseReason;
		pInputOrderField->IsAutoSuspend = pInputOrderField_IsAutoSuspend;
		if(pInputOrderField_BusinessUnit != nullptr){ strcpy_s(pInputOrderField->BusinessUnit, pInputOrderField_BusinessUnit); pInputOrderField_BusinessUnit = nullptr; }
		pInputOrderField->RequestID = pInputOrderField_RequestID;
		pInputOrderField->UserForceClose = pInputOrderField_UserForceClose;
		pInputOrderField->IsSwapOrder = pInputOrderField_IsSwapOrder;
		if(pInputOrderField_ExchangeID != nullptr){ strcpy_s(pInputOrderField->ExchangeID, pInputOrderField_ExchangeID); pInputOrderField_ExchangeID = nullptr; }
		if(pInputOrderField_InvestUnitID != nullptr){ strcpy_s(pInputOrderField->InvestUnitID, pInputOrderField_InvestUnitID); pInputOrderField_InvestUnitID = nullptr; }
		if(pInputOrderField_AccountID != nullptr){ strcpy_s(pInputOrderField->AccountID, pInputOrderField_AccountID); pInputOrderField_AccountID = nullptr; }
		if(pInputOrderField_CurrencyID != nullptr){ strcpy_s(pInputOrderField->CurrencyID, pInputOrderField_CurrencyID); pInputOrderField_CurrencyID = nullptr; }
		if(pInputOrderField_ClientID != nullptr){ strcpy_s(pInputOrderField->ClientID, pInputOrderField_ClientID); pInputOrderField_ClientID = nullptr; }
		if(pInputOrderField_IPAddress != nullptr){ strcpy_s(pInputOrderField->IPAddress, pInputOrderField_IPAddress); pInputOrderField_IPAddress = nullptr; }
		if(pInputOrderField_MacAddress != nullptr){ strcpy_s(pInputOrderField->MacAddress, pInputOrderField_MacAddress); pInputOrderField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInputOrderField *pInputOrderField)
{
	if(pInputOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:c,s:c,s:y,s:y,s:d,s:i,s:c,s:y,s:c,s:i,s:c,s:d,s:c,s:i,s:y,s:i,s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pInputOrderField->BrokerID
		, "InvestorID", pInputOrderField->InvestorID
		, "InstrumentID", pInputOrderField->InstrumentID
		, "OrderRef", pInputOrderField->OrderRef
		, "UserID", pInputOrderField->UserID
		, "OrderPriceType", pInputOrderField->OrderPriceType
		, "Direction", pInputOrderField->Direction
		, "CombOffsetFlag", pInputOrderField->CombOffsetFlag
		, "CombHedgeFlag", pInputOrderField->CombHedgeFlag
		, "LimitPrice", pInputOrderField->LimitPrice
		, "VolumeTotalOriginal", pInputOrderField->VolumeTotalOriginal
		, "TimeCondition", pInputOrderField->TimeCondition
		, "GTDDate", pInputOrderField->GTDDate
		, "VolumeCondition", pInputOrderField->VolumeCondition
		, "MinVolume", pInputOrderField->MinVolume
		, "ContingentCondition", pInputOrderField->ContingentCondition
		, "StopPrice", pInputOrderField->StopPrice
		, "ForceCloseReason", pInputOrderField->ForceCloseReason
		, "IsAutoSuspend", pInputOrderField->IsAutoSuspend
		, "BusinessUnit", pInputOrderField->BusinessUnit
		, "RequestID", pInputOrderField->RequestID
		, "UserForceClose", pInputOrderField->UserForceClose
		, "IsSwapOrder", pInputOrderField->IsSwapOrder
		, "ExchangeID", pInputOrderField->ExchangeID
		, "InvestUnitID", pInputOrderField->InvestUnitID
		, "AccountID", pInputOrderField->AccountID
		, "CurrencyID", pInputOrderField->CurrencyID
		, "ClientID", pInputOrderField->ClientID
		, "IPAddress", pInputOrderField->IPAddress
		, "MacAddress", pInputOrderField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcOrderField *pOrderField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "OrderRef", "UserID", "OrderPriceType", "Direction", "CombOffsetFlag", "CombHedgeFlag", "LimitPrice", "VolumeTotalOriginal", "TimeCondition", "GTDDate", "VolumeCondition", "MinVolume", "ContingentCondition", "StopPrice", "ForceCloseReason", "IsAutoSuspend", "BusinessUnit", "RequestID", "OrderLocalID", "ExchangeID", "ParticipantID", "ClientID", "ExchangeInstID", "TraderID", "InstallID", "OrderSubmitStatus", "NotifySequence", "TradingDay", "SettlementID", "OrderSysID", "OrderSource", "OrderStatus", "OrderType", "VolumeTraded", "VolumeTotal", "InsertDate", "InsertTime", "ActiveTime", "SuspendTime", "UpdateTime", "CancelTime", "ActiveTraderID", "ClearingPartID", "SequenceNo", "FrontID", "SessionID", "UserProductInfo", "StatusMsg", "UserForceClose", "ActiveUserID", "BrokerOrderSeq", "RelativeOrderSysID", "ZCETotalTradedVolume", "IsSwapOrder", "BranchID", "InvestUnitID", "AccountID", "CurrencyID", "IPAddress", "MacAddress", nullptr};
	char *pOrderField_BrokerID = nullptr;
	char *pOrderField_InvestorID = nullptr;
	char *pOrderField_InstrumentID = nullptr;
	char *pOrderField_OrderRef = nullptr;
	char *pOrderField_UserID = nullptr;
	char pOrderField_OrderPriceType = 0;
	char pOrderField_Direction = 0;
	char *pOrderField_CombOffsetFlag = nullptr;
	char *pOrderField_CombHedgeFlag = nullptr;
	double pOrderField_LimitPrice = 0.0;
	int pOrderField_VolumeTotalOriginal = 0;
	char pOrderField_TimeCondition = 0;
	char *pOrderField_GTDDate = nullptr;
	char pOrderField_VolumeCondition = 0;
	int pOrderField_MinVolume = 0;
	char pOrderField_ContingentCondition = 0;
	double pOrderField_StopPrice = 0.0;
	char pOrderField_ForceCloseReason = 0;
	int pOrderField_IsAutoSuspend = 0;
	char *pOrderField_BusinessUnit = nullptr;
	int pOrderField_RequestID = 0;
	char *pOrderField_OrderLocalID = nullptr;
	char *pOrderField_ExchangeID = nullptr;
	char *pOrderField_ParticipantID = nullptr;
	char *pOrderField_ClientID = nullptr;
	char *pOrderField_ExchangeInstID = nullptr;
	char *pOrderField_TraderID = nullptr;
	int pOrderField_InstallID = 0;
	char pOrderField_OrderSubmitStatus = 0;
	int pOrderField_NotifySequence = 0;
	char *pOrderField_TradingDay = nullptr;
	int pOrderField_SettlementID = 0;
	char *pOrderField_OrderSysID = nullptr;
	char pOrderField_OrderSource = 0;
	char pOrderField_OrderStatus = 0;
	char pOrderField_OrderType = 0;
	int pOrderField_VolumeTraded = 0;
	int pOrderField_VolumeTotal = 0;
	char *pOrderField_InsertDate = nullptr;
	char *pOrderField_InsertTime = nullptr;
	char *pOrderField_ActiveTime = nullptr;
	char *pOrderField_SuspendTime = nullptr;
	char *pOrderField_UpdateTime = nullptr;
	char *pOrderField_CancelTime = nullptr;
	char *pOrderField_ActiveTraderID = nullptr;
	char *pOrderField_ClearingPartID = nullptr;
	int pOrderField_SequenceNo = 0;
	int pOrderField_FrontID = 0;
	int pOrderField_SessionID = 0;
	char *pOrderField_UserProductInfo = nullptr;
	char *pOrderField_StatusMsg = nullptr;
	int pOrderField_UserForceClose = 0;
	char *pOrderField_ActiveUserID = nullptr;
	int pOrderField_BrokerOrderSeq = 0;
	char *pOrderField_RelativeOrderSysID = nullptr;
	int pOrderField_ZCETotalTradedVolume = 0;
	int pOrderField_IsSwapOrder = 0;
	char *pOrderField_BranchID = nullptr;
	char *pOrderField_InvestUnitID = nullptr;
	char *pOrderField_AccountID = nullptr;
	char *pOrderField_CurrencyID = nullptr;
	char *pOrderField_IPAddress = nullptr;
	char *pOrderField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pOrderField, "|yyyyyccyydicycicdciyiyyyyyyiciyiyccciiyyyyyyyyiiiyyiyiyiiyyyyyy")
		, &pOrderField_BrokerID
		, &pOrderField_InvestorID
		, &pOrderField_InstrumentID
		, &pOrderField_OrderRef
		, &pOrderField_UserID
		, &pOrderField_OrderPriceType
		, &pOrderField_Direction
		, &pOrderField_CombOffsetFlag
		, &pOrderField_CombHedgeFlag
		, &pOrderField_LimitPrice
		, &pOrderField_VolumeTotalOriginal
		, &pOrderField_TimeCondition
		, &pOrderField_GTDDate
		, &pOrderField_VolumeCondition
		, &pOrderField_MinVolume
		, &pOrderField_ContingentCondition
		, &pOrderField_StopPrice
		, &pOrderField_ForceCloseReason
		, &pOrderField_IsAutoSuspend
		, &pOrderField_BusinessUnit
		, &pOrderField_RequestID
		, &pOrderField_OrderLocalID
		, &pOrderField_ExchangeID
		, &pOrderField_ParticipantID
		, &pOrderField_ClientID
		, &pOrderField_ExchangeInstID
		, &pOrderField_TraderID
		, &pOrderField_InstallID
		, &pOrderField_OrderSubmitStatus
		, &pOrderField_NotifySequence
		, &pOrderField_TradingDay
		, &pOrderField_SettlementID
		, &pOrderField_OrderSysID
		, &pOrderField_OrderSource
		, &pOrderField_OrderStatus
		, &pOrderField_OrderType
		, &pOrderField_VolumeTraded
		, &pOrderField_VolumeTotal
		, &pOrderField_InsertDate
		, &pOrderField_InsertTime
		, &pOrderField_ActiveTime
		, &pOrderField_SuspendTime
		, &pOrderField_UpdateTime
		, &pOrderField_CancelTime
		, &pOrderField_ActiveTraderID
		, &pOrderField_ClearingPartID
		, &pOrderField_SequenceNo
		, &pOrderField_FrontID
		, &pOrderField_SessionID
		, &pOrderField_UserProductInfo
		, &pOrderField_StatusMsg
		, &pOrderField_UserForceClose
		, &pOrderField_ActiveUserID
		, &pOrderField_BrokerOrderSeq
		, &pOrderField_RelativeOrderSysID
		, &pOrderField_ZCETotalTradedVolume
		, &pOrderField_IsSwapOrder
		, &pOrderField_BranchID
		, &pOrderField_InvestUnitID
		, &pOrderField_AccountID
		, &pOrderField_CurrencyID
		, &pOrderField_IPAddress
		, &pOrderField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pOrderField_BrokerID != nullptr){ strcpy_s(pOrderField->BrokerID, pOrderField_BrokerID); pOrderField_BrokerID = nullptr; }
		if(pOrderField_InvestorID != nullptr){ strcpy_s(pOrderField->InvestorID, pOrderField_InvestorID); pOrderField_InvestorID = nullptr; }
		if(pOrderField_InstrumentID != nullptr){ strcpy_s(pOrderField->InstrumentID, pOrderField_InstrumentID); pOrderField_InstrumentID = nullptr; }
		if(pOrderField_OrderRef != nullptr){ strcpy_s(pOrderField->OrderRef, pOrderField_OrderRef); pOrderField_OrderRef = nullptr; }
		if(pOrderField_UserID != nullptr){ strcpy_s(pOrderField->UserID, pOrderField_UserID); pOrderField_UserID = nullptr; }
		pOrderField->OrderPriceType = pOrderField_OrderPriceType;
		pOrderField->Direction = pOrderField_Direction;
		if(pOrderField_CombOffsetFlag != nullptr){ strcpy_s(pOrderField->CombOffsetFlag, pOrderField_CombOffsetFlag); pOrderField_CombOffsetFlag = nullptr; }
		if(pOrderField_CombHedgeFlag != nullptr){ strcpy_s(pOrderField->CombHedgeFlag, pOrderField_CombHedgeFlag); pOrderField_CombHedgeFlag = nullptr; }
		pOrderField->LimitPrice = pOrderField_LimitPrice;
		pOrderField->VolumeTotalOriginal = pOrderField_VolumeTotalOriginal;
		pOrderField->TimeCondition = pOrderField_TimeCondition;
		if(pOrderField_GTDDate != nullptr){ strcpy_s(pOrderField->GTDDate, pOrderField_GTDDate); pOrderField_GTDDate = nullptr; }
		pOrderField->VolumeCondition = pOrderField_VolumeCondition;
		pOrderField->MinVolume = pOrderField_MinVolume;
		pOrderField->ContingentCondition = pOrderField_ContingentCondition;
		pOrderField->StopPrice = pOrderField_StopPrice;
		pOrderField->ForceCloseReason = pOrderField_ForceCloseReason;
		pOrderField->IsAutoSuspend = pOrderField_IsAutoSuspend;
		if(pOrderField_BusinessUnit != nullptr){ strcpy_s(pOrderField->BusinessUnit, pOrderField_BusinessUnit); pOrderField_BusinessUnit = nullptr; }
		pOrderField->RequestID = pOrderField_RequestID;
		if(pOrderField_OrderLocalID != nullptr){ strcpy_s(pOrderField->OrderLocalID, pOrderField_OrderLocalID); pOrderField_OrderLocalID = nullptr; }
		if(pOrderField_ExchangeID != nullptr){ strcpy_s(pOrderField->ExchangeID, pOrderField_ExchangeID); pOrderField_ExchangeID = nullptr; }
		if(pOrderField_ParticipantID != nullptr){ strcpy_s(pOrderField->ParticipantID, pOrderField_ParticipantID); pOrderField_ParticipantID = nullptr; }
		if(pOrderField_ClientID != nullptr){ strcpy_s(pOrderField->ClientID, pOrderField_ClientID); pOrderField_ClientID = nullptr; }
		if(pOrderField_ExchangeInstID != nullptr){ strcpy_s(pOrderField->ExchangeInstID, pOrderField_ExchangeInstID); pOrderField_ExchangeInstID = nullptr; }
		if(pOrderField_TraderID != nullptr){ strcpy_s(pOrderField->TraderID, pOrderField_TraderID); pOrderField_TraderID = nullptr; }
		pOrderField->InstallID = pOrderField_InstallID;
		pOrderField->OrderSubmitStatus = pOrderField_OrderSubmitStatus;
		pOrderField->NotifySequence = pOrderField_NotifySequence;
		if(pOrderField_TradingDay != nullptr){ strcpy_s(pOrderField->TradingDay, pOrderField_TradingDay); pOrderField_TradingDay = nullptr; }
		pOrderField->SettlementID = pOrderField_SettlementID;
		if(pOrderField_OrderSysID != nullptr){ strcpy_s(pOrderField->OrderSysID, pOrderField_OrderSysID); pOrderField_OrderSysID = nullptr; }
		pOrderField->OrderSource = pOrderField_OrderSource;
		pOrderField->OrderStatus = pOrderField_OrderStatus;
		pOrderField->OrderType = pOrderField_OrderType;
		pOrderField->VolumeTraded = pOrderField_VolumeTraded;
		pOrderField->VolumeTotal = pOrderField_VolumeTotal;
		if(pOrderField_InsertDate != nullptr){ strcpy_s(pOrderField->InsertDate, pOrderField_InsertDate); pOrderField_InsertDate = nullptr; }
		if(pOrderField_InsertTime != nullptr){ strcpy_s(pOrderField->InsertTime, pOrderField_InsertTime); pOrderField_InsertTime = nullptr; }
		if(pOrderField_ActiveTime != nullptr){ strcpy_s(pOrderField->ActiveTime, pOrderField_ActiveTime); pOrderField_ActiveTime = nullptr; }
		if(pOrderField_SuspendTime != nullptr){ strcpy_s(pOrderField->SuspendTime, pOrderField_SuspendTime); pOrderField_SuspendTime = nullptr; }
		if(pOrderField_UpdateTime != nullptr){ strcpy_s(pOrderField->UpdateTime, pOrderField_UpdateTime); pOrderField_UpdateTime = nullptr; }
		if(pOrderField_CancelTime != nullptr){ strcpy_s(pOrderField->CancelTime, pOrderField_CancelTime); pOrderField_CancelTime = nullptr; }
		if(pOrderField_ActiveTraderID != nullptr){ strcpy_s(pOrderField->ActiveTraderID, pOrderField_ActiveTraderID); pOrderField_ActiveTraderID = nullptr; }
		if(pOrderField_ClearingPartID != nullptr){ strcpy_s(pOrderField->ClearingPartID, pOrderField_ClearingPartID); pOrderField_ClearingPartID = nullptr; }
		pOrderField->SequenceNo = pOrderField_SequenceNo;
		pOrderField->FrontID = pOrderField_FrontID;
		pOrderField->SessionID = pOrderField_SessionID;
		if(pOrderField_UserProductInfo != nullptr){ strcpy_s(pOrderField->UserProductInfo, pOrderField_UserProductInfo); pOrderField_UserProductInfo = nullptr; }
		if(pOrderField_StatusMsg != nullptr){ strcpy_s(pOrderField->StatusMsg, pOrderField_StatusMsg); pOrderField_StatusMsg = nullptr; }
		pOrderField->UserForceClose = pOrderField_UserForceClose;
		if(pOrderField_ActiveUserID != nullptr){ strcpy_s(pOrderField->ActiveUserID, pOrderField_ActiveUserID); pOrderField_ActiveUserID = nullptr; }
		pOrderField->BrokerOrderSeq = pOrderField_BrokerOrderSeq;
		if(pOrderField_RelativeOrderSysID != nullptr){ strcpy_s(pOrderField->RelativeOrderSysID, pOrderField_RelativeOrderSysID); pOrderField_RelativeOrderSysID = nullptr; }
		pOrderField->ZCETotalTradedVolume = pOrderField_ZCETotalTradedVolume;
		pOrderField->IsSwapOrder = pOrderField_IsSwapOrder;
		if(pOrderField_BranchID != nullptr){ strcpy_s(pOrderField->BranchID, pOrderField_BranchID); pOrderField_BranchID = nullptr; }
		if(pOrderField_InvestUnitID != nullptr){ strcpy_s(pOrderField->InvestUnitID, pOrderField_InvestUnitID); pOrderField_InvestUnitID = nullptr; }
		if(pOrderField_AccountID != nullptr){ strcpy_s(pOrderField->AccountID, pOrderField_AccountID); pOrderField_AccountID = nullptr; }
		if(pOrderField_CurrencyID != nullptr){ strcpy_s(pOrderField->CurrencyID, pOrderField_CurrencyID); pOrderField_CurrencyID = nullptr; }
		if(pOrderField_IPAddress != nullptr){ strcpy_s(pOrderField->IPAddress, pOrderField_IPAddress); pOrderField_IPAddress = nullptr; }
		if(pOrderField_MacAddress != nullptr){ strcpy_s(pOrderField->MacAddress, pOrderField_MacAddress); pOrderField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcOrderField *pOrderField)
{
	if(pOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:c,s:c,s:y,s:y,s:d,s:i,s:c,s:y,s:c,s:i,s:c,s:d,s:c,s:i,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:i,s:y,s:c,s:c,s:c,s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:i,s:i,s:y,s:y,s:i,s:y,s:i,s:y,s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pOrderField->BrokerID
		, "InvestorID", pOrderField->InvestorID
		, "InstrumentID", pOrderField->InstrumentID
		, "OrderRef", pOrderField->OrderRef
		, "UserID", pOrderField->UserID
		, "OrderPriceType", pOrderField->OrderPriceType
		, "Direction", pOrderField->Direction
		, "CombOffsetFlag", pOrderField->CombOffsetFlag
		, "CombHedgeFlag", pOrderField->CombHedgeFlag
		, "LimitPrice", pOrderField->LimitPrice
		, "VolumeTotalOriginal", pOrderField->VolumeTotalOriginal
		, "TimeCondition", pOrderField->TimeCondition
		, "GTDDate", pOrderField->GTDDate
		, "VolumeCondition", pOrderField->VolumeCondition
		, "MinVolume", pOrderField->MinVolume
		, "ContingentCondition", pOrderField->ContingentCondition
		, "StopPrice", pOrderField->StopPrice
		, "ForceCloseReason", pOrderField->ForceCloseReason
		, "IsAutoSuspend", pOrderField->IsAutoSuspend
		, "BusinessUnit", pOrderField->BusinessUnit
		, "RequestID", pOrderField->RequestID
		, "OrderLocalID", pOrderField->OrderLocalID
		, "ExchangeID", pOrderField->ExchangeID
		, "ParticipantID", pOrderField->ParticipantID
		, "ClientID", pOrderField->ClientID
		, "ExchangeInstID", pOrderField->ExchangeInstID
		, "TraderID", pOrderField->TraderID
		, "InstallID", pOrderField->InstallID
		, "OrderSubmitStatus", pOrderField->OrderSubmitStatus
		, "NotifySequence", pOrderField->NotifySequence
		, "TradingDay", pOrderField->TradingDay
		, "SettlementID", pOrderField->SettlementID
		, "OrderSysID", pOrderField->OrderSysID
		, "OrderSource", pOrderField->OrderSource
		, "OrderStatus", pOrderField->OrderStatus
		, "OrderType", pOrderField->OrderType
		, "VolumeTraded", pOrderField->VolumeTraded
		, "VolumeTotal", pOrderField->VolumeTotal
		, "InsertDate", pOrderField->InsertDate
		, "InsertTime", pOrderField->InsertTime
		, "ActiveTime", pOrderField->ActiveTime
		, "SuspendTime", pOrderField->SuspendTime
		, "UpdateTime", pOrderField->UpdateTime
		, "CancelTime", pOrderField->CancelTime
		, "ActiveTraderID", pOrderField->ActiveTraderID
		, "ClearingPartID", pOrderField->ClearingPartID
		, "SequenceNo", pOrderField->SequenceNo
		, "FrontID", pOrderField->FrontID
		, "SessionID", pOrderField->SessionID
		, "UserProductInfo", pOrderField->UserProductInfo
		, "StatusMsg", pOrderField->StatusMsg
		, "UserForceClose", pOrderField->UserForceClose
		, "ActiveUserID", pOrderField->ActiveUserID
		, "BrokerOrderSeq", pOrderField->BrokerOrderSeq
		, "RelativeOrderSysID", pOrderField->RelativeOrderSysID
		, "ZCETotalTradedVolume", pOrderField->ZCETotalTradedVolume
		, "IsSwapOrder", pOrderField->IsSwapOrder
		, "BranchID", pOrderField->BranchID
		, "InvestUnitID", pOrderField->InvestUnitID
		, "AccountID", pOrderField->AccountID
		, "CurrencyID", pOrderField->CurrencyID
		, "IPAddress", pOrderField->IPAddress
		, "MacAddress", pOrderField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeOrderField *pExchangeOrderField, PyObject *dict)
{
	static char *kwlist[] = {"OrderPriceType", "Direction", "CombOffsetFlag", "CombHedgeFlag", "LimitPrice", "VolumeTotalOriginal", "TimeCondition", "GTDDate", "VolumeCondition", "MinVolume", "ContingentCondition", "StopPrice", "ForceCloseReason", "IsAutoSuspend", "BusinessUnit", "RequestID", "OrderLocalID", "ExchangeID", "ParticipantID", "ClientID", "ExchangeInstID", "TraderID", "InstallID", "OrderSubmitStatus", "NotifySequence", "TradingDay", "SettlementID", "OrderSysID", "OrderSource", "OrderStatus", "OrderType", "VolumeTraded", "VolumeTotal", "InsertDate", "InsertTime", "ActiveTime", "SuspendTime", "UpdateTime", "CancelTime", "ActiveTraderID", "ClearingPartID", "SequenceNo", "BranchID", "IPAddress", "MacAddress", nullptr};
	char pExchangeOrderField_OrderPriceType = 0;
	char pExchangeOrderField_Direction = 0;
	char *pExchangeOrderField_CombOffsetFlag = nullptr;
	char *pExchangeOrderField_CombHedgeFlag = nullptr;
	double pExchangeOrderField_LimitPrice = 0.0;
	int pExchangeOrderField_VolumeTotalOriginal = 0;
	char pExchangeOrderField_TimeCondition = 0;
	char *pExchangeOrderField_GTDDate = nullptr;
	char pExchangeOrderField_VolumeCondition = 0;
	int pExchangeOrderField_MinVolume = 0;
	char pExchangeOrderField_ContingentCondition = 0;
	double pExchangeOrderField_StopPrice = 0.0;
	char pExchangeOrderField_ForceCloseReason = 0;
	int pExchangeOrderField_IsAutoSuspend = 0;
	char *pExchangeOrderField_BusinessUnit = nullptr;
	int pExchangeOrderField_RequestID = 0;
	char *pExchangeOrderField_OrderLocalID = nullptr;
	char *pExchangeOrderField_ExchangeID = nullptr;
	char *pExchangeOrderField_ParticipantID = nullptr;
	char *pExchangeOrderField_ClientID = nullptr;
	char *pExchangeOrderField_ExchangeInstID = nullptr;
	char *pExchangeOrderField_TraderID = nullptr;
	int pExchangeOrderField_InstallID = 0;
	char pExchangeOrderField_OrderSubmitStatus = 0;
	int pExchangeOrderField_NotifySequence = 0;
	char *pExchangeOrderField_TradingDay = nullptr;
	int pExchangeOrderField_SettlementID = 0;
	char *pExchangeOrderField_OrderSysID = nullptr;
	char pExchangeOrderField_OrderSource = 0;
	char pExchangeOrderField_OrderStatus = 0;
	char pExchangeOrderField_OrderType = 0;
	int pExchangeOrderField_VolumeTraded = 0;
	int pExchangeOrderField_VolumeTotal = 0;
	char *pExchangeOrderField_InsertDate = nullptr;
	char *pExchangeOrderField_InsertTime = nullptr;
	char *pExchangeOrderField_ActiveTime = nullptr;
	char *pExchangeOrderField_SuspendTime = nullptr;
	char *pExchangeOrderField_UpdateTime = nullptr;
	char *pExchangeOrderField_CancelTime = nullptr;
	char *pExchangeOrderField_ActiveTraderID = nullptr;
	char *pExchangeOrderField_ClearingPartID = nullptr;
	int pExchangeOrderField_SequenceNo = 0;
	char *pExchangeOrderField_BranchID = nullptr;
	char *pExchangeOrderField_IPAddress = nullptr;
	char *pExchangeOrderField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeOrderField, "|ccyydicycicdciyiyyyyyyiciyiyccciiyyyyyyyyiyyy")
		, &pExchangeOrderField_OrderPriceType
		, &pExchangeOrderField_Direction
		, &pExchangeOrderField_CombOffsetFlag
		, &pExchangeOrderField_CombHedgeFlag
		, &pExchangeOrderField_LimitPrice
		, &pExchangeOrderField_VolumeTotalOriginal
		, &pExchangeOrderField_TimeCondition
		, &pExchangeOrderField_GTDDate
		, &pExchangeOrderField_VolumeCondition
		, &pExchangeOrderField_MinVolume
		, &pExchangeOrderField_ContingentCondition
		, &pExchangeOrderField_StopPrice
		, &pExchangeOrderField_ForceCloseReason
		, &pExchangeOrderField_IsAutoSuspend
		, &pExchangeOrderField_BusinessUnit
		, &pExchangeOrderField_RequestID
		, &pExchangeOrderField_OrderLocalID
		, &pExchangeOrderField_ExchangeID
		, &pExchangeOrderField_ParticipantID
		, &pExchangeOrderField_ClientID
		, &pExchangeOrderField_ExchangeInstID
		, &pExchangeOrderField_TraderID
		, &pExchangeOrderField_InstallID
		, &pExchangeOrderField_OrderSubmitStatus
		, &pExchangeOrderField_NotifySequence
		, &pExchangeOrderField_TradingDay
		, &pExchangeOrderField_SettlementID
		, &pExchangeOrderField_OrderSysID
		, &pExchangeOrderField_OrderSource
		, &pExchangeOrderField_OrderStatus
		, &pExchangeOrderField_OrderType
		, &pExchangeOrderField_VolumeTraded
		, &pExchangeOrderField_VolumeTotal
		, &pExchangeOrderField_InsertDate
		, &pExchangeOrderField_InsertTime
		, &pExchangeOrderField_ActiveTime
		, &pExchangeOrderField_SuspendTime
		, &pExchangeOrderField_UpdateTime
		, &pExchangeOrderField_CancelTime
		, &pExchangeOrderField_ActiveTraderID
		, &pExchangeOrderField_ClearingPartID
		, &pExchangeOrderField_SequenceNo
		, &pExchangeOrderField_BranchID
		, &pExchangeOrderField_IPAddress
		, &pExchangeOrderField_MacAddress
	PyCTP_PyDict_FromStruct_END
		pExchangeOrderField->OrderPriceType = pExchangeOrderField_OrderPriceType;
		pExchangeOrderField->Direction = pExchangeOrderField_Direction;
		if(pExchangeOrderField_CombOffsetFlag != nullptr){ strcpy_s(pExchangeOrderField->CombOffsetFlag, pExchangeOrderField_CombOffsetFlag); pExchangeOrderField_CombOffsetFlag = nullptr; }
		if(pExchangeOrderField_CombHedgeFlag != nullptr){ strcpy_s(pExchangeOrderField->CombHedgeFlag, pExchangeOrderField_CombHedgeFlag); pExchangeOrderField_CombHedgeFlag = nullptr; }
		pExchangeOrderField->LimitPrice = pExchangeOrderField_LimitPrice;
		pExchangeOrderField->VolumeTotalOriginal = pExchangeOrderField_VolumeTotalOriginal;
		pExchangeOrderField->TimeCondition = pExchangeOrderField_TimeCondition;
		if(pExchangeOrderField_GTDDate != nullptr){ strcpy_s(pExchangeOrderField->GTDDate, pExchangeOrderField_GTDDate); pExchangeOrderField_GTDDate = nullptr; }
		pExchangeOrderField->VolumeCondition = pExchangeOrderField_VolumeCondition;
		pExchangeOrderField->MinVolume = pExchangeOrderField_MinVolume;
		pExchangeOrderField->ContingentCondition = pExchangeOrderField_ContingentCondition;
		pExchangeOrderField->StopPrice = pExchangeOrderField_StopPrice;
		pExchangeOrderField->ForceCloseReason = pExchangeOrderField_ForceCloseReason;
		pExchangeOrderField->IsAutoSuspend = pExchangeOrderField_IsAutoSuspend;
		if(pExchangeOrderField_BusinessUnit != nullptr){ strcpy_s(pExchangeOrderField->BusinessUnit, pExchangeOrderField_BusinessUnit); pExchangeOrderField_BusinessUnit = nullptr; }
		pExchangeOrderField->RequestID = pExchangeOrderField_RequestID;
		if(pExchangeOrderField_OrderLocalID != nullptr){ strcpy_s(pExchangeOrderField->OrderLocalID, pExchangeOrderField_OrderLocalID); pExchangeOrderField_OrderLocalID = nullptr; }
		if(pExchangeOrderField_ExchangeID != nullptr){ strcpy_s(pExchangeOrderField->ExchangeID, pExchangeOrderField_ExchangeID); pExchangeOrderField_ExchangeID = nullptr; }
		if(pExchangeOrderField_ParticipantID != nullptr){ strcpy_s(pExchangeOrderField->ParticipantID, pExchangeOrderField_ParticipantID); pExchangeOrderField_ParticipantID = nullptr; }
		if(pExchangeOrderField_ClientID != nullptr){ strcpy_s(pExchangeOrderField->ClientID, pExchangeOrderField_ClientID); pExchangeOrderField_ClientID = nullptr; }
		if(pExchangeOrderField_ExchangeInstID != nullptr){ strcpy_s(pExchangeOrderField->ExchangeInstID, pExchangeOrderField_ExchangeInstID); pExchangeOrderField_ExchangeInstID = nullptr; }
		if(pExchangeOrderField_TraderID != nullptr){ strcpy_s(pExchangeOrderField->TraderID, pExchangeOrderField_TraderID); pExchangeOrderField_TraderID = nullptr; }
		pExchangeOrderField->InstallID = pExchangeOrderField_InstallID;
		pExchangeOrderField->OrderSubmitStatus = pExchangeOrderField_OrderSubmitStatus;
		pExchangeOrderField->NotifySequence = pExchangeOrderField_NotifySequence;
		if(pExchangeOrderField_TradingDay != nullptr){ strcpy_s(pExchangeOrderField->TradingDay, pExchangeOrderField_TradingDay); pExchangeOrderField_TradingDay = nullptr; }
		pExchangeOrderField->SettlementID = pExchangeOrderField_SettlementID;
		if(pExchangeOrderField_OrderSysID != nullptr){ strcpy_s(pExchangeOrderField->OrderSysID, pExchangeOrderField_OrderSysID); pExchangeOrderField_OrderSysID = nullptr; }
		pExchangeOrderField->OrderSource = pExchangeOrderField_OrderSource;
		pExchangeOrderField->OrderStatus = pExchangeOrderField_OrderStatus;
		pExchangeOrderField->OrderType = pExchangeOrderField_OrderType;
		pExchangeOrderField->VolumeTraded = pExchangeOrderField_VolumeTraded;
		pExchangeOrderField->VolumeTotal = pExchangeOrderField_VolumeTotal;
		if(pExchangeOrderField_InsertDate != nullptr){ strcpy_s(pExchangeOrderField->InsertDate, pExchangeOrderField_InsertDate); pExchangeOrderField_InsertDate = nullptr; }
		if(pExchangeOrderField_InsertTime != nullptr){ strcpy_s(pExchangeOrderField->InsertTime, pExchangeOrderField_InsertTime); pExchangeOrderField_InsertTime = nullptr; }
		if(pExchangeOrderField_ActiveTime != nullptr){ strcpy_s(pExchangeOrderField->ActiveTime, pExchangeOrderField_ActiveTime); pExchangeOrderField_ActiveTime = nullptr; }
		if(pExchangeOrderField_SuspendTime != nullptr){ strcpy_s(pExchangeOrderField->SuspendTime, pExchangeOrderField_SuspendTime); pExchangeOrderField_SuspendTime = nullptr; }
		if(pExchangeOrderField_UpdateTime != nullptr){ strcpy_s(pExchangeOrderField->UpdateTime, pExchangeOrderField_UpdateTime); pExchangeOrderField_UpdateTime = nullptr; }
		if(pExchangeOrderField_CancelTime != nullptr){ strcpy_s(pExchangeOrderField->CancelTime, pExchangeOrderField_CancelTime); pExchangeOrderField_CancelTime = nullptr; }
		if(pExchangeOrderField_ActiveTraderID != nullptr){ strcpy_s(pExchangeOrderField->ActiveTraderID, pExchangeOrderField_ActiveTraderID); pExchangeOrderField_ActiveTraderID = nullptr; }
		if(pExchangeOrderField_ClearingPartID != nullptr){ strcpy_s(pExchangeOrderField->ClearingPartID, pExchangeOrderField_ClearingPartID); pExchangeOrderField_ClearingPartID = nullptr; }
		pExchangeOrderField->SequenceNo = pExchangeOrderField_SequenceNo;
		if(pExchangeOrderField_BranchID != nullptr){ strcpy_s(pExchangeOrderField->BranchID, pExchangeOrderField_BranchID); pExchangeOrderField_BranchID = nullptr; }
		if(pExchangeOrderField_IPAddress != nullptr){ strcpy_s(pExchangeOrderField->IPAddress, pExchangeOrderField_IPAddress); pExchangeOrderField_IPAddress = nullptr; }
		if(pExchangeOrderField_MacAddress != nullptr){ strcpy_s(pExchangeOrderField->MacAddress, pExchangeOrderField_MacAddress); pExchangeOrderField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeOrderField *pExchangeOrderField)
{
	if(pExchangeOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:c,s:c,s:y,s:y,s:d,s:i,s:c,s:y,s:c,s:i,s:c,s:d,s:c,s:i,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:i,s:y,s:c,s:c,s:c,s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:y,s:y,s:y}"
		, "OrderPriceType", pExchangeOrderField->OrderPriceType
		, "Direction", pExchangeOrderField->Direction
		, "CombOffsetFlag", pExchangeOrderField->CombOffsetFlag
		, "CombHedgeFlag", pExchangeOrderField->CombHedgeFlag
		, "LimitPrice", pExchangeOrderField->LimitPrice
		, "VolumeTotalOriginal", pExchangeOrderField->VolumeTotalOriginal
		, "TimeCondition", pExchangeOrderField->TimeCondition
		, "GTDDate", pExchangeOrderField->GTDDate
		, "VolumeCondition", pExchangeOrderField->VolumeCondition
		, "MinVolume", pExchangeOrderField->MinVolume
		, "ContingentCondition", pExchangeOrderField->ContingentCondition
		, "StopPrice", pExchangeOrderField->StopPrice
		, "ForceCloseReason", pExchangeOrderField->ForceCloseReason
		, "IsAutoSuspend", pExchangeOrderField->IsAutoSuspend
		, "BusinessUnit", pExchangeOrderField->BusinessUnit
		, "RequestID", pExchangeOrderField->RequestID
		, "OrderLocalID", pExchangeOrderField->OrderLocalID
		, "ExchangeID", pExchangeOrderField->ExchangeID
		, "ParticipantID", pExchangeOrderField->ParticipantID
		, "ClientID", pExchangeOrderField->ClientID
		, "ExchangeInstID", pExchangeOrderField->ExchangeInstID
		, "TraderID", pExchangeOrderField->TraderID
		, "InstallID", pExchangeOrderField->InstallID
		, "OrderSubmitStatus", pExchangeOrderField->OrderSubmitStatus
		, "NotifySequence", pExchangeOrderField->NotifySequence
		, "TradingDay", pExchangeOrderField->TradingDay
		, "SettlementID", pExchangeOrderField->SettlementID
		, "OrderSysID", pExchangeOrderField->OrderSysID
		, "OrderSource", pExchangeOrderField->OrderSource
		, "OrderStatus", pExchangeOrderField->OrderStatus
		, "OrderType", pExchangeOrderField->OrderType
		, "VolumeTraded", pExchangeOrderField->VolumeTraded
		, "VolumeTotal", pExchangeOrderField->VolumeTotal
		, "InsertDate", pExchangeOrderField->InsertDate
		, "InsertTime", pExchangeOrderField->InsertTime
		, "ActiveTime", pExchangeOrderField->ActiveTime
		, "SuspendTime", pExchangeOrderField->SuspendTime
		, "UpdateTime", pExchangeOrderField->UpdateTime
		, "CancelTime", pExchangeOrderField->CancelTime
		, "ActiveTraderID", pExchangeOrderField->ActiveTraderID
		, "ClearingPartID", pExchangeOrderField->ClearingPartID
		, "SequenceNo", pExchangeOrderField->SequenceNo
		, "BranchID", pExchangeOrderField->BranchID
		, "IPAddress", pExchangeOrderField->IPAddress
		, "MacAddress", pExchangeOrderField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeOrderInsertErrorField *pExchangeOrderInsertErrorField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "ParticipantID", "TraderID", "InstallID", "OrderLocalID", "ErrorID", "ErrorMsg", nullptr};
	char *pExchangeOrderInsertErrorField_ExchangeID = nullptr;
	char *pExchangeOrderInsertErrorField_ParticipantID = nullptr;
	char *pExchangeOrderInsertErrorField_TraderID = nullptr;
	int pExchangeOrderInsertErrorField_InstallID = 0;
	char *pExchangeOrderInsertErrorField_OrderLocalID = nullptr;
	int pExchangeOrderInsertErrorField_ErrorID = 0;
	char *pExchangeOrderInsertErrorField_ErrorMsg = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeOrderInsertErrorField, "|yyyiyiy")
		, &pExchangeOrderInsertErrorField_ExchangeID
		, &pExchangeOrderInsertErrorField_ParticipantID
		, &pExchangeOrderInsertErrorField_TraderID
		, &pExchangeOrderInsertErrorField_InstallID
		, &pExchangeOrderInsertErrorField_OrderLocalID
		, &pExchangeOrderInsertErrorField_ErrorID
		, &pExchangeOrderInsertErrorField_ErrorMsg
	PyCTP_PyDict_FromStruct_END
		if(pExchangeOrderInsertErrorField_ExchangeID != nullptr){ strcpy_s(pExchangeOrderInsertErrorField->ExchangeID, pExchangeOrderInsertErrorField_ExchangeID); pExchangeOrderInsertErrorField_ExchangeID = nullptr; }
		if(pExchangeOrderInsertErrorField_ParticipantID != nullptr){ strcpy_s(pExchangeOrderInsertErrorField->ParticipantID, pExchangeOrderInsertErrorField_ParticipantID); pExchangeOrderInsertErrorField_ParticipantID = nullptr; }
		if(pExchangeOrderInsertErrorField_TraderID != nullptr){ strcpy_s(pExchangeOrderInsertErrorField->TraderID, pExchangeOrderInsertErrorField_TraderID); pExchangeOrderInsertErrorField_TraderID = nullptr; }
		pExchangeOrderInsertErrorField->InstallID = pExchangeOrderInsertErrorField_InstallID;
		if(pExchangeOrderInsertErrorField_OrderLocalID != nullptr){ strcpy_s(pExchangeOrderInsertErrorField->OrderLocalID, pExchangeOrderInsertErrorField_OrderLocalID); pExchangeOrderInsertErrorField_OrderLocalID = nullptr; }
		pExchangeOrderInsertErrorField->ErrorID = pExchangeOrderInsertErrorField_ErrorID;
		if(pExchangeOrderInsertErrorField_ErrorMsg != nullptr){ strcpy_s(pExchangeOrderInsertErrorField->ErrorMsg, pExchangeOrderInsertErrorField_ErrorMsg); pExchangeOrderInsertErrorField_ErrorMsg = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeOrderInsertErrorField *pExchangeOrderInsertErrorField)
{
	if(pExchangeOrderInsertErrorField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:i,s:y,s:i,s:y}"
		, "ExchangeID", pExchangeOrderInsertErrorField->ExchangeID
		, "ParticipantID", pExchangeOrderInsertErrorField->ParticipantID
		, "TraderID", pExchangeOrderInsertErrorField->TraderID
		, "InstallID", pExchangeOrderInsertErrorField->InstallID
		, "OrderLocalID", pExchangeOrderInsertErrorField->OrderLocalID
		, "ErrorID", pExchangeOrderInsertErrorField->ErrorID
		, "ErrorMsg", pExchangeOrderInsertErrorField->ErrorMsg
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInputOrderActionField *pInputOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "OrderActionRef", "OrderRef", "RequestID", "FrontID", "SessionID", "ExchangeID", "OrderSysID", "ActionFlag", "LimitPrice", "VolumeChange", "UserID", "InstrumentID", "InvestUnitID", "IPAddress", "MacAddress", nullptr};
	char *pInputOrderActionField_BrokerID = nullptr;
	char *pInputOrderActionField_InvestorID = nullptr;
	int pInputOrderActionField_OrderActionRef = 0;
	char *pInputOrderActionField_OrderRef = nullptr;
	int pInputOrderActionField_RequestID = 0;
	int pInputOrderActionField_FrontID = 0;
	int pInputOrderActionField_SessionID = 0;
	char *pInputOrderActionField_ExchangeID = nullptr;
	char *pInputOrderActionField_OrderSysID = nullptr;
	char pInputOrderActionField_ActionFlag = 0;
	double pInputOrderActionField_LimitPrice = 0.0;
	int pInputOrderActionField_VolumeChange = 0;
	char *pInputOrderActionField_UserID = nullptr;
	char *pInputOrderActionField_InstrumentID = nullptr;
	char *pInputOrderActionField_InvestUnitID = nullptr;
	char *pInputOrderActionField_IPAddress = nullptr;
	char *pInputOrderActionField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInputOrderActionField, "|yyiyiiiyycdiyyyyy")
		, &pInputOrderActionField_BrokerID
		, &pInputOrderActionField_InvestorID
		, &pInputOrderActionField_OrderActionRef
		, &pInputOrderActionField_OrderRef
		, &pInputOrderActionField_RequestID
		, &pInputOrderActionField_FrontID
		, &pInputOrderActionField_SessionID
		, &pInputOrderActionField_ExchangeID
		, &pInputOrderActionField_OrderSysID
		, &pInputOrderActionField_ActionFlag
		, &pInputOrderActionField_LimitPrice
		, &pInputOrderActionField_VolumeChange
		, &pInputOrderActionField_UserID
		, &pInputOrderActionField_InstrumentID
		, &pInputOrderActionField_InvestUnitID
		, &pInputOrderActionField_IPAddress
		, &pInputOrderActionField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pInputOrderActionField_BrokerID != nullptr){ strcpy_s(pInputOrderActionField->BrokerID, pInputOrderActionField_BrokerID); pInputOrderActionField_BrokerID = nullptr; }
		if(pInputOrderActionField_InvestorID != nullptr){ strcpy_s(pInputOrderActionField->InvestorID, pInputOrderActionField_InvestorID); pInputOrderActionField_InvestorID = nullptr; }
		pInputOrderActionField->OrderActionRef = pInputOrderActionField_OrderActionRef;
		if(pInputOrderActionField_OrderRef != nullptr){ strcpy_s(pInputOrderActionField->OrderRef, pInputOrderActionField_OrderRef); pInputOrderActionField_OrderRef = nullptr; }
		pInputOrderActionField->RequestID = pInputOrderActionField_RequestID;
		pInputOrderActionField->FrontID = pInputOrderActionField_FrontID;
		pInputOrderActionField->SessionID = pInputOrderActionField_SessionID;
		if(pInputOrderActionField_ExchangeID != nullptr){ strcpy_s(pInputOrderActionField->ExchangeID, pInputOrderActionField_ExchangeID); pInputOrderActionField_ExchangeID = nullptr; }
		if(pInputOrderActionField_OrderSysID != nullptr){ strcpy_s(pInputOrderActionField->OrderSysID, pInputOrderActionField_OrderSysID); pInputOrderActionField_OrderSysID = nullptr; }
		pInputOrderActionField->ActionFlag = pInputOrderActionField_ActionFlag;
		pInputOrderActionField->LimitPrice = pInputOrderActionField_LimitPrice;
		pInputOrderActionField->VolumeChange = pInputOrderActionField_VolumeChange;
		if(pInputOrderActionField_UserID != nullptr){ strcpy_s(pInputOrderActionField->UserID, pInputOrderActionField_UserID); pInputOrderActionField_UserID = nullptr; }
		if(pInputOrderActionField_InstrumentID != nullptr){ strcpy_s(pInputOrderActionField->InstrumentID, pInputOrderActionField_InstrumentID); pInputOrderActionField_InstrumentID = nullptr; }
		if(pInputOrderActionField_InvestUnitID != nullptr){ strcpy_s(pInputOrderActionField->InvestUnitID, pInputOrderActionField_InvestUnitID); pInputOrderActionField_InvestUnitID = nullptr; }
		if(pInputOrderActionField_IPAddress != nullptr){ strcpy_s(pInputOrderActionField->IPAddress, pInputOrderActionField_IPAddress); pInputOrderActionField_IPAddress = nullptr; }
		if(pInputOrderActionField_MacAddress != nullptr){ strcpy_s(pInputOrderActionField->MacAddress, pInputOrderActionField_MacAddress); pInputOrderActionField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInputOrderActionField *pInputOrderActionField)
{
	if(pInputOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i,s:y,s:i,s:i,s:i,s:y,s:y,s:c,s:d,s:i,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pInputOrderActionField->BrokerID
		, "InvestorID", pInputOrderActionField->InvestorID
		, "OrderActionRef", pInputOrderActionField->OrderActionRef
		, "OrderRef", pInputOrderActionField->OrderRef
		, "RequestID", pInputOrderActionField->RequestID
		, "FrontID", pInputOrderActionField->FrontID
		, "SessionID", pInputOrderActionField->SessionID
		, "ExchangeID", pInputOrderActionField->ExchangeID
		, "OrderSysID", pInputOrderActionField->OrderSysID
		, "ActionFlag", pInputOrderActionField->ActionFlag
		, "LimitPrice", pInputOrderActionField->LimitPrice
		, "VolumeChange", pInputOrderActionField->VolumeChange
		, "UserID", pInputOrderActionField->UserID
		, "InstrumentID", pInputOrderActionField->InstrumentID
		, "InvestUnitID", pInputOrderActionField->InvestUnitID
		, "IPAddress", pInputOrderActionField->IPAddress
		, "MacAddress", pInputOrderActionField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcOrderActionField *pOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "OrderActionRef", "OrderRef", "RequestID", "FrontID", "SessionID", "ExchangeID", "OrderSysID", "ActionFlag", "LimitPrice", "VolumeChange", "ActionDate", "ActionTime", "TraderID", "InstallID", "OrderLocalID", "ActionLocalID", "ParticipantID", "ClientID", "BusinessUnit", "OrderActionStatus", "UserID", "StatusMsg", "InstrumentID", "BranchID", "InvestUnitID", "IPAddress", "MacAddress", nullptr};
	char *pOrderActionField_BrokerID = nullptr;
	char *pOrderActionField_InvestorID = nullptr;
	int pOrderActionField_OrderActionRef = 0;
	char *pOrderActionField_OrderRef = nullptr;
	int pOrderActionField_RequestID = 0;
	int pOrderActionField_FrontID = 0;
	int pOrderActionField_SessionID = 0;
	char *pOrderActionField_ExchangeID = nullptr;
	char *pOrderActionField_OrderSysID = nullptr;
	char pOrderActionField_ActionFlag = 0;
	double pOrderActionField_LimitPrice = 0.0;
	int pOrderActionField_VolumeChange = 0;
	char *pOrderActionField_ActionDate = nullptr;
	char *pOrderActionField_ActionTime = nullptr;
	char *pOrderActionField_TraderID = nullptr;
	int pOrderActionField_InstallID = 0;
	char *pOrderActionField_OrderLocalID = nullptr;
	char *pOrderActionField_ActionLocalID = nullptr;
	char *pOrderActionField_ParticipantID = nullptr;
	char *pOrderActionField_ClientID = nullptr;
	char *pOrderActionField_BusinessUnit = nullptr;
	char pOrderActionField_OrderActionStatus = 0;
	char *pOrderActionField_UserID = nullptr;
	char *pOrderActionField_StatusMsg = nullptr;
	char *pOrderActionField_InstrumentID = nullptr;
	char *pOrderActionField_BranchID = nullptr;
	char *pOrderActionField_InvestUnitID = nullptr;
	char *pOrderActionField_IPAddress = nullptr;
	char *pOrderActionField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pOrderActionField, "|yyiyiiiyycdiyyyiyyyyycyyyyyyy")
		, &pOrderActionField_BrokerID
		, &pOrderActionField_InvestorID
		, &pOrderActionField_OrderActionRef
		, &pOrderActionField_OrderRef
		, &pOrderActionField_RequestID
		, &pOrderActionField_FrontID
		, &pOrderActionField_SessionID
		, &pOrderActionField_ExchangeID
		, &pOrderActionField_OrderSysID
		, &pOrderActionField_ActionFlag
		, &pOrderActionField_LimitPrice
		, &pOrderActionField_VolumeChange
		, &pOrderActionField_ActionDate
		, &pOrderActionField_ActionTime
		, &pOrderActionField_TraderID
		, &pOrderActionField_InstallID
		, &pOrderActionField_OrderLocalID
		, &pOrderActionField_ActionLocalID
		, &pOrderActionField_ParticipantID
		, &pOrderActionField_ClientID
		, &pOrderActionField_BusinessUnit
		, &pOrderActionField_OrderActionStatus
		, &pOrderActionField_UserID
		, &pOrderActionField_StatusMsg
		, &pOrderActionField_InstrumentID
		, &pOrderActionField_BranchID
		, &pOrderActionField_InvestUnitID
		, &pOrderActionField_IPAddress
		, &pOrderActionField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pOrderActionField_BrokerID != nullptr){ strcpy_s(pOrderActionField->BrokerID, pOrderActionField_BrokerID); pOrderActionField_BrokerID = nullptr; }
		if(pOrderActionField_InvestorID != nullptr){ strcpy_s(pOrderActionField->InvestorID, pOrderActionField_InvestorID); pOrderActionField_InvestorID = nullptr; }
		pOrderActionField->OrderActionRef = pOrderActionField_OrderActionRef;
		if(pOrderActionField_OrderRef != nullptr){ strcpy_s(pOrderActionField->OrderRef, pOrderActionField_OrderRef); pOrderActionField_OrderRef = nullptr; }
		pOrderActionField->RequestID = pOrderActionField_RequestID;
		pOrderActionField->FrontID = pOrderActionField_FrontID;
		pOrderActionField->SessionID = pOrderActionField_SessionID;
		if(pOrderActionField_ExchangeID != nullptr){ strcpy_s(pOrderActionField->ExchangeID, pOrderActionField_ExchangeID); pOrderActionField_ExchangeID = nullptr; }
		if(pOrderActionField_OrderSysID != nullptr){ strcpy_s(pOrderActionField->OrderSysID, pOrderActionField_OrderSysID); pOrderActionField_OrderSysID = nullptr; }
		pOrderActionField->ActionFlag = pOrderActionField_ActionFlag;
		pOrderActionField->LimitPrice = pOrderActionField_LimitPrice;
		pOrderActionField->VolumeChange = pOrderActionField_VolumeChange;
		if(pOrderActionField_ActionDate != nullptr){ strcpy_s(pOrderActionField->ActionDate, pOrderActionField_ActionDate); pOrderActionField_ActionDate = nullptr; }
		if(pOrderActionField_ActionTime != nullptr){ strcpy_s(pOrderActionField->ActionTime, pOrderActionField_ActionTime); pOrderActionField_ActionTime = nullptr; }
		if(pOrderActionField_TraderID != nullptr){ strcpy_s(pOrderActionField->TraderID, pOrderActionField_TraderID); pOrderActionField_TraderID = nullptr; }
		pOrderActionField->InstallID = pOrderActionField_InstallID;
		if(pOrderActionField_OrderLocalID != nullptr){ strcpy_s(pOrderActionField->OrderLocalID, pOrderActionField_OrderLocalID); pOrderActionField_OrderLocalID = nullptr; }
		if(pOrderActionField_ActionLocalID != nullptr){ strcpy_s(pOrderActionField->ActionLocalID, pOrderActionField_ActionLocalID); pOrderActionField_ActionLocalID = nullptr; }
		if(pOrderActionField_ParticipantID != nullptr){ strcpy_s(pOrderActionField->ParticipantID, pOrderActionField_ParticipantID); pOrderActionField_ParticipantID = nullptr; }
		if(pOrderActionField_ClientID != nullptr){ strcpy_s(pOrderActionField->ClientID, pOrderActionField_ClientID); pOrderActionField_ClientID = nullptr; }
		if(pOrderActionField_BusinessUnit != nullptr){ strcpy_s(pOrderActionField->BusinessUnit, pOrderActionField_BusinessUnit); pOrderActionField_BusinessUnit = nullptr; }
		pOrderActionField->OrderActionStatus = pOrderActionField_OrderActionStatus;
		if(pOrderActionField_UserID != nullptr){ strcpy_s(pOrderActionField->UserID, pOrderActionField_UserID); pOrderActionField_UserID = nullptr; }
		if(pOrderActionField_StatusMsg != nullptr){ strcpy_s(pOrderActionField->StatusMsg, pOrderActionField_StatusMsg); pOrderActionField_StatusMsg = nullptr; }
		if(pOrderActionField_InstrumentID != nullptr){ strcpy_s(pOrderActionField->InstrumentID, pOrderActionField_InstrumentID); pOrderActionField_InstrumentID = nullptr; }
		if(pOrderActionField_BranchID != nullptr){ strcpy_s(pOrderActionField->BranchID, pOrderActionField_BranchID); pOrderActionField_BranchID = nullptr; }
		if(pOrderActionField_InvestUnitID != nullptr){ strcpy_s(pOrderActionField->InvestUnitID, pOrderActionField_InvestUnitID); pOrderActionField_InvestUnitID = nullptr; }
		if(pOrderActionField_IPAddress != nullptr){ strcpy_s(pOrderActionField->IPAddress, pOrderActionField_IPAddress); pOrderActionField_IPAddress = nullptr; }
		if(pOrderActionField_MacAddress != nullptr){ strcpy_s(pOrderActionField->MacAddress, pOrderActionField_MacAddress); pOrderActionField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcOrderActionField *pOrderActionField)
{
	if(pOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i,s:y,s:i,s:i,s:i,s:y,s:y,s:c,s:d,s:i,s:y,s:y,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pOrderActionField->BrokerID
		, "InvestorID", pOrderActionField->InvestorID
		, "OrderActionRef", pOrderActionField->OrderActionRef
		, "OrderRef", pOrderActionField->OrderRef
		, "RequestID", pOrderActionField->RequestID
		, "FrontID", pOrderActionField->FrontID
		, "SessionID", pOrderActionField->SessionID
		, "ExchangeID", pOrderActionField->ExchangeID
		, "OrderSysID", pOrderActionField->OrderSysID
		, "ActionFlag", pOrderActionField->ActionFlag
		, "LimitPrice", pOrderActionField->LimitPrice
		, "VolumeChange", pOrderActionField->VolumeChange
		, "ActionDate", pOrderActionField->ActionDate
		, "ActionTime", pOrderActionField->ActionTime
		, "TraderID", pOrderActionField->TraderID
		, "InstallID", pOrderActionField->InstallID
		, "OrderLocalID", pOrderActionField->OrderLocalID
		, "ActionLocalID", pOrderActionField->ActionLocalID
		, "ParticipantID", pOrderActionField->ParticipantID
		, "ClientID", pOrderActionField->ClientID
		, "BusinessUnit", pOrderActionField->BusinessUnit
		, "OrderActionStatus", pOrderActionField->OrderActionStatus
		, "UserID", pOrderActionField->UserID
		, "StatusMsg", pOrderActionField->StatusMsg
		, "InstrumentID", pOrderActionField->InstrumentID
		, "BranchID", pOrderActionField->BranchID
		, "InvestUnitID", pOrderActionField->InvestUnitID
		, "IPAddress", pOrderActionField->IPAddress
		, "MacAddress", pOrderActionField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeOrderActionField *pExchangeOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "OrderSysID", "ActionFlag", "LimitPrice", "VolumeChange", "ActionDate", "ActionTime", "TraderID", "InstallID", "OrderLocalID", "ActionLocalID", "ParticipantID", "ClientID", "BusinessUnit", "OrderActionStatus", "UserID", "BranchID", "IPAddress", "MacAddress", nullptr};
	char *pExchangeOrderActionField_ExchangeID = nullptr;
	char *pExchangeOrderActionField_OrderSysID = nullptr;
	char pExchangeOrderActionField_ActionFlag = 0;
	double pExchangeOrderActionField_LimitPrice = 0.0;
	int pExchangeOrderActionField_VolumeChange = 0;
	char *pExchangeOrderActionField_ActionDate = nullptr;
	char *pExchangeOrderActionField_ActionTime = nullptr;
	char *pExchangeOrderActionField_TraderID = nullptr;
	int pExchangeOrderActionField_InstallID = 0;
	char *pExchangeOrderActionField_OrderLocalID = nullptr;
	char *pExchangeOrderActionField_ActionLocalID = nullptr;
	char *pExchangeOrderActionField_ParticipantID = nullptr;
	char *pExchangeOrderActionField_ClientID = nullptr;
	char *pExchangeOrderActionField_BusinessUnit = nullptr;
	char pExchangeOrderActionField_OrderActionStatus = 0;
	char *pExchangeOrderActionField_UserID = nullptr;
	char *pExchangeOrderActionField_BranchID = nullptr;
	char *pExchangeOrderActionField_IPAddress = nullptr;
	char *pExchangeOrderActionField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeOrderActionField, "|yycdiyyyiyyyyycyyyy")
		, &pExchangeOrderActionField_ExchangeID
		, &pExchangeOrderActionField_OrderSysID
		, &pExchangeOrderActionField_ActionFlag
		, &pExchangeOrderActionField_LimitPrice
		, &pExchangeOrderActionField_VolumeChange
		, &pExchangeOrderActionField_ActionDate
		, &pExchangeOrderActionField_ActionTime
		, &pExchangeOrderActionField_TraderID
		, &pExchangeOrderActionField_InstallID
		, &pExchangeOrderActionField_OrderLocalID
		, &pExchangeOrderActionField_ActionLocalID
		, &pExchangeOrderActionField_ParticipantID
		, &pExchangeOrderActionField_ClientID
		, &pExchangeOrderActionField_BusinessUnit
		, &pExchangeOrderActionField_OrderActionStatus
		, &pExchangeOrderActionField_UserID
		, &pExchangeOrderActionField_BranchID
		, &pExchangeOrderActionField_IPAddress
		, &pExchangeOrderActionField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pExchangeOrderActionField_ExchangeID != nullptr){ strcpy_s(pExchangeOrderActionField->ExchangeID, pExchangeOrderActionField_ExchangeID); pExchangeOrderActionField_ExchangeID = nullptr; }
		if(pExchangeOrderActionField_OrderSysID != nullptr){ strcpy_s(pExchangeOrderActionField->OrderSysID, pExchangeOrderActionField_OrderSysID); pExchangeOrderActionField_OrderSysID = nullptr; }
		pExchangeOrderActionField->ActionFlag = pExchangeOrderActionField_ActionFlag;
		pExchangeOrderActionField->LimitPrice = pExchangeOrderActionField_LimitPrice;
		pExchangeOrderActionField->VolumeChange = pExchangeOrderActionField_VolumeChange;
		if(pExchangeOrderActionField_ActionDate != nullptr){ strcpy_s(pExchangeOrderActionField->ActionDate, pExchangeOrderActionField_ActionDate); pExchangeOrderActionField_ActionDate = nullptr; }
		if(pExchangeOrderActionField_ActionTime != nullptr){ strcpy_s(pExchangeOrderActionField->ActionTime, pExchangeOrderActionField_ActionTime); pExchangeOrderActionField_ActionTime = nullptr; }
		if(pExchangeOrderActionField_TraderID != nullptr){ strcpy_s(pExchangeOrderActionField->TraderID, pExchangeOrderActionField_TraderID); pExchangeOrderActionField_TraderID = nullptr; }
		pExchangeOrderActionField->InstallID = pExchangeOrderActionField_InstallID;
		if(pExchangeOrderActionField_OrderLocalID != nullptr){ strcpy_s(pExchangeOrderActionField->OrderLocalID, pExchangeOrderActionField_OrderLocalID); pExchangeOrderActionField_OrderLocalID = nullptr; }
		if(pExchangeOrderActionField_ActionLocalID != nullptr){ strcpy_s(pExchangeOrderActionField->ActionLocalID, pExchangeOrderActionField_ActionLocalID); pExchangeOrderActionField_ActionLocalID = nullptr; }
		if(pExchangeOrderActionField_ParticipantID != nullptr){ strcpy_s(pExchangeOrderActionField->ParticipantID, pExchangeOrderActionField_ParticipantID); pExchangeOrderActionField_ParticipantID = nullptr; }
		if(pExchangeOrderActionField_ClientID != nullptr){ strcpy_s(pExchangeOrderActionField->ClientID, pExchangeOrderActionField_ClientID); pExchangeOrderActionField_ClientID = nullptr; }
		if(pExchangeOrderActionField_BusinessUnit != nullptr){ strcpy_s(pExchangeOrderActionField->BusinessUnit, pExchangeOrderActionField_BusinessUnit); pExchangeOrderActionField_BusinessUnit = nullptr; }
		pExchangeOrderActionField->OrderActionStatus = pExchangeOrderActionField_OrderActionStatus;
		if(pExchangeOrderActionField_UserID != nullptr){ strcpy_s(pExchangeOrderActionField->UserID, pExchangeOrderActionField_UserID); pExchangeOrderActionField_UserID = nullptr; }
		if(pExchangeOrderActionField_BranchID != nullptr){ strcpy_s(pExchangeOrderActionField->BranchID, pExchangeOrderActionField_BranchID); pExchangeOrderActionField_BranchID = nullptr; }
		if(pExchangeOrderActionField_IPAddress != nullptr){ strcpy_s(pExchangeOrderActionField->IPAddress, pExchangeOrderActionField_IPAddress); pExchangeOrderActionField_IPAddress = nullptr; }
		if(pExchangeOrderActionField_MacAddress != nullptr){ strcpy_s(pExchangeOrderActionField->MacAddress, pExchangeOrderActionField_MacAddress); pExchangeOrderActionField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeOrderActionField *pExchangeOrderActionField)
{
	if(pExchangeOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c,s:d,s:i,s:y,s:y,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:y,s:y}"
		, "ExchangeID", pExchangeOrderActionField->ExchangeID
		, "OrderSysID", pExchangeOrderActionField->OrderSysID
		, "ActionFlag", pExchangeOrderActionField->ActionFlag
		, "LimitPrice", pExchangeOrderActionField->LimitPrice
		, "VolumeChange", pExchangeOrderActionField->VolumeChange
		, "ActionDate", pExchangeOrderActionField->ActionDate
		, "ActionTime", pExchangeOrderActionField->ActionTime
		, "TraderID", pExchangeOrderActionField->TraderID
		, "InstallID", pExchangeOrderActionField->InstallID
		, "OrderLocalID", pExchangeOrderActionField->OrderLocalID
		, "ActionLocalID", pExchangeOrderActionField->ActionLocalID
		, "ParticipantID", pExchangeOrderActionField->ParticipantID
		, "ClientID", pExchangeOrderActionField->ClientID
		, "BusinessUnit", pExchangeOrderActionField->BusinessUnit
		, "OrderActionStatus", pExchangeOrderActionField->OrderActionStatus
		, "UserID", pExchangeOrderActionField->UserID
		, "BranchID", pExchangeOrderActionField->BranchID
		, "IPAddress", pExchangeOrderActionField->IPAddress
		, "MacAddress", pExchangeOrderActionField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeOrderActionErrorField *pExchangeOrderActionErrorField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "OrderSysID", "TraderID", "InstallID", "OrderLocalID", "ActionLocalID", "ErrorID", "ErrorMsg", nullptr};
	char *pExchangeOrderActionErrorField_ExchangeID = nullptr;
	char *pExchangeOrderActionErrorField_OrderSysID = nullptr;
	char *pExchangeOrderActionErrorField_TraderID = nullptr;
	int pExchangeOrderActionErrorField_InstallID = 0;
	char *pExchangeOrderActionErrorField_OrderLocalID = nullptr;
	char *pExchangeOrderActionErrorField_ActionLocalID = nullptr;
	int pExchangeOrderActionErrorField_ErrorID = 0;
	char *pExchangeOrderActionErrorField_ErrorMsg = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeOrderActionErrorField, "|yyyiyyiy")
		, &pExchangeOrderActionErrorField_ExchangeID
		, &pExchangeOrderActionErrorField_OrderSysID
		, &pExchangeOrderActionErrorField_TraderID
		, &pExchangeOrderActionErrorField_InstallID
		, &pExchangeOrderActionErrorField_OrderLocalID
		, &pExchangeOrderActionErrorField_ActionLocalID
		, &pExchangeOrderActionErrorField_ErrorID
		, &pExchangeOrderActionErrorField_ErrorMsg
	PyCTP_PyDict_FromStruct_END
		if(pExchangeOrderActionErrorField_ExchangeID != nullptr){ strcpy_s(pExchangeOrderActionErrorField->ExchangeID, pExchangeOrderActionErrorField_ExchangeID); pExchangeOrderActionErrorField_ExchangeID = nullptr; }
		if(pExchangeOrderActionErrorField_OrderSysID != nullptr){ strcpy_s(pExchangeOrderActionErrorField->OrderSysID, pExchangeOrderActionErrorField_OrderSysID); pExchangeOrderActionErrorField_OrderSysID = nullptr; }
		if(pExchangeOrderActionErrorField_TraderID != nullptr){ strcpy_s(pExchangeOrderActionErrorField->TraderID, pExchangeOrderActionErrorField_TraderID); pExchangeOrderActionErrorField_TraderID = nullptr; }
		pExchangeOrderActionErrorField->InstallID = pExchangeOrderActionErrorField_InstallID;
		if(pExchangeOrderActionErrorField_OrderLocalID != nullptr){ strcpy_s(pExchangeOrderActionErrorField->OrderLocalID, pExchangeOrderActionErrorField_OrderLocalID); pExchangeOrderActionErrorField_OrderLocalID = nullptr; }
		if(pExchangeOrderActionErrorField_ActionLocalID != nullptr){ strcpy_s(pExchangeOrderActionErrorField->ActionLocalID, pExchangeOrderActionErrorField_ActionLocalID); pExchangeOrderActionErrorField_ActionLocalID = nullptr; }
		pExchangeOrderActionErrorField->ErrorID = pExchangeOrderActionErrorField_ErrorID;
		if(pExchangeOrderActionErrorField_ErrorMsg != nullptr){ strcpy_s(pExchangeOrderActionErrorField->ErrorMsg, pExchangeOrderActionErrorField_ErrorMsg); pExchangeOrderActionErrorField_ErrorMsg = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeOrderActionErrorField *pExchangeOrderActionErrorField)
{
	if(pExchangeOrderActionErrorField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:i,s:y,s:y,s:i,s:y}"
		, "ExchangeID", pExchangeOrderActionErrorField->ExchangeID
		, "OrderSysID", pExchangeOrderActionErrorField->OrderSysID
		, "TraderID", pExchangeOrderActionErrorField->TraderID
		, "InstallID", pExchangeOrderActionErrorField->InstallID
		, "OrderLocalID", pExchangeOrderActionErrorField->OrderLocalID
		, "ActionLocalID", pExchangeOrderActionErrorField->ActionLocalID
		, "ErrorID", pExchangeOrderActionErrorField->ErrorID
		, "ErrorMsg", pExchangeOrderActionErrorField->ErrorMsg
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeTradeField *pExchangeTradeField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "TradeID", "Direction", "OrderSysID", "ParticipantID", "ClientID", "TradingRole", "ExchangeInstID", "OffsetFlag", "HedgeFlag", "Price", "Volume", "TradeDate", "TradeTime", "TradeType", "PriceSource", "TraderID", "OrderLocalID", "ClearingPartID", "BusinessUnit", "SequenceNo", "TradeSource", nullptr};
	char *pExchangeTradeField_ExchangeID = nullptr;
	char *pExchangeTradeField_TradeID = nullptr;
	char pExchangeTradeField_Direction = 0;
	char *pExchangeTradeField_OrderSysID = nullptr;
	char *pExchangeTradeField_ParticipantID = nullptr;
	char *pExchangeTradeField_ClientID = nullptr;
	char pExchangeTradeField_TradingRole = 0;
	char *pExchangeTradeField_ExchangeInstID = nullptr;
	char pExchangeTradeField_OffsetFlag = 0;
	char pExchangeTradeField_HedgeFlag = 0;
	double pExchangeTradeField_Price = 0.0;
	int pExchangeTradeField_Volume = 0;
	char *pExchangeTradeField_TradeDate = nullptr;
	char *pExchangeTradeField_TradeTime = nullptr;
	char pExchangeTradeField_TradeType = 0;
	char pExchangeTradeField_PriceSource = 0;
	char *pExchangeTradeField_TraderID = nullptr;
	char *pExchangeTradeField_OrderLocalID = nullptr;
	char *pExchangeTradeField_ClearingPartID = nullptr;
	char *pExchangeTradeField_BusinessUnit = nullptr;
	int pExchangeTradeField_SequenceNo = 0;
	char pExchangeTradeField_TradeSource = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeTradeField, "|yycyyycyccdiyyccyyyyic")
		, &pExchangeTradeField_ExchangeID
		, &pExchangeTradeField_TradeID
		, &pExchangeTradeField_Direction
		, &pExchangeTradeField_OrderSysID
		, &pExchangeTradeField_ParticipantID
		, &pExchangeTradeField_ClientID
		, &pExchangeTradeField_TradingRole
		, &pExchangeTradeField_ExchangeInstID
		, &pExchangeTradeField_OffsetFlag
		, &pExchangeTradeField_HedgeFlag
		, &pExchangeTradeField_Price
		, &pExchangeTradeField_Volume
		, &pExchangeTradeField_TradeDate
		, &pExchangeTradeField_TradeTime
		, &pExchangeTradeField_TradeType
		, &pExchangeTradeField_PriceSource
		, &pExchangeTradeField_TraderID
		, &pExchangeTradeField_OrderLocalID
		, &pExchangeTradeField_ClearingPartID
		, &pExchangeTradeField_BusinessUnit
		, &pExchangeTradeField_SequenceNo
		, &pExchangeTradeField_TradeSource
	PyCTP_PyDict_FromStruct_END
		if(pExchangeTradeField_ExchangeID != nullptr){ strcpy_s(pExchangeTradeField->ExchangeID, pExchangeTradeField_ExchangeID); pExchangeTradeField_ExchangeID = nullptr; }
		if(pExchangeTradeField_TradeID != nullptr){ strcpy_s(pExchangeTradeField->TradeID, pExchangeTradeField_TradeID); pExchangeTradeField_TradeID = nullptr; }
		pExchangeTradeField->Direction = pExchangeTradeField_Direction;
		if(pExchangeTradeField_OrderSysID != nullptr){ strcpy_s(pExchangeTradeField->OrderSysID, pExchangeTradeField_OrderSysID); pExchangeTradeField_OrderSysID = nullptr; }
		if(pExchangeTradeField_ParticipantID != nullptr){ strcpy_s(pExchangeTradeField->ParticipantID, pExchangeTradeField_ParticipantID); pExchangeTradeField_ParticipantID = nullptr; }
		if(pExchangeTradeField_ClientID != nullptr){ strcpy_s(pExchangeTradeField->ClientID, pExchangeTradeField_ClientID); pExchangeTradeField_ClientID = nullptr; }
		pExchangeTradeField->TradingRole = pExchangeTradeField_TradingRole;
		if(pExchangeTradeField_ExchangeInstID != nullptr){ strcpy_s(pExchangeTradeField->ExchangeInstID, pExchangeTradeField_ExchangeInstID); pExchangeTradeField_ExchangeInstID = nullptr; }
		pExchangeTradeField->OffsetFlag = pExchangeTradeField_OffsetFlag;
		pExchangeTradeField->HedgeFlag = pExchangeTradeField_HedgeFlag;
		pExchangeTradeField->Price = pExchangeTradeField_Price;
		pExchangeTradeField->Volume = pExchangeTradeField_Volume;
		if(pExchangeTradeField_TradeDate != nullptr){ strcpy_s(pExchangeTradeField->TradeDate, pExchangeTradeField_TradeDate); pExchangeTradeField_TradeDate = nullptr; }
		if(pExchangeTradeField_TradeTime != nullptr){ strcpy_s(pExchangeTradeField->TradeTime, pExchangeTradeField_TradeTime); pExchangeTradeField_TradeTime = nullptr; }
		pExchangeTradeField->TradeType = pExchangeTradeField_TradeType;
		pExchangeTradeField->PriceSource = pExchangeTradeField_PriceSource;
		if(pExchangeTradeField_TraderID != nullptr){ strcpy_s(pExchangeTradeField->TraderID, pExchangeTradeField_TraderID); pExchangeTradeField_TraderID = nullptr; }
		if(pExchangeTradeField_OrderLocalID != nullptr){ strcpy_s(pExchangeTradeField->OrderLocalID, pExchangeTradeField_OrderLocalID); pExchangeTradeField_OrderLocalID = nullptr; }
		if(pExchangeTradeField_ClearingPartID != nullptr){ strcpy_s(pExchangeTradeField->ClearingPartID, pExchangeTradeField_ClearingPartID); pExchangeTradeField_ClearingPartID = nullptr; }
		if(pExchangeTradeField_BusinessUnit != nullptr){ strcpy_s(pExchangeTradeField->BusinessUnit, pExchangeTradeField_BusinessUnit); pExchangeTradeField_BusinessUnit = nullptr; }
		pExchangeTradeField->SequenceNo = pExchangeTradeField_SequenceNo;
		pExchangeTradeField->TradeSource = pExchangeTradeField_TradeSource;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeTradeField *pExchangeTradeField)
{
	if(pExchangeTradeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c,s:y,s:y,s:y,s:c,s:y,s:c,s:c,s:d,s:i,s:y,s:y,s:c,s:c,s:y,s:y,s:y,s:y,s:i,s:c}"
		, "ExchangeID", pExchangeTradeField->ExchangeID
		, "TradeID", pExchangeTradeField->TradeID
		, "Direction", pExchangeTradeField->Direction
		, "OrderSysID", pExchangeTradeField->OrderSysID
		, "ParticipantID", pExchangeTradeField->ParticipantID
		, "ClientID", pExchangeTradeField->ClientID
		, "TradingRole", pExchangeTradeField->TradingRole
		, "ExchangeInstID", pExchangeTradeField->ExchangeInstID
		, "OffsetFlag", pExchangeTradeField->OffsetFlag
		, "HedgeFlag", pExchangeTradeField->HedgeFlag
		, "Price", pExchangeTradeField->Price
		, "Volume", pExchangeTradeField->Volume
		, "TradeDate", pExchangeTradeField->TradeDate
		, "TradeTime", pExchangeTradeField->TradeTime
		, "TradeType", pExchangeTradeField->TradeType
		, "PriceSource", pExchangeTradeField->PriceSource
		, "TraderID", pExchangeTradeField->TraderID
		, "OrderLocalID", pExchangeTradeField->OrderLocalID
		, "ClearingPartID", pExchangeTradeField->ClearingPartID
		, "BusinessUnit", pExchangeTradeField->BusinessUnit
		, "SequenceNo", pExchangeTradeField->SequenceNo
		, "TradeSource", pExchangeTradeField->TradeSource
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTradeField *pTradeField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "OrderRef", "UserID", "ExchangeID", "TradeID", "Direction", "OrderSysID", "ParticipantID", "ClientID", "TradingRole", "ExchangeInstID", "OffsetFlag", "HedgeFlag", "Price", "Volume", "TradeDate", "TradeTime", "TradeType", "PriceSource", "TraderID", "OrderLocalID", "ClearingPartID", "BusinessUnit", "SequenceNo", "TradingDay", "SettlementID", "BrokerOrderSeq", "TradeSource", "InvestUnitID", nullptr};
	char *pTradeField_BrokerID = nullptr;
	char *pTradeField_InvestorID = nullptr;
	char *pTradeField_InstrumentID = nullptr;
	char *pTradeField_OrderRef = nullptr;
	char *pTradeField_UserID = nullptr;
	char *pTradeField_ExchangeID = nullptr;
	char *pTradeField_TradeID = nullptr;
	char pTradeField_Direction = 0;
	char *pTradeField_OrderSysID = nullptr;
	char *pTradeField_ParticipantID = nullptr;
	char *pTradeField_ClientID = nullptr;
	char pTradeField_TradingRole = 0;
	char *pTradeField_ExchangeInstID = nullptr;
	char pTradeField_OffsetFlag = 0;
	char pTradeField_HedgeFlag = 0;
	double pTradeField_Price = 0.0;
	int pTradeField_Volume = 0;
	char *pTradeField_TradeDate = nullptr;
	char *pTradeField_TradeTime = nullptr;
	char pTradeField_TradeType = 0;
	char pTradeField_PriceSource = 0;
	char *pTradeField_TraderID = nullptr;
	char *pTradeField_OrderLocalID = nullptr;
	char *pTradeField_ClearingPartID = nullptr;
	char *pTradeField_BusinessUnit = nullptr;
	int pTradeField_SequenceNo = 0;
	char *pTradeField_TradingDay = nullptr;
	int pTradeField_SettlementID = 0;
	int pTradeField_BrokerOrderSeq = 0;
	char pTradeField_TradeSource = 0;
	char *pTradeField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTradeField, "|yyyyyyycyyycyccdiyyccyyyyiyiicy")
		, &pTradeField_BrokerID
		, &pTradeField_InvestorID
		, &pTradeField_InstrumentID
		, &pTradeField_OrderRef
		, &pTradeField_UserID
		, &pTradeField_ExchangeID
		, &pTradeField_TradeID
		, &pTradeField_Direction
		, &pTradeField_OrderSysID
		, &pTradeField_ParticipantID
		, &pTradeField_ClientID
		, &pTradeField_TradingRole
		, &pTradeField_ExchangeInstID
		, &pTradeField_OffsetFlag
		, &pTradeField_HedgeFlag
		, &pTradeField_Price
		, &pTradeField_Volume
		, &pTradeField_TradeDate
		, &pTradeField_TradeTime
		, &pTradeField_TradeType
		, &pTradeField_PriceSource
		, &pTradeField_TraderID
		, &pTradeField_OrderLocalID
		, &pTradeField_ClearingPartID
		, &pTradeField_BusinessUnit
		, &pTradeField_SequenceNo
		, &pTradeField_TradingDay
		, &pTradeField_SettlementID
		, &pTradeField_BrokerOrderSeq
		, &pTradeField_TradeSource
		, &pTradeField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pTradeField_BrokerID != nullptr){ strcpy_s(pTradeField->BrokerID, pTradeField_BrokerID); pTradeField_BrokerID = nullptr; }
		if(pTradeField_InvestorID != nullptr){ strcpy_s(pTradeField->InvestorID, pTradeField_InvestorID); pTradeField_InvestorID = nullptr; }
		if(pTradeField_InstrumentID != nullptr){ strcpy_s(pTradeField->InstrumentID, pTradeField_InstrumentID); pTradeField_InstrumentID = nullptr; }
		if(pTradeField_OrderRef != nullptr){ strcpy_s(pTradeField->OrderRef, pTradeField_OrderRef); pTradeField_OrderRef = nullptr; }
		if(pTradeField_UserID != nullptr){ strcpy_s(pTradeField->UserID, pTradeField_UserID); pTradeField_UserID = nullptr; }
		if(pTradeField_ExchangeID != nullptr){ strcpy_s(pTradeField->ExchangeID, pTradeField_ExchangeID); pTradeField_ExchangeID = nullptr; }
		if(pTradeField_TradeID != nullptr){ strcpy_s(pTradeField->TradeID, pTradeField_TradeID); pTradeField_TradeID = nullptr; }
		pTradeField->Direction = pTradeField_Direction;
		if(pTradeField_OrderSysID != nullptr){ strcpy_s(pTradeField->OrderSysID, pTradeField_OrderSysID); pTradeField_OrderSysID = nullptr; }
		if(pTradeField_ParticipantID != nullptr){ strcpy_s(pTradeField->ParticipantID, pTradeField_ParticipantID); pTradeField_ParticipantID = nullptr; }
		if(pTradeField_ClientID != nullptr){ strcpy_s(pTradeField->ClientID, pTradeField_ClientID); pTradeField_ClientID = nullptr; }
		pTradeField->TradingRole = pTradeField_TradingRole;
		if(pTradeField_ExchangeInstID != nullptr){ strcpy_s(pTradeField->ExchangeInstID, pTradeField_ExchangeInstID); pTradeField_ExchangeInstID = nullptr; }
		pTradeField->OffsetFlag = pTradeField_OffsetFlag;
		pTradeField->HedgeFlag = pTradeField_HedgeFlag;
		pTradeField->Price = pTradeField_Price;
		pTradeField->Volume = pTradeField_Volume;
		if(pTradeField_TradeDate != nullptr){ strcpy_s(pTradeField->TradeDate, pTradeField_TradeDate); pTradeField_TradeDate = nullptr; }
		if(pTradeField_TradeTime != nullptr){ strcpy_s(pTradeField->TradeTime, pTradeField_TradeTime); pTradeField_TradeTime = nullptr; }
		pTradeField->TradeType = pTradeField_TradeType;
		pTradeField->PriceSource = pTradeField_PriceSource;
		if(pTradeField_TraderID != nullptr){ strcpy_s(pTradeField->TraderID, pTradeField_TraderID); pTradeField_TraderID = nullptr; }
		if(pTradeField_OrderLocalID != nullptr){ strcpy_s(pTradeField->OrderLocalID, pTradeField_OrderLocalID); pTradeField_OrderLocalID = nullptr; }
		if(pTradeField_ClearingPartID != nullptr){ strcpy_s(pTradeField->ClearingPartID, pTradeField_ClearingPartID); pTradeField_ClearingPartID = nullptr; }
		if(pTradeField_BusinessUnit != nullptr){ strcpy_s(pTradeField->BusinessUnit, pTradeField_BusinessUnit); pTradeField_BusinessUnit = nullptr; }
		pTradeField->SequenceNo = pTradeField_SequenceNo;
		if(pTradeField_TradingDay != nullptr){ strcpy_s(pTradeField->TradingDay, pTradeField_TradingDay); pTradeField_TradingDay = nullptr; }
		pTradeField->SettlementID = pTradeField_SettlementID;
		pTradeField->BrokerOrderSeq = pTradeField_BrokerOrderSeq;
		pTradeField->TradeSource = pTradeField_TradeSource;
		if(pTradeField_InvestUnitID != nullptr){ strcpy_s(pTradeField->InvestUnitID, pTradeField_InvestUnitID); pTradeField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTradeField *pTradeField)
{
	if(pTradeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:y,s:c,s:y,s:c,s:c,s:d,s:i,s:y,s:y,s:c,s:c,s:y,s:y,s:y,s:y,s:i,s:y,s:i,s:i,s:c,s:y}"
		, "BrokerID", pTradeField->BrokerID
		, "InvestorID", pTradeField->InvestorID
		, "InstrumentID", pTradeField->InstrumentID
		, "OrderRef", pTradeField->OrderRef
		, "UserID", pTradeField->UserID
		, "ExchangeID", pTradeField->ExchangeID
		, "TradeID", pTradeField->TradeID
		, "Direction", pTradeField->Direction
		, "OrderSysID", pTradeField->OrderSysID
		, "ParticipantID", pTradeField->ParticipantID
		, "ClientID", pTradeField->ClientID
		, "TradingRole", pTradeField->TradingRole
		, "ExchangeInstID", pTradeField->ExchangeInstID
		, "OffsetFlag", pTradeField->OffsetFlag
		, "HedgeFlag", pTradeField->HedgeFlag
		, "Price", pTradeField->Price
		, "Volume", pTradeField->Volume
		, "TradeDate", pTradeField->TradeDate
		, "TradeTime", pTradeField->TradeTime
		, "TradeType", pTradeField->TradeType
		, "PriceSource", pTradeField->PriceSource
		, "TraderID", pTradeField->TraderID
		, "OrderLocalID", pTradeField->OrderLocalID
		, "ClearingPartID", pTradeField->ClearingPartID
		, "BusinessUnit", pTradeField->BusinessUnit
		, "SequenceNo", pTradeField->SequenceNo
		, "TradingDay", pTradeField->TradingDay
		, "SettlementID", pTradeField->SettlementID
		, "BrokerOrderSeq", pTradeField->BrokerOrderSeq
		, "TradeSource", pTradeField->TradeSource
		, "InvestUnitID", pTradeField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcUserSessionField *pUserSessionField, PyObject *dict)
{
	static char *kwlist[] = {"FrontID", "SessionID", "BrokerID", "UserID", "LoginDate", "LoginTime", "IPAddress", "UserProductInfo", "InterfaceProductInfo", "ProtocolInfo", "MacAddress", "LoginRemark", nullptr};
	int pUserSessionField_FrontID = 0;
	int pUserSessionField_SessionID = 0;
	char *pUserSessionField_BrokerID = nullptr;
	char *pUserSessionField_UserID = nullptr;
	char *pUserSessionField_LoginDate = nullptr;
	char *pUserSessionField_LoginTime = nullptr;
	char *pUserSessionField_IPAddress = nullptr;
	char *pUserSessionField_UserProductInfo = nullptr;
	char *pUserSessionField_InterfaceProductInfo = nullptr;
	char *pUserSessionField_ProtocolInfo = nullptr;
	char *pUserSessionField_MacAddress = nullptr;
	char *pUserSessionField_LoginRemark = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pUserSessionField, "|iiyyyyyyyyyy")
		, &pUserSessionField_FrontID
		, &pUserSessionField_SessionID
		, &pUserSessionField_BrokerID
		, &pUserSessionField_UserID
		, &pUserSessionField_LoginDate
		, &pUserSessionField_LoginTime
		, &pUserSessionField_IPAddress
		, &pUserSessionField_UserProductInfo
		, &pUserSessionField_InterfaceProductInfo
		, &pUserSessionField_ProtocolInfo
		, &pUserSessionField_MacAddress
		, &pUserSessionField_LoginRemark
	PyCTP_PyDict_FromStruct_END
		pUserSessionField->FrontID = pUserSessionField_FrontID;
		pUserSessionField->SessionID = pUserSessionField_SessionID;
		if(pUserSessionField_BrokerID != nullptr){ strcpy_s(pUserSessionField->BrokerID, pUserSessionField_BrokerID); pUserSessionField_BrokerID = nullptr; }
		if(pUserSessionField_UserID != nullptr){ strcpy_s(pUserSessionField->UserID, pUserSessionField_UserID); pUserSessionField_UserID = nullptr; }
		if(pUserSessionField_LoginDate != nullptr){ strcpy_s(pUserSessionField->LoginDate, pUserSessionField_LoginDate); pUserSessionField_LoginDate = nullptr; }
		if(pUserSessionField_LoginTime != nullptr){ strcpy_s(pUserSessionField->LoginTime, pUserSessionField_LoginTime); pUserSessionField_LoginTime = nullptr; }
		if(pUserSessionField_IPAddress != nullptr){ strcpy_s(pUserSessionField->IPAddress, pUserSessionField_IPAddress); pUserSessionField_IPAddress = nullptr; }
		if(pUserSessionField_UserProductInfo != nullptr){ strcpy_s(pUserSessionField->UserProductInfo, pUserSessionField_UserProductInfo); pUserSessionField_UserProductInfo = nullptr; }
		if(pUserSessionField_InterfaceProductInfo != nullptr){ strcpy_s(pUserSessionField->InterfaceProductInfo, pUserSessionField_InterfaceProductInfo); pUserSessionField_InterfaceProductInfo = nullptr; }
		if(pUserSessionField_ProtocolInfo != nullptr){ strcpy_s(pUserSessionField->ProtocolInfo, pUserSessionField_ProtocolInfo); pUserSessionField_ProtocolInfo = nullptr; }
		if(pUserSessionField_MacAddress != nullptr){ strcpy_s(pUserSessionField->MacAddress, pUserSessionField_MacAddress); pUserSessionField_MacAddress = nullptr; }
		if(pUserSessionField_LoginRemark != nullptr){ strcpy_s(pUserSessionField->LoginRemark, pUserSessionField_LoginRemark); pUserSessionField_LoginRemark = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcUserSessionField *pUserSessionField)
{
	if(pUserSessionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "FrontID", pUserSessionField->FrontID
		, "SessionID", pUserSessionField->SessionID
		, "BrokerID", pUserSessionField->BrokerID
		, "UserID", pUserSessionField->UserID
		, "LoginDate", pUserSessionField->LoginDate
		, "LoginTime", pUserSessionField->LoginTime
		, "IPAddress", pUserSessionField->IPAddress
		, "UserProductInfo", pUserSessionField->UserProductInfo
		, "InterfaceProductInfo", pUserSessionField->InterfaceProductInfo
		, "ProtocolInfo", pUserSessionField->ProtocolInfo
		, "MacAddress", pUserSessionField->MacAddress
		, "LoginRemark", pUserSessionField->LoginRemark
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQueryMaxOrderVolumeField *pQueryMaxOrderVolumeField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "Direction", "OffsetFlag", "HedgeFlag", "MaxVolume", "ExchangeID", "InvestUnitID", nullptr};
	char *pQueryMaxOrderVolumeField_BrokerID = nullptr;
	char *pQueryMaxOrderVolumeField_InvestorID = nullptr;
	char *pQueryMaxOrderVolumeField_InstrumentID = nullptr;
	char pQueryMaxOrderVolumeField_Direction = 0;
	char pQueryMaxOrderVolumeField_OffsetFlag = 0;
	char pQueryMaxOrderVolumeField_HedgeFlag = 0;
	int pQueryMaxOrderVolumeField_MaxVolume = 0;
	char *pQueryMaxOrderVolumeField_ExchangeID = nullptr;
	char *pQueryMaxOrderVolumeField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQueryMaxOrderVolumeField, "|yyyccciyy")
		, &pQueryMaxOrderVolumeField_BrokerID
		, &pQueryMaxOrderVolumeField_InvestorID
		, &pQueryMaxOrderVolumeField_InstrumentID
		, &pQueryMaxOrderVolumeField_Direction
		, &pQueryMaxOrderVolumeField_OffsetFlag
		, &pQueryMaxOrderVolumeField_HedgeFlag
		, &pQueryMaxOrderVolumeField_MaxVolume
		, &pQueryMaxOrderVolumeField_ExchangeID
		, &pQueryMaxOrderVolumeField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQueryMaxOrderVolumeField_BrokerID != nullptr){ strcpy_s(pQueryMaxOrderVolumeField->BrokerID, pQueryMaxOrderVolumeField_BrokerID); pQueryMaxOrderVolumeField_BrokerID = nullptr; }
		if(pQueryMaxOrderVolumeField_InvestorID != nullptr){ strcpy_s(pQueryMaxOrderVolumeField->InvestorID, pQueryMaxOrderVolumeField_InvestorID); pQueryMaxOrderVolumeField_InvestorID = nullptr; }
		if(pQueryMaxOrderVolumeField_InstrumentID != nullptr){ strcpy_s(pQueryMaxOrderVolumeField->InstrumentID, pQueryMaxOrderVolumeField_InstrumentID); pQueryMaxOrderVolumeField_InstrumentID = nullptr; }
		pQueryMaxOrderVolumeField->Direction = pQueryMaxOrderVolumeField_Direction;
		pQueryMaxOrderVolumeField->OffsetFlag = pQueryMaxOrderVolumeField_OffsetFlag;
		pQueryMaxOrderVolumeField->HedgeFlag = pQueryMaxOrderVolumeField_HedgeFlag;
		pQueryMaxOrderVolumeField->MaxVolume = pQueryMaxOrderVolumeField_MaxVolume;
		if(pQueryMaxOrderVolumeField_ExchangeID != nullptr){ strcpy_s(pQueryMaxOrderVolumeField->ExchangeID, pQueryMaxOrderVolumeField_ExchangeID); pQueryMaxOrderVolumeField_ExchangeID = nullptr; }
		if(pQueryMaxOrderVolumeField_InvestUnitID != nullptr){ strcpy_s(pQueryMaxOrderVolumeField->InvestUnitID, pQueryMaxOrderVolumeField_InvestUnitID); pQueryMaxOrderVolumeField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQueryMaxOrderVolumeField *pQueryMaxOrderVolumeField)
{
	if(pQueryMaxOrderVolumeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:c,s:c,s:c,s:i,s:y,s:y}"
		, "BrokerID", pQueryMaxOrderVolumeField->BrokerID
		, "InvestorID", pQueryMaxOrderVolumeField->InvestorID
		, "InstrumentID", pQueryMaxOrderVolumeField->InstrumentID
		, "Direction", pQueryMaxOrderVolumeField->Direction
		, "OffsetFlag", pQueryMaxOrderVolumeField->OffsetFlag
		, "HedgeFlag", pQueryMaxOrderVolumeField->HedgeFlag
		, "MaxVolume", pQueryMaxOrderVolumeField->MaxVolume
		, "ExchangeID", pQueryMaxOrderVolumeField->ExchangeID
		, "InvestUnitID", pQueryMaxOrderVolumeField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSettlementInfoConfirmField *pSettlementInfoConfirmField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "ConfirmDate", "ConfirmTime", "SettlementID", "AccountID", "CurrencyID", nullptr};
	char *pSettlementInfoConfirmField_BrokerID = nullptr;
	char *pSettlementInfoConfirmField_InvestorID = nullptr;
	char *pSettlementInfoConfirmField_ConfirmDate = nullptr;
	char *pSettlementInfoConfirmField_ConfirmTime = nullptr;
	int pSettlementInfoConfirmField_SettlementID = 0;
	char *pSettlementInfoConfirmField_AccountID = nullptr;
	char *pSettlementInfoConfirmField_CurrencyID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pSettlementInfoConfirmField, "|yyyyiyy")
		, &pSettlementInfoConfirmField_BrokerID
		, &pSettlementInfoConfirmField_InvestorID
		, &pSettlementInfoConfirmField_ConfirmDate
		, &pSettlementInfoConfirmField_ConfirmTime
		, &pSettlementInfoConfirmField_SettlementID
		, &pSettlementInfoConfirmField_AccountID
		, &pSettlementInfoConfirmField_CurrencyID
	PyCTP_PyDict_FromStruct_END
		if(pSettlementInfoConfirmField_BrokerID != nullptr){ strcpy_s(pSettlementInfoConfirmField->BrokerID, pSettlementInfoConfirmField_BrokerID); pSettlementInfoConfirmField_BrokerID = nullptr; }
		if(pSettlementInfoConfirmField_InvestorID != nullptr){ strcpy_s(pSettlementInfoConfirmField->InvestorID, pSettlementInfoConfirmField_InvestorID); pSettlementInfoConfirmField_InvestorID = nullptr; }
		if(pSettlementInfoConfirmField_ConfirmDate != nullptr){ strcpy_s(pSettlementInfoConfirmField->ConfirmDate, pSettlementInfoConfirmField_ConfirmDate); pSettlementInfoConfirmField_ConfirmDate = nullptr; }
		if(pSettlementInfoConfirmField_ConfirmTime != nullptr){ strcpy_s(pSettlementInfoConfirmField->ConfirmTime, pSettlementInfoConfirmField_ConfirmTime); pSettlementInfoConfirmField_ConfirmTime = nullptr; }
		pSettlementInfoConfirmField->SettlementID = pSettlementInfoConfirmField_SettlementID;
		if(pSettlementInfoConfirmField_AccountID != nullptr){ strcpy_s(pSettlementInfoConfirmField->AccountID, pSettlementInfoConfirmField_AccountID); pSettlementInfoConfirmField_AccountID = nullptr; }
		if(pSettlementInfoConfirmField_CurrencyID != nullptr){ strcpy_s(pSettlementInfoConfirmField->CurrencyID, pSettlementInfoConfirmField_CurrencyID); pSettlementInfoConfirmField_CurrencyID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSettlementInfoConfirmField *pSettlementInfoConfirmField)
{
	if(pSettlementInfoConfirmField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:i,s:y,s:y}"
		, "BrokerID", pSettlementInfoConfirmField->BrokerID
		, "InvestorID", pSettlementInfoConfirmField->InvestorID
		, "ConfirmDate", pSettlementInfoConfirmField->ConfirmDate
		, "ConfirmTime", pSettlementInfoConfirmField->ConfirmTime
		, "SettlementID", pSettlementInfoConfirmField->SettlementID
		, "AccountID", pSettlementInfoConfirmField->AccountID
		, "CurrencyID", pSettlementInfoConfirmField->CurrencyID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSyncDepositField *pSyncDepositField, PyObject *dict)
{
	static char *kwlist[] = {"DepositSeqNo", "BrokerID", "InvestorID", "Deposit", "IsForce", "CurrencyID", nullptr};
	char *pSyncDepositField_DepositSeqNo = nullptr;
	char *pSyncDepositField_BrokerID = nullptr;
	char *pSyncDepositField_InvestorID = nullptr;
	double pSyncDepositField_Deposit = 0.0;
	int pSyncDepositField_IsForce = 0;
	char *pSyncDepositField_CurrencyID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pSyncDepositField, "|yyydiy")
		, &pSyncDepositField_DepositSeqNo
		, &pSyncDepositField_BrokerID
		, &pSyncDepositField_InvestorID
		, &pSyncDepositField_Deposit
		, &pSyncDepositField_IsForce
		, &pSyncDepositField_CurrencyID
	PyCTP_PyDict_FromStruct_END
		if(pSyncDepositField_DepositSeqNo != nullptr){ strcpy_s(pSyncDepositField->DepositSeqNo, pSyncDepositField_DepositSeqNo); pSyncDepositField_DepositSeqNo = nullptr; }
		if(pSyncDepositField_BrokerID != nullptr){ strcpy_s(pSyncDepositField->BrokerID, pSyncDepositField_BrokerID); pSyncDepositField_BrokerID = nullptr; }
		if(pSyncDepositField_InvestorID != nullptr){ strcpy_s(pSyncDepositField->InvestorID, pSyncDepositField_InvestorID); pSyncDepositField_InvestorID = nullptr; }
		pSyncDepositField->Deposit = pSyncDepositField_Deposit;
		pSyncDepositField->IsForce = pSyncDepositField_IsForce;
		if(pSyncDepositField_CurrencyID != nullptr){ strcpy_s(pSyncDepositField->CurrencyID, pSyncDepositField_CurrencyID); pSyncDepositField_CurrencyID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSyncDepositField *pSyncDepositField)
{
	if(pSyncDepositField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:d,s:i,s:y}"
		, "DepositSeqNo", pSyncDepositField->DepositSeqNo
		, "BrokerID", pSyncDepositField->BrokerID
		, "InvestorID", pSyncDepositField->InvestorID
		, "Deposit", pSyncDepositField->Deposit
		, "IsForce", pSyncDepositField->IsForce
		, "CurrencyID", pSyncDepositField->CurrencyID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSyncFundMortgageField *pSyncFundMortgageField, PyObject *dict)
{
	static char *kwlist[] = {"MortgageSeqNo", "BrokerID", "InvestorID", "FromCurrencyID", "MortgageAmount", "ToCurrencyID", nullptr};
	char *pSyncFundMortgageField_MortgageSeqNo = nullptr;
	char *pSyncFundMortgageField_BrokerID = nullptr;
	char *pSyncFundMortgageField_InvestorID = nullptr;
	char *pSyncFundMortgageField_FromCurrencyID = nullptr;
	double pSyncFundMortgageField_MortgageAmount = 0.0;
	char *pSyncFundMortgageField_ToCurrencyID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pSyncFundMortgageField, "|yyyydy")
		, &pSyncFundMortgageField_MortgageSeqNo
		, &pSyncFundMortgageField_BrokerID
		, &pSyncFundMortgageField_InvestorID
		, &pSyncFundMortgageField_FromCurrencyID
		, &pSyncFundMortgageField_MortgageAmount
		, &pSyncFundMortgageField_ToCurrencyID
	PyCTP_PyDict_FromStruct_END
		if(pSyncFundMortgageField_MortgageSeqNo != nullptr){ strcpy_s(pSyncFundMortgageField->MortgageSeqNo, pSyncFundMortgageField_MortgageSeqNo); pSyncFundMortgageField_MortgageSeqNo = nullptr; }
		if(pSyncFundMortgageField_BrokerID != nullptr){ strcpy_s(pSyncFundMortgageField->BrokerID, pSyncFundMortgageField_BrokerID); pSyncFundMortgageField_BrokerID = nullptr; }
		if(pSyncFundMortgageField_InvestorID != nullptr){ strcpy_s(pSyncFundMortgageField->InvestorID, pSyncFundMortgageField_InvestorID); pSyncFundMortgageField_InvestorID = nullptr; }
		if(pSyncFundMortgageField_FromCurrencyID != nullptr){ strcpy_s(pSyncFundMortgageField->FromCurrencyID, pSyncFundMortgageField_FromCurrencyID); pSyncFundMortgageField_FromCurrencyID = nullptr; }
		pSyncFundMortgageField->MortgageAmount = pSyncFundMortgageField_MortgageAmount;
		if(pSyncFundMortgageField_ToCurrencyID != nullptr){ strcpy_s(pSyncFundMortgageField->ToCurrencyID, pSyncFundMortgageField_ToCurrencyID); pSyncFundMortgageField_ToCurrencyID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSyncFundMortgageField *pSyncFundMortgageField)
{
	if(pSyncFundMortgageField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:d,s:y}"
		, "MortgageSeqNo", pSyncFundMortgageField->MortgageSeqNo
		, "BrokerID", pSyncFundMortgageField->BrokerID
		, "InvestorID", pSyncFundMortgageField->InvestorID
		, "FromCurrencyID", pSyncFundMortgageField->FromCurrencyID
		, "MortgageAmount", pSyncFundMortgageField->MortgageAmount
		, "ToCurrencyID", pSyncFundMortgageField->ToCurrencyID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcBrokerSyncField *pBrokerSyncField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", nullptr};
	char *pBrokerSyncField_BrokerID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pBrokerSyncField, "|y")
		, &pBrokerSyncField_BrokerID
	PyCTP_PyDict_FromStruct_END
		if(pBrokerSyncField_BrokerID != nullptr){ strcpy_s(pBrokerSyncField->BrokerID, pBrokerSyncField_BrokerID); pBrokerSyncField_BrokerID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcBrokerSyncField *pBrokerSyncField)
{
	if(pBrokerSyncField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y}"
		, "BrokerID", pBrokerSyncField->BrokerID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSyncingInvestorField *pSyncingInvestorField, PyObject *dict)
{
	static char *kwlist[] = {"InvestorID", "BrokerID", "InvestorGroupID", "InvestorName", "IdentifiedCardType", "IdentifiedCardNo", "IsActive", "Telephone", "Address", "OpenDate", "Mobile", "CommModelID", "MarginModelID", nullptr};
	char *pSyncingInvestorField_InvestorID = nullptr;
	char *pSyncingInvestorField_BrokerID = nullptr;
	char *pSyncingInvestorField_InvestorGroupID = nullptr;
	char *pSyncingInvestorField_InvestorName = nullptr;
	char pSyncingInvestorField_IdentifiedCardType = 0;
	char *pSyncingInvestorField_IdentifiedCardNo = nullptr;
	int pSyncingInvestorField_IsActive = 0;
	char *pSyncingInvestorField_Telephone = nullptr;
	char *pSyncingInvestorField_Address = nullptr;
	char *pSyncingInvestorField_OpenDate = nullptr;
	char *pSyncingInvestorField_Mobile = nullptr;
	char *pSyncingInvestorField_CommModelID = nullptr;
	char *pSyncingInvestorField_MarginModelID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pSyncingInvestorField, "|yyyycyiyyyyyy")
		, &pSyncingInvestorField_InvestorID
		, &pSyncingInvestorField_BrokerID
		, &pSyncingInvestorField_InvestorGroupID
		, &pSyncingInvestorField_InvestorName
		, &pSyncingInvestorField_IdentifiedCardType
		, &pSyncingInvestorField_IdentifiedCardNo
		, &pSyncingInvestorField_IsActive
		, &pSyncingInvestorField_Telephone
		, &pSyncingInvestorField_Address
		, &pSyncingInvestorField_OpenDate
		, &pSyncingInvestorField_Mobile
		, &pSyncingInvestorField_CommModelID
		, &pSyncingInvestorField_MarginModelID
	PyCTP_PyDict_FromStruct_END
		if(pSyncingInvestorField_InvestorID != nullptr){ strcpy_s(pSyncingInvestorField->InvestorID, pSyncingInvestorField_InvestorID); pSyncingInvestorField_InvestorID = nullptr; }
		if(pSyncingInvestorField_BrokerID != nullptr){ strcpy_s(pSyncingInvestorField->BrokerID, pSyncingInvestorField_BrokerID); pSyncingInvestorField_BrokerID = nullptr; }
		if(pSyncingInvestorField_InvestorGroupID != nullptr){ strcpy_s(pSyncingInvestorField->InvestorGroupID, pSyncingInvestorField_InvestorGroupID); pSyncingInvestorField_InvestorGroupID = nullptr; }
		if(pSyncingInvestorField_InvestorName != nullptr){ strcpy_s(pSyncingInvestorField->InvestorName, pSyncingInvestorField_InvestorName); pSyncingInvestorField_InvestorName = nullptr; }
		pSyncingInvestorField->IdentifiedCardType = pSyncingInvestorField_IdentifiedCardType;
		if(pSyncingInvestorField_IdentifiedCardNo != nullptr){ strcpy_s(pSyncingInvestorField->IdentifiedCardNo, pSyncingInvestorField_IdentifiedCardNo); pSyncingInvestorField_IdentifiedCardNo = nullptr; }
		pSyncingInvestorField->IsActive = pSyncingInvestorField_IsActive;
		if(pSyncingInvestorField_Telephone != nullptr){ strcpy_s(pSyncingInvestorField->Telephone, pSyncingInvestorField_Telephone); pSyncingInvestorField_Telephone = nullptr; }
		if(pSyncingInvestorField_Address != nullptr){ strcpy_s(pSyncingInvestorField->Address, pSyncingInvestorField_Address); pSyncingInvestorField_Address = nullptr; }
		if(pSyncingInvestorField_OpenDate != nullptr){ strcpy_s(pSyncingInvestorField->OpenDate, pSyncingInvestorField_OpenDate); pSyncingInvestorField_OpenDate = nullptr; }
		if(pSyncingInvestorField_Mobile != nullptr){ strcpy_s(pSyncingInvestorField->Mobile, pSyncingInvestorField_Mobile); pSyncingInvestorField_Mobile = nullptr; }
		if(pSyncingInvestorField_CommModelID != nullptr){ strcpy_s(pSyncingInvestorField->CommModelID, pSyncingInvestorField_CommModelID); pSyncingInvestorField_CommModelID = nullptr; }
		if(pSyncingInvestorField_MarginModelID != nullptr){ strcpy_s(pSyncingInvestorField->MarginModelID, pSyncingInvestorField_MarginModelID); pSyncingInvestorField_MarginModelID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSyncingInvestorField *pSyncingInvestorField)
{
	if(pSyncingInvestorField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:c,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "InvestorID", pSyncingInvestorField->InvestorID
		, "BrokerID", pSyncingInvestorField->BrokerID
		, "InvestorGroupID", pSyncingInvestorField->InvestorGroupID
		, "InvestorName", pSyncingInvestorField->InvestorName
		, "IdentifiedCardType", pSyncingInvestorField->IdentifiedCardType
		, "IdentifiedCardNo", pSyncingInvestorField->IdentifiedCardNo
		, "IsActive", pSyncingInvestorField->IsActive
		, "Telephone", pSyncingInvestorField->Telephone
		, "Address", pSyncingInvestorField->Address
		, "OpenDate", pSyncingInvestorField->OpenDate
		, "Mobile", pSyncingInvestorField->Mobile
		, "CommModelID", pSyncingInvestorField->CommModelID
		, "MarginModelID", pSyncingInvestorField->MarginModelID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSyncingTradingCodeField *pSyncingTradingCodeField, PyObject *dict)
{
	static char *kwlist[] = {"InvestorID", "BrokerID", "ExchangeID", "ClientID", "IsActive", "ClientIDType", nullptr};
	char *pSyncingTradingCodeField_InvestorID = nullptr;
	char *pSyncingTradingCodeField_BrokerID = nullptr;
	char *pSyncingTradingCodeField_ExchangeID = nullptr;
	char *pSyncingTradingCodeField_ClientID = nullptr;
	int pSyncingTradingCodeField_IsActive = 0;
	char pSyncingTradingCodeField_ClientIDType = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pSyncingTradingCodeField, "|yyyyic")
		, &pSyncingTradingCodeField_InvestorID
		, &pSyncingTradingCodeField_BrokerID
		, &pSyncingTradingCodeField_ExchangeID
		, &pSyncingTradingCodeField_ClientID
		, &pSyncingTradingCodeField_IsActive
		, &pSyncingTradingCodeField_ClientIDType
	PyCTP_PyDict_FromStruct_END
		if(pSyncingTradingCodeField_InvestorID != nullptr){ strcpy_s(pSyncingTradingCodeField->InvestorID, pSyncingTradingCodeField_InvestorID); pSyncingTradingCodeField_InvestorID = nullptr; }
		if(pSyncingTradingCodeField_BrokerID != nullptr){ strcpy_s(pSyncingTradingCodeField->BrokerID, pSyncingTradingCodeField_BrokerID); pSyncingTradingCodeField_BrokerID = nullptr; }
		if(pSyncingTradingCodeField_ExchangeID != nullptr){ strcpy_s(pSyncingTradingCodeField->ExchangeID, pSyncingTradingCodeField_ExchangeID); pSyncingTradingCodeField_ExchangeID = nullptr; }
		if(pSyncingTradingCodeField_ClientID != nullptr){ strcpy_s(pSyncingTradingCodeField->ClientID, pSyncingTradingCodeField_ClientID); pSyncingTradingCodeField_ClientID = nullptr; }
		pSyncingTradingCodeField->IsActive = pSyncingTradingCodeField_IsActive;
		pSyncingTradingCodeField->ClientIDType = pSyncingTradingCodeField_ClientIDType;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSyncingTradingCodeField *pSyncingTradingCodeField)
{
	if(pSyncingTradingCodeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:i,s:c}"
		, "InvestorID", pSyncingTradingCodeField->InvestorID
		, "BrokerID", pSyncingTradingCodeField->BrokerID
		, "ExchangeID", pSyncingTradingCodeField->ExchangeID
		, "ClientID", pSyncingTradingCodeField->ClientID
		, "IsActive", pSyncingTradingCodeField->IsActive
		, "ClientIDType", pSyncingTradingCodeField->ClientIDType
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSyncingInvestorGroupField *pSyncingInvestorGroupField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorGroupID", "InvestorGroupName", nullptr};
	char *pSyncingInvestorGroupField_BrokerID = nullptr;
	char *pSyncingInvestorGroupField_InvestorGroupID = nullptr;
	char *pSyncingInvestorGroupField_InvestorGroupName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pSyncingInvestorGroupField, "|yyy")
		, &pSyncingInvestorGroupField_BrokerID
		, &pSyncingInvestorGroupField_InvestorGroupID
		, &pSyncingInvestorGroupField_InvestorGroupName
	PyCTP_PyDict_FromStruct_END
		if(pSyncingInvestorGroupField_BrokerID != nullptr){ strcpy_s(pSyncingInvestorGroupField->BrokerID, pSyncingInvestorGroupField_BrokerID); pSyncingInvestorGroupField_BrokerID = nullptr; }
		if(pSyncingInvestorGroupField_InvestorGroupID != nullptr){ strcpy_s(pSyncingInvestorGroupField->InvestorGroupID, pSyncingInvestorGroupField_InvestorGroupID); pSyncingInvestorGroupField_InvestorGroupID = nullptr; }
		if(pSyncingInvestorGroupField_InvestorGroupName != nullptr){ strcpy_s(pSyncingInvestorGroupField->InvestorGroupName, pSyncingInvestorGroupField_InvestorGroupName); pSyncingInvestorGroupField_InvestorGroupName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSyncingInvestorGroupField *pSyncingInvestorGroupField)
{
	if(pSyncingInvestorGroupField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pSyncingInvestorGroupField->BrokerID
		, "InvestorGroupID", pSyncingInvestorGroupField->InvestorGroupID
		, "InvestorGroupName", pSyncingInvestorGroupField->InvestorGroupName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSyncingTradingAccountField *pSyncingTradingAccountField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "AccountID", "PreMortgage", "PreCredit", "PreDeposit", "PreBalance", "PreMargin", "InterestBase", "Interest", "Deposit", "Withdraw", "FrozenMargin", "FrozenCash", "FrozenCommission", "CurrMargin", "CashIn", "Commission", "CloseProfit", "PositionProfit", "Balance", "Available", "WithdrawQuota", "Reserve", "TradingDay", "SettlementID", "Credit", "Mortgage", "ExchangeMargin", "DeliveryMargin", "ExchangeDeliveryMargin", "ReserveBalance", "CurrencyID", "PreFundMortgageIn", "PreFundMortgageOut", "FundMortgageIn", "FundMortgageOut", "FundMortgageAvailable", "MortgageableFund", "SpecProductMargin", "SpecProductFrozenMargin", "SpecProductCommission", "SpecProductFrozenCommission", "SpecProductPositionProfit", "SpecProductCloseProfit", "SpecProductPositionProfitByAlg", "SpecProductExchangeMargin", "FrozenSwap", "RemainSwap", nullptr};
	char *pSyncingTradingAccountField_BrokerID = nullptr;
	char *pSyncingTradingAccountField_AccountID = nullptr;
	double pSyncingTradingAccountField_PreMortgage = 0.0;
	double pSyncingTradingAccountField_PreCredit = 0.0;
	double pSyncingTradingAccountField_PreDeposit = 0.0;
	double pSyncingTradingAccountField_PreBalance = 0.0;
	double pSyncingTradingAccountField_PreMargin = 0.0;
	double pSyncingTradingAccountField_InterestBase = 0.0;
	double pSyncingTradingAccountField_Interest = 0.0;
	double pSyncingTradingAccountField_Deposit = 0.0;
	double pSyncingTradingAccountField_Withdraw = 0.0;
	double pSyncingTradingAccountField_FrozenMargin = 0.0;
	double pSyncingTradingAccountField_FrozenCash = 0.0;
	double pSyncingTradingAccountField_FrozenCommission = 0.0;
	double pSyncingTradingAccountField_CurrMargin = 0.0;
	double pSyncingTradingAccountField_CashIn = 0.0;
	double pSyncingTradingAccountField_Commission = 0.0;
	double pSyncingTradingAccountField_CloseProfit = 0.0;
	double pSyncingTradingAccountField_PositionProfit = 0.0;
	double pSyncingTradingAccountField_Balance = 0.0;
	double pSyncingTradingAccountField_Available = 0.0;
	double pSyncingTradingAccountField_WithdrawQuota = 0.0;
	double pSyncingTradingAccountField_Reserve = 0.0;
	char *pSyncingTradingAccountField_TradingDay = nullptr;
	int pSyncingTradingAccountField_SettlementID = 0;
	double pSyncingTradingAccountField_Credit = 0.0;
	double pSyncingTradingAccountField_Mortgage = 0.0;
	double pSyncingTradingAccountField_ExchangeMargin = 0.0;
	double pSyncingTradingAccountField_DeliveryMargin = 0.0;
	double pSyncingTradingAccountField_ExchangeDeliveryMargin = 0.0;
	double pSyncingTradingAccountField_ReserveBalance = 0.0;
	char *pSyncingTradingAccountField_CurrencyID = nullptr;
	double pSyncingTradingAccountField_PreFundMortgageIn = 0.0;
	double pSyncingTradingAccountField_PreFundMortgageOut = 0.0;
	double pSyncingTradingAccountField_FundMortgageIn = 0.0;
	double pSyncingTradingAccountField_FundMortgageOut = 0.0;
	double pSyncingTradingAccountField_FundMortgageAvailable = 0.0;
	double pSyncingTradingAccountField_MortgageableFund = 0.0;
	double pSyncingTradingAccountField_SpecProductMargin = 0.0;
	double pSyncingTradingAccountField_SpecProductFrozenMargin = 0.0;
	double pSyncingTradingAccountField_SpecProductCommission = 0.0;
	double pSyncingTradingAccountField_SpecProductFrozenCommission = 0.0;
	double pSyncingTradingAccountField_SpecProductPositionProfit = 0.0;
	double pSyncingTradingAccountField_SpecProductCloseProfit = 0.0;
	double pSyncingTradingAccountField_SpecProductPositionProfitByAlg = 0.0;
	double pSyncingTradingAccountField_SpecProductExchangeMargin = 0.0;
	double pSyncingTradingAccountField_FrozenSwap = 0.0;
	double pSyncingTradingAccountField_RemainSwap = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pSyncingTradingAccountField, "|yydddddddddddddddddddddyiddddddydddddddddddddddd")
		, &pSyncingTradingAccountField_BrokerID
		, &pSyncingTradingAccountField_AccountID
		, &pSyncingTradingAccountField_PreMortgage
		, &pSyncingTradingAccountField_PreCredit
		, &pSyncingTradingAccountField_PreDeposit
		, &pSyncingTradingAccountField_PreBalance
		, &pSyncingTradingAccountField_PreMargin
		, &pSyncingTradingAccountField_InterestBase
		, &pSyncingTradingAccountField_Interest
		, &pSyncingTradingAccountField_Deposit
		, &pSyncingTradingAccountField_Withdraw
		, &pSyncingTradingAccountField_FrozenMargin
		, &pSyncingTradingAccountField_FrozenCash
		, &pSyncingTradingAccountField_FrozenCommission
		, &pSyncingTradingAccountField_CurrMargin
		, &pSyncingTradingAccountField_CashIn
		, &pSyncingTradingAccountField_Commission
		, &pSyncingTradingAccountField_CloseProfit
		, &pSyncingTradingAccountField_PositionProfit
		, &pSyncingTradingAccountField_Balance
		, &pSyncingTradingAccountField_Available
		, &pSyncingTradingAccountField_WithdrawQuota
		, &pSyncingTradingAccountField_Reserve
		, &pSyncingTradingAccountField_TradingDay
		, &pSyncingTradingAccountField_SettlementID
		, &pSyncingTradingAccountField_Credit
		, &pSyncingTradingAccountField_Mortgage
		, &pSyncingTradingAccountField_ExchangeMargin
		, &pSyncingTradingAccountField_DeliveryMargin
		, &pSyncingTradingAccountField_ExchangeDeliveryMargin
		, &pSyncingTradingAccountField_ReserveBalance
		, &pSyncingTradingAccountField_CurrencyID
		, &pSyncingTradingAccountField_PreFundMortgageIn
		, &pSyncingTradingAccountField_PreFundMortgageOut
		, &pSyncingTradingAccountField_FundMortgageIn
		, &pSyncingTradingAccountField_FundMortgageOut
		, &pSyncingTradingAccountField_FundMortgageAvailable
		, &pSyncingTradingAccountField_MortgageableFund
		, &pSyncingTradingAccountField_SpecProductMargin
		, &pSyncingTradingAccountField_SpecProductFrozenMargin
		, &pSyncingTradingAccountField_SpecProductCommission
		, &pSyncingTradingAccountField_SpecProductFrozenCommission
		, &pSyncingTradingAccountField_SpecProductPositionProfit
		, &pSyncingTradingAccountField_SpecProductCloseProfit
		, &pSyncingTradingAccountField_SpecProductPositionProfitByAlg
		, &pSyncingTradingAccountField_SpecProductExchangeMargin
		, &pSyncingTradingAccountField_FrozenSwap
		, &pSyncingTradingAccountField_RemainSwap
	PyCTP_PyDict_FromStruct_END
		if(pSyncingTradingAccountField_BrokerID != nullptr){ strcpy_s(pSyncingTradingAccountField->BrokerID, pSyncingTradingAccountField_BrokerID); pSyncingTradingAccountField_BrokerID = nullptr; }
		if(pSyncingTradingAccountField_AccountID != nullptr){ strcpy_s(pSyncingTradingAccountField->AccountID, pSyncingTradingAccountField_AccountID); pSyncingTradingAccountField_AccountID = nullptr; }
		pSyncingTradingAccountField->PreMortgage = pSyncingTradingAccountField_PreMortgage;
		pSyncingTradingAccountField->PreCredit = pSyncingTradingAccountField_PreCredit;
		pSyncingTradingAccountField->PreDeposit = pSyncingTradingAccountField_PreDeposit;
		pSyncingTradingAccountField->PreBalance = pSyncingTradingAccountField_PreBalance;
		pSyncingTradingAccountField->PreMargin = pSyncingTradingAccountField_PreMargin;
		pSyncingTradingAccountField->InterestBase = pSyncingTradingAccountField_InterestBase;
		pSyncingTradingAccountField->Interest = pSyncingTradingAccountField_Interest;
		pSyncingTradingAccountField->Deposit = pSyncingTradingAccountField_Deposit;
		pSyncingTradingAccountField->Withdraw = pSyncingTradingAccountField_Withdraw;
		pSyncingTradingAccountField->FrozenMargin = pSyncingTradingAccountField_FrozenMargin;
		pSyncingTradingAccountField->FrozenCash = pSyncingTradingAccountField_FrozenCash;
		pSyncingTradingAccountField->FrozenCommission = pSyncingTradingAccountField_FrozenCommission;
		pSyncingTradingAccountField->CurrMargin = pSyncingTradingAccountField_CurrMargin;
		pSyncingTradingAccountField->CashIn = pSyncingTradingAccountField_CashIn;
		pSyncingTradingAccountField->Commission = pSyncingTradingAccountField_Commission;
		pSyncingTradingAccountField->CloseProfit = pSyncingTradingAccountField_CloseProfit;
		pSyncingTradingAccountField->PositionProfit = pSyncingTradingAccountField_PositionProfit;
		pSyncingTradingAccountField->Balance = pSyncingTradingAccountField_Balance;
		pSyncingTradingAccountField->Available = pSyncingTradingAccountField_Available;
		pSyncingTradingAccountField->WithdrawQuota = pSyncingTradingAccountField_WithdrawQuota;
		pSyncingTradingAccountField->Reserve = pSyncingTradingAccountField_Reserve;
		if(pSyncingTradingAccountField_TradingDay != nullptr){ strcpy_s(pSyncingTradingAccountField->TradingDay, pSyncingTradingAccountField_TradingDay); pSyncingTradingAccountField_TradingDay = nullptr; }
		pSyncingTradingAccountField->SettlementID = pSyncingTradingAccountField_SettlementID;
		pSyncingTradingAccountField->Credit = pSyncingTradingAccountField_Credit;
		pSyncingTradingAccountField->Mortgage = pSyncingTradingAccountField_Mortgage;
		pSyncingTradingAccountField->ExchangeMargin = pSyncingTradingAccountField_ExchangeMargin;
		pSyncingTradingAccountField->DeliveryMargin = pSyncingTradingAccountField_DeliveryMargin;
		pSyncingTradingAccountField->ExchangeDeliveryMargin = pSyncingTradingAccountField_ExchangeDeliveryMargin;
		pSyncingTradingAccountField->ReserveBalance = pSyncingTradingAccountField_ReserveBalance;
		if(pSyncingTradingAccountField_CurrencyID != nullptr){ strcpy_s(pSyncingTradingAccountField->CurrencyID, pSyncingTradingAccountField_CurrencyID); pSyncingTradingAccountField_CurrencyID = nullptr; }
		pSyncingTradingAccountField->PreFundMortgageIn = pSyncingTradingAccountField_PreFundMortgageIn;
		pSyncingTradingAccountField->PreFundMortgageOut = pSyncingTradingAccountField_PreFundMortgageOut;
		pSyncingTradingAccountField->FundMortgageIn = pSyncingTradingAccountField_FundMortgageIn;
		pSyncingTradingAccountField->FundMortgageOut = pSyncingTradingAccountField_FundMortgageOut;
		pSyncingTradingAccountField->FundMortgageAvailable = pSyncingTradingAccountField_FundMortgageAvailable;
		pSyncingTradingAccountField->MortgageableFund = pSyncingTradingAccountField_MortgageableFund;
		pSyncingTradingAccountField->SpecProductMargin = pSyncingTradingAccountField_SpecProductMargin;
		pSyncingTradingAccountField->SpecProductFrozenMargin = pSyncingTradingAccountField_SpecProductFrozenMargin;
		pSyncingTradingAccountField->SpecProductCommission = pSyncingTradingAccountField_SpecProductCommission;
		pSyncingTradingAccountField->SpecProductFrozenCommission = pSyncingTradingAccountField_SpecProductFrozenCommission;
		pSyncingTradingAccountField->SpecProductPositionProfit = pSyncingTradingAccountField_SpecProductPositionProfit;
		pSyncingTradingAccountField->SpecProductCloseProfit = pSyncingTradingAccountField_SpecProductCloseProfit;
		pSyncingTradingAccountField->SpecProductPositionProfitByAlg = pSyncingTradingAccountField_SpecProductPositionProfitByAlg;
		pSyncingTradingAccountField->SpecProductExchangeMargin = pSyncingTradingAccountField_SpecProductExchangeMargin;
		pSyncingTradingAccountField->FrozenSwap = pSyncingTradingAccountField_FrozenSwap;
		pSyncingTradingAccountField->RemainSwap = pSyncingTradingAccountField_RemainSwap;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSyncingTradingAccountField *pSyncingTradingAccountField)
{
	if(pSyncingTradingAccountField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:y,s:i,s:d,s:d,s:d,s:d,s:d,s:d,s:y,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d}"
		, "BrokerID", pSyncingTradingAccountField->BrokerID
		, "AccountID", pSyncingTradingAccountField->AccountID
		, "PreMortgage", pSyncingTradingAccountField->PreMortgage
		, "PreCredit", pSyncingTradingAccountField->PreCredit
		, "PreDeposit", pSyncingTradingAccountField->PreDeposit
		, "PreBalance", pSyncingTradingAccountField->PreBalance
		, "PreMargin", pSyncingTradingAccountField->PreMargin
		, "InterestBase", pSyncingTradingAccountField->InterestBase
		, "Interest", pSyncingTradingAccountField->Interest
		, "Deposit", pSyncingTradingAccountField->Deposit
		, "Withdraw", pSyncingTradingAccountField->Withdraw
		, "FrozenMargin", pSyncingTradingAccountField->FrozenMargin
		, "FrozenCash", pSyncingTradingAccountField->FrozenCash
		, "FrozenCommission", pSyncingTradingAccountField->FrozenCommission
		, "CurrMargin", pSyncingTradingAccountField->CurrMargin
		, "CashIn", pSyncingTradingAccountField->CashIn
		, "Commission", pSyncingTradingAccountField->Commission
		, "CloseProfit", pSyncingTradingAccountField->CloseProfit
		, "PositionProfit", pSyncingTradingAccountField->PositionProfit
		, "Balance", pSyncingTradingAccountField->Balance
		, "Available", pSyncingTradingAccountField->Available
		, "WithdrawQuota", pSyncingTradingAccountField->WithdrawQuota
		, "Reserve", pSyncingTradingAccountField->Reserve
		, "TradingDay", pSyncingTradingAccountField->TradingDay
		, "SettlementID", pSyncingTradingAccountField->SettlementID
		, "Credit", pSyncingTradingAccountField->Credit
		, "Mortgage", pSyncingTradingAccountField->Mortgage
		, "ExchangeMargin", pSyncingTradingAccountField->ExchangeMargin
		, "DeliveryMargin", pSyncingTradingAccountField->DeliveryMargin
		, "ExchangeDeliveryMargin", pSyncingTradingAccountField->ExchangeDeliveryMargin
		, "ReserveBalance", pSyncingTradingAccountField->ReserveBalance
		, "CurrencyID", pSyncingTradingAccountField->CurrencyID
		, "PreFundMortgageIn", pSyncingTradingAccountField->PreFundMortgageIn
		, "PreFundMortgageOut", pSyncingTradingAccountField->PreFundMortgageOut
		, "FundMortgageIn", pSyncingTradingAccountField->FundMortgageIn
		, "FundMortgageOut", pSyncingTradingAccountField->FundMortgageOut
		, "FundMortgageAvailable", pSyncingTradingAccountField->FundMortgageAvailable
		, "MortgageableFund", pSyncingTradingAccountField->MortgageableFund
		, "SpecProductMargin", pSyncingTradingAccountField->SpecProductMargin
		, "SpecProductFrozenMargin", pSyncingTradingAccountField->SpecProductFrozenMargin
		, "SpecProductCommission", pSyncingTradingAccountField->SpecProductCommission
		, "SpecProductFrozenCommission", pSyncingTradingAccountField->SpecProductFrozenCommission
		, "SpecProductPositionProfit", pSyncingTradingAccountField->SpecProductPositionProfit
		, "SpecProductCloseProfit", pSyncingTradingAccountField->SpecProductCloseProfit
		, "SpecProductPositionProfitByAlg", pSyncingTradingAccountField->SpecProductPositionProfitByAlg
		, "SpecProductExchangeMargin", pSyncingTradingAccountField->SpecProductExchangeMargin
		, "FrozenSwap", pSyncingTradingAccountField->FrozenSwap
		, "RemainSwap", pSyncingTradingAccountField->RemainSwap
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSyncingInvestorPositionField *pSyncingInvestorPositionField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "BrokerID", "InvestorID", "PosiDirection", "HedgeFlag", "PositionDate", "YdPosition", "Position", "LongFrozen", "ShortFrozen", "LongFrozenAmount", "ShortFrozenAmount", "OpenVolume", "CloseVolume", "OpenAmount", "CloseAmount", "PositionCost", "PreMargin", "UseMargin", "FrozenMargin", "FrozenCash", "FrozenCommission", "CashIn", "Commission", "CloseProfit", "PositionProfit", "PreSettlementPrice", "SettlementPrice", "TradingDay", "SettlementID", "OpenCost", "ExchangeMargin", "CombPosition", "CombLongFrozen", "CombShortFrozen", "CloseProfitByDate", "CloseProfitByTrade", "TodayPosition", "MarginRateByMoney", "MarginRateByVolume", "StrikeFrozen", "StrikeFrozenAmount", "AbandonFrozen", "ExchangeID", "YdStrikeFrozen", "InvestUnitID", nullptr};
	char *pSyncingInvestorPositionField_InstrumentID = nullptr;
	char *pSyncingInvestorPositionField_BrokerID = nullptr;
	char *pSyncingInvestorPositionField_InvestorID = nullptr;
	char pSyncingInvestorPositionField_PosiDirection = 0;
	char pSyncingInvestorPositionField_HedgeFlag = 0;
	char pSyncingInvestorPositionField_PositionDate = 0;
	int pSyncingInvestorPositionField_YdPosition = 0;
	int pSyncingInvestorPositionField_Position = 0;
	int pSyncingInvestorPositionField_LongFrozen = 0;
	int pSyncingInvestorPositionField_ShortFrozen = 0;
	double pSyncingInvestorPositionField_LongFrozenAmount = 0.0;
	double pSyncingInvestorPositionField_ShortFrozenAmount = 0.0;
	int pSyncingInvestorPositionField_OpenVolume = 0;
	int pSyncingInvestorPositionField_CloseVolume = 0;
	double pSyncingInvestorPositionField_OpenAmount = 0.0;
	double pSyncingInvestorPositionField_CloseAmount = 0.0;
	double pSyncingInvestorPositionField_PositionCost = 0.0;
	double pSyncingInvestorPositionField_PreMargin = 0.0;
	double pSyncingInvestorPositionField_UseMargin = 0.0;
	double pSyncingInvestorPositionField_FrozenMargin = 0.0;
	double pSyncingInvestorPositionField_FrozenCash = 0.0;
	double pSyncingInvestorPositionField_FrozenCommission = 0.0;
	double pSyncingInvestorPositionField_CashIn = 0.0;
	double pSyncingInvestorPositionField_Commission = 0.0;
	double pSyncingInvestorPositionField_CloseProfit = 0.0;
	double pSyncingInvestorPositionField_PositionProfit = 0.0;
	double pSyncingInvestorPositionField_PreSettlementPrice = 0.0;
	double pSyncingInvestorPositionField_SettlementPrice = 0.0;
	char *pSyncingInvestorPositionField_TradingDay = nullptr;
	int pSyncingInvestorPositionField_SettlementID = 0;
	double pSyncingInvestorPositionField_OpenCost = 0.0;
	double pSyncingInvestorPositionField_ExchangeMargin = 0.0;
	int pSyncingInvestorPositionField_CombPosition = 0;
	int pSyncingInvestorPositionField_CombLongFrozen = 0;
	int pSyncingInvestorPositionField_CombShortFrozen = 0;
	double pSyncingInvestorPositionField_CloseProfitByDate = 0.0;
	double pSyncingInvestorPositionField_CloseProfitByTrade = 0.0;
	int pSyncingInvestorPositionField_TodayPosition = 0;
	double pSyncingInvestorPositionField_MarginRateByMoney = 0.0;
	double pSyncingInvestorPositionField_MarginRateByVolume = 0.0;
	int pSyncingInvestorPositionField_StrikeFrozen = 0;
	double pSyncingInvestorPositionField_StrikeFrozenAmount = 0.0;
	int pSyncingInvestorPositionField_AbandonFrozen = 0;
	char *pSyncingInvestorPositionField_ExchangeID = nullptr;
	int pSyncingInvestorPositionField_YdStrikeFrozen = 0;
	char *pSyncingInvestorPositionField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pSyncingInvestorPositionField, "|yyyccciiiiddiiddddddddddddddyiddiiiddiddidiyiy")
		, &pSyncingInvestorPositionField_InstrumentID
		, &pSyncingInvestorPositionField_BrokerID
		, &pSyncingInvestorPositionField_InvestorID
		, &pSyncingInvestorPositionField_PosiDirection
		, &pSyncingInvestorPositionField_HedgeFlag
		, &pSyncingInvestorPositionField_PositionDate
		, &pSyncingInvestorPositionField_YdPosition
		, &pSyncingInvestorPositionField_Position
		, &pSyncingInvestorPositionField_LongFrozen
		, &pSyncingInvestorPositionField_ShortFrozen
		, &pSyncingInvestorPositionField_LongFrozenAmount
		, &pSyncingInvestorPositionField_ShortFrozenAmount
		, &pSyncingInvestorPositionField_OpenVolume
		, &pSyncingInvestorPositionField_CloseVolume
		, &pSyncingInvestorPositionField_OpenAmount
		, &pSyncingInvestorPositionField_CloseAmount
		, &pSyncingInvestorPositionField_PositionCost
		, &pSyncingInvestorPositionField_PreMargin
		, &pSyncingInvestorPositionField_UseMargin
		, &pSyncingInvestorPositionField_FrozenMargin
		, &pSyncingInvestorPositionField_FrozenCash
		, &pSyncingInvestorPositionField_FrozenCommission
		, &pSyncingInvestorPositionField_CashIn
		, &pSyncingInvestorPositionField_Commission
		, &pSyncingInvestorPositionField_CloseProfit
		, &pSyncingInvestorPositionField_PositionProfit
		, &pSyncingInvestorPositionField_PreSettlementPrice
		, &pSyncingInvestorPositionField_SettlementPrice
		, &pSyncingInvestorPositionField_TradingDay
		, &pSyncingInvestorPositionField_SettlementID
		, &pSyncingInvestorPositionField_OpenCost
		, &pSyncingInvestorPositionField_ExchangeMargin
		, &pSyncingInvestorPositionField_CombPosition
		, &pSyncingInvestorPositionField_CombLongFrozen
		, &pSyncingInvestorPositionField_CombShortFrozen
		, &pSyncingInvestorPositionField_CloseProfitByDate
		, &pSyncingInvestorPositionField_CloseProfitByTrade
		, &pSyncingInvestorPositionField_TodayPosition
		, &pSyncingInvestorPositionField_MarginRateByMoney
		, &pSyncingInvestorPositionField_MarginRateByVolume
		, &pSyncingInvestorPositionField_StrikeFrozen
		, &pSyncingInvestorPositionField_StrikeFrozenAmount
		, &pSyncingInvestorPositionField_AbandonFrozen
		, &pSyncingInvestorPositionField_ExchangeID
		, &pSyncingInvestorPositionField_YdStrikeFrozen
		, &pSyncingInvestorPositionField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pSyncingInvestorPositionField_InstrumentID != nullptr){ strcpy_s(pSyncingInvestorPositionField->InstrumentID, pSyncingInvestorPositionField_InstrumentID); pSyncingInvestorPositionField_InstrumentID = nullptr; }
		if(pSyncingInvestorPositionField_BrokerID != nullptr){ strcpy_s(pSyncingInvestorPositionField->BrokerID, pSyncingInvestorPositionField_BrokerID); pSyncingInvestorPositionField_BrokerID = nullptr; }
		if(pSyncingInvestorPositionField_InvestorID != nullptr){ strcpy_s(pSyncingInvestorPositionField->InvestorID, pSyncingInvestorPositionField_InvestorID); pSyncingInvestorPositionField_InvestorID = nullptr; }
		pSyncingInvestorPositionField->PosiDirection = pSyncingInvestorPositionField_PosiDirection;
		pSyncingInvestorPositionField->HedgeFlag = pSyncingInvestorPositionField_HedgeFlag;
		pSyncingInvestorPositionField->PositionDate = pSyncingInvestorPositionField_PositionDate;
		pSyncingInvestorPositionField->YdPosition = pSyncingInvestorPositionField_YdPosition;
		pSyncingInvestorPositionField->Position = pSyncingInvestorPositionField_Position;
		pSyncingInvestorPositionField->LongFrozen = pSyncingInvestorPositionField_LongFrozen;
		pSyncingInvestorPositionField->ShortFrozen = pSyncingInvestorPositionField_ShortFrozen;
		pSyncingInvestorPositionField->LongFrozenAmount = pSyncingInvestorPositionField_LongFrozenAmount;
		pSyncingInvestorPositionField->ShortFrozenAmount = pSyncingInvestorPositionField_ShortFrozenAmount;
		pSyncingInvestorPositionField->OpenVolume = pSyncingInvestorPositionField_OpenVolume;
		pSyncingInvestorPositionField->CloseVolume = pSyncingInvestorPositionField_CloseVolume;
		pSyncingInvestorPositionField->OpenAmount = pSyncingInvestorPositionField_OpenAmount;
		pSyncingInvestorPositionField->CloseAmount = pSyncingInvestorPositionField_CloseAmount;
		pSyncingInvestorPositionField->PositionCost = pSyncingInvestorPositionField_PositionCost;
		pSyncingInvestorPositionField->PreMargin = pSyncingInvestorPositionField_PreMargin;
		pSyncingInvestorPositionField->UseMargin = pSyncingInvestorPositionField_UseMargin;
		pSyncingInvestorPositionField->FrozenMargin = pSyncingInvestorPositionField_FrozenMargin;
		pSyncingInvestorPositionField->FrozenCash = pSyncingInvestorPositionField_FrozenCash;
		pSyncingInvestorPositionField->FrozenCommission = pSyncingInvestorPositionField_FrozenCommission;
		pSyncingInvestorPositionField->CashIn = pSyncingInvestorPositionField_CashIn;
		pSyncingInvestorPositionField->Commission = pSyncingInvestorPositionField_Commission;
		pSyncingInvestorPositionField->CloseProfit = pSyncingInvestorPositionField_CloseProfit;
		pSyncingInvestorPositionField->PositionProfit = pSyncingInvestorPositionField_PositionProfit;
		pSyncingInvestorPositionField->PreSettlementPrice = pSyncingInvestorPositionField_PreSettlementPrice;
		pSyncingInvestorPositionField->SettlementPrice = pSyncingInvestorPositionField_SettlementPrice;
		if(pSyncingInvestorPositionField_TradingDay != nullptr){ strcpy_s(pSyncingInvestorPositionField->TradingDay, pSyncingInvestorPositionField_TradingDay); pSyncingInvestorPositionField_TradingDay = nullptr; }
		pSyncingInvestorPositionField->SettlementID = pSyncingInvestorPositionField_SettlementID;
		pSyncingInvestorPositionField->OpenCost = pSyncingInvestorPositionField_OpenCost;
		pSyncingInvestorPositionField->ExchangeMargin = pSyncingInvestorPositionField_ExchangeMargin;
		pSyncingInvestorPositionField->CombPosition = pSyncingInvestorPositionField_CombPosition;
		pSyncingInvestorPositionField->CombLongFrozen = pSyncingInvestorPositionField_CombLongFrozen;
		pSyncingInvestorPositionField->CombShortFrozen = pSyncingInvestorPositionField_CombShortFrozen;
		pSyncingInvestorPositionField->CloseProfitByDate = pSyncingInvestorPositionField_CloseProfitByDate;
		pSyncingInvestorPositionField->CloseProfitByTrade = pSyncingInvestorPositionField_CloseProfitByTrade;
		pSyncingInvestorPositionField->TodayPosition = pSyncingInvestorPositionField_TodayPosition;
		pSyncingInvestorPositionField->MarginRateByMoney = pSyncingInvestorPositionField_MarginRateByMoney;
		pSyncingInvestorPositionField->MarginRateByVolume = pSyncingInvestorPositionField_MarginRateByVolume;
		pSyncingInvestorPositionField->StrikeFrozen = pSyncingInvestorPositionField_StrikeFrozen;
		pSyncingInvestorPositionField->StrikeFrozenAmount = pSyncingInvestorPositionField_StrikeFrozenAmount;
		pSyncingInvestorPositionField->AbandonFrozen = pSyncingInvestorPositionField_AbandonFrozen;
		if(pSyncingInvestorPositionField_ExchangeID != nullptr){ strcpy_s(pSyncingInvestorPositionField->ExchangeID, pSyncingInvestorPositionField_ExchangeID); pSyncingInvestorPositionField_ExchangeID = nullptr; }
		pSyncingInvestorPositionField->YdStrikeFrozen = pSyncingInvestorPositionField_YdStrikeFrozen;
		if(pSyncingInvestorPositionField_InvestUnitID != nullptr){ strcpy_s(pSyncingInvestorPositionField->InvestUnitID, pSyncingInvestorPositionField_InvestUnitID); pSyncingInvestorPositionField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSyncingInvestorPositionField *pSyncingInvestorPositionField)
{
	if(pSyncingInvestorPositionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:c,s:c,s:c,s:i,s:i,s:i,s:i,s:d,s:d,s:i,s:i,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:y,s:i,s:d,s:d,s:i,s:i,s:i,s:d,s:d,s:i,s:d,s:d,s:i,s:d,s:i,s:y,s:i,s:y}"
		, "InstrumentID", pSyncingInvestorPositionField->InstrumentID
		, "BrokerID", pSyncingInvestorPositionField->BrokerID
		, "InvestorID", pSyncingInvestorPositionField->InvestorID
		, "PosiDirection", pSyncingInvestorPositionField->PosiDirection
		, "HedgeFlag", pSyncingInvestorPositionField->HedgeFlag
		, "PositionDate", pSyncingInvestorPositionField->PositionDate
		, "YdPosition", pSyncingInvestorPositionField->YdPosition
		, "Position", pSyncingInvestorPositionField->Position
		, "LongFrozen", pSyncingInvestorPositionField->LongFrozen
		, "ShortFrozen", pSyncingInvestorPositionField->ShortFrozen
		, "LongFrozenAmount", pSyncingInvestorPositionField->LongFrozenAmount
		, "ShortFrozenAmount", pSyncingInvestorPositionField->ShortFrozenAmount
		, "OpenVolume", pSyncingInvestorPositionField->OpenVolume
		, "CloseVolume", pSyncingInvestorPositionField->CloseVolume
		, "OpenAmount", pSyncingInvestorPositionField->OpenAmount
		, "CloseAmount", pSyncingInvestorPositionField->CloseAmount
		, "PositionCost", pSyncingInvestorPositionField->PositionCost
		, "PreMargin", pSyncingInvestorPositionField->PreMargin
		, "UseMargin", pSyncingInvestorPositionField->UseMargin
		, "FrozenMargin", pSyncingInvestorPositionField->FrozenMargin
		, "FrozenCash", pSyncingInvestorPositionField->FrozenCash
		, "FrozenCommission", pSyncingInvestorPositionField->FrozenCommission
		, "CashIn", pSyncingInvestorPositionField->CashIn
		, "Commission", pSyncingInvestorPositionField->Commission
		, "CloseProfit", pSyncingInvestorPositionField->CloseProfit
		, "PositionProfit", pSyncingInvestorPositionField->PositionProfit
		, "PreSettlementPrice", pSyncingInvestorPositionField->PreSettlementPrice
		, "SettlementPrice", pSyncingInvestorPositionField->SettlementPrice
		, "TradingDay", pSyncingInvestorPositionField->TradingDay
		, "SettlementID", pSyncingInvestorPositionField->SettlementID
		, "OpenCost", pSyncingInvestorPositionField->OpenCost
		, "ExchangeMargin", pSyncingInvestorPositionField->ExchangeMargin
		, "CombPosition", pSyncingInvestorPositionField->CombPosition
		, "CombLongFrozen", pSyncingInvestorPositionField->CombLongFrozen
		, "CombShortFrozen", pSyncingInvestorPositionField->CombShortFrozen
		, "CloseProfitByDate", pSyncingInvestorPositionField->CloseProfitByDate
		, "CloseProfitByTrade", pSyncingInvestorPositionField->CloseProfitByTrade
		, "TodayPosition", pSyncingInvestorPositionField->TodayPosition
		, "MarginRateByMoney", pSyncingInvestorPositionField->MarginRateByMoney
		, "MarginRateByVolume", pSyncingInvestorPositionField->MarginRateByVolume
		, "StrikeFrozen", pSyncingInvestorPositionField->StrikeFrozen
		, "StrikeFrozenAmount", pSyncingInvestorPositionField->StrikeFrozenAmount
		, "AbandonFrozen", pSyncingInvestorPositionField->AbandonFrozen
		, "ExchangeID", pSyncingInvestorPositionField->ExchangeID
		, "YdStrikeFrozen", pSyncingInvestorPositionField->YdStrikeFrozen
		, "InvestUnitID", pSyncingInvestorPositionField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSyncingInstrumentMarginRateField *pSyncingInstrumentMarginRateField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "InvestorRange", "BrokerID", "InvestorID", "HedgeFlag", "LongMarginRatioByMoney", "LongMarginRatioByVolume", "ShortMarginRatioByMoney", "ShortMarginRatioByVolume", "IsRelative", nullptr};
	char *pSyncingInstrumentMarginRateField_InstrumentID = nullptr;
	char pSyncingInstrumentMarginRateField_InvestorRange = 0;
	char *pSyncingInstrumentMarginRateField_BrokerID = nullptr;
	char *pSyncingInstrumentMarginRateField_InvestorID = nullptr;
	char pSyncingInstrumentMarginRateField_HedgeFlag = 0;
	double pSyncingInstrumentMarginRateField_LongMarginRatioByMoney = 0.0;
	double pSyncingInstrumentMarginRateField_LongMarginRatioByVolume = 0.0;
	double pSyncingInstrumentMarginRateField_ShortMarginRatioByMoney = 0.0;
	double pSyncingInstrumentMarginRateField_ShortMarginRatioByVolume = 0.0;
	int pSyncingInstrumentMarginRateField_IsRelative = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pSyncingInstrumentMarginRateField, "|ycyycddddi")
		, &pSyncingInstrumentMarginRateField_InstrumentID
		, &pSyncingInstrumentMarginRateField_InvestorRange
		, &pSyncingInstrumentMarginRateField_BrokerID
		, &pSyncingInstrumentMarginRateField_InvestorID
		, &pSyncingInstrumentMarginRateField_HedgeFlag
		, &pSyncingInstrumentMarginRateField_LongMarginRatioByMoney
		, &pSyncingInstrumentMarginRateField_LongMarginRatioByVolume
		, &pSyncingInstrumentMarginRateField_ShortMarginRatioByMoney
		, &pSyncingInstrumentMarginRateField_ShortMarginRatioByVolume
		, &pSyncingInstrumentMarginRateField_IsRelative
	PyCTP_PyDict_FromStruct_END
		if(pSyncingInstrumentMarginRateField_InstrumentID != nullptr){ strcpy_s(pSyncingInstrumentMarginRateField->InstrumentID, pSyncingInstrumentMarginRateField_InstrumentID); pSyncingInstrumentMarginRateField_InstrumentID = nullptr; }
		pSyncingInstrumentMarginRateField->InvestorRange = pSyncingInstrumentMarginRateField_InvestorRange;
		if(pSyncingInstrumentMarginRateField_BrokerID != nullptr){ strcpy_s(pSyncingInstrumentMarginRateField->BrokerID, pSyncingInstrumentMarginRateField_BrokerID); pSyncingInstrumentMarginRateField_BrokerID = nullptr; }
		if(pSyncingInstrumentMarginRateField_InvestorID != nullptr){ strcpy_s(pSyncingInstrumentMarginRateField->InvestorID, pSyncingInstrumentMarginRateField_InvestorID); pSyncingInstrumentMarginRateField_InvestorID = nullptr; }
		pSyncingInstrumentMarginRateField->HedgeFlag = pSyncingInstrumentMarginRateField_HedgeFlag;
		pSyncingInstrumentMarginRateField->LongMarginRatioByMoney = pSyncingInstrumentMarginRateField_LongMarginRatioByMoney;
		pSyncingInstrumentMarginRateField->LongMarginRatioByVolume = pSyncingInstrumentMarginRateField_LongMarginRatioByVolume;
		pSyncingInstrumentMarginRateField->ShortMarginRatioByMoney = pSyncingInstrumentMarginRateField_ShortMarginRatioByMoney;
		pSyncingInstrumentMarginRateField->ShortMarginRatioByVolume = pSyncingInstrumentMarginRateField_ShortMarginRatioByVolume;
		pSyncingInstrumentMarginRateField->IsRelative = pSyncingInstrumentMarginRateField_IsRelative;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSyncingInstrumentMarginRateField *pSyncingInstrumentMarginRateField)
{
	if(pSyncingInstrumentMarginRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y,s:c,s:d,s:d,s:d,s:d,s:i}"
		, "InstrumentID", pSyncingInstrumentMarginRateField->InstrumentID
		, "InvestorRange", pSyncingInstrumentMarginRateField->InvestorRange
		, "BrokerID", pSyncingInstrumentMarginRateField->BrokerID
		, "InvestorID", pSyncingInstrumentMarginRateField->InvestorID
		, "HedgeFlag", pSyncingInstrumentMarginRateField->HedgeFlag
		, "LongMarginRatioByMoney", pSyncingInstrumentMarginRateField->LongMarginRatioByMoney
		, "LongMarginRatioByVolume", pSyncingInstrumentMarginRateField->LongMarginRatioByVolume
		, "ShortMarginRatioByMoney", pSyncingInstrumentMarginRateField->ShortMarginRatioByMoney
		, "ShortMarginRatioByVolume", pSyncingInstrumentMarginRateField->ShortMarginRatioByVolume
		, "IsRelative", pSyncingInstrumentMarginRateField->IsRelative
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSyncingInstrumentCommissionRateField *pSyncingInstrumentCommissionRateField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "InvestorRange", "BrokerID", "InvestorID", "OpenRatioByMoney", "OpenRatioByVolume", "CloseRatioByMoney", "CloseRatioByVolume", "CloseTodayRatioByMoney", "CloseTodayRatioByVolume", nullptr};
	char *pSyncingInstrumentCommissionRateField_InstrumentID = nullptr;
	char pSyncingInstrumentCommissionRateField_InvestorRange = 0;
	char *pSyncingInstrumentCommissionRateField_BrokerID = nullptr;
	char *pSyncingInstrumentCommissionRateField_InvestorID = nullptr;
	double pSyncingInstrumentCommissionRateField_OpenRatioByMoney = 0.0;
	double pSyncingInstrumentCommissionRateField_OpenRatioByVolume = 0.0;
	double pSyncingInstrumentCommissionRateField_CloseRatioByMoney = 0.0;
	double pSyncingInstrumentCommissionRateField_CloseRatioByVolume = 0.0;
	double pSyncingInstrumentCommissionRateField_CloseTodayRatioByMoney = 0.0;
	double pSyncingInstrumentCommissionRateField_CloseTodayRatioByVolume = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pSyncingInstrumentCommissionRateField, "|ycyydddddd")
		, &pSyncingInstrumentCommissionRateField_InstrumentID
		, &pSyncingInstrumentCommissionRateField_InvestorRange
		, &pSyncingInstrumentCommissionRateField_BrokerID
		, &pSyncingInstrumentCommissionRateField_InvestorID
		, &pSyncingInstrumentCommissionRateField_OpenRatioByMoney
		, &pSyncingInstrumentCommissionRateField_OpenRatioByVolume
		, &pSyncingInstrumentCommissionRateField_CloseRatioByMoney
		, &pSyncingInstrumentCommissionRateField_CloseRatioByVolume
		, &pSyncingInstrumentCommissionRateField_CloseTodayRatioByMoney
		, &pSyncingInstrumentCommissionRateField_CloseTodayRatioByVolume
	PyCTP_PyDict_FromStruct_END
		if(pSyncingInstrumentCommissionRateField_InstrumentID != nullptr){ strcpy_s(pSyncingInstrumentCommissionRateField->InstrumentID, pSyncingInstrumentCommissionRateField_InstrumentID); pSyncingInstrumentCommissionRateField_InstrumentID = nullptr; }
		pSyncingInstrumentCommissionRateField->InvestorRange = pSyncingInstrumentCommissionRateField_InvestorRange;
		if(pSyncingInstrumentCommissionRateField_BrokerID != nullptr){ strcpy_s(pSyncingInstrumentCommissionRateField->BrokerID, pSyncingInstrumentCommissionRateField_BrokerID); pSyncingInstrumentCommissionRateField_BrokerID = nullptr; }
		if(pSyncingInstrumentCommissionRateField_InvestorID != nullptr){ strcpy_s(pSyncingInstrumentCommissionRateField->InvestorID, pSyncingInstrumentCommissionRateField_InvestorID); pSyncingInstrumentCommissionRateField_InvestorID = nullptr; }
		pSyncingInstrumentCommissionRateField->OpenRatioByMoney = pSyncingInstrumentCommissionRateField_OpenRatioByMoney;
		pSyncingInstrumentCommissionRateField->OpenRatioByVolume = pSyncingInstrumentCommissionRateField_OpenRatioByVolume;
		pSyncingInstrumentCommissionRateField->CloseRatioByMoney = pSyncingInstrumentCommissionRateField_CloseRatioByMoney;
		pSyncingInstrumentCommissionRateField->CloseRatioByVolume = pSyncingInstrumentCommissionRateField_CloseRatioByVolume;
		pSyncingInstrumentCommissionRateField->CloseTodayRatioByMoney = pSyncingInstrumentCommissionRateField_CloseTodayRatioByMoney;
		pSyncingInstrumentCommissionRateField->CloseTodayRatioByVolume = pSyncingInstrumentCommissionRateField_CloseTodayRatioByVolume;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSyncingInstrumentCommissionRateField *pSyncingInstrumentCommissionRateField)
{
	if(pSyncingInstrumentCommissionRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y,s:d,s:d,s:d,s:d,s:d,s:d}"
		, "InstrumentID", pSyncingInstrumentCommissionRateField->InstrumentID
		, "InvestorRange", pSyncingInstrumentCommissionRateField->InvestorRange
		, "BrokerID", pSyncingInstrumentCommissionRateField->BrokerID
		, "InvestorID", pSyncingInstrumentCommissionRateField->InvestorID
		, "OpenRatioByMoney", pSyncingInstrumentCommissionRateField->OpenRatioByMoney
		, "OpenRatioByVolume", pSyncingInstrumentCommissionRateField->OpenRatioByVolume
		, "CloseRatioByMoney", pSyncingInstrumentCommissionRateField->CloseRatioByMoney
		, "CloseRatioByVolume", pSyncingInstrumentCommissionRateField->CloseRatioByVolume
		, "CloseTodayRatioByMoney", pSyncingInstrumentCommissionRateField->CloseTodayRatioByMoney
		, "CloseTodayRatioByVolume", pSyncingInstrumentCommissionRateField->CloseTodayRatioByVolume
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSyncingInstrumentTradingRightField *pSyncingInstrumentTradingRightField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "InvestorRange", "BrokerID", "InvestorID", "TradingRight", nullptr};
	char *pSyncingInstrumentTradingRightField_InstrumentID = nullptr;
	char pSyncingInstrumentTradingRightField_InvestorRange = 0;
	char *pSyncingInstrumentTradingRightField_BrokerID = nullptr;
	char *pSyncingInstrumentTradingRightField_InvestorID = nullptr;
	char pSyncingInstrumentTradingRightField_TradingRight = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pSyncingInstrumentTradingRightField, "|ycyyc")
		, &pSyncingInstrumentTradingRightField_InstrumentID
		, &pSyncingInstrumentTradingRightField_InvestorRange
		, &pSyncingInstrumentTradingRightField_BrokerID
		, &pSyncingInstrumentTradingRightField_InvestorID
		, &pSyncingInstrumentTradingRightField_TradingRight
	PyCTP_PyDict_FromStruct_END
		if(pSyncingInstrumentTradingRightField_InstrumentID != nullptr){ strcpy_s(pSyncingInstrumentTradingRightField->InstrumentID, pSyncingInstrumentTradingRightField_InstrumentID); pSyncingInstrumentTradingRightField_InstrumentID = nullptr; }
		pSyncingInstrumentTradingRightField->InvestorRange = pSyncingInstrumentTradingRightField_InvestorRange;
		if(pSyncingInstrumentTradingRightField_BrokerID != nullptr){ strcpy_s(pSyncingInstrumentTradingRightField->BrokerID, pSyncingInstrumentTradingRightField_BrokerID); pSyncingInstrumentTradingRightField_BrokerID = nullptr; }
		if(pSyncingInstrumentTradingRightField_InvestorID != nullptr){ strcpy_s(pSyncingInstrumentTradingRightField->InvestorID, pSyncingInstrumentTradingRightField_InvestorID); pSyncingInstrumentTradingRightField_InvestorID = nullptr; }
		pSyncingInstrumentTradingRightField->TradingRight = pSyncingInstrumentTradingRightField_TradingRight;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSyncingInstrumentTradingRightField *pSyncingInstrumentTradingRightField)
{
	if(pSyncingInstrumentTradingRightField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y,s:c}"
		, "InstrumentID", pSyncingInstrumentTradingRightField->InstrumentID
		, "InvestorRange", pSyncingInstrumentTradingRightField->InvestorRange
		, "BrokerID", pSyncingInstrumentTradingRightField->BrokerID
		, "InvestorID", pSyncingInstrumentTradingRightField->InvestorID
		, "TradingRight", pSyncingInstrumentTradingRightField->TradingRight
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryOrderField *pQryOrderField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ExchangeID", "OrderSysID", "InsertTimeStart", "InsertTimeEnd", "InvestUnitID", nullptr};
	char *pQryOrderField_BrokerID = nullptr;
	char *pQryOrderField_InvestorID = nullptr;
	char *pQryOrderField_InstrumentID = nullptr;
	char *pQryOrderField_ExchangeID = nullptr;
	char *pQryOrderField_OrderSysID = nullptr;
	char *pQryOrderField_InsertTimeStart = nullptr;
	char *pQryOrderField_InsertTimeEnd = nullptr;
	char *pQryOrderField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryOrderField, "|yyyyyyyy")
		, &pQryOrderField_BrokerID
		, &pQryOrderField_InvestorID
		, &pQryOrderField_InstrumentID
		, &pQryOrderField_ExchangeID
		, &pQryOrderField_OrderSysID
		, &pQryOrderField_InsertTimeStart
		, &pQryOrderField_InsertTimeEnd
		, &pQryOrderField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryOrderField_BrokerID != nullptr){ strcpy_s(pQryOrderField->BrokerID, pQryOrderField_BrokerID); pQryOrderField_BrokerID = nullptr; }
		if(pQryOrderField_InvestorID != nullptr){ strcpy_s(pQryOrderField->InvestorID, pQryOrderField_InvestorID); pQryOrderField_InvestorID = nullptr; }
		if(pQryOrderField_InstrumentID != nullptr){ strcpy_s(pQryOrderField->InstrumentID, pQryOrderField_InstrumentID); pQryOrderField_InstrumentID = nullptr; }
		if(pQryOrderField_ExchangeID != nullptr){ strcpy_s(pQryOrderField->ExchangeID, pQryOrderField_ExchangeID); pQryOrderField_ExchangeID = nullptr; }
		if(pQryOrderField_OrderSysID != nullptr){ strcpy_s(pQryOrderField->OrderSysID, pQryOrderField_OrderSysID); pQryOrderField_OrderSysID = nullptr; }
		if(pQryOrderField_InsertTimeStart != nullptr){ strcpy_s(pQryOrderField->InsertTimeStart, pQryOrderField_InsertTimeStart); pQryOrderField_InsertTimeStart = nullptr; }
		if(pQryOrderField_InsertTimeEnd != nullptr){ strcpy_s(pQryOrderField->InsertTimeEnd, pQryOrderField_InsertTimeEnd); pQryOrderField_InsertTimeEnd = nullptr; }
		if(pQryOrderField_InvestUnitID != nullptr){ strcpy_s(pQryOrderField->InvestUnitID, pQryOrderField_InvestUnitID); pQryOrderField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryOrderField *pQryOrderField)
{
	if(pQryOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQryOrderField->BrokerID
		, "InvestorID", pQryOrderField->InvestorID
		, "InstrumentID", pQryOrderField->InstrumentID
		, "ExchangeID", pQryOrderField->ExchangeID
		, "OrderSysID", pQryOrderField->OrderSysID
		, "InsertTimeStart", pQryOrderField->InsertTimeStart
		, "InsertTimeEnd", pQryOrderField->InsertTimeEnd
		, "InvestUnitID", pQryOrderField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryTradeField *pQryTradeField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ExchangeID", "TradeID", "TradeTimeStart", "TradeTimeEnd", "InvestUnitID", nullptr};
	char *pQryTradeField_BrokerID = nullptr;
	char *pQryTradeField_InvestorID = nullptr;
	char *pQryTradeField_InstrumentID = nullptr;
	char *pQryTradeField_ExchangeID = nullptr;
	char *pQryTradeField_TradeID = nullptr;
	char *pQryTradeField_TradeTimeStart = nullptr;
	char *pQryTradeField_TradeTimeEnd = nullptr;
	char *pQryTradeField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryTradeField, "|yyyyyyyy")
		, &pQryTradeField_BrokerID
		, &pQryTradeField_InvestorID
		, &pQryTradeField_InstrumentID
		, &pQryTradeField_ExchangeID
		, &pQryTradeField_TradeID
		, &pQryTradeField_TradeTimeStart
		, &pQryTradeField_TradeTimeEnd
		, &pQryTradeField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryTradeField_BrokerID != nullptr){ strcpy_s(pQryTradeField->BrokerID, pQryTradeField_BrokerID); pQryTradeField_BrokerID = nullptr; }
		if(pQryTradeField_InvestorID != nullptr){ strcpy_s(pQryTradeField->InvestorID, pQryTradeField_InvestorID); pQryTradeField_InvestorID = nullptr; }
		if(pQryTradeField_InstrumentID != nullptr){ strcpy_s(pQryTradeField->InstrumentID, pQryTradeField_InstrumentID); pQryTradeField_InstrumentID = nullptr; }
		if(pQryTradeField_ExchangeID != nullptr){ strcpy_s(pQryTradeField->ExchangeID, pQryTradeField_ExchangeID); pQryTradeField_ExchangeID = nullptr; }
		if(pQryTradeField_TradeID != nullptr){ strcpy_s(pQryTradeField->TradeID, pQryTradeField_TradeID); pQryTradeField_TradeID = nullptr; }
		if(pQryTradeField_TradeTimeStart != nullptr){ strcpy_s(pQryTradeField->TradeTimeStart, pQryTradeField_TradeTimeStart); pQryTradeField_TradeTimeStart = nullptr; }
		if(pQryTradeField_TradeTimeEnd != nullptr){ strcpy_s(pQryTradeField->TradeTimeEnd, pQryTradeField_TradeTimeEnd); pQryTradeField_TradeTimeEnd = nullptr; }
		if(pQryTradeField_InvestUnitID != nullptr){ strcpy_s(pQryTradeField->InvestUnitID, pQryTradeField_InvestUnitID); pQryTradeField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryTradeField *pQryTradeField)
{
	if(pQryTradeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQryTradeField->BrokerID
		, "InvestorID", pQryTradeField->InvestorID
		, "InstrumentID", pQryTradeField->InstrumentID
		, "ExchangeID", pQryTradeField->ExchangeID
		, "TradeID", pQryTradeField->TradeID
		, "TradeTimeStart", pQryTradeField->TradeTimeStart
		, "TradeTimeEnd", pQryTradeField->TradeTimeEnd
		, "InvestUnitID", pQryTradeField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryInvestorPositionField *pQryInvestorPositionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ExchangeID", "InvestUnitID", nullptr};
	char *pQryInvestorPositionField_BrokerID = nullptr;
	char *pQryInvestorPositionField_InvestorID = nullptr;
	char *pQryInvestorPositionField_InstrumentID = nullptr;
	char *pQryInvestorPositionField_ExchangeID = nullptr;
	char *pQryInvestorPositionField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryInvestorPositionField, "|yyyyy")
		, &pQryInvestorPositionField_BrokerID
		, &pQryInvestorPositionField_InvestorID
		, &pQryInvestorPositionField_InstrumentID
		, &pQryInvestorPositionField_ExchangeID
		, &pQryInvestorPositionField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryInvestorPositionField_BrokerID != nullptr){ strcpy_s(pQryInvestorPositionField->BrokerID, pQryInvestorPositionField_BrokerID); pQryInvestorPositionField_BrokerID = nullptr; }
		if(pQryInvestorPositionField_InvestorID != nullptr){ strcpy_s(pQryInvestorPositionField->InvestorID, pQryInvestorPositionField_InvestorID); pQryInvestorPositionField_InvestorID = nullptr; }
		if(pQryInvestorPositionField_InstrumentID != nullptr){ strcpy_s(pQryInvestorPositionField->InstrumentID, pQryInvestorPositionField_InstrumentID); pQryInvestorPositionField_InstrumentID = nullptr; }
		if(pQryInvestorPositionField_ExchangeID != nullptr){ strcpy_s(pQryInvestorPositionField->ExchangeID, pQryInvestorPositionField_ExchangeID); pQryInvestorPositionField_ExchangeID = nullptr; }
		if(pQryInvestorPositionField_InvestUnitID != nullptr){ strcpy_s(pQryInvestorPositionField->InvestUnitID, pQryInvestorPositionField_InvestUnitID); pQryInvestorPositionField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryInvestorPositionField *pQryInvestorPositionField)
{
	if(pQryInvestorPositionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQryInvestorPositionField->BrokerID
		, "InvestorID", pQryInvestorPositionField->InvestorID
		, "InstrumentID", pQryInvestorPositionField->InstrumentID
		, "ExchangeID", pQryInvestorPositionField->ExchangeID
		, "InvestUnitID", pQryInvestorPositionField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryTradingAccountField *pQryTradingAccountField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "CurrencyID", "BizType", "AccountID", nullptr};
	char *pQryTradingAccountField_BrokerID = nullptr;
	char *pQryTradingAccountField_InvestorID = nullptr;
	char *pQryTradingAccountField_CurrencyID = nullptr;
	char pQryTradingAccountField_BizType = 0;
	char *pQryTradingAccountField_AccountID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryTradingAccountField, "|yyycy")
		, &pQryTradingAccountField_BrokerID
		, &pQryTradingAccountField_InvestorID
		, &pQryTradingAccountField_CurrencyID
		, &pQryTradingAccountField_BizType
		, &pQryTradingAccountField_AccountID
	PyCTP_PyDict_FromStruct_END
		if(pQryTradingAccountField_BrokerID != nullptr){ strcpy_s(pQryTradingAccountField->BrokerID, pQryTradingAccountField_BrokerID); pQryTradingAccountField_BrokerID = nullptr; }
		if(pQryTradingAccountField_InvestorID != nullptr){ strcpy_s(pQryTradingAccountField->InvestorID, pQryTradingAccountField_InvestorID); pQryTradingAccountField_InvestorID = nullptr; }
		if(pQryTradingAccountField_CurrencyID != nullptr){ strcpy_s(pQryTradingAccountField->CurrencyID, pQryTradingAccountField_CurrencyID); pQryTradingAccountField_CurrencyID = nullptr; }
		pQryTradingAccountField->BizType = pQryTradingAccountField_BizType;
		if(pQryTradingAccountField_AccountID != nullptr){ strcpy_s(pQryTradingAccountField->AccountID, pQryTradingAccountField_AccountID); pQryTradingAccountField_AccountID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryTradingAccountField *pQryTradingAccountField)
{
	if(pQryTradingAccountField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:c,s:y}"
		, "BrokerID", pQryTradingAccountField->BrokerID
		, "InvestorID", pQryTradingAccountField->InvestorID
		, "CurrencyID", pQryTradingAccountField->CurrencyID
		, "BizType", pQryTradingAccountField->BizType
		, "AccountID", pQryTradingAccountField->AccountID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryInvestorField *pQryInvestorField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", nullptr};
	char *pQryInvestorField_BrokerID = nullptr;
	char *pQryInvestorField_InvestorID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryInvestorField, "|yy")
		, &pQryInvestorField_BrokerID
		, &pQryInvestorField_InvestorID
	PyCTP_PyDict_FromStruct_END
		if(pQryInvestorField_BrokerID != nullptr){ strcpy_s(pQryInvestorField->BrokerID, pQryInvestorField_BrokerID); pQryInvestorField_BrokerID = nullptr; }
		if(pQryInvestorField_InvestorID != nullptr){ strcpy_s(pQryInvestorField->InvestorID, pQryInvestorField_InvestorID); pQryInvestorField_InvestorID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryInvestorField *pQryInvestorField)
{
	if(pQryInvestorField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQryInvestorField->BrokerID
		, "InvestorID", pQryInvestorField->InvestorID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryTradingCodeField *pQryTradingCodeField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "ExchangeID", "ClientID", "ClientIDType", "InvestUnitID", nullptr};
	char *pQryTradingCodeField_BrokerID = nullptr;
	char *pQryTradingCodeField_InvestorID = nullptr;
	char *pQryTradingCodeField_ExchangeID = nullptr;
	char *pQryTradingCodeField_ClientID = nullptr;
	char pQryTradingCodeField_ClientIDType = 0;
	char *pQryTradingCodeField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryTradingCodeField, "|yyyycy")
		, &pQryTradingCodeField_BrokerID
		, &pQryTradingCodeField_InvestorID
		, &pQryTradingCodeField_ExchangeID
		, &pQryTradingCodeField_ClientID
		, &pQryTradingCodeField_ClientIDType
		, &pQryTradingCodeField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryTradingCodeField_BrokerID != nullptr){ strcpy_s(pQryTradingCodeField->BrokerID, pQryTradingCodeField_BrokerID); pQryTradingCodeField_BrokerID = nullptr; }
		if(pQryTradingCodeField_InvestorID != nullptr){ strcpy_s(pQryTradingCodeField->InvestorID, pQryTradingCodeField_InvestorID); pQryTradingCodeField_InvestorID = nullptr; }
		if(pQryTradingCodeField_ExchangeID != nullptr){ strcpy_s(pQryTradingCodeField->ExchangeID, pQryTradingCodeField_ExchangeID); pQryTradingCodeField_ExchangeID = nullptr; }
		if(pQryTradingCodeField_ClientID != nullptr){ strcpy_s(pQryTradingCodeField->ClientID, pQryTradingCodeField_ClientID); pQryTradingCodeField_ClientID = nullptr; }
		pQryTradingCodeField->ClientIDType = pQryTradingCodeField_ClientIDType;
		if(pQryTradingCodeField_InvestUnitID != nullptr){ strcpy_s(pQryTradingCodeField->InvestUnitID, pQryTradingCodeField_InvestUnitID); pQryTradingCodeField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryTradingCodeField *pQryTradingCodeField)
{
	if(pQryTradingCodeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:c,s:y}"
		, "BrokerID", pQryTradingCodeField->BrokerID
		, "InvestorID", pQryTradingCodeField->InvestorID
		, "ExchangeID", pQryTradingCodeField->ExchangeID
		, "ClientID", pQryTradingCodeField->ClientID
		, "ClientIDType", pQryTradingCodeField->ClientIDType
		, "InvestUnitID", pQryTradingCodeField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryInvestorGroupField *pQryInvestorGroupField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", nullptr};
	char *pQryInvestorGroupField_BrokerID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryInvestorGroupField, "|y")
		, &pQryInvestorGroupField_BrokerID
	PyCTP_PyDict_FromStruct_END
		if(pQryInvestorGroupField_BrokerID != nullptr){ strcpy_s(pQryInvestorGroupField->BrokerID, pQryInvestorGroupField_BrokerID); pQryInvestorGroupField_BrokerID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryInvestorGroupField *pQryInvestorGroupField)
{
	if(pQryInvestorGroupField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y}"
		, "BrokerID", pQryInvestorGroupField->BrokerID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryInstrumentMarginRateField *pQryInstrumentMarginRateField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "HedgeFlag", "ExchangeID", "InvestUnitID", nullptr};
	char *pQryInstrumentMarginRateField_BrokerID = nullptr;
	char *pQryInstrumentMarginRateField_InvestorID = nullptr;
	char *pQryInstrumentMarginRateField_InstrumentID = nullptr;
	char pQryInstrumentMarginRateField_HedgeFlag = 0;
	char *pQryInstrumentMarginRateField_ExchangeID = nullptr;
	char *pQryInstrumentMarginRateField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryInstrumentMarginRateField, "|yyycyy")
		, &pQryInstrumentMarginRateField_BrokerID
		, &pQryInstrumentMarginRateField_InvestorID
		, &pQryInstrumentMarginRateField_InstrumentID
		, &pQryInstrumentMarginRateField_HedgeFlag
		, &pQryInstrumentMarginRateField_ExchangeID
		, &pQryInstrumentMarginRateField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryInstrumentMarginRateField_BrokerID != nullptr){ strcpy_s(pQryInstrumentMarginRateField->BrokerID, pQryInstrumentMarginRateField_BrokerID); pQryInstrumentMarginRateField_BrokerID = nullptr; }
		if(pQryInstrumentMarginRateField_InvestorID != nullptr){ strcpy_s(pQryInstrumentMarginRateField->InvestorID, pQryInstrumentMarginRateField_InvestorID); pQryInstrumentMarginRateField_InvestorID = nullptr; }
		if(pQryInstrumentMarginRateField_InstrumentID != nullptr){ strcpy_s(pQryInstrumentMarginRateField->InstrumentID, pQryInstrumentMarginRateField_InstrumentID); pQryInstrumentMarginRateField_InstrumentID = nullptr; }
		pQryInstrumentMarginRateField->HedgeFlag = pQryInstrumentMarginRateField_HedgeFlag;
		if(pQryInstrumentMarginRateField_ExchangeID != nullptr){ strcpy_s(pQryInstrumentMarginRateField->ExchangeID, pQryInstrumentMarginRateField_ExchangeID); pQryInstrumentMarginRateField_ExchangeID = nullptr; }
		if(pQryInstrumentMarginRateField_InvestUnitID != nullptr){ strcpy_s(pQryInstrumentMarginRateField->InvestUnitID, pQryInstrumentMarginRateField_InvestUnitID); pQryInstrumentMarginRateField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryInstrumentMarginRateField *pQryInstrumentMarginRateField)
{
	if(pQryInstrumentMarginRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:c,s:y,s:y}"
		, "BrokerID", pQryInstrumentMarginRateField->BrokerID
		, "InvestorID", pQryInstrumentMarginRateField->InvestorID
		, "InstrumentID", pQryInstrumentMarginRateField->InstrumentID
		, "HedgeFlag", pQryInstrumentMarginRateField->HedgeFlag
		, "ExchangeID", pQryInstrumentMarginRateField->ExchangeID
		, "InvestUnitID", pQryInstrumentMarginRateField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryInstrumentCommissionRateField *pQryInstrumentCommissionRateField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ExchangeID", "InvestUnitID", nullptr};
	char *pQryInstrumentCommissionRateField_BrokerID = nullptr;
	char *pQryInstrumentCommissionRateField_InvestorID = nullptr;
	char *pQryInstrumentCommissionRateField_InstrumentID = nullptr;
	char *pQryInstrumentCommissionRateField_ExchangeID = nullptr;
	char *pQryInstrumentCommissionRateField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryInstrumentCommissionRateField, "|yyyyy")
		, &pQryInstrumentCommissionRateField_BrokerID
		, &pQryInstrumentCommissionRateField_InvestorID
		, &pQryInstrumentCommissionRateField_InstrumentID
		, &pQryInstrumentCommissionRateField_ExchangeID
		, &pQryInstrumentCommissionRateField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryInstrumentCommissionRateField_BrokerID != nullptr){ strcpy_s(pQryInstrumentCommissionRateField->BrokerID, pQryInstrumentCommissionRateField_BrokerID); pQryInstrumentCommissionRateField_BrokerID = nullptr; }
		if(pQryInstrumentCommissionRateField_InvestorID != nullptr){ strcpy_s(pQryInstrumentCommissionRateField->InvestorID, pQryInstrumentCommissionRateField_InvestorID); pQryInstrumentCommissionRateField_InvestorID = nullptr; }
		if(pQryInstrumentCommissionRateField_InstrumentID != nullptr){ strcpy_s(pQryInstrumentCommissionRateField->InstrumentID, pQryInstrumentCommissionRateField_InstrumentID); pQryInstrumentCommissionRateField_InstrumentID = nullptr; }
		if(pQryInstrumentCommissionRateField_ExchangeID != nullptr){ strcpy_s(pQryInstrumentCommissionRateField->ExchangeID, pQryInstrumentCommissionRateField_ExchangeID); pQryInstrumentCommissionRateField_ExchangeID = nullptr; }
		if(pQryInstrumentCommissionRateField_InvestUnitID != nullptr){ strcpy_s(pQryInstrumentCommissionRateField->InvestUnitID, pQryInstrumentCommissionRateField_InvestUnitID); pQryInstrumentCommissionRateField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryInstrumentCommissionRateField *pQryInstrumentCommissionRateField)
{
	if(pQryInstrumentCommissionRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQryInstrumentCommissionRateField->BrokerID
		, "InvestorID", pQryInstrumentCommissionRateField->InvestorID
		, "InstrumentID", pQryInstrumentCommissionRateField->InstrumentID
		, "ExchangeID", pQryInstrumentCommissionRateField->ExchangeID
		, "InvestUnitID", pQryInstrumentCommissionRateField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryInstrumentTradingRightField *pQryInstrumentTradingRightField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", nullptr};
	char *pQryInstrumentTradingRightField_BrokerID = nullptr;
	char *pQryInstrumentTradingRightField_InvestorID = nullptr;
	char *pQryInstrumentTradingRightField_InstrumentID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryInstrumentTradingRightField, "|yyy")
		, &pQryInstrumentTradingRightField_BrokerID
		, &pQryInstrumentTradingRightField_InvestorID
		, &pQryInstrumentTradingRightField_InstrumentID
	PyCTP_PyDict_FromStruct_END
		if(pQryInstrumentTradingRightField_BrokerID != nullptr){ strcpy_s(pQryInstrumentTradingRightField->BrokerID, pQryInstrumentTradingRightField_BrokerID); pQryInstrumentTradingRightField_BrokerID = nullptr; }
		if(pQryInstrumentTradingRightField_InvestorID != nullptr){ strcpy_s(pQryInstrumentTradingRightField->InvestorID, pQryInstrumentTradingRightField_InvestorID); pQryInstrumentTradingRightField_InvestorID = nullptr; }
		if(pQryInstrumentTradingRightField_InstrumentID != nullptr){ strcpy_s(pQryInstrumentTradingRightField->InstrumentID, pQryInstrumentTradingRightField_InstrumentID); pQryInstrumentTradingRightField_InstrumentID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryInstrumentTradingRightField *pQryInstrumentTradingRightField)
{
	if(pQryInstrumentTradingRightField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pQryInstrumentTradingRightField->BrokerID
		, "InvestorID", pQryInstrumentTradingRightField->InvestorID
		, "InstrumentID", pQryInstrumentTradingRightField->InstrumentID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryBrokerField *pQryBrokerField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", nullptr};
	char *pQryBrokerField_BrokerID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryBrokerField, "|y")
		, &pQryBrokerField_BrokerID
	PyCTP_PyDict_FromStruct_END
		if(pQryBrokerField_BrokerID != nullptr){ strcpy_s(pQryBrokerField->BrokerID, pQryBrokerField_BrokerID); pQryBrokerField_BrokerID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryBrokerField *pQryBrokerField)
{
	if(pQryBrokerField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y}"
		, "BrokerID", pQryBrokerField->BrokerID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryTraderField *pQryTraderField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "ParticipantID", "TraderID", nullptr};
	char *pQryTraderField_ExchangeID = nullptr;
	char *pQryTraderField_ParticipantID = nullptr;
	char *pQryTraderField_TraderID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryTraderField, "|yyy")
		, &pQryTraderField_ExchangeID
		, &pQryTraderField_ParticipantID
		, &pQryTraderField_TraderID
	PyCTP_PyDict_FromStruct_END
		if(pQryTraderField_ExchangeID != nullptr){ strcpy_s(pQryTraderField->ExchangeID, pQryTraderField_ExchangeID); pQryTraderField_ExchangeID = nullptr; }
		if(pQryTraderField_ParticipantID != nullptr){ strcpy_s(pQryTraderField->ParticipantID, pQryTraderField_ParticipantID); pQryTraderField_ParticipantID = nullptr; }
		if(pQryTraderField_TraderID != nullptr){ strcpy_s(pQryTraderField->TraderID, pQryTraderField_TraderID); pQryTraderField_TraderID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryTraderField *pQryTraderField)
{
	if(pQryTraderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "ExchangeID", pQryTraderField->ExchangeID
		, "ParticipantID", pQryTraderField->ParticipantID
		, "TraderID", pQryTraderField->TraderID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQrySuperUserFunctionField *pQrySuperUserFunctionField, PyObject *dict)
{
	static char *kwlist[] = {"UserID", nullptr};
	char *pQrySuperUserFunctionField_UserID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQrySuperUserFunctionField, "|y")
		, &pQrySuperUserFunctionField_UserID
	PyCTP_PyDict_FromStruct_END
		if(pQrySuperUserFunctionField_UserID != nullptr){ strcpy_s(pQrySuperUserFunctionField->UserID, pQrySuperUserFunctionField_UserID); pQrySuperUserFunctionField_UserID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQrySuperUserFunctionField *pQrySuperUserFunctionField)
{
	if(pQrySuperUserFunctionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y}"
		, "UserID", pQrySuperUserFunctionField->UserID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryUserSessionField *pQryUserSessionField, PyObject *dict)
{
	static char *kwlist[] = {"FrontID", "SessionID", "BrokerID", "UserID", nullptr};
	int pQryUserSessionField_FrontID = 0;
	int pQryUserSessionField_SessionID = 0;
	char *pQryUserSessionField_BrokerID = nullptr;
	char *pQryUserSessionField_UserID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryUserSessionField, "|iiyy")
		, &pQryUserSessionField_FrontID
		, &pQryUserSessionField_SessionID
		, &pQryUserSessionField_BrokerID
		, &pQryUserSessionField_UserID
	PyCTP_PyDict_FromStruct_END
		pQryUserSessionField->FrontID = pQryUserSessionField_FrontID;
		pQryUserSessionField->SessionID = pQryUserSessionField_SessionID;
		if(pQryUserSessionField_BrokerID != nullptr){ strcpy_s(pQryUserSessionField->BrokerID, pQryUserSessionField_BrokerID); pQryUserSessionField_BrokerID = nullptr; }
		if(pQryUserSessionField_UserID != nullptr){ strcpy_s(pQryUserSessionField->UserID, pQryUserSessionField_UserID); pQryUserSessionField_UserID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryUserSessionField *pQryUserSessionField)
{
	if(pQryUserSessionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i,s:i,s:y,s:y}"
		, "FrontID", pQryUserSessionField->FrontID
		, "SessionID", pQryUserSessionField->SessionID
		, "BrokerID", pQryUserSessionField->BrokerID
		, "UserID", pQryUserSessionField->UserID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryPartBrokerField *pQryPartBrokerField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "BrokerID", "ParticipantID", nullptr};
	char *pQryPartBrokerField_ExchangeID = nullptr;
	char *pQryPartBrokerField_BrokerID = nullptr;
	char *pQryPartBrokerField_ParticipantID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryPartBrokerField, "|yyy")
		, &pQryPartBrokerField_ExchangeID
		, &pQryPartBrokerField_BrokerID
		, &pQryPartBrokerField_ParticipantID
	PyCTP_PyDict_FromStruct_END
		if(pQryPartBrokerField_ExchangeID != nullptr){ strcpy_s(pQryPartBrokerField->ExchangeID, pQryPartBrokerField_ExchangeID); pQryPartBrokerField_ExchangeID = nullptr; }
		if(pQryPartBrokerField_BrokerID != nullptr){ strcpy_s(pQryPartBrokerField->BrokerID, pQryPartBrokerField_BrokerID); pQryPartBrokerField_BrokerID = nullptr; }
		if(pQryPartBrokerField_ParticipantID != nullptr){ strcpy_s(pQryPartBrokerField->ParticipantID, pQryPartBrokerField_ParticipantID); pQryPartBrokerField_ParticipantID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryPartBrokerField *pQryPartBrokerField)
{
	if(pQryPartBrokerField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "ExchangeID", pQryPartBrokerField->ExchangeID
		, "BrokerID", pQryPartBrokerField->BrokerID
		, "ParticipantID", pQryPartBrokerField->ParticipantID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryFrontStatusField *pQryFrontStatusField, PyObject *dict)
{
	static char *kwlist[] = {"FrontID", nullptr};
	int pQryFrontStatusField_FrontID = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pQryFrontStatusField, "|i")
		, &pQryFrontStatusField_FrontID
	PyCTP_PyDict_FromStruct_END
		pQryFrontStatusField->FrontID = pQryFrontStatusField_FrontID;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryFrontStatusField *pQryFrontStatusField)
{
	if(pQryFrontStatusField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i}"
		, "FrontID", pQryFrontStatusField->FrontID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryExchangeOrderField *pQryExchangeOrderField, PyObject *dict)
{
	static char *kwlist[] = {"ParticipantID", "ClientID", "ExchangeInstID", "ExchangeID", "TraderID", nullptr};
	char *pQryExchangeOrderField_ParticipantID = nullptr;
	char *pQryExchangeOrderField_ClientID = nullptr;
	char *pQryExchangeOrderField_ExchangeInstID = nullptr;
	char *pQryExchangeOrderField_ExchangeID = nullptr;
	char *pQryExchangeOrderField_TraderID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryExchangeOrderField, "|yyyyy")
		, &pQryExchangeOrderField_ParticipantID
		, &pQryExchangeOrderField_ClientID
		, &pQryExchangeOrderField_ExchangeInstID
		, &pQryExchangeOrderField_ExchangeID
		, &pQryExchangeOrderField_TraderID
	PyCTP_PyDict_FromStruct_END
		if(pQryExchangeOrderField_ParticipantID != nullptr){ strcpy_s(pQryExchangeOrderField->ParticipantID, pQryExchangeOrderField_ParticipantID); pQryExchangeOrderField_ParticipantID = nullptr; }
		if(pQryExchangeOrderField_ClientID != nullptr){ strcpy_s(pQryExchangeOrderField->ClientID, pQryExchangeOrderField_ClientID); pQryExchangeOrderField_ClientID = nullptr; }
		if(pQryExchangeOrderField_ExchangeInstID != nullptr){ strcpy_s(pQryExchangeOrderField->ExchangeInstID, pQryExchangeOrderField_ExchangeInstID); pQryExchangeOrderField_ExchangeInstID = nullptr; }
		if(pQryExchangeOrderField_ExchangeID != nullptr){ strcpy_s(pQryExchangeOrderField->ExchangeID, pQryExchangeOrderField_ExchangeID); pQryExchangeOrderField_ExchangeID = nullptr; }
		if(pQryExchangeOrderField_TraderID != nullptr){ strcpy_s(pQryExchangeOrderField->TraderID, pQryExchangeOrderField_TraderID); pQryExchangeOrderField_TraderID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryExchangeOrderField *pQryExchangeOrderField)
{
	if(pQryExchangeOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "ParticipantID", pQryExchangeOrderField->ParticipantID
		, "ClientID", pQryExchangeOrderField->ClientID
		, "ExchangeInstID", pQryExchangeOrderField->ExchangeInstID
		, "ExchangeID", pQryExchangeOrderField->ExchangeID
		, "TraderID", pQryExchangeOrderField->TraderID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryOrderActionField *pQryOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "ExchangeID", nullptr};
	char *pQryOrderActionField_BrokerID = nullptr;
	char *pQryOrderActionField_InvestorID = nullptr;
	char *pQryOrderActionField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryOrderActionField, "|yyy")
		, &pQryOrderActionField_BrokerID
		, &pQryOrderActionField_InvestorID
		, &pQryOrderActionField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pQryOrderActionField_BrokerID != nullptr){ strcpy_s(pQryOrderActionField->BrokerID, pQryOrderActionField_BrokerID); pQryOrderActionField_BrokerID = nullptr; }
		if(pQryOrderActionField_InvestorID != nullptr){ strcpy_s(pQryOrderActionField->InvestorID, pQryOrderActionField_InvestorID); pQryOrderActionField_InvestorID = nullptr; }
		if(pQryOrderActionField_ExchangeID != nullptr){ strcpy_s(pQryOrderActionField->ExchangeID, pQryOrderActionField_ExchangeID); pQryOrderActionField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryOrderActionField *pQryOrderActionField)
{
	if(pQryOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pQryOrderActionField->BrokerID
		, "InvestorID", pQryOrderActionField->InvestorID
		, "ExchangeID", pQryOrderActionField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryExchangeOrderActionField *pQryExchangeOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"ParticipantID", "ClientID", "ExchangeID", "TraderID", nullptr};
	char *pQryExchangeOrderActionField_ParticipantID = nullptr;
	char *pQryExchangeOrderActionField_ClientID = nullptr;
	char *pQryExchangeOrderActionField_ExchangeID = nullptr;
	char *pQryExchangeOrderActionField_TraderID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryExchangeOrderActionField, "|yyyy")
		, &pQryExchangeOrderActionField_ParticipantID
		, &pQryExchangeOrderActionField_ClientID
		, &pQryExchangeOrderActionField_ExchangeID
		, &pQryExchangeOrderActionField_TraderID
	PyCTP_PyDict_FromStruct_END
		if(pQryExchangeOrderActionField_ParticipantID != nullptr){ strcpy_s(pQryExchangeOrderActionField->ParticipantID, pQryExchangeOrderActionField_ParticipantID); pQryExchangeOrderActionField_ParticipantID = nullptr; }
		if(pQryExchangeOrderActionField_ClientID != nullptr){ strcpy_s(pQryExchangeOrderActionField->ClientID, pQryExchangeOrderActionField_ClientID); pQryExchangeOrderActionField_ClientID = nullptr; }
		if(pQryExchangeOrderActionField_ExchangeID != nullptr){ strcpy_s(pQryExchangeOrderActionField->ExchangeID, pQryExchangeOrderActionField_ExchangeID); pQryExchangeOrderActionField_ExchangeID = nullptr; }
		if(pQryExchangeOrderActionField_TraderID != nullptr){ strcpy_s(pQryExchangeOrderActionField->TraderID, pQryExchangeOrderActionField_TraderID); pQryExchangeOrderActionField_TraderID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryExchangeOrderActionField *pQryExchangeOrderActionField)
{
	if(pQryExchangeOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y}"
		, "ParticipantID", pQryExchangeOrderActionField->ParticipantID
		, "ClientID", pQryExchangeOrderActionField->ClientID
		, "ExchangeID", pQryExchangeOrderActionField->ExchangeID
		, "TraderID", pQryExchangeOrderActionField->TraderID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQrySuperUserField *pQrySuperUserField, PyObject *dict)
{
	static char *kwlist[] = {"UserID", nullptr};
	char *pQrySuperUserField_UserID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQrySuperUserField, "|y")
		, &pQrySuperUserField_UserID
	PyCTP_PyDict_FromStruct_END
		if(pQrySuperUserField_UserID != nullptr){ strcpy_s(pQrySuperUserField->UserID, pQrySuperUserField_UserID); pQrySuperUserField_UserID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQrySuperUserField *pQrySuperUserField)
{
	if(pQrySuperUserField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y}"
		, "UserID", pQrySuperUserField->UserID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryExchangeField *pQryExchangeField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", nullptr};
	char *pQryExchangeField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryExchangeField, "|y")
		, &pQryExchangeField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pQryExchangeField_ExchangeID != nullptr){ strcpy_s(pQryExchangeField->ExchangeID, pQryExchangeField_ExchangeID); pQryExchangeField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryExchangeField *pQryExchangeField)
{
	if(pQryExchangeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y}"
		, "ExchangeID", pQryExchangeField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryProductField *pQryProductField, PyObject *dict)
{
	static char *kwlist[] = {"ProductID", "ProductClass", "ExchangeID", nullptr};
	char *pQryProductField_ProductID = nullptr;
	char pQryProductField_ProductClass = 0;
	char *pQryProductField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryProductField, "|ycy")
		, &pQryProductField_ProductID
		, &pQryProductField_ProductClass
		, &pQryProductField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pQryProductField_ProductID != nullptr){ strcpy_s(pQryProductField->ProductID, pQryProductField_ProductID); pQryProductField_ProductID = nullptr; }
		pQryProductField->ProductClass = pQryProductField_ProductClass;
		if(pQryProductField_ExchangeID != nullptr){ strcpy_s(pQryProductField->ExchangeID, pQryProductField_ExchangeID); pQryProductField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryProductField *pQryProductField)
{
	if(pQryProductField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y}"
		, "ProductID", pQryProductField->ProductID
		, "ProductClass", pQryProductField->ProductClass
		, "ExchangeID", pQryProductField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryInstrumentField *pQryInstrumentField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "ExchangeID", "ExchangeInstID", "ProductID", nullptr};
	char *pQryInstrumentField_InstrumentID = nullptr;
	char *pQryInstrumentField_ExchangeID = nullptr;
	char *pQryInstrumentField_ExchangeInstID = nullptr;
	char *pQryInstrumentField_ProductID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryInstrumentField, "|yyyy")
		, &pQryInstrumentField_InstrumentID
		, &pQryInstrumentField_ExchangeID
		, &pQryInstrumentField_ExchangeInstID
		, &pQryInstrumentField_ProductID
	PyCTP_PyDict_FromStruct_END
		if(pQryInstrumentField_InstrumentID != nullptr){ strcpy_s(pQryInstrumentField->InstrumentID, pQryInstrumentField_InstrumentID); pQryInstrumentField_InstrumentID = nullptr; }
		if(pQryInstrumentField_ExchangeID != nullptr){ strcpy_s(pQryInstrumentField->ExchangeID, pQryInstrumentField_ExchangeID); pQryInstrumentField_ExchangeID = nullptr; }
		if(pQryInstrumentField_ExchangeInstID != nullptr){ strcpy_s(pQryInstrumentField->ExchangeInstID, pQryInstrumentField_ExchangeInstID); pQryInstrumentField_ExchangeInstID = nullptr; }
		if(pQryInstrumentField_ProductID != nullptr){ strcpy_s(pQryInstrumentField->ProductID, pQryInstrumentField_ProductID); pQryInstrumentField_ProductID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryInstrumentField *pQryInstrumentField)
{
	if(pQryInstrumentField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y}"
		, "InstrumentID", pQryInstrumentField->InstrumentID
		, "ExchangeID", pQryInstrumentField->ExchangeID
		, "ExchangeInstID", pQryInstrumentField->ExchangeInstID
		, "ProductID", pQryInstrumentField->ProductID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryDepthMarketDataField *pQryDepthMarketDataField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "ExchangeID", nullptr};
	char *pQryDepthMarketDataField_InstrumentID = nullptr;
	char *pQryDepthMarketDataField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryDepthMarketDataField, "|yy")
		, &pQryDepthMarketDataField_InstrumentID
		, &pQryDepthMarketDataField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pQryDepthMarketDataField_InstrumentID != nullptr){ strcpy_s(pQryDepthMarketDataField->InstrumentID, pQryDepthMarketDataField_InstrumentID); pQryDepthMarketDataField_InstrumentID = nullptr; }
		if(pQryDepthMarketDataField_ExchangeID != nullptr){ strcpy_s(pQryDepthMarketDataField->ExchangeID, pQryDepthMarketDataField_ExchangeID); pQryDepthMarketDataField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryDepthMarketDataField *pQryDepthMarketDataField)
{
	if(pQryDepthMarketDataField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "InstrumentID", pQryDepthMarketDataField->InstrumentID
		, "ExchangeID", pQryDepthMarketDataField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryBrokerUserField *pQryBrokerUserField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", nullptr};
	char *pQryBrokerUserField_BrokerID = nullptr;
	char *pQryBrokerUserField_UserID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryBrokerUserField, "|yy")
		, &pQryBrokerUserField_BrokerID
		, &pQryBrokerUserField_UserID
	PyCTP_PyDict_FromStruct_END
		if(pQryBrokerUserField_BrokerID != nullptr){ strcpy_s(pQryBrokerUserField->BrokerID, pQryBrokerUserField_BrokerID); pQryBrokerUserField_BrokerID = nullptr; }
		if(pQryBrokerUserField_UserID != nullptr){ strcpy_s(pQryBrokerUserField->UserID, pQryBrokerUserField_UserID); pQryBrokerUserField_UserID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryBrokerUserField *pQryBrokerUserField)
{
	if(pQryBrokerUserField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQryBrokerUserField->BrokerID
		, "UserID", pQryBrokerUserField->UserID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryBrokerUserFunctionField *pQryBrokerUserFunctionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", nullptr};
	char *pQryBrokerUserFunctionField_BrokerID = nullptr;
	char *pQryBrokerUserFunctionField_UserID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryBrokerUserFunctionField, "|yy")
		, &pQryBrokerUserFunctionField_BrokerID
		, &pQryBrokerUserFunctionField_UserID
	PyCTP_PyDict_FromStruct_END
		if(pQryBrokerUserFunctionField_BrokerID != nullptr){ strcpy_s(pQryBrokerUserFunctionField->BrokerID, pQryBrokerUserFunctionField_BrokerID); pQryBrokerUserFunctionField_BrokerID = nullptr; }
		if(pQryBrokerUserFunctionField_UserID != nullptr){ strcpy_s(pQryBrokerUserFunctionField->UserID, pQryBrokerUserFunctionField_UserID); pQryBrokerUserFunctionField_UserID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryBrokerUserFunctionField *pQryBrokerUserFunctionField)
{
	if(pQryBrokerUserFunctionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQryBrokerUserFunctionField->BrokerID
		, "UserID", pQryBrokerUserFunctionField->UserID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryTraderOfferField *pQryTraderOfferField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "ParticipantID", "TraderID", nullptr};
	char *pQryTraderOfferField_ExchangeID = nullptr;
	char *pQryTraderOfferField_ParticipantID = nullptr;
	char *pQryTraderOfferField_TraderID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryTraderOfferField, "|yyy")
		, &pQryTraderOfferField_ExchangeID
		, &pQryTraderOfferField_ParticipantID
		, &pQryTraderOfferField_TraderID
	PyCTP_PyDict_FromStruct_END
		if(pQryTraderOfferField_ExchangeID != nullptr){ strcpy_s(pQryTraderOfferField->ExchangeID, pQryTraderOfferField_ExchangeID); pQryTraderOfferField_ExchangeID = nullptr; }
		if(pQryTraderOfferField_ParticipantID != nullptr){ strcpy_s(pQryTraderOfferField->ParticipantID, pQryTraderOfferField_ParticipantID); pQryTraderOfferField_ParticipantID = nullptr; }
		if(pQryTraderOfferField_TraderID != nullptr){ strcpy_s(pQryTraderOfferField->TraderID, pQryTraderOfferField_TraderID); pQryTraderOfferField_TraderID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryTraderOfferField *pQryTraderOfferField)
{
	if(pQryTraderOfferField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "ExchangeID", pQryTraderOfferField->ExchangeID
		, "ParticipantID", pQryTraderOfferField->ParticipantID
		, "TraderID", pQryTraderOfferField->TraderID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQrySyncDepositField *pQrySyncDepositField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "DepositSeqNo", nullptr};
	char *pQrySyncDepositField_BrokerID = nullptr;
	char *pQrySyncDepositField_DepositSeqNo = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQrySyncDepositField, "|yy")
		, &pQrySyncDepositField_BrokerID
		, &pQrySyncDepositField_DepositSeqNo
	PyCTP_PyDict_FromStruct_END
		if(pQrySyncDepositField_BrokerID != nullptr){ strcpy_s(pQrySyncDepositField->BrokerID, pQrySyncDepositField_BrokerID); pQrySyncDepositField_BrokerID = nullptr; }
		if(pQrySyncDepositField_DepositSeqNo != nullptr){ strcpy_s(pQrySyncDepositField->DepositSeqNo, pQrySyncDepositField_DepositSeqNo); pQrySyncDepositField_DepositSeqNo = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQrySyncDepositField *pQrySyncDepositField)
{
	if(pQrySyncDepositField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQrySyncDepositField->BrokerID
		, "DepositSeqNo", pQrySyncDepositField->DepositSeqNo
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQrySettlementInfoField *pQrySettlementInfoField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "TradingDay", "AccountID", "CurrencyID", nullptr};
	char *pQrySettlementInfoField_BrokerID = nullptr;
	char *pQrySettlementInfoField_InvestorID = nullptr;
	char *pQrySettlementInfoField_TradingDay = nullptr;
	char *pQrySettlementInfoField_AccountID = nullptr;
	char *pQrySettlementInfoField_CurrencyID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQrySettlementInfoField, "|yyyyy")
		, &pQrySettlementInfoField_BrokerID
		, &pQrySettlementInfoField_InvestorID
		, &pQrySettlementInfoField_TradingDay
		, &pQrySettlementInfoField_AccountID
		, &pQrySettlementInfoField_CurrencyID
	PyCTP_PyDict_FromStruct_END
		if(pQrySettlementInfoField_BrokerID != nullptr){ strcpy_s(pQrySettlementInfoField->BrokerID, pQrySettlementInfoField_BrokerID); pQrySettlementInfoField_BrokerID = nullptr; }
		if(pQrySettlementInfoField_InvestorID != nullptr){ strcpy_s(pQrySettlementInfoField->InvestorID, pQrySettlementInfoField_InvestorID); pQrySettlementInfoField_InvestorID = nullptr; }
		if(pQrySettlementInfoField_TradingDay != nullptr){ strcpy_s(pQrySettlementInfoField->TradingDay, pQrySettlementInfoField_TradingDay); pQrySettlementInfoField_TradingDay = nullptr; }
		if(pQrySettlementInfoField_AccountID != nullptr){ strcpy_s(pQrySettlementInfoField->AccountID, pQrySettlementInfoField_AccountID); pQrySettlementInfoField_AccountID = nullptr; }
		if(pQrySettlementInfoField_CurrencyID != nullptr){ strcpy_s(pQrySettlementInfoField->CurrencyID, pQrySettlementInfoField_CurrencyID); pQrySettlementInfoField_CurrencyID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQrySettlementInfoField *pQrySettlementInfoField)
{
	if(pQrySettlementInfoField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQrySettlementInfoField->BrokerID
		, "InvestorID", pQrySettlementInfoField->InvestorID
		, "TradingDay", pQrySettlementInfoField->TradingDay
		, "AccountID", pQrySettlementInfoField->AccountID
		, "CurrencyID", pQrySettlementInfoField->CurrencyID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryExchangeMarginRateField *pQryExchangeMarginRateField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InstrumentID", "HedgeFlag", "ExchangeID", nullptr};
	char *pQryExchangeMarginRateField_BrokerID = nullptr;
	char *pQryExchangeMarginRateField_InstrumentID = nullptr;
	char pQryExchangeMarginRateField_HedgeFlag = 0;
	char *pQryExchangeMarginRateField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryExchangeMarginRateField, "|yycy")
		, &pQryExchangeMarginRateField_BrokerID
		, &pQryExchangeMarginRateField_InstrumentID
		, &pQryExchangeMarginRateField_HedgeFlag
		, &pQryExchangeMarginRateField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pQryExchangeMarginRateField_BrokerID != nullptr){ strcpy_s(pQryExchangeMarginRateField->BrokerID, pQryExchangeMarginRateField_BrokerID); pQryExchangeMarginRateField_BrokerID = nullptr; }
		if(pQryExchangeMarginRateField_InstrumentID != nullptr){ strcpy_s(pQryExchangeMarginRateField->InstrumentID, pQryExchangeMarginRateField_InstrumentID); pQryExchangeMarginRateField_InstrumentID = nullptr; }
		pQryExchangeMarginRateField->HedgeFlag = pQryExchangeMarginRateField_HedgeFlag;
		if(pQryExchangeMarginRateField_ExchangeID != nullptr){ strcpy_s(pQryExchangeMarginRateField->ExchangeID, pQryExchangeMarginRateField_ExchangeID); pQryExchangeMarginRateField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryExchangeMarginRateField *pQryExchangeMarginRateField)
{
	if(pQryExchangeMarginRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c,s:y}"
		, "BrokerID", pQryExchangeMarginRateField->BrokerID
		, "InstrumentID", pQryExchangeMarginRateField->InstrumentID
		, "HedgeFlag", pQryExchangeMarginRateField->HedgeFlag
		, "ExchangeID", pQryExchangeMarginRateField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryExchangeMarginRateAdjustField *pQryExchangeMarginRateAdjustField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InstrumentID", "HedgeFlag", nullptr};
	char *pQryExchangeMarginRateAdjustField_BrokerID = nullptr;
	char *pQryExchangeMarginRateAdjustField_InstrumentID = nullptr;
	char pQryExchangeMarginRateAdjustField_HedgeFlag = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pQryExchangeMarginRateAdjustField, "|yyc")
		, &pQryExchangeMarginRateAdjustField_BrokerID
		, &pQryExchangeMarginRateAdjustField_InstrumentID
		, &pQryExchangeMarginRateAdjustField_HedgeFlag
	PyCTP_PyDict_FromStruct_END
		if(pQryExchangeMarginRateAdjustField_BrokerID != nullptr){ strcpy_s(pQryExchangeMarginRateAdjustField->BrokerID, pQryExchangeMarginRateAdjustField_BrokerID); pQryExchangeMarginRateAdjustField_BrokerID = nullptr; }
		if(pQryExchangeMarginRateAdjustField_InstrumentID != nullptr){ strcpy_s(pQryExchangeMarginRateAdjustField->InstrumentID, pQryExchangeMarginRateAdjustField_InstrumentID); pQryExchangeMarginRateAdjustField_InstrumentID = nullptr; }
		pQryExchangeMarginRateAdjustField->HedgeFlag = pQryExchangeMarginRateAdjustField_HedgeFlag;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryExchangeMarginRateAdjustField *pQryExchangeMarginRateAdjustField)
{
	if(pQryExchangeMarginRateAdjustField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c}"
		, "BrokerID", pQryExchangeMarginRateAdjustField->BrokerID
		, "InstrumentID", pQryExchangeMarginRateAdjustField->InstrumentID
		, "HedgeFlag", pQryExchangeMarginRateAdjustField->HedgeFlag
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryExchangeRateField *pQryExchangeRateField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "FromCurrencyID", "ToCurrencyID", nullptr};
	char *pQryExchangeRateField_BrokerID = nullptr;
	char *pQryExchangeRateField_FromCurrencyID = nullptr;
	char *pQryExchangeRateField_ToCurrencyID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryExchangeRateField, "|yyy")
		, &pQryExchangeRateField_BrokerID
		, &pQryExchangeRateField_FromCurrencyID
		, &pQryExchangeRateField_ToCurrencyID
	PyCTP_PyDict_FromStruct_END
		if(pQryExchangeRateField_BrokerID != nullptr){ strcpy_s(pQryExchangeRateField->BrokerID, pQryExchangeRateField_BrokerID); pQryExchangeRateField_BrokerID = nullptr; }
		if(pQryExchangeRateField_FromCurrencyID != nullptr){ strcpy_s(pQryExchangeRateField->FromCurrencyID, pQryExchangeRateField_FromCurrencyID); pQryExchangeRateField_FromCurrencyID = nullptr; }
		if(pQryExchangeRateField_ToCurrencyID != nullptr){ strcpy_s(pQryExchangeRateField->ToCurrencyID, pQryExchangeRateField_ToCurrencyID); pQryExchangeRateField_ToCurrencyID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryExchangeRateField *pQryExchangeRateField)
{
	if(pQryExchangeRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pQryExchangeRateField->BrokerID
		, "FromCurrencyID", pQryExchangeRateField->FromCurrencyID
		, "ToCurrencyID", pQryExchangeRateField->ToCurrencyID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQrySyncFundMortgageField *pQrySyncFundMortgageField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "MortgageSeqNo", nullptr};
	char *pQrySyncFundMortgageField_BrokerID = nullptr;
	char *pQrySyncFundMortgageField_MortgageSeqNo = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQrySyncFundMortgageField, "|yy")
		, &pQrySyncFundMortgageField_BrokerID
		, &pQrySyncFundMortgageField_MortgageSeqNo
	PyCTP_PyDict_FromStruct_END
		if(pQrySyncFundMortgageField_BrokerID != nullptr){ strcpy_s(pQrySyncFundMortgageField->BrokerID, pQrySyncFundMortgageField_BrokerID); pQrySyncFundMortgageField_BrokerID = nullptr; }
		if(pQrySyncFundMortgageField_MortgageSeqNo != nullptr){ strcpy_s(pQrySyncFundMortgageField->MortgageSeqNo, pQrySyncFundMortgageField_MortgageSeqNo); pQrySyncFundMortgageField_MortgageSeqNo = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQrySyncFundMortgageField *pQrySyncFundMortgageField)
{
	if(pQrySyncFundMortgageField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQrySyncFundMortgageField->BrokerID
		, "MortgageSeqNo", pQrySyncFundMortgageField->MortgageSeqNo
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryHisOrderField *pQryHisOrderField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ExchangeID", "OrderSysID", "InsertTimeStart", "InsertTimeEnd", "TradingDay", "SettlementID", nullptr};
	char *pQryHisOrderField_BrokerID = nullptr;
	char *pQryHisOrderField_InvestorID = nullptr;
	char *pQryHisOrderField_InstrumentID = nullptr;
	char *pQryHisOrderField_ExchangeID = nullptr;
	char *pQryHisOrderField_OrderSysID = nullptr;
	char *pQryHisOrderField_InsertTimeStart = nullptr;
	char *pQryHisOrderField_InsertTimeEnd = nullptr;
	char *pQryHisOrderField_TradingDay = nullptr;
	int pQryHisOrderField_SettlementID = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pQryHisOrderField, "|yyyyyyyyi")
		, &pQryHisOrderField_BrokerID
		, &pQryHisOrderField_InvestorID
		, &pQryHisOrderField_InstrumentID
		, &pQryHisOrderField_ExchangeID
		, &pQryHisOrderField_OrderSysID
		, &pQryHisOrderField_InsertTimeStart
		, &pQryHisOrderField_InsertTimeEnd
		, &pQryHisOrderField_TradingDay
		, &pQryHisOrderField_SettlementID
	PyCTP_PyDict_FromStruct_END
		if(pQryHisOrderField_BrokerID != nullptr){ strcpy_s(pQryHisOrderField->BrokerID, pQryHisOrderField_BrokerID); pQryHisOrderField_BrokerID = nullptr; }
		if(pQryHisOrderField_InvestorID != nullptr){ strcpy_s(pQryHisOrderField->InvestorID, pQryHisOrderField_InvestorID); pQryHisOrderField_InvestorID = nullptr; }
		if(pQryHisOrderField_InstrumentID != nullptr){ strcpy_s(pQryHisOrderField->InstrumentID, pQryHisOrderField_InstrumentID); pQryHisOrderField_InstrumentID = nullptr; }
		if(pQryHisOrderField_ExchangeID != nullptr){ strcpy_s(pQryHisOrderField->ExchangeID, pQryHisOrderField_ExchangeID); pQryHisOrderField_ExchangeID = nullptr; }
		if(pQryHisOrderField_OrderSysID != nullptr){ strcpy_s(pQryHisOrderField->OrderSysID, pQryHisOrderField_OrderSysID); pQryHisOrderField_OrderSysID = nullptr; }
		if(pQryHisOrderField_InsertTimeStart != nullptr){ strcpy_s(pQryHisOrderField->InsertTimeStart, pQryHisOrderField_InsertTimeStart); pQryHisOrderField_InsertTimeStart = nullptr; }
		if(pQryHisOrderField_InsertTimeEnd != nullptr){ strcpy_s(pQryHisOrderField->InsertTimeEnd, pQryHisOrderField_InsertTimeEnd); pQryHisOrderField_InsertTimeEnd = nullptr; }
		if(pQryHisOrderField_TradingDay != nullptr){ strcpy_s(pQryHisOrderField->TradingDay, pQryHisOrderField_TradingDay); pQryHisOrderField_TradingDay = nullptr; }
		pQryHisOrderField->SettlementID = pQryHisOrderField_SettlementID;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryHisOrderField *pQryHisOrderField)
{
	if(pQryHisOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i}"
		, "BrokerID", pQryHisOrderField->BrokerID
		, "InvestorID", pQryHisOrderField->InvestorID
		, "InstrumentID", pQryHisOrderField->InstrumentID
		, "ExchangeID", pQryHisOrderField->ExchangeID
		, "OrderSysID", pQryHisOrderField->OrderSysID
		, "InsertTimeStart", pQryHisOrderField->InsertTimeStart
		, "InsertTimeEnd", pQryHisOrderField->InsertTimeEnd
		, "TradingDay", pQryHisOrderField->TradingDay
		, "SettlementID", pQryHisOrderField->SettlementID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcOptionInstrMiniMarginField *pOptionInstrMiniMarginField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "InvestorRange", "BrokerID", "InvestorID", "MinMargin", "ValueMethod", "IsRelative", nullptr};
	char *pOptionInstrMiniMarginField_InstrumentID = nullptr;
	char pOptionInstrMiniMarginField_InvestorRange = 0;
	char *pOptionInstrMiniMarginField_BrokerID = nullptr;
	char *pOptionInstrMiniMarginField_InvestorID = nullptr;
	double pOptionInstrMiniMarginField_MinMargin = 0.0;
	char pOptionInstrMiniMarginField_ValueMethod = 0;
	int pOptionInstrMiniMarginField_IsRelative = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pOptionInstrMiniMarginField, "|ycyydci")
		, &pOptionInstrMiniMarginField_InstrumentID
		, &pOptionInstrMiniMarginField_InvestorRange
		, &pOptionInstrMiniMarginField_BrokerID
		, &pOptionInstrMiniMarginField_InvestorID
		, &pOptionInstrMiniMarginField_MinMargin
		, &pOptionInstrMiniMarginField_ValueMethod
		, &pOptionInstrMiniMarginField_IsRelative
	PyCTP_PyDict_FromStruct_END
		if(pOptionInstrMiniMarginField_InstrumentID != nullptr){ strcpy_s(pOptionInstrMiniMarginField->InstrumentID, pOptionInstrMiniMarginField_InstrumentID); pOptionInstrMiniMarginField_InstrumentID = nullptr; }
		pOptionInstrMiniMarginField->InvestorRange = pOptionInstrMiniMarginField_InvestorRange;
		if(pOptionInstrMiniMarginField_BrokerID != nullptr){ strcpy_s(pOptionInstrMiniMarginField->BrokerID, pOptionInstrMiniMarginField_BrokerID); pOptionInstrMiniMarginField_BrokerID = nullptr; }
		if(pOptionInstrMiniMarginField_InvestorID != nullptr){ strcpy_s(pOptionInstrMiniMarginField->InvestorID, pOptionInstrMiniMarginField_InvestorID); pOptionInstrMiniMarginField_InvestorID = nullptr; }
		pOptionInstrMiniMarginField->MinMargin = pOptionInstrMiniMarginField_MinMargin;
		pOptionInstrMiniMarginField->ValueMethod = pOptionInstrMiniMarginField_ValueMethod;
		pOptionInstrMiniMarginField->IsRelative = pOptionInstrMiniMarginField_IsRelative;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcOptionInstrMiniMarginField *pOptionInstrMiniMarginField)
{
	if(pOptionInstrMiniMarginField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y,s:d,s:c,s:i}"
		, "InstrumentID", pOptionInstrMiniMarginField->InstrumentID
		, "InvestorRange", pOptionInstrMiniMarginField->InvestorRange
		, "BrokerID", pOptionInstrMiniMarginField->BrokerID
		, "InvestorID", pOptionInstrMiniMarginField->InvestorID
		, "MinMargin", pOptionInstrMiniMarginField->MinMargin
		, "ValueMethod", pOptionInstrMiniMarginField->ValueMethod
		, "IsRelative", pOptionInstrMiniMarginField->IsRelative
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcOptionInstrMarginAdjustField *pOptionInstrMarginAdjustField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "InvestorRange", "BrokerID", "InvestorID", "SShortMarginRatioByMoney", "SShortMarginRatioByVolume", "HShortMarginRatioByMoney", "HShortMarginRatioByVolume", "AShortMarginRatioByMoney", "AShortMarginRatioByVolume", "IsRelative", "MShortMarginRatioByMoney", "MShortMarginRatioByVolume", nullptr};
	char *pOptionInstrMarginAdjustField_InstrumentID = nullptr;
	char pOptionInstrMarginAdjustField_InvestorRange = 0;
	char *pOptionInstrMarginAdjustField_BrokerID = nullptr;
	char *pOptionInstrMarginAdjustField_InvestorID = nullptr;
	double pOptionInstrMarginAdjustField_SShortMarginRatioByMoney = 0.0;
	double pOptionInstrMarginAdjustField_SShortMarginRatioByVolume = 0.0;
	double pOptionInstrMarginAdjustField_HShortMarginRatioByMoney = 0.0;
	double pOptionInstrMarginAdjustField_HShortMarginRatioByVolume = 0.0;
	double pOptionInstrMarginAdjustField_AShortMarginRatioByMoney = 0.0;
	double pOptionInstrMarginAdjustField_AShortMarginRatioByVolume = 0.0;
	int pOptionInstrMarginAdjustField_IsRelative = 0;
	double pOptionInstrMarginAdjustField_MShortMarginRatioByMoney = 0.0;
	double pOptionInstrMarginAdjustField_MShortMarginRatioByVolume = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pOptionInstrMarginAdjustField, "|ycyyddddddidd")
		, &pOptionInstrMarginAdjustField_InstrumentID
		, &pOptionInstrMarginAdjustField_InvestorRange
		, &pOptionInstrMarginAdjustField_BrokerID
		, &pOptionInstrMarginAdjustField_InvestorID
		, &pOptionInstrMarginAdjustField_SShortMarginRatioByMoney
		, &pOptionInstrMarginAdjustField_SShortMarginRatioByVolume
		, &pOptionInstrMarginAdjustField_HShortMarginRatioByMoney
		, &pOptionInstrMarginAdjustField_HShortMarginRatioByVolume
		, &pOptionInstrMarginAdjustField_AShortMarginRatioByMoney
		, &pOptionInstrMarginAdjustField_AShortMarginRatioByVolume
		, &pOptionInstrMarginAdjustField_IsRelative
		, &pOptionInstrMarginAdjustField_MShortMarginRatioByMoney
		, &pOptionInstrMarginAdjustField_MShortMarginRatioByVolume
	PyCTP_PyDict_FromStruct_END
		if(pOptionInstrMarginAdjustField_InstrumentID != nullptr){ strcpy_s(pOptionInstrMarginAdjustField->InstrumentID, pOptionInstrMarginAdjustField_InstrumentID); pOptionInstrMarginAdjustField_InstrumentID = nullptr; }
		pOptionInstrMarginAdjustField->InvestorRange = pOptionInstrMarginAdjustField_InvestorRange;
		if(pOptionInstrMarginAdjustField_BrokerID != nullptr){ strcpy_s(pOptionInstrMarginAdjustField->BrokerID, pOptionInstrMarginAdjustField_BrokerID); pOptionInstrMarginAdjustField_BrokerID = nullptr; }
		if(pOptionInstrMarginAdjustField_InvestorID != nullptr){ strcpy_s(pOptionInstrMarginAdjustField->InvestorID, pOptionInstrMarginAdjustField_InvestorID); pOptionInstrMarginAdjustField_InvestorID = nullptr; }
		pOptionInstrMarginAdjustField->SShortMarginRatioByMoney = pOptionInstrMarginAdjustField_SShortMarginRatioByMoney;
		pOptionInstrMarginAdjustField->SShortMarginRatioByVolume = pOptionInstrMarginAdjustField_SShortMarginRatioByVolume;
		pOptionInstrMarginAdjustField->HShortMarginRatioByMoney = pOptionInstrMarginAdjustField_HShortMarginRatioByMoney;
		pOptionInstrMarginAdjustField->HShortMarginRatioByVolume = pOptionInstrMarginAdjustField_HShortMarginRatioByVolume;
		pOptionInstrMarginAdjustField->AShortMarginRatioByMoney = pOptionInstrMarginAdjustField_AShortMarginRatioByMoney;
		pOptionInstrMarginAdjustField->AShortMarginRatioByVolume = pOptionInstrMarginAdjustField_AShortMarginRatioByVolume;
		pOptionInstrMarginAdjustField->IsRelative = pOptionInstrMarginAdjustField_IsRelative;
		pOptionInstrMarginAdjustField->MShortMarginRatioByMoney = pOptionInstrMarginAdjustField_MShortMarginRatioByMoney;
		pOptionInstrMarginAdjustField->MShortMarginRatioByVolume = pOptionInstrMarginAdjustField_MShortMarginRatioByVolume;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcOptionInstrMarginAdjustField *pOptionInstrMarginAdjustField)
{
	if(pOptionInstrMarginAdjustField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y,s:d,s:d,s:d,s:d,s:d,s:d,s:i,s:d,s:d}"
		, "InstrumentID", pOptionInstrMarginAdjustField->InstrumentID
		, "InvestorRange", pOptionInstrMarginAdjustField->InvestorRange
		, "BrokerID", pOptionInstrMarginAdjustField->BrokerID
		, "InvestorID", pOptionInstrMarginAdjustField->InvestorID
		, "SShortMarginRatioByMoney", pOptionInstrMarginAdjustField->SShortMarginRatioByMoney
		, "SShortMarginRatioByVolume", pOptionInstrMarginAdjustField->SShortMarginRatioByVolume
		, "HShortMarginRatioByMoney", pOptionInstrMarginAdjustField->HShortMarginRatioByMoney
		, "HShortMarginRatioByVolume", pOptionInstrMarginAdjustField->HShortMarginRatioByVolume
		, "AShortMarginRatioByMoney", pOptionInstrMarginAdjustField->AShortMarginRatioByMoney
		, "AShortMarginRatioByVolume", pOptionInstrMarginAdjustField->AShortMarginRatioByVolume
		, "IsRelative", pOptionInstrMarginAdjustField->IsRelative
		, "MShortMarginRatioByMoney", pOptionInstrMarginAdjustField->MShortMarginRatioByMoney
		, "MShortMarginRatioByVolume", pOptionInstrMarginAdjustField->MShortMarginRatioByVolume
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcOptionInstrCommRateField *pOptionInstrCommRateField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "InvestorRange", "BrokerID", "InvestorID", "OpenRatioByMoney", "OpenRatioByVolume", "CloseRatioByMoney", "CloseRatioByVolume", "CloseTodayRatioByMoney", "CloseTodayRatioByVolume", "StrikeRatioByMoney", "StrikeRatioByVolume", "ExchangeID", "InvestUnitID", nullptr};
	char *pOptionInstrCommRateField_InstrumentID = nullptr;
	char pOptionInstrCommRateField_InvestorRange = 0;
	char *pOptionInstrCommRateField_BrokerID = nullptr;
	char *pOptionInstrCommRateField_InvestorID = nullptr;
	double pOptionInstrCommRateField_OpenRatioByMoney = 0.0;
	double pOptionInstrCommRateField_OpenRatioByVolume = 0.0;
	double pOptionInstrCommRateField_CloseRatioByMoney = 0.0;
	double pOptionInstrCommRateField_CloseRatioByVolume = 0.0;
	double pOptionInstrCommRateField_CloseTodayRatioByMoney = 0.0;
	double pOptionInstrCommRateField_CloseTodayRatioByVolume = 0.0;
	double pOptionInstrCommRateField_StrikeRatioByMoney = 0.0;
	double pOptionInstrCommRateField_StrikeRatioByVolume = 0.0;
	char *pOptionInstrCommRateField_ExchangeID = nullptr;
	char *pOptionInstrCommRateField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pOptionInstrCommRateField, "|ycyyddddddddyy")
		, &pOptionInstrCommRateField_InstrumentID
		, &pOptionInstrCommRateField_InvestorRange
		, &pOptionInstrCommRateField_BrokerID
		, &pOptionInstrCommRateField_InvestorID
		, &pOptionInstrCommRateField_OpenRatioByMoney
		, &pOptionInstrCommRateField_OpenRatioByVolume
		, &pOptionInstrCommRateField_CloseRatioByMoney
		, &pOptionInstrCommRateField_CloseRatioByVolume
		, &pOptionInstrCommRateField_CloseTodayRatioByMoney
		, &pOptionInstrCommRateField_CloseTodayRatioByVolume
		, &pOptionInstrCommRateField_StrikeRatioByMoney
		, &pOptionInstrCommRateField_StrikeRatioByVolume
		, &pOptionInstrCommRateField_ExchangeID
		, &pOptionInstrCommRateField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pOptionInstrCommRateField_InstrumentID != nullptr){ strcpy_s(pOptionInstrCommRateField->InstrumentID, pOptionInstrCommRateField_InstrumentID); pOptionInstrCommRateField_InstrumentID = nullptr; }
		pOptionInstrCommRateField->InvestorRange = pOptionInstrCommRateField_InvestorRange;
		if(pOptionInstrCommRateField_BrokerID != nullptr){ strcpy_s(pOptionInstrCommRateField->BrokerID, pOptionInstrCommRateField_BrokerID); pOptionInstrCommRateField_BrokerID = nullptr; }
		if(pOptionInstrCommRateField_InvestorID != nullptr){ strcpy_s(pOptionInstrCommRateField->InvestorID, pOptionInstrCommRateField_InvestorID); pOptionInstrCommRateField_InvestorID = nullptr; }
		pOptionInstrCommRateField->OpenRatioByMoney = pOptionInstrCommRateField_OpenRatioByMoney;
		pOptionInstrCommRateField->OpenRatioByVolume = pOptionInstrCommRateField_OpenRatioByVolume;
		pOptionInstrCommRateField->CloseRatioByMoney = pOptionInstrCommRateField_CloseRatioByMoney;
		pOptionInstrCommRateField->CloseRatioByVolume = pOptionInstrCommRateField_CloseRatioByVolume;
		pOptionInstrCommRateField->CloseTodayRatioByMoney = pOptionInstrCommRateField_CloseTodayRatioByMoney;
		pOptionInstrCommRateField->CloseTodayRatioByVolume = pOptionInstrCommRateField_CloseTodayRatioByVolume;
		pOptionInstrCommRateField->StrikeRatioByMoney = pOptionInstrCommRateField_StrikeRatioByMoney;
		pOptionInstrCommRateField->StrikeRatioByVolume = pOptionInstrCommRateField_StrikeRatioByVolume;
		if(pOptionInstrCommRateField_ExchangeID != nullptr){ strcpy_s(pOptionInstrCommRateField->ExchangeID, pOptionInstrCommRateField_ExchangeID); pOptionInstrCommRateField_ExchangeID = nullptr; }
		if(pOptionInstrCommRateField_InvestUnitID != nullptr){ strcpy_s(pOptionInstrCommRateField->InvestUnitID, pOptionInstrCommRateField_InvestUnitID); pOptionInstrCommRateField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcOptionInstrCommRateField *pOptionInstrCommRateField)
{
	if(pOptionInstrCommRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:y,s:y}"
		, "InstrumentID", pOptionInstrCommRateField->InstrumentID
		, "InvestorRange", pOptionInstrCommRateField->InvestorRange
		, "BrokerID", pOptionInstrCommRateField->BrokerID
		, "InvestorID", pOptionInstrCommRateField->InvestorID
		, "OpenRatioByMoney", pOptionInstrCommRateField->OpenRatioByMoney
		, "OpenRatioByVolume", pOptionInstrCommRateField->OpenRatioByVolume
		, "CloseRatioByMoney", pOptionInstrCommRateField->CloseRatioByMoney
		, "CloseRatioByVolume", pOptionInstrCommRateField->CloseRatioByVolume
		, "CloseTodayRatioByMoney", pOptionInstrCommRateField->CloseTodayRatioByMoney
		, "CloseTodayRatioByVolume", pOptionInstrCommRateField->CloseTodayRatioByVolume
		, "StrikeRatioByMoney", pOptionInstrCommRateField->StrikeRatioByMoney
		, "StrikeRatioByVolume", pOptionInstrCommRateField->StrikeRatioByVolume
		, "ExchangeID", pOptionInstrCommRateField->ExchangeID
		, "InvestUnitID", pOptionInstrCommRateField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcOptionInstrTradeCostField *pOptionInstrTradeCostField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "HedgeFlag", "FixedMargin", "MiniMargin", "Royalty", "ExchFixedMargin", "ExchMiniMargin", "ExchangeID", "InvestUnitID", nullptr};
	char *pOptionInstrTradeCostField_BrokerID = nullptr;
	char *pOptionInstrTradeCostField_InvestorID = nullptr;
	char *pOptionInstrTradeCostField_InstrumentID = nullptr;
	char pOptionInstrTradeCostField_HedgeFlag = 0;
	double pOptionInstrTradeCostField_FixedMargin = 0.0;
	double pOptionInstrTradeCostField_MiniMargin = 0.0;
	double pOptionInstrTradeCostField_Royalty = 0.0;
	double pOptionInstrTradeCostField_ExchFixedMargin = 0.0;
	double pOptionInstrTradeCostField_ExchMiniMargin = 0.0;
	char *pOptionInstrTradeCostField_ExchangeID = nullptr;
	char *pOptionInstrTradeCostField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pOptionInstrTradeCostField, "|yyycdddddyy")
		, &pOptionInstrTradeCostField_BrokerID
		, &pOptionInstrTradeCostField_InvestorID
		, &pOptionInstrTradeCostField_InstrumentID
		, &pOptionInstrTradeCostField_HedgeFlag
		, &pOptionInstrTradeCostField_FixedMargin
		, &pOptionInstrTradeCostField_MiniMargin
		, &pOptionInstrTradeCostField_Royalty
		, &pOptionInstrTradeCostField_ExchFixedMargin
		, &pOptionInstrTradeCostField_ExchMiniMargin
		, &pOptionInstrTradeCostField_ExchangeID
		, &pOptionInstrTradeCostField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pOptionInstrTradeCostField_BrokerID != nullptr){ strcpy_s(pOptionInstrTradeCostField->BrokerID, pOptionInstrTradeCostField_BrokerID); pOptionInstrTradeCostField_BrokerID = nullptr; }
		if(pOptionInstrTradeCostField_InvestorID != nullptr){ strcpy_s(pOptionInstrTradeCostField->InvestorID, pOptionInstrTradeCostField_InvestorID); pOptionInstrTradeCostField_InvestorID = nullptr; }
		if(pOptionInstrTradeCostField_InstrumentID != nullptr){ strcpy_s(pOptionInstrTradeCostField->InstrumentID, pOptionInstrTradeCostField_InstrumentID); pOptionInstrTradeCostField_InstrumentID = nullptr; }
		pOptionInstrTradeCostField->HedgeFlag = pOptionInstrTradeCostField_HedgeFlag;
		pOptionInstrTradeCostField->FixedMargin = pOptionInstrTradeCostField_FixedMargin;
		pOptionInstrTradeCostField->MiniMargin = pOptionInstrTradeCostField_MiniMargin;
		pOptionInstrTradeCostField->Royalty = pOptionInstrTradeCostField_Royalty;
		pOptionInstrTradeCostField->ExchFixedMargin = pOptionInstrTradeCostField_ExchFixedMargin;
		pOptionInstrTradeCostField->ExchMiniMargin = pOptionInstrTradeCostField_ExchMiniMargin;
		if(pOptionInstrTradeCostField_ExchangeID != nullptr){ strcpy_s(pOptionInstrTradeCostField->ExchangeID, pOptionInstrTradeCostField_ExchangeID); pOptionInstrTradeCostField_ExchangeID = nullptr; }
		if(pOptionInstrTradeCostField_InvestUnitID != nullptr){ strcpy_s(pOptionInstrTradeCostField->InvestUnitID, pOptionInstrTradeCostField_InvestUnitID); pOptionInstrTradeCostField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcOptionInstrTradeCostField *pOptionInstrTradeCostField)
{
	if(pOptionInstrTradeCostField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:c,s:d,s:d,s:d,s:d,s:d,s:y,s:y}"
		, "BrokerID", pOptionInstrTradeCostField->BrokerID
		, "InvestorID", pOptionInstrTradeCostField->InvestorID
		, "InstrumentID", pOptionInstrTradeCostField->InstrumentID
		, "HedgeFlag", pOptionInstrTradeCostField->HedgeFlag
		, "FixedMargin", pOptionInstrTradeCostField->FixedMargin
		, "MiniMargin", pOptionInstrTradeCostField->MiniMargin
		, "Royalty", pOptionInstrTradeCostField->Royalty
		, "ExchFixedMargin", pOptionInstrTradeCostField->ExchFixedMargin
		, "ExchMiniMargin", pOptionInstrTradeCostField->ExchMiniMargin
		, "ExchangeID", pOptionInstrTradeCostField->ExchangeID
		, "InvestUnitID", pOptionInstrTradeCostField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryOptionInstrTradeCostField *pQryOptionInstrTradeCostField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "HedgeFlag", "InputPrice", "UnderlyingPrice", "ExchangeID", "InvestUnitID", nullptr};
	char *pQryOptionInstrTradeCostField_BrokerID = nullptr;
	char *pQryOptionInstrTradeCostField_InvestorID = nullptr;
	char *pQryOptionInstrTradeCostField_InstrumentID = nullptr;
	char pQryOptionInstrTradeCostField_HedgeFlag = 0;
	double pQryOptionInstrTradeCostField_InputPrice = 0.0;
	double pQryOptionInstrTradeCostField_UnderlyingPrice = 0.0;
	char *pQryOptionInstrTradeCostField_ExchangeID = nullptr;
	char *pQryOptionInstrTradeCostField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryOptionInstrTradeCostField, "|yyycddyy")
		, &pQryOptionInstrTradeCostField_BrokerID
		, &pQryOptionInstrTradeCostField_InvestorID
		, &pQryOptionInstrTradeCostField_InstrumentID
		, &pQryOptionInstrTradeCostField_HedgeFlag
		, &pQryOptionInstrTradeCostField_InputPrice
		, &pQryOptionInstrTradeCostField_UnderlyingPrice
		, &pQryOptionInstrTradeCostField_ExchangeID
		, &pQryOptionInstrTradeCostField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryOptionInstrTradeCostField_BrokerID != nullptr){ strcpy_s(pQryOptionInstrTradeCostField->BrokerID, pQryOptionInstrTradeCostField_BrokerID); pQryOptionInstrTradeCostField_BrokerID = nullptr; }
		if(pQryOptionInstrTradeCostField_InvestorID != nullptr){ strcpy_s(pQryOptionInstrTradeCostField->InvestorID, pQryOptionInstrTradeCostField_InvestorID); pQryOptionInstrTradeCostField_InvestorID = nullptr; }
		if(pQryOptionInstrTradeCostField_InstrumentID != nullptr){ strcpy_s(pQryOptionInstrTradeCostField->InstrumentID, pQryOptionInstrTradeCostField_InstrumentID); pQryOptionInstrTradeCostField_InstrumentID = nullptr; }
		pQryOptionInstrTradeCostField->HedgeFlag = pQryOptionInstrTradeCostField_HedgeFlag;
		pQryOptionInstrTradeCostField->InputPrice = pQryOptionInstrTradeCostField_InputPrice;
		pQryOptionInstrTradeCostField->UnderlyingPrice = pQryOptionInstrTradeCostField_UnderlyingPrice;
		if(pQryOptionInstrTradeCostField_ExchangeID != nullptr){ strcpy_s(pQryOptionInstrTradeCostField->ExchangeID, pQryOptionInstrTradeCostField_ExchangeID); pQryOptionInstrTradeCostField_ExchangeID = nullptr; }
		if(pQryOptionInstrTradeCostField_InvestUnitID != nullptr){ strcpy_s(pQryOptionInstrTradeCostField->InvestUnitID, pQryOptionInstrTradeCostField_InvestUnitID); pQryOptionInstrTradeCostField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryOptionInstrTradeCostField *pQryOptionInstrTradeCostField)
{
	if(pQryOptionInstrTradeCostField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:c,s:d,s:d,s:y,s:y}"
		, "BrokerID", pQryOptionInstrTradeCostField->BrokerID
		, "InvestorID", pQryOptionInstrTradeCostField->InvestorID
		, "InstrumentID", pQryOptionInstrTradeCostField->InstrumentID
		, "HedgeFlag", pQryOptionInstrTradeCostField->HedgeFlag
		, "InputPrice", pQryOptionInstrTradeCostField->InputPrice
		, "UnderlyingPrice", pQryOptionInstrTradeCostField->UnderlyingPrice
		, "ExchangeID", pQryOptionInstrTradeCostField->ExchangeID
		, "InvestUnitID", pQryOptionInstrTradeCostField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryOptionInstrCommRateField *pQryOptionInstrCommRateField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ExchangeID", "InvestUnitID", nullptr};
	char *pQryOptionInstrCommRateField_BrokerID = nullptr;
	char *pQryOptionInstrCommRateField_InvestorID = nullptr;
	char *pQryOptionInstrCommRateField_InstrumentID = nullptr;
	char *pQryOptionInstrCommRateField_ExchangeID = nullptr;
	char *pQryOptionInstrCommRateField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryOptionInstrCommRateField, "|yyyyy")
		, &pQryOptionInstrCommRateField_BrokerID
		, &pQryOptionInstrCommRateField_InvestorID
		, &pQryOptionInstrCommRateField_InstrumentID
		, &pQryOptionInstrCommRateField_ExchangeID
		, &pQryOptionInstrCommRateField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryOptionInstrCommRateField_BrokerID != nullptr){ strcpy_s(pQryOptionInstrCommRateField->BrokerID, pQryOptionInstrCommRateField_BrokerID); pQryOptionInstrCommRateField_BrokerID = nullptr; }
		if(pQryOptionInstrCommRateField_InvestorID != nullptr){ strcpy_s(pQryOptionInstrCommRateField->InvestorID, pQryOptionInstrCommRateField_InvestorID); pQryOptionInstrCommRateField_InvestorID = nullptr; }
		if(pQryOptionInstrCommRateField_InstrumentID != nullptr){ strcpy_s(pQryOptionInstrCommRateField->InstrumentID, pQryOptionInstrCommRateField_InstrumentID); pQryOptionInstrCommRateField_InstrumentID = nullptr; }
		if(pQryOptionInstrCommRateField_ExchangeID != nullptr){ strcpy_s(pQryOptionInstrCommRateField->ExchangeID, pQryOptionInstrCommRateField_ExchangeID); pQryOptionInstrCommRateField_ExchangeID = nullptr; }
		if(pQryOptionInstrCommRateField_InvestUnitID != nullptr){ strcpy_s(pQryOptionInstrCommRateField->InvestUnitID, pQryOptionInstrCommRateField_InvestUnitID); pQryOptionInstrCommRateField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryOptionInstrCommRateField *pQryOptionInstrCommRateField)
{
	if(pQryOptionInstrCommRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQryOptionInstrCommRateField->BrokerID
		, "InvestorID", pQryOptionInstrCommRateField->InvestorID
		, "InstrumentID", pQryOptionInstrCommRateField->InstrumentID
		, "ExchangeID", pQryOptionInstrCommRateField->ExchangeID
		, "InvestUnitID", pQryOptionInstrCommRateField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcIndexPriceField *pIndexPriceField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InstrumentID", "ClosePrice", nullptr};
	char *pIndexPriceField_BrokerID = nullptr;
	char *pIndexPriceField_InstrumentID = nullptr;
	double pIndexPriceField_ClosePrice = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pIndexPriceField, "|yyd")
		, &pIndexPriceField_BrokerID
		, &pIndexPriceField_InstrumentID
		, &pIndexPriceField_ClosePrice
	PyCTP_PyDict_FromStruct_END
		if(pIndexPriceField_BrokerID != nullptr){ strcpy_s(pIndexPriceField->BrokerID, pIndexPriceField_BrokerID); pIndexPriceField_BrokerID = nullptr; }
		if(pIndexPriceField_InstrumentID != nullptr){ strcpy_s(pIndexPriceField->InstrumentID, pIndexPriceField_InstrumentID); pIndexPriceField_InstrumentID = nullptr; }
		pIndexPriceField->ClosePrice = pIndexPriceField_ClosePrice;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcIndexPriceField *pIndexPriceField)
{
	if(pIndexPriceField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:d}"
		, "BrokerID", pIndexPriceField->BrokerID
		, "InstrumentID", pIndexPriceField->InstrumentID
		, "ClosePrice", pIndexPriceField->ClosePrice
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInputExecOrderField *pInputExecOrderField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ExecOrderRef", "UserID", "Volume", "RequestID", "BusinessUnit", "OffsetFlag", "HedgeFlag", "ActionType", "PosiDirection", "ReservePositionFlag", "CloseFlag", "ExchangeID", "InvestUnitID", "AccountID", "CurrencyID", "ClientID", "IPAddress", "MacAddress", nullptr};
	char *pInputExecOrderField_BrokerID = nullptr;
	char *pInputExecOrderField_InvestorID = nullptr;
	char *pInputExecOrderField_InstrumentID = nullptr;
	char *pInputExecOrderField_ExecOrderRef = nullptr;
	char *pInputExecOrderField_UserID = nullptr;
	int pInputExecOrderField_Volume = 0;
	int pInputExecOrderField_RequestID = 0;
	char *pInputExecOrderField_BusinessUnit = nullptr;
	char pInputExecOrderField_OffsetFlag = 0;
	char pInputExecOrderField_HedgeFlag = 0;
	char pInputExecOrderField_ActionType = 0;
	char pInputExecOrderField_PosiDirection = 0;
	char pInputExecOrderField_ReservePositionFlag = 0;
	char pInputExecOrderField_CloseFlag = 0;
	char *pInputExecOrderField_ExchangeID = nullptr;
	char *pInputExecOrderField_InvestUnitID = nullptr;
	char *pInputExecOrderField_AccountID = nullptr;
	char *pInputExecOrderField_CurrencyID = nullptr;
	char *pInputExecOrderField_ClientID = nullptr;
	char *pInputExecOrderField_IPAddress = nullptr;
	char *pInputExecOrderField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInputExecOrderField, "|yyyyyiiyccccccyyyyyyy")
		, &pInputExecOrderField_BrokerID
		, &pInputExecOrderField_InvestorID
		, &pInputExecOrderField_InstrumentID
		, &pInputExecOrderField_ExecOrderRef
		, &pInputExecOrderField_UserID
		, &pInputExecOrderField_Volume
		, &pInputExecOrderField_RequestID
		, &pInputExecOrderField_BusinessUnit
		, &pInputExecOrderField_OffsetFlag
		, &pInputExecOrderField_HedgeFlag
		, &pInputExecOrderField_ActionType
		, &pInputExecOrderField_PosiDirection
		, &pInputExecOrderField_ReservePositionFlag
		, &pInputExecOrderField_CloseFlag
		, &pInputExecOrderField_ExchangeID
		, &pInputExecOrderField_InvestUnitID
		, &pInputExecOrderField_AccountID
		, &pInputExecOrderField_CurrencyID
		, &pInputExecOrderField_ClientID
		, &pInputExecOrderField_IPAddress
		, &pInputExecOrderField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pInputExecOrderField_BrokerID != nullptr){ strcpy_s(pInputExecOrderField->BrokerID, pInputExecOrderField_BrokerID); pInputExecOrderField_BrokerID = nullptr; }
		if(pInputExecOrderField_InvestorID != nullptr){ strcpy_s(pInputExecOrderField->InvestorID, pInputExecOrderField_InvestorID); pInputExecOrderField_InvestorID = nullptr; }
		if(pInputExecOrderField_InstrumentID != nullptr){ strcpy_s(pInputExecOrderField->InstrumentID, pInputExecOrderField_InstrumentID); pInputExecOrderField_InstrumentID = nullptr; }
		if(pInputExecOrderField_ExecOrderRef != nullptr){ strcpy_s(pInputExecOrderField->ExecOrderRef, pInputExecOrderField_ExecOrderRef); pInputExecOrderField_ExecOrderRef = nullptr; }
		if(pInputExecOrderField_UserID != nullptr){ strcpy_s(pInputExecOrderField->UserID, pInputExecOrderField_UserID); pInputExecOrderField_UserID = nullptr; }
		pInputExecOrderField->Volume = pInputExecOrderField_Volume;
		pInputExecOrderField->RequestID = pInputExecOrderField_RequestID;
		if(pInputExecOrderField_BusinessUnit != nullptr){ strcpy_s(pInputExecOrderField->BusinessUnit, pInputExecOrderField_BusinessUnit); pInputExecOrderField_BusinessUnit = nullptr; }
		pInputExecOrderField->OffsetFlag = pInputExecOrderField_OffsetFlag;
		pInputExecOrderField->HedgeFlag = pInputExecOrderField_HedgeFlag;
		pInputExecOrderField->ActionType = pInputExecOrderField_ActionType;
		pInputExecOrderField->PosiDirection = pInputExecOrderField_PosiDirection;
		pInputExecOrderField->ReservePositionFlag = pInputExecOrderField_ReservePositionFlag;
		pInputExecOrderField->CloseFlag = pInputExecOrderField_CloseFlag;
		if(pInputExecOrderField_ExchangeID != nullptr){ strcpy_s(pInputExecOrderField->ExchangeID, pInputExecOrderField_ExchangeID); pInputExecOrderField_ExchangeID = nullptr; }
		if(pInputExecOrderField_InvestUnitID != nullptr){ strcpy_s(pInputExecOrderField->InvestUnitID, pInputExecOrderField_InvestUnitID); pInputExecOrderField_InvestUnitID = nullptr; }
		if(pInputExecOrderField_AccountID != nullptr){ strcpy_s(pInputExecOrderField->AccountID, pInputExecOrderField_AccountID); pInputExecOrderField_AccountID = nullptr; }
		if(pInputExecOrderField_CurrencyID != nullptr){ strcpy_s(pInputExecOrderField->CurrencyID, pInputExecOrderField_CurrencyID); pInputExecOrderField_CurrencyID = nullptr; }
		if(pInputExecOrderField_ClientID != nullptr){ strcpy_s(pInputExecOrderField->ClientID, pInputExecOrderField_ClientID); pInputExecOrderField_ClientID = nullptr; }
		if(pInputExecOrderField_IPAddress != nullptr){ strcpy_s(pInputExecOrderField->IPAddress, pInputExecOrderField_IPAddress); pInputExecOrderField_IPAddress = nullptr; }
		if(pInputExecOrderField_MacAddress != nullptr){ strcpy_s(pInputExecOrderField->MacAddress, pInputExecOrderField_MacAddress); pInputExecOrderField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInputExecOrderField *pInputExecOrderField)
{
	if(pInputExecOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:i,s:i,s:y,s:c,s:c,s:c,s:c,s:c,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pInputExecOrderField->BrokerID
		, "InvestorID", pInputExecOrderField->InvestorID
		, "InstrumentID", pInputExecOrderField->InstrumentID
		, "ExecOrderRef", pInputExecOrderField->ExecOrderRef
		, "UserID", pInputExecOrderField->UserID
		, "Volume", pInputExecOrderField->Volume
		, "RequestID", pInputExecOrderField->RequestID
		, "BusinessUnit", pInputExecOrderField->BusinessUnit
		, "OffsetFlag", pInputExecOrderField->OffsetFlag
		, "HedgeFlag", pInputExecOrderField->HedgeFlag
		, "ActionType", pInputExecOrderField->ActionType
		, "PosiDirection", pInputExecOrderField->PosiDirection
		, "ReservePositionFlag", pInputExecOrderField->ReservePositionFlag
		, "CloseFlag", pInputExecOrderField->CloseFlag
		, "ExchangeID", pInputExecOrderField->ExchangeID
		, "InvestUnitID", pInputExecOrderField->InvestUnitID
		, "AccountID", pInputExecOrderField->AccountID
		, "CurrencyID", pInputExecOrderField->CurrencyID
		, "ClientID", pInputExecOrderField->ClientID
		, "IPAddress", pInputExecOrderField->IPAddress
		, "MacAddress", pInputExecOrderField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInputExecOrderActionField *pInputExecOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "ExecOrderActionRef", "ExecOrderRef", "RequestID", "FrontID", "SessionID", "ExchangeID", "ExecOrderSysID", "ActionFlag", "UserID", "InstrumentID", "InvestUnitID", "IPAddress", "MacAddress", nullptr};
	char *pInputExecOrderActionField_BrokerID = nullptr;
	char *pInputExecOrderActionField_InvestorID = nullptr;
	int pInputExecOrderActionField_ExecOrderActionRef = 0;
	char *pInputExecOrderActionField_ExecOrderRef = nullptr;
	int pInputExecOrderActionField_RequestID = 0;
	int pInputExecOrderActionField_FrontID = 0;
	int pInputExecOrderActionField_SessionID = 0;
	char *pInputExecOrderActionField_ExchangeID = nullptr;
	char *pInputExecOrderActionField_ExecOrderSysID = nullptr;
	char pInputExecOrderActionField_ActionFlag = 0;
	char *pInputExecOrderActionField_UserID = nullptr;
	char *pInputExecOrderActionField_InstrumentID = nullptr;
	char *pInputExecOrderActionField_InvestUnitID = nullptr;
	char *pInputExecOrderActionField_IPAddress = nullptr;
	char *pInputExecOrderActionField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInputExecOrderActionField, "|yyiyiiiyycyyyyy")
		, &pInputExecOrderActionField_BrokerID
		, &pInputExecOrderActionField_InvestorID
		, &pInputExecOrderActionField_ExecOrderActionRef
		, &pInputExecOrderActionField_ExecOrderRef
		, &pInputExecOrderActionField_RequestID
		, &pInputExecOrderActionField_FrontID
		, &pInputExecOrderActionField_SessionID
		, &pInputExecOrderActionField_ExchangeID
		, &pInputExecOrderActionField_ExecOrderSysID
		, &pInputExecOrderActionField_ActionFlag
		, &pInputExecOrderActionField_UserID
		, &pInputExecOrderActionField_InstrumentID
		, &pInputExecOrderActionField_InvestUnitID
		, &pInputExecOrderActionField_IPAddress
		, &pInputExecOrderActionField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pInputExecOrderActionField_BrokerID != nullptr){ strcpy_s(pInputExecOrderActionField->BrokerID, pInputExecOrderActionField_BrokerID); pInputExecOrderActionField_BrokerID = nullptr; }
		if(pInputExecOrderActionField_InvestorID != nullptr){ strcpy_s(pInputExecOrderActionField->InvestorID, pInputExecOrderActionField_InvestorID); pInputExecOrderActionField_InvestorID = nullptr; }
		pInputExecOrderActionField->ExecOrderActionRef = pInputExecOrderActionField_ExecOrderActionRef;
		if(pInputExecOrderActionField_ExecOrderRef != nullptr){ strcpy_s(pInputExecOrderActionField->ExecOrderRef, pInputExecOrderActionField_ExecOrderRef); pInputExecOrderActionField_ExecOrderRef = nullptr; }
		pInputExecOrderActionField->RequestID = pInputExecOrderActionField_RequestID;
		pInputExecOrderActionField->FrontID = pInputExecOrderActionField_FrontID;
		pInputExecOrderActionField->SessionID = pInputExecOrderActionField_SessionID;
		if(pInputExecOrderActionField_ExchangeID != nullptr){ strcpy_s(pInputExecOrderActionField->ExchangeID, pInputExecOrderActionField_ExchangeID); pInputExecOrderActionField_ExchangeID = nullptr; }
		if(pInputExecOrderActionField_ExecOrderSysID != nullptr){ strcpy_s(pInputExecOrderActionField->ExecOrderSysID, pInputExecOrderActionField_ExecOrderSysID); pInputExecOrderActionField_ExecOrderSysID = nullptr; }
		pInputExecOrderActionField->ActionFlag = pInputExecOrderActionField_ActionFlag;
		if(pInputExecOrderActionField_UserID != nullptr){ strcpy_s(pInputExecOrderActionField->UserID, pInputExecOrderActionField_UserID); pInputExecOrderActionField_UserID = nullptr; }
		if(pInputExecOrderActionField_InstrumentID != nullptr){ strcpy_s(pInputExecOrderActionField->InstrumentID, pInputExecOrderActionField_InstrumentID); pInputExecOrderActionField_InstrumentID = nullptr; }
		if(pInputExecOrderActionField_InvestUnitID != nullptr){ strcpy_s(pInputExecOrderActionField->InvestUnitID, pInputExecOrderActionField_InvestUnitID); pInputExecOrderActionField_InvestUnitID = nullptr; }
		if(pInputExecOrderActionField_IPAddress != nullptr){ strcpy_s(pInputExecOrderActionField->IPAddress, pInputExecOrderActionField_IPAddress); pInputExecOrderActionField_IPAddress = nullptr; }
		if(pInputExecOrderActionField_MacAddress != nullptr){ strcpy_s(pInputExecOrderActionField->MacAddress, pInputExecOrderActionField_MacAddress); pInputExecOrderActionField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInputExecOrderActionField *pInputExecOrderActionField)
{
	if(pInputExecOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i,s:y,s:i,s:i,s:i,s:y,s:y,s:c,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pInputExecOrderActionField->BrokerID
		, "InvestorID", pInputExecOrderActionField->InvestorID
		, "ExecOrderActionRef", pInputExecOrderActionField->ExecOrderActionRef
		, "ExecOrderRef", pInputExecOrderActionField->ExecOrderRef
		, "RequestID", pInputExecOrderActionField->RequestID
		, "FrontID", pInputExecOrderActionField->FrontID
		, "SessionID", pInputExecOrderActionField->SessionID
		, "ExchangeID", pInputExecOrderActionField->ExchangeID
		, "ExecOrderSysID", pInputExecOrderActionField->ExecOrderSysID
		, "ActionFlag", pInputExecOrderActionField->ActionFlag
		, "UserID", pInputExecOrderActionField->UserID
		, "InstrumentID", pInputExecOrderActionField->InstrumentID
		, "InvestUnitID", pInputExecOrderActionField->InvestUnitID
		, "IPAddress", pInputExecOrderActionField->IPAddress
		, "MacAddress", pInputExecOrderActionField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExecOrderField *pExecOrderField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ExecOrderRef", "UserID", "Volume", "RequestID", "BusinessUnit", "OffsetFlag", "HedgeFlag", "ActionType", "PosiDirection", "ReservePositionFlag", "CloseFlag", "ExecOrderLocalID", "ExchangeID", "ParticipantID", "ClientID", "ExchangeInstID", "TraderID", "InstallID", "OrderSubmitStatus", "NotifySequence", "TradingDay", "SettlementID", "ExecOrderSysID", "InsertDate", "InsertTime", "CancelTime", "ExecResult", "ClearingPartID", "SequenceNo", "FrontID", "SessionID", "UserProductInfo", "StatusMsg", "ActiveUserID", "BrokerExecOrderSeq", "BranchID", "InvestUnitID", "AccountID", "CurrencyID", "IPAddress", "MacAddress", nullptr};
	char *pExecOrderField_BrokerID = nullptr;
	char *pExecOrderField_InvestorID = nullptr;
	char *pExecOrderField_InstrumentID = nullptr;
	char *pExecOrderField_ExecOrderRef = nullptr;
	char *pExecOrderField_UserID = nullptr;
	int pExecOrderField_Volume = 0;
	int pExecOrderField_RequestID = 0;
	char *pExecOrderField_BusinessUnit = nullptr;
	char pExecOrderField_OffsetFlag = 0;
	char pExecOrderField_HedgeFlag = 0;
	char pExecOrderField_ActionType = 0;
	char pExecOrderField_PosiDirection = 0;
	char pExecOrderField_ReservePositionFlag = 0;
	char pExecOrderField_CloseFlag = 0;
	char *pExecOrderField_ExecOrderLocalID = nullptr;
	char *pExecOrderField_ExchangeID = nullptr;
	char *pExecOrderField_ParticipantID = nullptr;
	char *pExecOrderField_ClientID = nullptr;
	char *pExecOrderField_ExchangeInstID = nullptr;
	char *pExecOrderField_TraderID = nullptr;
	int pExecOrderField_InstallID = 0;
	char pExecOrderField_OrderSubmitStatus = 0;
	int pExecOrderField_NotifySequence = 0;
	char *pExecOrderField_TradingDay = nullptr;
	int pExecOrderField_SettlementID = 0;
	char *pExecOrderField_ExecOrderSysID = nullptr;
	char *pExecOrderField_InsertDate = nullptr;
	char *pExecOrderField_InsertTime = nullptr;
	char *pExecOrderField_CancelTime = nullptr;
	char pExecOrderField_ExecResult = 0;
	char *pExecOrderField_ClearingPartID = nullptr;
	int pExecOrderField_SequenceNo = 0;
	int pExecOrderField_FrontID = 0;
	int pExecOrderField_SessionID = 0;
	char *pExecOrderField_UserProductInfo = nullptr;
	char *pExecOrderField_StatusMsg = nullptr;
	char *pExecOrderField_ActiveUserID = nullptr;
	int pExecOrderField_BrokerExecOrderSeq = 0;
	char *pExecOrderField_BranchID = nullptr;
	char *pExecOrderField_InvestUnitID = nullptr;
	char *pExecOrderField_AccountID = nullptr;
	char *pExecOrderField_CurrencyID = nullptr;
	char *pExecOrderField_IPAddress = nullptr;
	char *pExecOrderField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pExecOrderField, "|yyyyyiiyccccccyyyyyyiciyiyyyycyiiiyyyiyyyyyy")
		, &pExecOrderField_BrokerID
		, &pExecOrderField_InvestorID
		, &pExecOrderField_InstrumentID
		, &pExecOrderField_ExecOrderRef
		, &pExecOrderField_UserID
		, &pExecOrderField_Volume
		, &pExecOrderField_RequestID
		, &pExecOrderField_BusinessUnit
		, &pExecOrderField_OffsetFlag
		, &pExecOrderField_HedgeFlag
		, &pExecOrderField_ActionType
		, &pExecOrderField_PosiDirection
		, &pExecOrderField_ReservePositionFlag
		, &pExecOrderField_CloseFlag
		, &pExecOrderField_ExecOrderLocalID
		, &pExecOrderField_ExchangeID
		, &pExecOrderField_ParticipantID
		, &pExecOrderField_ClientID
		, &pExecOrderField_ExchangeInstID
		, &pExecOrderField_TraderID
		, &pExecOrderField_InstallID
		, &pExecOrderField_OrderSubmitStatus
		, &pExecOrderField_NotifySequence
		, &pExecOrderField_TradingDay
		, &pExecOrderField_SettlementID
		, &pExecOrderField_ExecOrderSysID
		, &pExecOrderField_InsertDate
		, &pExecOrderField_InsertTime
		, &pExecOrderField_CancelTime
		, &pExecOrderField_ExecResult
		, &pExecOrderField_ClearingPartID
		, &pExecOrderField_SequenceNo
		, &pExecOrderField_FrontID
		, &pExecOrderField_SessionID
		, &pExecOrderField_UserProductInfo
		, &pExecOrderField_StatusMsg
		, &pExecOrderField_ActiveUserID
		, &pExecOrderField_BrokerExecOrderSeq
		, &pExecOrderField_BranchID
		, &pExecOrderField_InvestUnitID
		, &pExecOrderField_AccountID
		, &pExecOrderField_CurrencyID
		, &pExecOrderField_IPAddress
		, &pExecOrderField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pExecOrderField_BrokerID != nullptr){ strcpy_s(pExecOrderField->BrokerID, pExecOrderField_BrokerID); pExecOrderField_BrokerID = nullptr; }
		if(pExecOrderField_InvestorID != nullptr){ strcpy_s(pExecOrderField->InvestorID, pExecOrderField_InvestorID); pExecOrderField_InvestorID = nullptr; }
		if(pExecOrderField_InstrumentID != nullptr){ strcpy_s(pExecOrderField->InstrumentID, pExecOrderField_InstrumentID); pExecOrderField_InstrumentID = nullptr; }
		if(pExecOrderField_ExecOrderRef != nullptr){ strcpy_s(pExecOrderField->ExecOrderRef, pExecOrderField_ExecOrderRef); pExecOrderField_ExecOrderRef = nullptr; }
		if(pExecOrderField_UserID != nullptr){ strcpy_s(pExecOrderField->UserID, pExecOrderField_UserID); pExecOrderField_UserID = nullptr; }
		pExecOrderField->Volume = pExecOrderField_Volume;
		pExecOrderField->RequestID = pExecOrderField_RequestID;
		if(pExecOrderField_BusinessUnit != nullptr){ strcpy_s(pExecOrderField->BusinessUnit, pExecOrderField_BusinessUnit); pExecOrderField_BusinessUnit = nullptr; }
		pExecOrderField->OffsetFlag = pExecOrderField_OffsetFlag;
		pExecOrderField->HedgeFlag = pExecOrderField_HedgeFlag;
		pExecOrderField->ActionType = pExecOrderField_ActionType;
		pExecOrderField->PosiDirection = pExecOrderField_PosiDirection;
		pExecOrderField->ReservePositionFlag = pExecOrderField_ReservePositionFlag;
		pExecOrderField->CloseFlag = pExecOrderField_CloseFlag;
		if(pExecOrderField_ExecOrderLocalID != nullptr){ strcpy_s(pExecOrderField->ExecOrderLocalID, pExecOrderField_ExecOrderLocalID); pExecOrderField_ExecOrderLocalID = nullptr; }
		if(pExecOrderField_ExchangeID != nullptr){ strcpy_s(pExecOrderField->ExchangeID, pExecOrderField_ExchangeID); pExecOrderField_ExchangeID = nullptr; }
		if(pExecOrderField_ParticipantID != nullptr){ strcpy_s(pExecOrderField->ParticipantID, pExecOrderField_ParticipantID); pExecOrderField_ParticipantID = nullptr; }
		if(pExecOrderField_ClientID != nullptr){ strcpy_s(pExecOrderField->ClientID, pExecOrderField_ClientID); pExecOrderField_ClientID = nullptr; }
		if(pExecOrderField_ExchangeInstID != nullptr){ strcpy_s(pExecOrderField->ExchangeInstID, pExecOrderField_ExchangeInstID); pExecOrderField_ExchangeInstID = nullptr; }
		if(pExecOrderField_TraderID != nullptr){ strcpy_s(pExecOrderField->TraderID, pExecOrderField_TraderID); pExecOrderField_TraderID = nullptr; }
		pExecOrderField->InstallID = pExecOrderField_InstallID;
		pExecOrderField->OrderSubmitStatus = pExecOrderField_OrderSubmitStatus;
		pExecOrderField->NotifySequence = pExecOrderField_NotifySequence;
		if(pExecOrderField_TradingDay != nullptr){ strcpy_s(pExecOrderField->TradingDay, pExecOrderField_TradingDay); pExecOrderField_TradingDay = nullptr; }
		pExecOrderField->SettlementID = pExecOrderField_SettlementID;
		if(pExecOrderField_ExecOrderSysID != nullptr){ strcpy_s(pExecOrderField->ExecOrderSysID, pExecOrderField_ExecOrderSysID); pExecOrderField_ExecOrderSysID = nullptr; }
		if(pExecOrderField_InsertDate != nullptr){ strcpy_s(pExecOrderField->InsertDate, pExecOrderField_InsertDate); pExecOrderField_InsertDate = nullptr; }
		if(pExecOrderField_InsertTime != nullptr){ strcpy_s(pExecOrderField->InsertTime, pExecOrderField_InsertTime); pExecOrderField_InsertTime = nullptr; }
		if(pExecOrderField_CancelTime != nullptr){ strcpy_s(pExecOrderField->CancelTime, pExecOrderField_CancelTime); pExecOrderField_CancelTime = nullptr; }
		pExecOrderField->ExecResult = pExecOrderField_ExecResult;
		if(pExecOrderField_ClearingPartID != nullptr){ strcpy_s(pExecOrderField->ClearingPartID, pExecOrderField_ClearingPartID); pExecOrderField_ClearingPartID = nullptr; }
		pExecOrderField->SequenceNo = pExecOrderField_SequenceNo;
		pExecOrderField->FrontID = pExecOrderField_FrontID;
		pExecOrderField->SessionID = pExecOrderField_SessionID;
		if(pExecOrderField_UserProductInfo != nullptr){ strcpy_s(pExecOrderField->UserProductInfo, pExecOrderField_UserProductInfo); pExecOrderField_UserProductInfo = nullptr; }
		if(pExecOrderField_StatusMsg != nullptr){ strcpy_s(pExecOrderField->StatusMsg, pExecOrderField_StatusMsg); pExecOrderField_StatusMsg = nullptr; }
		if(pExecOrderField_ActiveUserID != nullptr){ strcpy_s(pExecOrderField->ActiveUserID, pExecOrderField_ActiveUserID); pExecOrderField_ActiveUserID = nullptr; }
		pExecOrderField->BrokerExecOrderSeq = pExecOrderField_BrokerExecOrderSeq;
		if(pExecOrderField_BranchID != nullptr){ strcpy_s(pExecOrderField->BranchID, pExecOrderField_BranchID); pExecOrderField_BranchID = nullptr; }
		if(pExecOrderField_InvestUnitID != nullptr){ strcpy_s(pExecOrderField->InvestUnitID, pExecOrderField_InvestUnitID); pExecOrderField_InvestUnitID = nullptr; }
		if(pExecOrderField_AccountID != nullptr){ strcpy_s(pExecOrderField->AccountID, pExecOrderField_AccountID); pExecOrderField_AccountID = nullptr; }
		if(pExecOrderField_CurrencyID != nullptr){ strcpy_s(pExecOrderField->CurrencyID, pExecOrderField_CurrencyID); pExecOrderField_CurrencyID = nullptr; }
		if(pExecOrderField_IPAddress != nullptr){ strcpy_s(pExecOrderField->IPAddress, pExecOrderField_IPAddress); pExecOrderField_IPAddress = nullptr; }
		if(pExecOrderField_MacAddress != nullptr){ strcpy_s(pExecOrderField->MacAddress, pExecOrderField_MacAddress); pExecOrderField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExecOrderField *pExecOrderField)
{
	if(pExecOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:i,s:i,s:y,s:c,s:c,s:c,s:c,s:c,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:i,s:y,s:y,s:y,s:y,s:c,s:y,s:i,s:i,s:i,s:y,s:y,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pExecOrderField->BrokerID
		, "InvestorID", pExecOrderField->InvestorID
		, "InstrumentID", pExecOrderField->InstrumentID
		, "ExecOrderRef", pExecOrderField->ExecOrderRef
		, "UserID", pExecOrderField->UserID
		, "Volume", pExecOrderField->Volume
		, "RequestID", pExecOrderField->RequestID
		, "BusinessUnit", pExecOrderField->BusinessUnit
		, "OffsetFlag", pExecOrderField->OffsetFlag
		, "HedgeFlag", pExecOrderField->HedgeFlag
		, "ActionType", pExecOrderField->ActionType
		, "PosiDirection", pExecOrderField->PosiDirection
		, "ReservePositionFlag", pExecOrderField->ReservePositionFlag
		, "CloseFlag", pExecOrderField->CloseFlag
		, "ExecOrderLocalID", pExecOrderField->ExecOrderLocalID
		, "ExchangeID", pExecOrderField->ExchangeID
		, "ParticipantID", pExecOrderField->ParticipantID
		, "ClientID", pExecOrderField->ClientID
		, "ExchangeInstID", pExecOrderField->ExchangeInstID
		, "TraderID", pExecOrderField->TraderID
		, "InstallID", pExecOrderField->InstallID
		, "OrderSubmitStatus", pExecOrderField->OrderSubmitStatus
		, "NotifySequence", pExecOrderField->NotifySequence
		, "TradingDay", pExecOrderField->TradingDay
		, "SettlementID", pExecOrderField->SettlementID
		, "ExecOrderSysID", pExecOrderField->ExecOrderSysID
		, "InsertDate", pExecOrderField->InsertDate
		, "InsertTime", pExecOrderField->InsertTime
		, "CancelTime", pExecOrderField->CancelTime
		, "ExecResult", pExecOrderField->ExecResult
		, "ClearingPartID", pExecOrderField->ClearingPartID
		, "SequenceNo", pExecOrderField->SequenceNo
		, "FrontID", pExecOrderField->FrontID
		, "SessionID", pExecOrderField->SessionID
		, "UserProductInfo", pExecOrderField->UserProductInfo
		, "StatusMsg", pExecOrderField->StatusMsg
		, "ActiveUserID", pExecOrderField->ActiveUserID
		, "BrokerExecOrderSeq", pExecOrderField->BrokerExecOrderSeq
		, "BranchID", pExecOrderField->BranchID
		, "InvestUnitID", pExecOrderField->InvestUnitID
		, "AccountID", pExecOrderField->AccountID
		, "CurrencyID", pExecOrderField->CurrencyID
		, "IPAddress", pExecOrderField->IPAddress
		, "MacAddress", pExecOrderField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExecOrderActionField *pExecOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "ExecOrderActionRef", "ExecOrderRef", "RequestID", "FrontID", "SessionID", "ExchangeID", "ExecOrderSysID", "ActionFlag", "ActionDate", "ActionTime", "TraderID", "InstallID", "ExecOrderLocalID", "ActionLocalID", "ParticipantID", "ClientID", "BusinessUnit", "OrderActionStatus", "UserID", "ActionType", "StatusMsg", "InstrumentID", "BranchID", "InvestUnitID", "IPAddress", "MacAddress", nullptr};
	char *pExecOrderActionField_BrokerID = nullptr;
	char *pExecOrderActionField_InvestorID = nullptr;
	int pExecOrderActionField_ExecOrderActionRef = 0;
	char *pExecOrderActionField_ExecOrderRef = nullptr;
	int pExecOrderActionField_RequestID = 0;
	int pExecOrderActionField_FrontID = 0;
	int pExecOrderActionField_SessionID = 0;
	char *pExecOrderActionField_ExchangeID = nullptr;
	char *pExecOrderActionField_ExecOrderSysID = nullptr;
	char pExecOrderActionField_ActionFlag = 0;
	char *pExecOrderActionField_ActionDate = nullptr;
	char *pExecOrderActionField_ActionTime = nullptr;
	char *pExecOrderActionField_TraderID = nullptr;
	int pExecOrderActionField_InstallID = 0;
	char *pExecOrderActionField_ExecOrderLocalID = nullptr;
	char *pExecOrderActionField_ActionLocalID = nullptr;
	char *pExecOrderActionField_ParticipantID = nullptr;
	char *pExecOrderActionField_ClientID = nullptr;
	char *pExecOrderActionField_BusinessUnit = nullptr;
	char pExecOrderActionField_OrderActionStatus = 0;
	char *pExecOrderActionField_UserID = nullptr;
	char pExecOrderActionField_ActionType = 0;
	char *pExecOrderActionField_StatusMsg = nullptr;
	char *pExecOrderActionField_InstrumentID = nullptr;
	char *pExecOrderActionField_BranchID = nullptr;
	char *pExecOrderActionField_InvestUnitID = nullptr;
	char *pExecOrderActionField_IPAddress = nullptr;
	char *pExecOrderActionField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pExecOrderActionField, "|yyiyiiiyycyyyiyyyyycycyyyyyy")
		, &pExecOrderActionField_BrokerID
		, &pExecOrderActionField_InvestorID
		, &pExecOrderActionField_ExecOrderActionRef
		, &pExecOrderActionField_ExecOrderRef
		, &pExecOrderActionField_RequestID
		, &pExecOrderActionField_FrontID
		, &pExecOrderActionField_SessionID
		, &pExecOrderActionField_ExchangeID
		, &pExecOrderActionField_ExecOrderSysID
		, &pExecOrderActionField_ActionFlag
		, &pExecOrderActionField_ActionDate
		, &pExecOrderActionField_ActionTime
		, &pExecOrderActionField_TraderID
		, &pExecOrderActionField_InstallID
		, &pExecOrderActionField_ExecOrderLocalID
		, &pExecOrderActionField_ActionLocalID
		, &pExecOrderActionField_ParticipantID
		, &pExecOrderActionField_ClientID
		, &pExecOrderActionField_BusinessUnit
		, &pExecOrderActionField_OrderActionStatus
		, &pExecOrderActionField_UserID
		, &pExecOrderActionField_ActionType
		, &pExecOrderActionField_StatusMsg
		, &pExecOrderActionField_InstrumentID
		, &pExecOrderActionField_BranchID
		, &pExecOrderActionField_InvestUnitID
		, &pExecOrderActionField_IPAddress
		, &pExecOrderActionField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pExecOrderActionField_BrokerID != nullptr){ strcpy_s(pExecOrderActionField->BrokerID, pExecOrderActionField_BrokerID); pExecOrderActionField_BrokerID = nullptr; }
		if(pExecOrderActionField_InvestorID != nullptr){ strcpy_s(pExecOrderActionField->InvestorID, pExecOrderActionField_InvestorID); pExecOrderActionField_InvestorID = nullptr; }
		pExecOrderActionField->ExecOrderActionRef = pExecOrderActionField_ExecOrderActionRef;
		if(pExecOrderActionField_ExecOrderRef != nullptr){ strcpy_s(pExecOrderActionField->ExecOrderRef, pExecOrderActionField_ExecOrderRef); pExecOrderActionField_ExecOrderRef = nullptr; }
		pExecOrderActionField->RequestID = pExecOrderActionField_RequestID;
		pExecOrderActionField->FrontID = pExecOrderActionField_FrontID;
		pExecOrderActionField->SessionID = pExecOrderActionField_SessionID;
		if(pExecOrderActionField_ExchangeID != nullptr){ strcpy_s(pExecOrderActionField->ExchangeID, pExecOrderActionField_ExchangeID); pExecOrderActionField_ExchangeID = nullptr; }
		if(pExecOrderActionField_ExecOrderSysID != nullptr){ strcpy_s(pExecOrderActionField->ExecOrderSysID, pExecOrderActionField_ExecOrderSysID); pExecOrderActionField_ExecOrderSysID = nullptr; }
		pExecOrderActionField->ActionFlag = pExecOrderActionField_ActionFlag;
		if(pExecOrderActionField_ActionDate != nullptr){ strcpy_s(pExecOrderActionField->ActionDate, pExecOrderActionField_ActionDate); pExecOrderActionField_ActionDate = nullptr; }
		if(pExecOrderActionField_ActionTime != nullptr){ strcpy_s(pExecOrderActionField->ActionTime, pExecOrderActionField_ActionTime); pExecOrderActionField_ActionTime = nullptr; }
		if(pExecOrderActionField_TraderID != nullptr){ strcpy_s(pExecOrderActionField->TraderID, pExecOrderActionField_TraderID); pExecOrderActionField_TraderID = nullptr; }
		pExecOrderActionField->InstallID = pExecOrderActionField_InstallID;
		if(pExecOrderActionField_ExecOrderLocalID != nullptr){ strcpy_s(pExecOrderActionField->ExecOrderLocalID, pExecOrderActionField_ExecOrderLocalID); pExecOrderActionField_ExecOrderLocalID = nullptr; }
		if(pExecOrderActionField_ActionLocalID != nullptr){ strcpy_s(pExecOrderActionField->ActionLocalID, pExecOrderActionField_ActionLocalID); pExecOrderActionField_ActionLocalID = nullptr; }
		if(pExecOrderActionField_ParticipantID != nullptr){ strcpy_s(pExecOrderActionField->ParticipantID, pExecOrderActionField_ParticipantID); pExecOrderActionField_ParticipantID = nullptr; }
		if(pExecOrderActionField_ClientID != nullptr){ strcpy_s(pExecOrderActionField->ClientID, pExecOrderActionField_ClientID); pExecOrderActionField_ClientID = nullptr; }
		if(pExecOrderActionField_BusinessUnit != nullptr){ strcpy_s(pExecOrderActionField->BusinessUnit, pExecOrderActionField_BusinessUnit); pExecOrderActionField_BusinessUnit = nullptr; }
		pExecOrderActionField->OrderActionStatus = pExecOrderActionField_OrderActionStatus;
		if(pExecOrderActionField_UserID != nullptr){ strcpy_s(pExecOrderActionField->UserID, pExecOrderActionField_UserID); pExecOrderActionField_UserID = nullptr; }
		pExecOrderActionField->ActionType = pExecOrderActionField_ActionType;
		if(pExecOrderActionField_StatusMsg != nullptr){ strcpy_s(pExecOrderActionField->StatusMsg, pExecOrderActionField_StatusMsg); pExecOrderActionField_StatusMsg = nullptr; }
		if(pExecOrderActionField_InstrumentID != nullptr){ strcpy_s(pExecOrderActionField->InstrumentID, pExecOrderActionField_InstrumentID); pExecOrderActionField_InstrumentID = nullptr; }
		if(pExecOrderActionField_BranchID != nullptr){ strcpy_s(pExecOrderActionField->BranchID, pExecOrderActionField_BranchID); pExecOrderActionField_BranchID = nullptr; }
		if(pExecOrderActionField_InvestUnitID != nullptr){ strcpy_s(pExecOrderActionField->InvestUnitID, pExecOrderActionField_InvestUnitID); pExecOrderActionField_InvestUnitID = nullptr; }
		if(pExecOrderActionField_IPAddress != nullptr){ strcpy_s(pExecOrderActionField->IPAddress, pExecOrderActionField_IPAddress); pExecOrderActionField_IPAddress = nullptr; }
		if(pExecOrderActionField_MacAddress != nullptr){ strcpy_s(pExecOrderActionField->MacAddress, pExecOrderActionField_MacAddress); pExecOrderActionField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExecOrderActionField *pExecOrderActionField)
{
	if(pExecOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i,s:y,s:i,s:i,s:i,s:y,s:y,s:c,s:y,s:y,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pExecOrderActionField->BrokerID
		, "InvestorID", pExecOrderActionField->InvestorID
		, "ExecOrderActionRef", pExecOrderActionField->ExecOrderActionRef
		, "ExecOrderRef", pExecOrderActionField->ExecOrderRef
		, "RequestID", pExecOrderActionField->RequestID
		, "FrontID", pExecOrderActionField->FrontID
		, "SessionID", pExecOrderActionField->SessionID
		, "ExchangeID", pExecOrderActionField->ExchangeID
		, "ExecOrderSysID", pExecOrderActionField->ExecOrderSysID
		, "ActionFlag", pExecOrderActionField->ActionFlag
		, "ActionDate", pExecOrderActionField->ActionDate
		, "ActionTime", pExecOrderActionField->ActionTime
		, "TraderID", pExecOrderActionField->TraderID
		, "InstallID", pExecOrderActionField->InstallID
		, "ExecOrderLocalID", pExecOrderActionField->ExecOrderLocalID
		, "ActionLocalID", pExecOrderActionField->ActionLocalID
		, "ParticipantID", pExecOrderActionField->ParticipantID
		, "ClientID", pExecOrderActionField->ClientID
		, "BusinessUnit", pExecOrderActionField->BusinessUnit
		, "OrderActionStatus", pExecOrderActionField->OrderActionStatus
		, "UserID", pExecOrderActionField->UserID
		, "ActionType", pExecOrderActionField->ActionType
		, "StatusMsg", pExecOrderActionField->StatusMsg
		, "InstrumentID", pExecOrderActionField->InstrumentID
		, "BranchID", pExecOrderActionField->BranchID
		, "InvestUnitID", pExecOrderActionField->InvestUnitID
		, "IPAddress", pExecOrderActionField->IPAddress
		, "MacAddress", pExecOrderActionField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryExecOrderField *pQryExecOrderField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ExchangeID", "ExecOrderSysID", "InsertTimeStart", "InsertTimeEnd", nullptr};
	char *pQryExecOrderField_BrokerID = nullptr;
	char *pQryExecOrderField_InvestorID = nullptr;
	char *pQryExecOrderField_InstrumentID = nullptr;
	char *pQryExecOrderField_ExchangeID = nullptr;
	char *pQryExecOrderField_ExecOrderSysID = nullptr;
	char *pQryExecOrderField_InsertTimeStart = nullptr;
	char *pQryExecOrderField_InsertTimeEnd = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryExecOrderField, "|yyyyyyy")
		, &pQryExecOrderField_BrokerID
		, &pQryExecOrderField_InvestorID
		, &pQryExecOrderField_InstrumentID
		, &pQryExecOrderField_ExchangeID
		, &pQryExecOrderField_ExecOrderSysID
		, &pQryExecOrderField_InsertTimeStart
		, &pQryExecOrderField_InsertTimeEnd
	PyCTP_PyDict_FromStruct_END
		if(pQryExecOrderField_BrokerID != nullptr){ strcpy_s(pQryExecOrderField->BrokerID, pQryExecOrderField_BrokerID); pQryExecOrderField_BrokerID = nullptr; }
		if(pQryExecOrderField_InvestorID != nullptr){ strcpy_s(pQryExecOrderField->InvestorID, pQryExecOrderField_InvestorID); pQryExecOrderField_InvestorID = nullptr; }
		if(pQryExecOrderField_InstrumentID != nullptr){ strcpy_s(pQryExecOrderField->InstrumentID, pQryExecOrderField_InstrumentID); pQryExecOrderField_InstrumentID = nullptr; }
		if(pQryExecOrderField_ExchangeID != nullptr){ strcpy_s(pQryExecOrderField->ExchangeID, pQryExecOrderField_ExchangeID); pQryExecOrderField_ExchangeID = nullptr; }
		if(pQryExecOrderField_ExecOrderSysID != nullptr){ strcpy_s(pQryExecOrderField->ExecOrderSysID, pQryExecOrderField_ExecOrderSysID); pQryExecOrderField_ExecOrderSysID = nullptr; }
		if(pQryExecOrderField_InsertTimeStart != nullptr){ strcpy_s(pQryExecOrderField->InsertTimeStart, pQryExecOrderField_InsertTimeStart); pQryExecOrderField_InsertTimeStart = nullptr; }
		if(pQryExecOrderField_InsertTimeEnd != nullptr){ strcpy_s(pQryExecOrderField->InsertTimeEnd, pQryExecOrderField_InsertTimeEnd); pQryExecOrderField_InsertTimeEnd = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryExecOrderField *pQryExecOrderField)
{
	if(pQryExecOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQryExecOrderField->BrokerID
		, "InvestorID", pQryExecOrderField->InvestorID
		, "InstrumentID", pQryExecOrderField->InstrumentID
		, "ExchangeID", pQryExecOrderField->ExchangeID
		, "ExecOrderSysID", pQryExecOrderField->ExecOrderSysID
		, "InsertTimeStart", pQryExecOrderField->InsertTimeStart
		, "InsertTimeEnd", pQryExecOrderField->InsertTimeEnd
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeExecOrderField *pExchangeExecOrderField, PyObject *dict)
{
	static char *kwlist[] = {"Volume", "RequestID", "BusinessUnit", "OffsetFlag", "HedgeFlag", "ActionType", "PosiDirection", "ReservePositionFlag", "CloseFlag", "ExecOrderLocalID", "ExchangeID", "ParticipantID", "ClientID", "ExchangeInstID", "TraderID", "InstallID", "OrderSubmitStatus", "NotifySequence", "TradingDay", "SettlementID", "ExecOrderSysID", "InsertDate", "InsertTime", "CancelTime", "ExecResult", "ClearingPartID", "SequenceNo", "BranchID", "IPAddress", "MacAddress", nullptr};
	int pExchangeExecOrderField_Volume = 0;
	int pExchangeExecOrderField_RequestID = 0;
	char *pExchangeExecOrderField_BusinessUnit = nullptr;
	char pExchangeExecOrderField_OffsetFlag = 0;
	char pExchangeExecOrderField_HedgeFlag = 0;
	char pExchangeExecOrderField_ActionType = 0;
	char pExchangeExecOrderField_PosiDirection = 0;
	char pExchangeExecOrderField_ReservePositionFlag = 0;
	char pExchangeExecOrderField_CloseFlag = 0;
	char *pExchangeExecOrderField_ExecOrderLocalID = nullptr;
	char *pExchangeExecOrderField_ExchangeID = nullptr;
	char *pExchangeExecOrderField_ParticipantID = nullptr;
	char *pExchangeExecOrderField_ClientID = nullptr;
	char *pExchangeExecOrderField_ExchangeInstID = nullptr;
	char *pExchangeExecOrderField_TraderID = nullptr;
	int pExchangeExecOrderField_InstallID = 0;
	char pExchangeExecOrderField_OrderSubmitStatus = 0;
	int pExchangeExecOrderField_NotifySequence = 0;
	char *pExchangeExecOrderField_TradingDay = nullptr;
	int pExchangeExecOrderField_SettlementID = 0;
	char *pExchangeExecOrderField_ExecOrderSysID = nullptr;
	char *pExchangeExecOrderField_InsertDate = nullptr;
	char *pExchangeExecOrderField_InsertTime = nullptr;
	char *pExchangeExecOrderField_CancelTime = nullptr;
	char pExchangeExecOrderField_ExecResult = 0;
	char *pExchangeExecOrderField_ClearingPartID = nullptr;
	int pExchangeExecOrderField_SequenceNo = 0;
	char *pExchangeExecOrderField_BranchID = nullptr;
	char *pExchangeExecOrderField_IPAddress = nullptr;
	char *pExchangeExecOrderField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeExecOrderField, "|iiyccccccyyyyyyiciyiyyyycyiyyy")
		, &pExchangeExecOrderField_Volume
		, &pExchangeExecOrderField_RequestID
		, &pExchangeExecOrderField_BusinessUnit
		, &pExchangeExecOrderField_OffsetFlag
		, &pExchangeExecOrderField_HedgeFlag
		, &pExchangeExecOrderField_ActionType
		, &pExchangeExecOrderField_PosiDirection
		, &pExchangeExecOrderField_ReservePositionFlag
		, &pExchangeExecOrderField_CloseFlag
		, &pExchangeExecOrderField_ExecOrderLocalID
		, &pExchangeExecOrderField_ExchangeID
		, &pExchangeExecOrderField_ParticipantID
		, &pExchangeExecOrderField_ClientID
		, &pExchangeExecOrderField_ExchangeInstID
		, &pExchangeExecOrderField_TraderID
		, &pExchangeExecOrderField_InstallID
		, &pExchangeExecOrderField_OrderSubmitStatus
		, &pExchangeExecOrderField_NotifySequence
		, &pExchangeExecOrderField_TradingDay
		, &pExchangeExecOrderField_SettlementID
		, &pExchangeExecOrderField_ExecOrderSysID
		, &pExchangeExecOrderField_InsertDate
		, &pExchangeExecOrderField_InsertTime
		, &pExchangeExecOrderField_CancelTime
		, &pExchangeExecOrderField_ExecResult
		, &pExchangeExecOrderField_ClearingPartID
		, &pExchangeExecOrderField_SequenceNo
		, &pExchangeExecOrderField_BranchID
		, &pExchangeExecOrderField_IPAddress
		, &pExchangeExecOrderField_MacAddress
	PyCTP_PyDict_FromStruct_END
		pExchangeExecOrderField->Volume = pExchangeExecOrderField_Volume;
		pExchangeExecOrderField->RequestID = pExchangeExecOrderField_RequestID;
		if(pExchangeExecOrderField_BusinessUnit != nullptr){ strcpy_s(pExchangeExecOrderField->BusinessUnit, pExchangeExecOrderField_BusinessUnit); pExchangeExecOrderField_BusinessUnit = nullptr; }
		pExchangeExecOrderField->OffsetFlag = pExchangeExecOrderField_OffsetFlag;
		pExchangeExecOrderField->HedgeFlag = pExchangeExecOrderField_HedgeFlag;
		pExchangeExecOrderField->ActionType = pExchangeExecOrderField_ActionType;
		pExchangeExecOrderField->PosiDirection = pExchangeExecOrderField_PosiDirection;
		pExchangeExecOrderField->ReservePositionFlag = pExchangeExecOrderField_ReservePositionFlag;
		pExchangeExecOrderField->CloseFlag = pExchangeExecOrderField_CloseFlag;
		if(pExchangeExecOrderField_ExecOrderLocalID != nullptr){ strcpy_s(pExchangeExecOrderField->ExecOrderLocalID, pExchangeExecOrderField_ExecOrderLocalID); pExchangeExecOrderField_ExecOrderLocalID = nullptr; }
		if(pExchangeExecOrderField_ExchangeID != nullptr){ strcpy_s(pExchangeExecOrderField->ExchangeID, pExchangeExecOrderField_ExchangeID); pExchangeExecOrderField_ExchangeID = nullptr; }
		if(pExchangeExecOrderField_ParticipantID != nullptr){ strcpy_s(pExchangeExecOrderField->ParticipantID, pExchangeExecOrderField_ParticipantID); pExchangeExecOrderField_ParticipantID = nullptr; }
		if(pExchangeExecOrderField_ClientID != nullptr){ strcpy_s(pExchangeExecOrderField->ClientID, pExchangeExecOrderField_ClientID); pExchangeExecOrderField_ClientID = nullptr; }
		if(pExchangeExecOrderField_ExchangeInstID != nullptr){ strcpy_s(pExchangeExecOrderField->ExchangeInstID, pExchangeExecOrderField_ExchangeInstID); pExchangeExecOrderField_ExchangeInstID = nullptr; }
		if(pExchangeExecOrderField_TraderID != nullptr){ strcpy_s(pExchangeExecOrderField->TraderID, pExchangeExecOrderField_TraderID); pExchangeExecOrderField_TraderID = nullptr; }
		pExchangeExecOrderField->InstallID = pExchangeExecOrderField_InstallID;
		pExchangeExecOrderField->OrderSubmitStatus = pExchangeExecOrderField_OrderSubmitStatus;
		pExchangeExecOrderField->NotifySequence = pExchangeExecOrderField_NotifySequence;
		if(pExchangeExecOrderField_TradingDay != nullptr){ strcpy_s(pExchangeExecOrderField->TradingDay, pExchangeExecOrderField_TradingDay); pExchangeExecOrderField_TradingDay = nullptr; }
		pExchangeExecOrderField->SettlementID = pExchangeExecOrderField_SettlementID;
		if(pExchangeExecOrderField_ExecOrderSysID != nullptr){ strcpy_s(pExchangeExecOrderField->ExecOrderSysID, pExchangeExecOrderField_ExecOrderSysID); pExchangeExecOrderField_ExecOrderSysID = nullptr; }
		if(pExchangeExecOrderField_InsertDate != nullptr){ strcpy_s(pExchangeExecOrderField->InsertDate, pExchangeExecOrderField_InsertDate); pExchangeExecOrderField_InsertDate = nullptr; }
		if(pExchangeExecOrderField_InsertTime != nullptr){ strcpy_s(pExchangeExecOrderField->InsertTime, pExchangeExecOrderField_InsertTime); pExchangeExecOrderField_InsertTime = nullptr; }
		if(pExchangeExecOrderField_CancelTime != nullptr){ strcpy_s(pExchangeExecOrderField->CancelTime, pExchangeExecOrderField_CancelTime); pExchangeExecOrderField_CancelTime = nullptr; }
		pExchangeExecOrderField->ExecResult = pExchangeExecOrderField_ExecResult;
		if(pExchangeExecOrderField_ClearingPartID != nullptr){ strcpy_s(pExchangeExecOrderField->ClearingPartID, pExchangeExecOrderField_ClearingPartID); pExchangeExecOrderField_ClearingPartID = nullptr; }
		pExchangeExecOrderField->SequenceNo = pExchangeExecOrderField_SequenceNo;
		if(pExchangeExecOrderField_BranchID != nullptr){ strcpy_s(pExchangeExecOrderField->BranchID, pExchangeExecOrderField_BranchID); pExchangeExecOrderField_BranchID = nullptr; }
		if(pExchangeExecOrderField_IPAddress != nullptr){ strcpy_s(pExchangeExecOrderField->IPAddress, pExchangeExecOrderField_IPAddress); pExchangeExecOrderField_IPAddress = nullptr; }
		if(pExchangeExecOrderField_MacAddress != nullptr){ strcpy_s(pExchangeExecOrderField->MacAddress, pExchangeExecOrderField_MacAddress); pExchangeExecOrderField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeExecOrderField *pExchangeExecOrderField)
{
	if(pExchangeExecOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i,s:i,s:y,s:c,s:c,s:c,s:c,s:c,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:i,s:y,s:y,s:y,s:y,s:c,s:y,s:i,s:y,s:y,s:y}"
		, "Volume", pExchangeExecOrderField->Volume
		, "RequestID", pExchangeExecOrderField->RequestID
		, "BusinessUnit", pExchangeExecOrderField->BusinessUnit
		, "OffsetFlag", pExchangeExecOrderField->OffsetFlag
		, "HedgeFlag", pExchangeExecOrderField->HedgeFlag
		, "ActionType", pExchangeExecOrderField->ActionType
		, "PosiDirection", pExchangeExecOrderField->PosiDirection
		, "ReservePositionFlag", pExchangeExecOrderField->ReservePositionFlag
		, "CloseFlag", pExchangeExecOrderField->CloseFlag
		, "ExecOrderLocalID", pExchangeExecOrderField->ExecOrderLocalID
		, "ExchangeID", pExchangeExecOrderField->ExchangeID
		, "ParticipantID", pExchangeExecOrderField->ParticipantID
		, "ClientID", pExchangeExecOrderField->ClientID
		, "ExchangeInstID", pExchangeExecOrderField->ExchangeInstID
		, "TraderID", pExchangeExecOrderField->TraderID
		, "InstallID", pExchangeExecOrderField->InstallID
		, "OrderSubmitStatus", pExchangeExecOrderField->OrderSubmitStatus
		, "NotifySequence", pExchangeExecOrderField->NotifySequence
		, "TradingDay", pExchangeExecOrderField->TradingDay
		, "SettlementID", pExchangeExecOrderField->SettlementID
		, "ExecOrderSysID", pExchangeExecOrderField->ExecOrderSysID
		, "InsertDate", pExchangeExecOrderField->InsertDate
		, "InsertTime", pExchangeExecOrderField->InsertTime
		, "CancelTime", pExchangeExecOrderField->CancelTime
		, "ExecResult", pExchangeExecOrderField->ExecResult
		, "ClearingPartID", pExchangeExecOrderField->ClearingPartID
		, "SequenceNo", pExchangeExecOrderField->SequenceNo
		, "BranchID", pExchangeExecOrderField->BranchID
		, "IPAddress", pExchangeExecOrderField->IPAddress
		, "MacAddress", pExchangeExecOrderField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryExchangeExecOrderField *pQryExchangeExecOrderField, PyObject *dict)
{
	static char *kwlist[] = {"ParticipantID", "ClientID", "ExchangeInstID", "ExchangeID", "TraderID", nullptr};
	char *pQryExchangeExecOrderField_ParticipantID = nullptr;
	char *pQryExchangeExecOrderField_ClientID = nullptr;
	char *pQryExchangeExecOrderField_ExchangeInstID = nullptr;
	char *pQryExchangeExecOrderField_ExchangeID = nullptr;
	char *pQryExchangeExecOrderField_TraderID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryExchangeExecOrderField, "|yyyyy")
		, &pQryExchangeExecOrderField_ParticipantID
		, &pQryExchangeExecOrderField_ClientID
		, &pQryExchangeExecOrderField_ExchangeInstID
		, &pQryExchangeExecOrderField_ExchangeID
		, &pQryExchangeExecOrderField_TraderID
	PyCTP_PyDict_FromStruct_END
		if(pQryExchangeExecOrderField_ParticipantID != nullptr){ strcpy_s(pQryExchangeExecOrderField->ParticipantID, pQryExchangeExecOrderField_ParticipantID); pQryExchangeExecOrderField_ParticipantID = nullptr; }
		if(pQryExchangeExecOrderField_ClientID != nullptr){ strcpy_s(pQryExchangeExecOrderField->ClientID, pQryExchangeExecOrderField_ClientID); pQryExchangeExecOrderField_ClientID = nullptr; }
		if(pQryExchangeExecOrderField_ExchangeInstID != nullptr){ strcpy_s(pQryExchangeExecOrderField->ExchangeInstID, pQryExchangeExecOrderField_ExchangeInstID); pQryExchangeExecOrderField_ExchangeInstID = nullptr; }
		if(pQryExchangeExecOrderField_ExchangeID != nullptr){ strcpy_s(pQryExchangeExecOrderField->ExchangeID, pQryExchangeExecOrderField_ExchangeID); pQryExchangeExecOrderField_ExchangeID = nullptr; }
		if(pQryExchangeExecOrderField_TraderID != nullptr){ strcpy_s(pQryExchangeExecOrderField->TraderID, pQryExchangeExecOrderField_TraderID); pQryExchangeExecOrderField_TraderID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryExchangeExecOrderField *pQryExchangeExecOrderField)
{
	if(pQryExchangeExecOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "ParticipantID", pQryExchangeExecOrderField->ParticipantID
		, "ClientID", pQryExchangeExecOrderField->ClientID
		, "ExchangeInstID", pQryExchangeExecOrderField->ExchangeInstID
		, "ExchangeID", pQryExchangeExecOrderField->ExchangeID
		, "TraderID", pQryExchangeExecOrderField->TraderID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryExecOrderActionField *pQryExecOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "ExchangeID", nullptr};
	char *pQryExecOrderActionField_BrokerID = nullptr;
	char *pQryExecOrderActionField_InvestorID = nullptr;
	char *pQryExecOrderActionField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryExecOrderActionField, "|yyy")
		, &pQryExecOrderActionField_BrokerID
		, &pQryExecOrderActionField_InvestorID
		, &pQryExecOrderActionField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pQryExecOrderActionField_BrokerID != nullptr){ strcpy_s(pQryExecOrderActionField->BrokerID, pQryExecOrderActionField_BrokerID); pQryExecOrderActionField_BrokerID = nullptr; }
		if(pQryExecOrderActionField_InvestorID != nullptr){ strcpy_s(pQryExecOrderActionField->InvestorID, pQryExecOrderActionField_InvestorID); pQryExecOrderActionField_InvestorID = nullptr; }
		if(pQryExecOrderActionField_ExchangeID != nullptr){ strcpy_s(pQryExecOrderActionField->ExchangeID, pQryExecOrderActionField_ExchangeID); pQryExecOrderActionField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryExecOrderActionField *pQryExecOrderActionField)
{
	if(pQryExecOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pQryExecOrderActionField->BrokerID
		, "InvestorID", pQryExecOrderActionField->InvestorID
		, "ExchangeID", pQryExecOrderActionField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeExecOrderActionField *pExchangeExecOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "ExecOrderSysID", "ActionFlag", "ActionDate", "ActionTime", "TraderID", "InstallID", "ExecOrderLocalID", "ActionLocalID", "ParticipantID", "ClientID", "BusinessUnit", "OrderActionStatus", "UserID", "ActionType", "BranchID", "IPAddress", "MacAddress", "ExchangeInstID", "Volume", nullptr};
	char *pExchangeExecOrderActionField_ExchangeID = nullptr;
	char *pExchangeExecOrderActionField_ExecOrderSysID = nullptr;
	char pExchangeExecOrderActionField_ActionFlag = 0;
	char *pExchangeExecOrderActionField_ActionDate = nullptr;
	char *pExchangeExecOrderActionField_ActionTime = nullptr;
	char *pExchangeExecOrderActionField_TraderID = nullptr;
	int pExchangeExecOrderActionField_InstallID = 0;
	char *pExchangeExecOrderActionField_ExecOrderLocalID = nullptr;
	char *pExchangeExecOrderActionField_ActionLocalID = nullptr;
	char *pExchangeExecOrderActionField_ParticipantID = nullptr;
	char *pExchangeExecOrderActionField_ClientID = nullptr;
	char *pExchangeExecOrderActionField_BusinessUnit = nullptr;
	char pExchangeExecOrderActionField_OrderActionStatus = 0;
	char *pExchangeExecOrderActionField_UserID = nullptr;
	char pExchangeExecOrderActionField_ActionType = 0;
	char *pExchangeExecOrderActionField_BranchID = nullptr;
	char *pExchangeExecOrderActionField_IPAddress = nullptr;
	char *pExchangeExecOrderActionField_MacAddress = nullptr;
	char *pExchangeExecOrderActionField_ExchangeInstID = nullptr;
	int pExchangeExecOrderActionField_Volume = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeExecOrderActionField, "|yycyyyiyyyyycycyyyyi")
		, &pExchangeExecOrderActionField_ExchangeID
		, &pExchangeExecOrderActionField_ExecOrderSysID
		, &pExchangeExecOrderActionField_ActionFlag
		, &pExchangeExecOrderActionField_ActionDate
		, &pExchangeExecOrderActionField_ActionTime
		, &pExchangeExecOrderActionField_TraderID
		, &pExchangeExecOrderActionField_InstallID
		, &pExchangeExecOrderActionField_ExecOrderLocalID
		, &pExchangeExecOrderActionField_ActionLocalID
		, &pExchangeExecOrderActionField_ParticipantID
		, &pExchangeExecOrderActionField_ClientID
		, &pExchangeExecOrderActionField_BusinessUnit
		, &pExchangeExecOrderActionField_OrderActionStatus
		, &pExchangeExecOrderActionField_UserID
		, &pExchangeExecOrderActionField_ActionType
		, &pExchangeExecOrderActionField_BranchID
		, &pExchangeExecOrderActionField_IPAddress
		, &pExchangeExecOrderActionField_MacAddress
		, &pExchangeExecOrderActionField_ExchangeInstID
		, &pExchangeExecOrderActionField_Volume
	PyCTP_PyDict_FromStruct_END
		if(pExchangeExecOrderActionField_ExchangeID != nullptr){ strcpy_s(pExchangeExecOrderActionField->ExchangeID, pExchangeExecOrderActionField_ExchangeID); pExchangeExecOrderActionField_ExchangeID = nullptr; }
		if(pExchangeExecOrderActionField_ExecOrderSysID != nullptr){ strcpy_s(pExchangeExecOrderActionField->ExecOrderSysID, pExchangeExecOrderActionField_ExecOrderSysID); pExchangeExecOrderActionField_ExecOrderSysID = nullptr; }
		pExchangeExecOrderActionField->ActionFlag = pExchangeExecOrderActionField_ActionFlag;
		if(pExchangeExecOrderActionField_ActionDate != nullptr){ strcpy_s(pExchangeExecOrderActionField->ActionDate, pExchangeExecOrderActionField_ActionDate); pExchangeExecOrderActionField_ActionDate = nullptr; }
		if(pExchangeExecOrderActionField_ActionTime != nullptr){ strcpy_s(pExchangeExecOrderActionField->ActionTime, pExchangeExecOrderActionField_ActionTime); pExchangeExecOrderActionField_ActionTime = nullptr; }
		if(pExchangeExecOrderActionField_TraderID != nullptr){ strcpy_s(pExchangeExecOrderActionField->TraderID, pExchangeExecOrderActionField_TraderID); pExchangeExecOrderActionField_TraderID = nullptr; }
		pExchangeExecOrderActionField->InstallID = pExchangeExecOrderActionField_InstallID;
		if(pExchangeExecOrderActionField_ExecOrderLocalID != nullptr){ strcpy_s(pExchangeExecOrderActionField->ExecOrderLocalID, pExchangeExecOrderActionField_ExecOrderLocalID); pExchangeExecOrderActionField_ExecOrderLocalID = nullptr; }
		if(pExchangeExecOrderActionField_ActionLocalID != nullptr){ strcpy_s(pExchangeExecOrderActionField->ActionLocalID, pExchangeExecOrderActionField_ActionLocalID); pExchangeExecOrderActionField_ActionLocalID = nullptr; }
		if(pExchangeExecOrderActionField_ParticipantID != nullptr){ strcpy_s(pExchangeExecOrderActionField->ParticipantID, pExchangeExecOrderActionField_ParticipantID); pExchangeExecOrderActionField_ParticipantID = nullptr; }
		if(pExchangeExecOrderActionField_ClientID != nullptr){ strcpy_s(pExchangeExecOrderActionField->ClientID, pExchangeExecOrderActionField_ClientID); pExchangeExecOrderActionField_ClientID = nullptr; }
		if(pExchangeExecOrderActionField_BusinessUnit != nullptr){ strcpy_s(pExchangeExecOrderActionField->BusinessUnit, pExchangeExecOrderActionField_BusinessUnit); pExchangeExecOrderActionField_BusinessUnit = nullptr; }
		pExchangeExecOrderActionField->OrderActionStatus = pExchangeExecOrderActionField_OrderActionStatus;
		if(pExchangeExecOrderActionField_UserID != nullptr){ strcpy_s(pExchangeExecOrderActionField->UserID, pExchangeExecOrderActionField_UserID); pExchangeExecOrderActionField_UserID = nullptr; }
		pExchangeExecOrderActionField->ActionType = pExchangeExecOrderActionField_ActionType;
		if(pExchangeExecOrderActionField_BranchID != nullptr){ strcpy_s(pExchangeExecOrderActionField->BranchID, pExchangeExecOrderActionField_BranchID); pExchangeExecOrderActionField_BranchID = nullptr; }
		if(pExchangeExecOrderActionField_IPAddress != nullptr){ strcpy_s(pExchangeExecOrderActionField->IPAddress, pExchangeExecOrderActionField_IPAddress); pExchangeExecOrderActionField_IPAddress = nullptr; }
		if(pExchangeExecOrderActionField_MacAddress != nullptr){ strcpy_s(pExchangeExecOrderActionField->MacAddress, pExchangeExecOrderActionField_MacAddress); pExchangeExecOrderActionField_MacAddress = nullptr; }
		if(pExchangeExecOrderActionField_ExchangeInstID != nullptr){ strcpy_s(pExchangeExecOrderActionField->ExchangeInstID, pExchangeExecOrderActionField_ExchangeInstID); pExchangeExecOrderActionField_ExchangeInstID = nullptr; }
		pExchangeExecOrderActionField->Volume = pExchangeExecOrderActionField_Volume;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeExecOrderActionField *pExchangeExecOrderActionField)
{
	if(pExchangeExecOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c,s:y,s:y,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y,s:i}"
		, "ExchangeID", pExchangeExecOrderActionField->ExchangeID
		, "ExecOrderSysID", pExchangeExecOrderActionField->ExecOrderSysID
		, "ActionFlag", pExchangeExecOrderActionField->ActionFlag
		, "ActionDate", pExchangeExecOrderActionField->ActionDate
		, "ActionTime", pExchangeExecOrderActionField->ActionTime
		, "TraderID", pExchangeExecOrderActionField->TraderID
		, "InstallID", pExchangeExecOrderActionField->InstallID
		, "ExecOrderLocalID", pExchangeExecOrderActionField->ExecOrderLocalID
		, "ActionLocalID", pExchangeExecOrderActionField->ActionLocalID
		, "ParticipantID", pExchangeExecOrderActionField->ParticipantID
		, "ClientID", pExchangeExecOrderActionField->ClientID
		, "BusinessUnit", pExchangeExecOrderActionField->BusinessUnit
		, "OrderActionStatus", pExchangeExecOrderActionField->OrderActionStatus
		, "UserID", pExchangeExecOrderActionField->UserID
		, "ActionType", pExchangeExecOrderActionField->ActionType
		, "BranchID", pExchangeExecOrderActionField->BranchID
		, "IPAddress", pExchangeExecOrderActionField->IPAddress
		, "MacAddress", pExchangeExecOrderActionField->MacAddress
		, "ExchangeInstID", pExchangeExecOrderActionField->ExchangeInstID
		, "Volume", pExchangeExecOrderActionField->Volume
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryExchangeExecOrderActionField *pQryExchangeExecOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"ParticipantID", "ClientID", "ExchangeID", "TraderID", nullptr};
	char *pQryExchangeExecOrderActionField_ParticipantID = nullptr;
	char *pQryExchangeExecOrderActionField_ClientID = nullptr;
	char *pQryExchangeExecOrderActionField_ExchangeID = nullptr;
	char *pQryExchangeExecOrderActionField_TraderID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryExchangeExecOrderActionField, "|yyyy")
		, &pQryExchangeExecOrderActionField_ParticipantID
		, &pQryExchangeExecOrderActionField_ClientID
		, &pQryExchangeExecOrderActionField_ExchangeID
		, &pQryExchangeExecOrderActionField_TraderID
	PyCTP_PyDict_FromStruct_END
		if(pQryExchangeExecOrderActionField_ParticipantID != nullptr){ strcpy_s(pQryExchangeExecOrderActionField->ParticipantID, pQryExchangeExecOrderActionField_ParticipantID); pQryExchangeExecOrderActionField_ParticipantID = nullptr; }
		if(pQryExchangeExecOrderActionField_ClientID != nullptr){ strcpy_s(pQryExchangeExecOrderActionField->ClientID, pQryExchangeExecOrderActionField_ClientID); pQryExchangeExecOrderActionField_ClientID = nullptr; }
		if(pQryExchangeExecOrderActionField_ExchangeID != nullptr){ strcpy_s(pQryExchangeExecOrderActionField->ExchangeID, pQryExchangeExecOrderActionField_ExchangeID); pQryExchangeExecOrderActionField_ExchangeID = nullptr; }
		if(pQryExchangeExecOrderActionField_TraderID != nullptr){ strcpy_s(pQryExchangeExecOrderActionField->TraderID, pQryExchangeExecOrderActionField_TraderID); pQryExchangeExecOrderActionField_TraderID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryExchangeExecOrderActionField *pQryExchangeExecOrderActionField)
{
	if(pQryExchangeExecOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y}"
		, "ParticipantID", pQryExchangeExecOrderActionField->ParticipantID
		, "ClientID", pQryExchangeExecOrderActionField->ClientID
		, "ExchangeID", pQryExchangeExecOrderActionField->ExchangeID
		, "TraderID", pQryExchangeExecOrderActionField->TraderID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcErrExecOrderField *pErrExecOrderField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ExecOrderRef", "UserID", "Volume", "RequestID", "BusinessUnit", "OffsetFlag", "HedgeFlag", "ActionType", "PosiDirection", "ReservePositionFlag", "CloseFlag", "ExchangeID", "InvestUnitID", "AccountID", "CurrencyID", "ClientID", "IPAddress", "MacAddress", "ErrorID", "ErrorMsg", nullptr};
	char *pErrExecOrderField_BrokerID = nullptr;
	char *pErrExecOrderField_InvestorID = nullptr;
	char *pErrExecOrderField_InstrumentID = nullptr;
	char *pErrExecOrderField_ExecOrderRef = nullptr;
	char *pErrExecOrderField_UserID = nullptr;
	int pErrExecOrderField_Volume = 0;
	int pErrExecOrderField_RequestID = 0;
	char *pErrExecOrderField_BusinessUnit = nullptr;
	char pErrExecOrderField_OffsetFlag = 0;
	char pErrExecOrderField_HedgeFlag = 0;
	char pErrExecOrderField_ActionType = 0;
	char pErrExecOrderField_PosiDirection = 0;
	char pErrExecOrderField_ReservePositionFlag = 0;
	char pErrExecOrderField_CloseFlag = 0;
	char *pErrExecOrderField_ExchangeID = nullptr;
	char *pErrExecOrderField_InvestUnitID = nullptr;
	char *pErrExecOrderField_AccountID = nullptr;
	char *pErrExecOrderField_CurrencyID = nullptr;
	char *pErrExecOrderField_ClientID = nullptr;
	char *pErrExecOrderField_IPAddress = nullptr;
	char *pErrExecOrderField_MacAddress = nullptr;
	int pErrExecOrderField_ErrorID = 0;
	char *pErrExecOrderField_ErrorMsg = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pErrExecOrderField, "|yyyyyiiyccccccyyyyyyyiy")
		, &pErrExecOrderField_BrokerID
		, &pErrExecOrderField_InvestorID
		, &pErrExecOrderField_InstrumentID
		, &pErrExecOrderField_ExecOrderRef
		, &pErrExecOrderField_UserID
		, &pErrExecOrderField_Volume
		, &pErrExecOrderField_RequestID
		, &pErrExecOrderField_BusinessUnit
		, &pErrExecOrderField_OffsetFlag
		, &pErrExecOrderField_HedgeFlag
		, &pErrExecOrderField_ActionType
		, &pErrExecOrderField_PosiDirection
		, &pErrExecOrderField_ReservePositionFlag
		, &pErrExecOrderField_CloseFlag
		, &pErrExecOrderField_ExchangeID
		, &pErrExecOrderField_InvestUnitID
		, &pErrExecOrderField_AccountID
		, &pErrExecOrderField_CurrencyID
		, &pErrExecOrderField_ClientID
		, &pErrExecOrderField_IPAddress
		, &pErrExecOrderField_MacAddress
		, &pErrExecOrderField_ErrorID
		, &pErrExecOrderField_ErrorMsg
	PyCTP_PyDict_FromStruct_END
		if(pErrExecOrderField_BrokerID != nullptr){ strcpy_s(pErrExecOrderField->BrokerID, pErrExecOrderField_BrokerID); pErrExecOrderField_BrokerID = nullptr; }
		if(pErrExecOrderField_InvestorID != nullptr){ strcpy_s(pErrExecOrderField->InvestorID, pErrExecOrderField_InvestorID); pErrExecOrderField_InvestorID = nullptr; }
		if(pErrExecOrderField_InstrumentID != nullptr){ strcpy_s(pErrExecOrderField->InstrumentID, pErrExecOrderField_InstrumentID); pErrExecOrderField_InstrumentID = nullptr; }
		if(pErrExecOrderField_ExecOrderRef != nullptr){ strcpy_s(pErrExecOrderField->ExecOrderRef, pErrExecOrderField_ExecOrderRef); pErrExecOrderField_ExecOrderRef = nullptr; }
		if(pErrExecOrderField_UserID != nullptr){ strcpy_s(pErrExecOrderField->UserID, pErrExecOrderField_UserID); pErrExecOrderField_UserID = nullptr; }
		pErrExecOrderField->Volume = pErrExecOrderField_Volume;
		pErrExecOrderField->RequestID = pErrExecOrderField_RequestID;
		if(pErrExecOrderField_BusinessUnit != nullptr){ strcpy_s(pErrExecOrderField->BusinessUnit, pErrExecOrderField_BusinessUnit); pErrExecOrderField_BusinessUnit = nullptr; }
		pErrExecOrderField->OffsetFlag = pErrExecOrderField_OffsetFlag;
		pErrExecOrderField->HedgeFlag = pErrExecOrderField_HedgeFlag;
		pErrExecOrderField->ActionType = pErrExecOrderField_ActionType;
		pErrExecOrderField->PosiDirection = pErrExecOrderField_PosiDirection;
		pErrExecOrderField->ReservePositionFlag = pErrExecOrderField_ReservePositionFlag;
		pErrExecOrderField->CloseFlag = pErrExecOrderField_CloseFlag;
		if(pErrExecOrderField_ExchangeID != nullptr){ strcpy_s(pErrExecOrderField->ExchangeID, pErrExecOrderField_ExchangeID); pErrExecOrderField_ExchangeID = nullptr; }
		if(pErrExecOrderField_InvestUnitID != nullptr){ strcpy_s(pErrExecOrderField->InvestUnitID, pErrExecOrderField_InvestUnitID); pErrExecOrderField_InvestUnitID = nullptr; }
		if(pErrExecOrderField_AccountID != nullptr){ strcpy_s(pErrExecOrderField->AccountID, pErrExecOrderField_AccountID); pErrExecOrderField_AccountID = nullptr; }
		if(pErrExecOrderField_CurrencyID != nullptr){ strcpy_s(pErrExecOrderField->CurrencyID, pErrExecOrderField_CurrencyID); pErrExecOrderField_CurrencyID = nullptr; }
		if(pErrExecOrderField_ClientID != nullptr){ strcpy_s(pErrExecOrderField->ClientID, pErrExecOrderField_ClientID); pErrExecOrderField_ClientID = nullptr; }
		if(pErrExecOrderField_IPAddress != nullptr){ strcpy_s(pErrExecOrderField->IPAddress, pErrExecOrderField_IPAddress); pErrExecOrderField_IPAddress = nullptr; }
		if(pErrExecOrderField_MacAddress != nullptr){ strcpy_s(pErrExecOrderField->MacAddress, pErrExecOrderField_MacAddress); pErrExecOrderField_MacAddress = nullptr; }
		pErrExecOrderField->ErrorID = pErrExecOrderField_ErrorID;
		if(pErrExecOrderField_ErrorMsg != nullptr){ strcpy_s(pErrExecOrderField->ErrorMsg, pErrExecOrderField_ErrorMsg); pErrExecOrderField_ErrorMsg = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcErrExecOrderField *pErrExecOrderField)
{
	if(pErrExecOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:i,s:i,s:y,s:c,s:c,s:c,s:c,s:c,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:y}"
		, "BrokerID", pErrExecOrderField->BrokerID
		, "InvestorID", pErrExecOrderField->InvestorID
		, "InstrumentID", pErrExecOrderField->InstrumentID
		, "ExecOrderRef", pErrExecOrderField->ExecOrderRef
		, "UserID", pErrExecOrderField->UserID
		, "Volume", pErrExecOrderField->Volume
		, "RequestID", pErrExecOrderField->RequestID
		, "BusinessUnit", pErrExecOrderField->BusinessUnit
		, "OffsetFlag", pErrExecOrderField->OffsetFlag
		, "HedgeFlag", pErrExecOrderField->HedgeFlag
		, "ActionType", pErrExecOrderField->ActionType
		, "PosiDirection", pErrExecOrderField->PosiDirection
		, "ReservePositionFlag", pErrExecOrderField->ReservePositionFlag
		, "CloseFlag", pErrExecOrderField->CloseFlag
		, "ExchangeID", pErrExecOrderField->ExchangeID
		, "InvestUnitID", pErrExecOrderField->InvestUnitID
		, "AccountID", pErrExecOrderField->AccountID
		, "CurrencyID", pErrExecOrderField->CurrencyID
		, "ClientID", pErrExecOrderField->ClientID
		, "IPAddress", pErrExecOrderField->IPAddress
		, "MacAddress", pErrExecOrderField->MacAddress
		, "ErrorID", pErrExecOrderField->ErrorID
		, "ErrorMsg", pErrExecOrderField->ErrorMsg
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryErrExecOrderField *pQryErrExecOrderField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", nullptr};
	char *pQryErrExecOrderField_BrokerID = nullptr;
	char *pQryErrExecOrderField_InvestorID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryErrExecOrderField, "|yy")
		, &pQryErrExecOrderField_BrokerID
		, &pQryErrExecOrderField_InvestorID
	PyCTP_PyDict_FromStruct_END
		if(pQryErrExecOrderField_BrokerID != nullptr){ strcpy_s(pQryErrExecOrderField->BrokerID, pQryErrExecOrderField_BrokerID); pQryErrExecOrderField_BrokerID = nullptr; }
		if(pQryErrExecOrderField_InvestorID != nullptr){ strcpy_s(pQryErrExecOrderField->InvestorID, pQryErrExecOrderField_InvestorID); pQryErrExecOrderField_InvestorID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryErrExecOrderField *pQryErrExecOrderField)
{
	if(pQryErrExecOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQryErrExecOrderField->BrokerID
		, "InvestorID", pQryErrExecOrderField->InvestorID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcErrExecOrderActionField *pErrExecOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "ExecOrderActionRef", "ExecOrderRef", "RequestID", "FrontID", "SessionID", "ExchangeID", "ExecOrderSysID", "ActionFlag", "UserID", "InstrumentID", "InvestUnitID", "IPAddress", "MacAddress", "ErrorID", "ErrorMsg", nullptr};
	char *pErrExecOrderActionField_BrokerID = nullptr;
	char *pErrExecOrderActionField_InvestorID = nullptr;
	int pErrExecOrderActionField_ExecOrderActionRef = 0;
	char *pErrExecOrderActionField_ExecOrderRef = nullptr;
	int pErrExecOrderActionField_RequestID = 0;
	int pErrExecOrderActionField_FrontID = 0;
	int pErrExecOrderActionField_SessionID = 0;
	char *pErrExecOrderActionField_ExchangeID = nullptr;
	char *pErrExecOrderActionField_ExecOrderSysID = nullptr;
	char pErrExecOrderActionField_ActionFlag = 0;
	char *pErrExecOrderActionField_UserID = nullptr;
	char *pErrExecOrderActionField_InstrumentID = nullptr;
	char *pErrExecOrderActionField_InvestUnitID = nullptr;
	char *pErrExecOrderActionField_IPAddress = nullptr;
	char *pErrExecOrderActionField_MacAddress = nullptr;
	int pErrExecOrderActionField_ErrorID = 0;
	char *pErrExecOrderActionField_ErrorMsg = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pErrExecOrderActionField, "|yyiyiiiyycyyyyyiy")
		, &pErrExecOrderActionField_BrokerID
		, &pErrExecOrderActionField_InvestorID
		, &pErrExecOrderActionField_ExecOrderActionRef
		, &pErrExecOrderActionField_ExecOrderRef
		, &pErrExecOrderActionField_RequestID
		, &pErrExecOrderActionField_FrontID
		, &pErrExecOrderActionField_SessionID
		, &pErrExecOrderActionField_ExchangeID
		, &pErrExecOrderActionField_ExecOrderSysID
		, &pErrExecOrderActionField_ActionFlag
		, &pErrExecOrderActionField_UserID
		, &pErrExecOrderActionField_InstrumentID
		, &pErrExecOrderActionField_InvestUnitID
		, &pErrExecOrderActionField_IPAddress
		, &pErrExecOrderActionField_MacAddress
		, &pErrExecOrderActionField_ErrorID
		, &pErrExecOrderActionField_ErrorMsg
	PyCTP_PyDict_FromStruct_END
		if(pErrExecOrderActionField_BrokerID != nullptr){ strcpy_s(pErrExecOrderActionField->BrokerID, pErrExecOrderActionField_BrokerID); pErrExecOrderActionField_BrokerID = nullptr; }
		if(pErrExecOrderActionField_InvestorID != nullptr){ strcpy_s(pErrExecOrderActionField->InvestorID, pErrExecOrderActionField_InvestorID); pErrExecOrderActionField_InvestorID = nullptr; }
		pErrExecOrderActionField->ExecOrderActionRef = pErrExecOrderActionField_ExecOrderActionRef;
		if(pErrExecOrderActionField_ExecOrderRef != nullptr){ strcpy_s(pErrExecOrderActionField->ExecOrderRef, pErrExecOrderActionField_ExecOrderRef); pErrExecOrderActionField_ExecOrderRef = nullptr; }
		pErrExecOrderActionField->RequestID = pErrExecOrderActionField_RequestID;
		pErrExecOrderActionField->FrontID = pErrExecOrderActionField_FrontID;
		pErrExecOrderActionField->SessionID = pErrExecOrderActionField_SessionID;
		if(pErrExecOrderActionField_ExchangeID != nullptr){ strcpy_s(pErrExecOrderActionField->ExchangeID, pErrExecOrderActionField_ExchangeID); pErrExecOrderActionField_ExchangeID = nullptr; }
		if(pErrExecOrderActionField_ExecOrderSysID != nullptr){ strcpy_s(pErrExecOrderActionField->ExecOrderSysID, pErrExecOrderActionField_ExecOrderSysID); pErrExecOrderActionField_ExecOrderSysID = nullptr; }
		pErrExecOrderActionField->ActionFlag = pErrExecOrderActionField_ActionFlag;
		if(pErrExecOrderActionField_UserID != nullptr){ strcpy_s(pErrExecOrderActionField->UserID, pErrExecOrderActionField_UserID); pErrExecOrderActionField_UserID = nullptr; }
		if(pErrExecOrderActionField_InstrumentID != nullptr){ strcpy_s(pErrExecOrderActionField->InstrumentID, pErrExecOrderActionField_InstrumentID); pErrExecOrderActionField_InstrumentID = nullptr; }
		if(pErrExecOrderActionField_InvestUnitID != nullptr){ strcpy_s(pErrExecOrderActionField->InvestUnitID, pErrExecOrderActionField_InvestUnitID); pErrExecOrderActionField_InvestUnitID = nullptr; }
		if(pErrExecOrderActionField_IPAddress != nullptr){ strcpy_s(pErrExecOrderActionField->IPAddress, pErrExecOrderActionField_IPAddress); pErrExecOrderActionField_IPAddress = nullptr; }
		if(pErrExecOrderActionField_MacAddress != nullptr){ strcpy_s(pErrExecOrderActionField->MacAddress, pErrExecOrderActionField_MacAddress); pErrExecOrderActionField_MacAddress = nullptr; }
		pErrExecOrderActionField->ErrorID = pErrExecOrderActionField_ErrorID;
		if(pErrExecOrderActionField_ErrorMsg != nullptr){ strcpy_s(pErrExecOrderActionField->ErrorMsg, pErrExecOrderActionField_ErrorMsg); pErrExecOrderActionField_ErrorMsg = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcErrExecOrderActionField *pErrExecOrderActionField)
{
	if(pErrExecOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i,s:y,s:i,s:i,s:i,s:y,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:i,s:y}"
		, "BrokerID", pErrExecOrderActionField->BrokerID
		, "InvestorID", pErrExecOrderActionField->InvestorID
		, "ExecOrderActionRef", pErrExecOrderActionField->ExecOrderActionRef
		, "ExecOrderRef", pErrExecOrderActionField->ExecOrderRef
		, "RequestID", pErrExecOrderActionField->RequestID
		, "FrontID", pErrExecOrderActionField->FrontID
		, "SessionID", pErrExecOrderActionField->SessionID
		, "ExchangeID", pErrExecOrderActionField->ExchangeID
		, "ExecOrderSysID", pErrExecOrderActionField->ExecOrderSysID
		, "ActionFlag", pErrExecOrderActionField->ActionFlag
		, "UserID", pErrExecOrderActionField->UserID
		, "InstrumentID", pErrExecOrderActionField->InstrumentID
		, "InvestUnitID", pErrExecOrderActionField->InvestUnitID
		, "IPAddress", pErrExecOrderActionField->IPAddress
		, "MacAddress", pErrExecOrderActionField->MacAddress
		, "ErrorID", pErrExecOrderActionField->ErrorID
		, "ErrorMsg", pErrExecOrderActionField->ErrorMsg
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryErrExecOrderActionField *pQryErrExecOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", nullptr};
	char *pQryErrExecOrderActionField_BrokerID = nullptr;
	char *pQryErrExecOrderActionField_InvestorID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryErrExecOrderActionField, "|yy")
		, &pQryErrExecOrderActionField_BrokerID
		, &pQryErrExecOrderActionField_InvestorID
	PyCTP_PyDict_FromStruct_END
		if(pQryErrExecOrderActionField_BrokerID != nullptr){ strcpy_s(pQryErrExecOrderActionField->BrokerID, pQryErrExecOrderActionField_BrokerID); pQryErrExecOrderActionField_BrokerID = nullptr; }
		if(pQryErrExecOrderActionField_InvestorID != nullptr){ strcpy_s(pQryErrExecOrderActionField->InvestorID, pQryErrExecOrderActionField_InvestorID); pQryErrExecOrderActionField_InvestorID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryErrExecOrderActionField *pQryErrExecOrderActionField)
{
	if(pQryErrExecOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQryErrExecOrderActionField->BrokerID
		, "InvestorID", pQryErrExecOrderActionField->InvestorID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcOptionInstrTradingRightField *pOptionInstrTradingRightField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "InvestorRange", "BrokerID", "InvestorID", "Direction", "TradingRight", nullptr};
	char *pOptionInstrTradingRightField_InstrumentID = nullptr;
	char pOptionInstrTradingRightField_InvestorRange = 0;
	char *pOptionInstrTradingRightField_BrokerID = nullptr;
	char *pOptionInstrTradingRightField_InvestorID = nullptr;
	char pOptionInstrTradingRightField_Direction = 0;
	char pOptionInstrTradingRightField_TradingRight = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pOptionInstrTradingRightField, "|ycyycc")
		, &pOptionInstrTradingRightField_InstrumentID
		, &pOptionInstrTradingRightField_InvestorRange
		, &pOptionInstrTradingRightField_BrokerID
		, &pOptionInstrTradingRightField_InvestorID
		, &pOptionInstrTradingRightField_Direction
		, &pOptionInstrTradingRightField_TradingRight
	PyCTP_PyDict_FromStruct_END
		if(pOptionInstrTradingRightField_InstrumentID != nullptr){ strcpy_s(pOptionInstrTradingRightField->InstrumentID, pOptionInstrTradingRightField_InstrumentID); pOptionInstrTradingRightField_InstrumentID = nullptr; }
		pOptionInstrTradingRightField->InvestorRange = pOptionInstrTradingRightField_InvestorRange;
		if(pOptionInstrTradingRightField_BrokerID != nullptr){ strcpy_s(pOptionInstrTradingRightField->BrokerID, pOptionInstrTradingRightField_BrokerID); pOptionInstrTradingRightField_BrokerID = nullptr; }
		if(pOptionInstrTradingRightField_InvestorID != nullptr){ strcpy_s(pOptionInstrTradingRightField->InvestorID, pOptionInstrTradingRightField_InvestorID); pOptionInstrTradingRightField_InvestorID = nullptr; }
		pOptionInstrTradingRightField->Direction = pOptionInstrTradingRightField_Direction;
		pOptionInstrTradingRightField->TradingRight = pOptionInstrTradingRightField_TradingRight;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcOptionInstrTradingRightField *pOptionInstrTradingRightField)
{
	if(pOptionInstrTradingRightField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y,s:c,s:c}"
		, "InstrumentID", pOptionInstrTradingRightField->InstrumentID
		, "InvestorRange", pOptionInstrTradingRightField->InvestorRange
		, "BrokerID", pOptionInstrTradingRightField->BrokerID
		, "InvestorID", pOptionInstrTradingRightField->InvestorID
		, "Direction", pOptionInstrTradingRightField->Direction
		, "TradingRight", pOptionInstrTradingRightField->TradingRight
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryOptionInstrTradingRightField *pQryOptionInstrTradingRightField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "Direction", nullptr};
	char *pQryOptionInstrTradingRightField_BrokerID = nullptr;
	char *pQryOptionInstrTradingRightField_InvestorID = nullptr;
	char *pQryOptionInstrTradingRightField_InstrumentID = nullptr;
	char pQryOptionInstrTradingRightField_Direction = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pQryOptionInstrTradingRightField, "|yyyc")
		, &pQryOptionInstrTradingRightField_BrokerID
		, &pQryOptionInstrTradingRightField_InvestorID
		, &pQryOptionInstrTradingRightField_InstrumentID
		, &pQryOptionInstrTradingRightField_Direction
	PyCTP_PyDict_FromStruct_END
		if(pQryOptionInstrTradingRightField_BrokerID != nullptr){ strcpy_s(pQryOptionInstrTradingRightField->BrokerID, pQryOptionInstrTradingRightField_BrokerID); pQryOptionInstrTradingRightField_BrokerID = nullptr; }
		if(pQryOptionInstrTradingRightField_InvestorID != nullptr){ strcpy_s(pQryOptionInstrTradingRightField->InvestorID, pQryOptionInstrTradingRightField_InvestorID); pQryOptionInstrTradingRightField_InvestorID = nullptr; }
		if(pQryOptionInstrTradingRightField_InstrumentID != nullptr){ strcpy_s(pQryOptionInstrTradingRightField->InstrumentID, pQryOptionInstrTradingRightField_InstrumentID); pQryOptionInstrTradingRightField_InstrumentID = nullptr; }
		pQryOptionInstrTradingRightField->Direction = pQryOptionInstrTradingRightField_Direction;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryOptionInstrTradingRightField *pQryOptionInstrTradingRightField)
{
	if(pQryOptionInstrTradingRightField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:c}"
		, "BrokerID", pQryOptionInstrTradingRightField->BrokerID
		, "InvestorID", pQryOptionInstrTradingRightField->InvestorID
		, "InstrumentID", pQryOptionInstrTradingRightField->InstrumentID
		, "Direction", pQryOptionInstrTradingRightField->Direction
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInputForQuoteField *pInputForQuoteField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ForQuoteRef", "UserID", "ExchangeID", "InvestUnitID", "IPAddress", "MacAddress", nullptr};
	char *pInputForQuoteField_BrokerID = nullptr;
	char *pInputForQuoteField_InvestorID = nullptr;
	char *pInputForQuoteField_InstrumentID = nullptr;
	char *pInputForQuoteField_ForQuoteRef = nullptr;
	char *pInputForQuoteField_UserID = nullptr;
	char *pInputForQuoteField_ExchangeID = nullptr;
	char *pInputForQuoteField_InvestUnitID = nullptr;
	char *pInputForQuoteField_IPAddress = nullptr;
	char *pInputForQuoteField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInputForQuoteField, "|yyyyyyyyy")
		, &pInputForQuoteField_BrokerID
		, &pInputForQuoteField_InvestorID
		, &pInputForQuoteField_InstrumentID
		, &pInputForQuoteField_ForQuoteRef
		, &pInputForQuoteField_UserID
		, &pInputForQuoteField_ExchangeID
		, &pInputForQuoteField_InvestUnitID
		, &pInputForQuoteField_IPAddress
		, &pInputForQuoteField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pInputForQuoteField_BrokerID != nullptr){ strcpy_s(pInputForQuoteField->BrokerID, pInputForQuoteField_BrokerID); pInputForQuoteField_BrokerID = nullptr; }
		if(pInputForQuoteField_InvestorID != nullptr){ strcpy_s(pInputForQuoteField->InvestorID, pInputForQuoteField_InvestorID); pInputForQuoteField_InvestorID = nullptr; }
		if(pInputForQuoteField_InstrumentID != nullptr){ strcpy_s(pInputForQuoteField->InstrumentID, pInputForQuoteField_InstrumentID); pInputForQuoteField_InstrumentID = nullptr; }
		if(pInputForQuoteField_ForQuoteRef != nullptr){ strcpy_s(pInputForQuoteField->ForQuoteRef, pInputForQuoteField_ForQuoteRef); pInputForQuoteField_ForQuoteRef = nullptr; }
		if(pInputForQuoteField_UserID != nullptr){ strcpy_s(pInputForQuoteField->UserID, pInputForQuoteField_UserID); pInputForQuoteField_UserID = nullptr; }
		if(pInputForQuoteField_ExchangeID != nullptr){ strcpy_s(pInputForQuoteField->ExchangeID, pInputForQuoteField_ExchangeID); pInputForQuoteField_ExchangeID = nullptr; }
		if(pInputForQuoteField_InvestUnitID != nullptr){ strcpy_s(pInputForQuoteField->InvestUnitID, pInputForQuoteField_InvestUnitID); pInputForQuoteField_InvestUnitID = nullptr; }
		if(pInputForQuoteField_IPAddress != nullptr){ strcpy_s(pInputForQuoteField->IPAddress, pInputForQuoteField_IPAddress); pInputForQuoteField_IPAddress = nullptr; }
		if(pInputForQuoteField_MacAddress != nullptr){ strcpy_s(pInputForQuoteField->MacAddress, pInputForQuoteField_MacAddress); pInputForQuoteField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInputForQuoteField *pInputForQuoteField)
{
	if(pInputForQuoteField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pInputForQuoteField->BrokerID
		, "InvestorID", pInputForQuoteField->InvestorID
		, "InstrumentID", pInputForQuoteField->InstrumentID
		, "ForQuoteRef", pInputForQuoteField->ForQuoteRef
		, "UserID", pInputForQuoteField->UserID
		, "ExchangeID", pInputForQuoteField->ExchangeID
		, "InvestUnitID", pInputForQuoteField->InvestUnitID
		, "IPAddress", pInputForQuoteField->IPAddress
		, "MacAddress", pInputForQuoteField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcForQuoteField *pForQuoteField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ForQuoteRef", "UserID", "ForQuoteLocalID", "ExchangeID", "ParticipantID", "ClientID", "ExchangeInstID", "TraderID", "InstallID", "InsertDate", "InsertTime", "ForQuoteStatus", "FrontID", "SessionID", "StatusMsg", "ActiveUserID", "BrokerForQutoSeq", "InvestUnitID", "IPAddress", "MacAddress", nullptr};
	char *pForQuoteField_BrokerID = nullptr;
	char *pForQuoteField_InvestorID = nullptr;
	char *pForQuoteField_InstrumentID = nullptr;
	char *pForQuoteField_ForQuoteRef = nullptr;
	char *pForQuoteField_UserID = nullptr;
	char *pForQuoteField_ForQuoteLocalID = nullptr;
	char *pForQuoteField_ExchangeID = nullptr;
	char *pForQuoteField_ParticipantID = nullptr;
	char *pForQuoteField_ClientID = nullptr;
	char *pForQuoteField_ExchangeInstID = nullptr;
	char *pForQuoteField_TraderID = nullptr;
	int pForQuoteField_InstallID = 0;
	char *pForQuoteField_InsertDate = nullptr;
	char *pForQuoteField_InsertTime = nullptr;
	char pForQuoteField_ForQuoteStatus = 0;
	int pForQuoteField_FrontID = 0;
	int pForQuoteField_SessionID = 0;
	char *pForQuoteField_StatusMsg = nullptr;
	char *pForQuoteField_ActiveUserID = nullptr;
	int pForQuoteField_BrokerForQutoSeq = 0;
	char *pForQuoteField_InvestUnitID = nullptr;
	char *pForQuoteField_IPAddress = nullptr;
	char *pForQuoteField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pForQuoteField, "|yyyyyyyyyyyiyyciiyyiyyy")
		, &pForQuoteField_BrokerID
		, &pForQuoteField_InvestorID
		, &pForQuoteField_InstrumentID
		, &pForQuoteField_ForQuoteRef
		, &pForQuoteField_UserID
		, &pForQuoteField_ForQuoteLocalID
		, &pForQuoteField_ExchangeID
		, &pForQuoteField_ParticipantID
		, &pForQuoteField_ClientID
		, &pForQuoteField_ExchangeInstID
		, &pForQuoteField_TraderID
		, &pForQuoteField_InstallID
		, &pForQuoteField_InsertDate
		, &pForQuoteField_InsertTime
		, &pForQuoteField_ForQuoteStatus
		, &pForQuoteField_FrontID
		, &pForQuoteField_SessionID
		, &pForQuoteField_StatusMsg
		, &pForQuoteField_ActiveUserID
		, &pForQuoteField_BrokerForQutoSeq
		, &pForQuoteField_InvestUnitID
		, &pForQuoteField_IPAddress
		, &pForQuoteField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pForQuoteField_BrokerID != nullptr){ strcpy_s(pForQuoteField->BrokerID, pForQuoteField_BrokerID); pForQuoteField_BrokerID = nullptr; }
		if(pForQuoteField_InvestorID != nullptr){ strcpy_s(pForQuoteField->InvestorID, pForQuoteField_InvestorID); pForQuoteField_InvestorID = nullptr; }
		if(pForQuoteField_InstrumentID != nullptr){ strcpy_s(pForQuoteField->InstrumentID, pForQuoteField_InstrumentID); pForQuoteField_InstrumentID = nullptr; }
		if(pForQuoteField_ForQuoteRef != nullptr){ strcpy_s(pForQuoteField->ForQuoteRef, pForQuoteField_ForQuoteRef); pForQuoteField_ForQuoteRef = nullptr; }
		if(pForQuoteField_UserID != nullptr){ strcpy_s(pForQuoteField->UserID, pForQuoteField_UserID); pForQuoteField_UserID = nullptr; }
		if(pForQuoteField_ForQuoteLocalID != nullptr){ strcpy_s(pForQuoteField->ForQuoteLocalID, pForQuoteField_ForQuoteLocalID); pForQuoteField_ForQuoteLocalID = nullptr; }
		if(pForQuoteField_ExchangeID != nullptr){ strcpy_s(pForQuoteField->ExchangeID, pForQuoteField_ExchangeID); pForQuoteField_ExchangeID = nullptr; }
		if(pForQuoteField_ParticipantID != nullptr){ strcpy_s(pForQuoteField->ParticipantID, pForQuoteField_ParticipantID); pForQuoteField_ParticipantID = nullptr; }
		if(pForQuoteField_ClientID != nullptr){ strcpy_s(pForQuoteField->ClientID, pForQuoteField_ClientID); pForQuoteField_ClientID = nullptr; }
		if(pForQuoteField_ExchangeInstID != nullptr){ strcpy_s(pForQuoteField->ExchangeInstID, pForQuoteField_ExchangeInstID); pForQuoteField_ExchangeInstID = nullptr; }
		if(pForQuoteField_TraderID != nullptr){ strcpy_s(pForQuoteField->TraderID, pForQuoteField_TraderID); pForQuoteField_TraderID = nullptr; }
		pForQuoteField->InstallID = pForQuoteField_InstallID;
		if(pForQuoteField_InsertDate != nullptr){ strcpy_s(pForQuoteField->InsertDate, pForQuoteField_InsertDate); pForQuoteField_InsertDate = nullptr; }
		if(pForQuoteField_InsertTime != nullptr){ strcpy_s(pForQuoteField->InsertTime, pForQuoteField_InsertTime); pForQuoteField_InsertTime = nullptr; }
		pForQuoteField->ForQuoteStatus = pForQuoteField_ForQuoteStatus;
		pForQuoteField->FrontID = pForQuoteField_FrontID;
		pForQuoteField->SessionID = pForQuoteField_SessionID;
		if(pForQuoteField_StatusMsg != nullptr){ strcpy_s(pForQuoteField->StatusMsg, pForQuoteField_StatusMsg); pForQuoteField_StatusMsg = nullptr; }
		if(pForQuoteField_ActiveUserID != nullptr){ strcpy_s(pForQuoteField->ActiveUserID, pForQuoteField_ActiveUserID); pForQuoteField_ActiveUserID = nullptr; }
		pForQuoteField->BrokerForQutoSeq = pForQuoteField_BrokerForQutoSeq;
		if(pForQuoteField_InvestUnitID != nullptr){ strcpy_s(pForQuoteField->InvestUnitID, pForQuoteField_InvestUnitID); pForQuoteField_InvestUnitID = nullptr; }
		if(pForQuoteField_IPAddress != nullptr){ strcpy_s(pForQuoteField->IPAddress, pForQuoteField_IPAddress); pForQuoteField_IPAddress = nullptr; }
		if(pForQuoteField_MacAddress != nullptr){ strcpy_s(pForQuoteField->MacAddress, pForQuoteField_MacAddress); pForQuoteField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcForQuoteField *pForQuoteField)
{
	if(pForQuoteField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:y,s:y,s:c,s:i,s:i,s:y,s:y,s:i,s:y,s:y,s:y}"
		, "BrokerID", pForQuoteField->BrokerID
		, "InvestorID", pForQuoteField->InvestorID
		, "InstrumentID", pForQuoteField->InstrumentID
		, "ForQuoteRef", pForQuoteField->ForQuoteRef
		, "UserID", pForQuoteField->UserID
		, "ForQuoteLocalID", pForQuoteField->ForQuoteLocalID
		, "ExchangeID", pForQuoteField->ExchangeID
		, "ParticipantID", pForQuoteField->ParticipantID
		, "ClientID", pForQuoteField->ClientID
		, "ExchangeInstID", pForQuoteField->ExchangeInstID
		, "TraderID", pForQuoteField->TraderID
		, "InstallID", pForQuoteField->InstallID
		, "InsertDate", pForQuoteField->InsertDate
		, "InsertTime", pForQuoteField->InsertTime
		, "ForQuoteStatus", pForQuoteField->ForQuoteStatus
		, "FrontID", pForQuoteField->FrontID
		, "SessionID", pForQuoteField->SessionID
		, "StatusMsg", pForQuoteField->StatusMsg
		, "ActiveUserID", pForQuoteField->ActiveUserID
		, "BrokerForQutoSeq", pForQuoteField->BrokerForQutoSeq
		, "InvestUnitID", pForQuoteField->InvestUnitID
		, "IPAddress", pForQuoteField->IPAddress
		, "MacAddress", pForQuoteField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryForQuoteField *pQryForQuoteField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ExchangeID", "InsertTimeStart", "InsertTimeEnd", "InvestUnitID", nullptr};
	char *pQryForQuoteField_BrokerID = nullptr;
	char *pQryForQuoteField_InvestorID = nullptr;
	char *pQryForQuoteField_InstrumentID = nullptr;
	char *pQryForQuoteField_ExchangeID = nullptr;
	char *pQryForQuoteField_InsertTimeStart = nullptr;
	char *pQryForQuoteField_InsertTimeEnd = nullptr;
	char *pQryForQuoteField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryForQuoteField, "|yyyyyyy")
		, &pQryForQuoteField_BrokerID
		, &pQryForQuoteField_InvestorID
		, &pQryForQuoteField_InstrumentID
		, &pQryForQuoteField_ExchangeID
		, &pQryForQuoteField_InsertTimeStart
		, &pQryForQuoteField_InsertTimeEnd
		, &pQryForQuoteField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryForQuoteField_BrokerID != nullptr){ strcpy_s(pQryForQuoteField->BrokerID, pQryForQuoteField_BrokerID); pQryForQuoteField_BrokerID = nullptr; }
		if(pQryForQuoteField_InvestorID != nullptr){ strcpy_s(pQryForQuoteField->InvestorID, pQryForQuoteField_InvestorID); pQryForQuoteField_InvestorID = nullptr; }
		if(pQryForQuoteField_InstrumentID != nullptr){ strcpy_s(pQryForQuoteField->InstrumentID, pQryForQuoteField_InstrumentID); pQryForQuoteField_InstrumentID = nullptr; }
		if(pQryForQuoteField_ExchangeID != nullptr){ strcpy_s(pQryForQuoteField->ExchangeID, pQryForQuoteField_ExchangeID); pQryForQuoteField_ExchangeID = nullptr; }
		if(pQryForQuoteField_InsertTimeStart != nullptr){ strcpy_s(pQryForQuoteField->InsertTimeStart, pQryForQuoteField_InsertTimeStart); pQryForQuoteField_InsertTimeStart = nullptr; }
		if(pQryForQuoteField_InsertTimeEnd != nullptr){ strcpy_s(pQryForQuoteField->InsertTimeEnd, pQryForQuoteField_InsertTimeEnd); pQryForQuoteField_InsertTimeEnd = nullptr; }
		if(pQryForQuoteField_InvestUnitID != nullptr){ strcpy_s(pQryForQuoteField->InvestUnitID, pQryForQuoteField_InvestUnitID); pQryForQuoteField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryForQuoteField *pQryForQuoteField)
{
	if(pQryForQuoteField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQryForQuoteField->BrokerID
		, "InvestorID", pQryForQuoteField->InvestorID
		, "InstrumentID", pQryForQuoteField->InstrumentID
		, "ExchangeID", pQryForQuoteField->ExchangeID
		, "InsertTimeStart", pQryForQuoteField->InsertTimeStart
		, "InsertTimeEnd", pQryForQuoteField->InsertTimeEnd
		, "InvestUnitID", pQryForQuoteField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeForQuoteField *pExchangeForQuoteField, PyObject *dict)
{
	static char *kwlist[] = {"ForQuoteLocalID", "ExchangeID", "ParticipantID", "ClientID", "ExchangeInstID", "TraderID", "InstallID", "InsertDate", "InsertTime", "ForQuoteStatus", "IPAddress", "MacAddress", nullptr};
	char *pExchangeForQuoteField_ForQuoteLocalID = nullptr;
	char *pExchangeForQuoteField_ExchangeID = nullptr;
	char *pExchangeForQuoteField_ParticipantID = nullptr;
	char *pExchangeForQuoteField_ClientID = nullptr;
	char *pExchangeForQuoteField_ExchangeInstID = nullptr;
	char *pExchangeForQuoteField_TraderID = nullptr;
	int pExchangeForQuoteField_InstallID = 0;
	char *pExchangeForQuoteField_InsertDate = nullptr;
	char *pExchangeForQuoteField_InsertTime = nullptr;
	char pExchangeForQuoteField_ForQuoteStatus = 0;
	char *pExchangeForQuoteField_IPAddress = nullptr;
	char *pExchangeForQuoteField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeForQuoteField, "|yyyyyyiyycyy")
		, &pExchangeForQuoteField_ForQuoteLocalID
		, &pExchangeForQuoteField_ExchangeID
		, &pExchangeForQuoteField_ParticipantID
		, &pExchangeForQuoteField_ClientID
		, &pExchangeForQuoteField_ExchangeInstID
		, &pExchangeForQuoteField_TraderID
		, &pExchangeForQuoteField_InstallID
		, &pExchangeForQuoteField_InsertDate
		, &pExchangeForQuoteField_InsertTime
		, &pExchangeForQuoteField_ForQuoteStatus
		, &pExchangeForQuoteField_IPAddress
		, &pExchangeForQuoteField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pExchangeForQuoteField_ForQuoteLocalID != nullptr){ strcpy_s(pExchangeForQuoteField->ForQuoteLocalID, pExchangeForQuoteField_ForQuoteLocalID); pExchangeForQuoteField_ForQuoteLocalID = nullptr; }
		if(pExchangeForQuoteField_ExchangeID != nullptr){ strcpy_s(pExchangeForQuoteField->ExchangeID, pExchangeForQuoteField_ExchangeID); pExchangeForQuoteField_ExchangeID = nullptr; }
		if(pExchangeForQuoteField_ParticipantID != nullptr){ strcpy_s(pExchangeForQuoteField->ParticipantID, pExchangeForQuoteField_ParticipantID); pExchangeForQuoteField_ParticipantID = nullptr; }
		if(pExchangeForQuoteField_ClientID != nullptr){ strcpy_s(pExchangeForQuoteField->ClientID, pExchangeForQuoteField_ClientID); pExchangeForQuoteField_ClientID = nullptr; }
		if(pExchangeForQuoteField_ExchangeInstID != nullptr){ strcpy_s(pExchangeForQuoteField->ExchangeInstID, pExchangeForQuoteField_ExchangeInstID); pExchangeForQuoteField_ExchangeInstID = nullptr; }
		if(pExchangeForQuoteField_TraderID != nullptr){ strcpy_s(pExchangeForQuoteField->TraderID, pExchangeForQuoteField_TraderID); pExchangeForQuoteField_TraderID = nullptr; }
		pExchangeForQuoteField->InstallID = pExchangeForQuoteField_InstallID;
		if(pExchangeForQuoteField_InsertDate != nullptr){ strcpy_s(pExchangeForQuoteField->InsertDate, pExchangeForQuoteField_InsertDate); pExchangeForQuoteField_InsertDate = nullptr; }
		if(pExchangeForQuoteField_InsertTime != nullptr){ strcpy_s(pExchangeForQuoteField->InsertTime, pExchangeForQuoteField_InsertTime); pExchangeForQuoteField_InsertTime = nullptr; }
		pExchangeForQuoteField->ForQuoteStatus = pExchangeForQuoteField_ForQuoteStatus;
		if(pExchangeForQuoteField_IPAddress != nullptr){ strcpy_s(pExchangeForQuoteField->IPAddress, pExchangeForQuoteField_IPAddress); pExchangeForQuoteField_IPAddress = nullptr; }
		if(pExchangeForQuoteField_MacAddress != nullptr){ strcpy_s(pExchangeForQuoteField->MacAddress, pExchangeForQuoteField_MacAddress); pExchangeForQuoteField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeForQuoteField *pExchangeForQuoteField)
{
	if(pExchangeForQuoteField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:y,s:y,s:c,s:y,s:y}"
		, "ForQuoteLocalID", pExchangeForQuoteField->ForQuoteLocalID
		, "ExchangeID", pExchangeForQuoteField->ExchangeID
		, "ParticipantID", pExchangeForQuoteField->ParticipantID
		, "ClientID", pExchangeForQuoteField->ClientID
		, "ExchangeInstID", pExchangeForQuoteField->ExchangeInstID
		, "TraderID", pExchangeForQuoteField->TraderID
		, "InstallID", pExchangeForQuoteField->InstallID
		, "InsertDate", pExchangeForQuoteField->InsertDate
		, "InsertTime", pExchangeForQuoteField->InsertTime
		, "ForQuoteStatus", pExchangeForQuoteField->ForQuoteStatus
		, "IPAddress", pExchangeForQuoteField->IPAddress
		, "MacAddress", pExchangeForQuoteField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryExchangeForQuoteField *pQryExchangeForQuoteField, PyObject *dict)
{
	static char *kwlist[] = {"ParticipantID", "ClientID", "ExchangeInstID", "ExchangeID", "TraderID", nullptr};
	char *pQryExchangeForQuoteField_ParticipantID = nullptr;
	char *pQryExchangeForQuoteField_ClientID = nullptr;
	char *pQryExchangeForQuoteField_ExchangeInstID = nullptr;
	char *pQryExchangeForQuoteField_ExchangeID = nullptr;
	char *pQryExchangeForQuoteField_TraderID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryExchangeForQuoteField, "|yyyyy")
		, &pQryExchangeForQuoteField_ParticipantID
		, &pQryExchangeForQuoteField_ClientID
		, &pQryExchangeForQuoteField_ExchangeInstID
		, &pQryExchangeForQuoteField_ExchangeID
		, &pQryExchangeForQuoteField_TraderID
	PyCTP_PyDict_FromStruct_END
		if(pQryExchangeForQuoteField_ParticipantID != nullptr){ strcpy_s(pQryExchangeForQuoteField->ParticipantID, pQryExchangeForQuoteField_ParticipantID); pQryExchangeForQuoteField_ParticipantID = nullptr; }
		if(pQryExchangeForQuoteField_ClientID != nullptr){ strcpy_s(pQryExchangeForQuoteField->ClientID, pQryExchangeForQuoteField_ClientID); pQryExchangeForQuoteField_ClientID = nullptr; }
		if(pQryExchangeForQuoteField_ExchangeInstID != nullptr){ strcpy_s(pQryExchangeForQuoteField->ExchangeInstID, pQryExchangeForQuoteField_ExchangeInstID); pQryExchangeForQuoteField_ExchangeInstID = nullptr; }
		if(pQryExchangeForQuoteField_ExchangeID != nullptr){ strcpy_s(pQryExchangeForQuoteField->ExchangeID, pQryExchangeForQuoteField_ExchangeID); pQryExchangeForQuoteField_ExchangeID = nullptr; }
		if(pQryExchangeForQuoteField_TraderID != nullptr){ strcpy_s(pQryExchangeForQuoteField->TraderID, pQryExchangeForQuoteField_TraderID); pQryExchangeForQuoteField_TraderID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryExchangeForQuoteField *pQryExchangeForQuoteField)
{
	if(pQryExchangeForQuoteField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "ParticipantID", pQryExchangeForQuoteField->ParticipantID
		, "ClientID", pQryExchangeForQuoteField->ClientID
		, "ExchangeInstID", pQryExchangeForQuoteField->ExchangeInstID
		, "ExchangeID", pQryExchangeForQuoteField->ExchangeID
		, "TraderID", pQryExchangeForQuoteField->TraderID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInputQuoteField *pInputQuoteField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "QuoteRef", "UserID", "AskPrice", "BidPrice", "AskVolume", "BidVolume", "RequestID", "BusinessUnit", "AskOffsetFlag", "BidOffsetFlag", "AskHedgeFlag", "BidHedgeFlag", "AskOrderRef", "BidOrderRef", "ForQuoteSysID", "ExchangeID", "InvestUnitID", "ClientID", "IPAddress", "MacAddress", nullptr};
	char *pInputQuoteField_BrokerID = nullptr;
	char *pInputQuoteField_InvestorID = nullptr;
	char *pInputQuoteField_InstrumentID = nullptr;
	char *pInputQuoteField_QuoteRef = nullptr;
	char *pInputQuoteField_UserID = nullptr;
	double pInputQuoteField_AskPrice = 0.0;
	double pInputQuoteField_BidPrice = 0.0;
	int pInputQuoteField_AskVolume = 0;
	int pInputQuoteField_BidVolume = 0;
	int pInputQuoteField_RequestID = 0;
	char *pInputQuoteField_BusinessUnit = nullptr;
	char pInputQuoteField_AskOffsetFlag = 0;
	char pInputQuoteField_BidOffsetFlag = 0;
	char pInputQuoteField_AskHedgeFlag = 0;
	char pInputQuoteField_BidHedgeFlag = 0;
	char *pInputQuoteField_AskOrderRef = nullptr;
	char *pInputQuoteField_BidOrderRef = nullptr;
	char *pInputQuoteField_ForQuoteSysID = nullptr;
	char *pInputQuoteField_ExchangeID = nullptr;
	char *pInputQuoteField_InvestUnitID = nullptr;
	char *pInputQuoteField_ClientID = nullptr;
	char *pInputQuoteField_IPAddress = nullptr;
	char *pInputQuoteField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInputQuoteField, "|yyyyyddiiiyccccyyyyyyyy")
		, &pInputQuoteField_BrokerID
		, &pInputQuoteField_InvestorID
		, &pInputQuoteField_InstrumentID
		, &pInputQuoteField_QuoteRef
		, &pInputQuoteField_UserID
		, &pInputQuoteField_AskPrice
		, &pInputQuoteField_BidPrice
		, &pInputQuoteField_AskVolume
		, &pInputQuoteField_BidVolume
		, &pInputQuoteField_RequestID
		, &pInputQuoteField_BusinessUnit
		, &pInputQuoteField_AskOffsetFlag
		, &pInputQuoteField_BidOffsetFlag
		, &pInputQuoteField_AskHedgeFlag
		, &pInputQuoteField_BidHedgeFlag
		, &pInputQuoteField_AskOrderRef
		, &pInputQuoteField_BidOrderRef
		, &pInputQuoteField_ForQuoteSysID
		, &pInputQuoteField_ExchangeID
		, &pInputQuoteField_InvestUnitID
		, &pInputQuoteField_ClientID
		, &pInputQuoteField_IPAddress
		, &pInputQuoteField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pInputQuoteField_BrokerID != nullptr){ strcpy_s(pInputQuoteField->BrokerID, pInputQuoteField_BrokerID); pInputQuoteField_BrokerID = nullptr; }
		if(pInputQuoteField_InvestorID != nullptr){ strcpy_s(pInputQuoteField->InvestorID, pInputQuoteField_InvestorID); pInputQuoteField_InvestorID = nullptr; }
		if(pInputQuoteField_InstrumentID != nullptr){ strcpy_s(pInputQuoteField->InstrumentID, pInputQuoteField_InstrumentID); pInputQuoteField_InstrumentID = nullptr; }
		if(pInputQuoteField_QuoteRef != nullptr){ strcpy_s(pInputQuoteField->QuoteRef, pInputQuoteField_QuoteRef); pInputQuoteField_QuoteRef = nullptr; }
		if(pInputQuoteField_UserID != nullptr){ strcpy_s(pInputQuoteField->UserID, pInputQuoteField_UserID); pInputQuoteField_UserID = nullptr; }
		pInputQuoteField->AskPrice = pInputQuoteField_AskPrice;
		pInputQuoteField->BidPrice = pInputQuoteField_BidPrice;
		pInputQuoteField->AskVolume = pInputQuoteField_AskVolume;
		pInputQuoteField->BidVolume = pInputQuoteField_BidVolume;
		pInputQuoteField->RequestID = pInputQuoteField_RequestID;
		if(pInputQuoteField_BusinessUnit != nullptr){ strcpy_s(pInputQuoteField->BusinessUnit, pInputQuoteField_BusinessUnit); pInputQuoteField_BusinessUnit = nullptr; }
		pInputQuoteField->AskOffsetFlag = pInputQuoteField_AskOffsetFlag;
		pInputQuoteField->BidOffsetFlag = pInputQuoteField_BidOffsetFlag;
		pInputQuoteField->AskHedgeFlag = pInputQuoteField_AskHedgeFlag;
		pInputQuoteField->BidHedgeFlag = pInputQuoteField_BidHedgeFlag;
		if(pInputQuoteField_AskOrderRef != nullptr){ strcpy_s(pInputQuoteField->AskOrderRef, pInputQuoteField_AskOrderRef); pInputQuoteField_AskOrderRef = nullptr; }
		if(pInputQuoteField_BidOrderRef != nullptr){ strcpy_s(pInputQuoteField->BidOrderRef, pInputQuoteField_BidOrderRef); pInputQuoteField_BidOrderRef = nullptr; }
		if(pInputQuoteField_ForQuoteSysID != nullptr){ strcpy_s(pInputQuoteField->ForQuoteSysID, pInputQuoteField_ForQuoteSysID); pInputQuoteField_ForQuoteSysID = nullptr; }
		if(pInputQuoteField_ExchangeID != nullptr){ strcpy_s(pInputQuoteField->ExchangeID, pInputQuoteField_ExchangeID); pInputQuoteField_ExchangeID = nullptr; }
		if(pInputQuoteField_InvestUnitID != nullptr){ strcpy_s(pInputQuoteField->InvestUnitID, pInputQuoteField_InvestUnitID); pInputQuoteField_InvestUnitID = nullptr; }
		if(pInputQuoteField_ClientID != nullptr){ strcpy_s(pInputQuoteField->ClientID, pInputQuoteField_ClientID); pInputQuoteField_ClientID = nullptr; }
		if(pInputQuoteField_IPAddress != nullptr){ strcpy_s(pInputQuoteField->IPAddress, pInputQuoteField_IPAddress); pInputQuoteField_IPAddress = nullptr; }
		if(pInputQuoteField_MacAddress != nullptr){ strcpy_s(pInputQuoteField->MacAddress, pInputQuoteField_MacAddress); pInputQuoteField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInputQuoteField *pInputQuoteField)
{
	if(pInputQuoteField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:d,s:d,s:i,s:i,s:i,s:y,s:c,s:c,s:c,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pInputQuoteField->BrokerID
		, "InvestorID", pInputQuoteField->InvestorID
		, "InstrumentID", pInputQuoteField->InstrumentID
		, "QuoteRef", pInputQuoteField->QuoteRef
		, "UserID", pInputQuoteField->UserID
		, "AskPrice", pInputQuoteField->AskPrice
		, "BidPrice", pInputQuoteField->BidPrice
		, "AskVolume", pInputQuoteField->AskVolume
		, "BidVolume", pInputQuoteField->BidVolume
		, "RequestID", pInputQuoteField->RequestID
		, "BusinessUnit", pInputQuoteField->BusinessUnit
		, "AskOffsetFlag", pInputQuoteField->AskOffsetFlag
		, "BidOffsetFlag", pInputQuoteField->BidOffsetFlag
		, "AskHedgeFlag", pInputQuoteField->AskHedgeFlag
		, "BidHedgeFlag", pInputQuoteField->BidHedgeFlag
		, "AskOrderRef", pInputQuoteField->AskOrderRef
		, "BidOrderRef", pInputQuoteField->BidOrderRef
		, "ForQuoteSysID", pInputQuoteField->ForQuoteSysID
		, "ExchangeID", pInputQuoteField->ExchangeID
		, "InvestUnitID", pInputQuoteField->InvestUnitID
		, "ClientID", pInputQuoteField->ClientID
		, "IPAddress", pInputQuoteField->IPAddress
		, "MacAddress", pInputQuoteField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInputQuoteActionField *pInputQuoteActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "QuoteActionRef", "QuoteRef", "RequestID", "FrontID", "SessionID", "ExchangeID", "QuoteSysID", "ActionFlag", "UserID", "InstrumentID", "InvestUnitID", "ClientID", "IPAddress", "MacAddress", nullptr};
	char *pInputQuoteActionField_BrokerID = nullptr;
	char *pInputQuoteActionField_InvestorID = nullptr;
	int pInputQuoteActionField_QuoteActionRef = 0;
	char *pInputQuoteActionField_QuoteRef = nullptr;
	int pInputQuoteActionField_RequestID = 0;
	int pInputQuoteActionField_FrontID = 0;
	int pInputQuoteActionField_SessionID = 0;
	char *pInputQuoteActionField_ExchangeID = nullptr;
	char *pInputQuoteActionField_QuoteSysID = nullptr;
	char pInputQuoteActionField_ActionFlag = 0;
	char *pInputQuoteActionField_UserID = nullptr;
	char *pInputQuoteActionField_InstrumentID = nullptr;
	char *pInputQuoteActionField_InvestUnitID = nullptr;
	char *pInputQuoteActionField_ClientID = nullptr;
	char *pInputQuoteActionField_IPAddress = nullptr;
	char *pInputQuoteActionField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInputQuoteActionField, "|yyiyiiiyycyyyyyy")
		, &pInputQuoteActionField_BrokerID
		, &pInputQuoteActionField_InvestorID
		, &pInputQuoteActionField_QuoteActionRef
		, &pInputQuoteActionField_QuoteRef
		, &pInputQuoteActionField_RequestID
		, &pInputQuoteActionField_FrontID
		, &pInputQuoteActionField_SessionID
		, &pInputQuoteActionField_ExchangeID
		, &pInputQuoteActionField_QuoteSysID
		, &pInputQuoteActionField_ActionFlag
		, &pInputQuoteActionField_UserID
		, &pInputQuoteActionField_InstrumentID
		, &pInputQuoteActionField_InvestUnitID
		, &pInputQuoteActionField_ClientID
		, &pInputQuoteActionField_IPAddress
		, &pInputQuoteActionField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pInputQuoteActionField_BrokerID != nullptr){ strcpy_s(pInputQuoteActionField->BrokerID, pInputQuoteActionField_BrokerID); pInputQuoteActionField_BrokerID = nullptr; }
		if(pInputQuoteActionField_InvestorID != nullptr){ strcpy_s(pInputQuoteActionField->InvestorID, pInputQuoteActionField_InvestorID); pInputQuoteActionField_InvestorID = nullptr; }
		pInputQuoteActionField->QuoteActionRef = pInputQuoteActionField_QuoteActionRef;
		if(pInputQuoteActionField_QuoteRef != nullptr){ strcpy_s(pInputQuoteActionField->QuoteRef, pInputQuoteActionField_QuoteRef); pInputQuoteActionField_QuoteRef = nullptr; }
		pInputQuoteActionField->RequestID = pInputQuoteActionField_RequestID;
		pInputQuoteActionField->FrontID = pInputQuoteActionField_FrontID;
		pInputQuoteActionField->SessionID = pInputQuoteActionField_SessionID;
		if(pInputQuoteActionField_ExchangeID != nullptr){ strcpy_s(pInputQuoteActionField->ExchangeID, pInputQuoteActionField_ExchangeID); pInputQuoteActionField_ExchangeID = nullptr; }
		if(pInputQuoteActionField_QuoteSysID != nullptr){ strcpy_s(pInputQuoteActionField->QuoteSysID, pInputQuoteActionField_QuoteSysID); pInputQuoteActionField_QuoteSysID = nullptr; }
		pInputQuoteActionField->ActionFlag = pInputQuoteActionField_ActionFlag;
		if(pInputQuoteActionField_UserID != nullptr){ strcpy_s(pInputQuoteActionField->UserID, pInputQuoteActionField_UserID); pInputQuoteActionField_UserID = nullptr; }
		if(pInputQuoteActionField_InstrumentID != nullptr){ strcpy_s(pInputQuoteActionField->InstrumentID, pInputQuoteActionField_InstrumentID); pInputQuoteActionField_InstrumentID = nullptr; }
		if(pInputQuoteActionField_InvestUnitID != nullptr){ strcpy_s(pInputQuoteActionField->InvestUnitID, pInputQuoteActionField_InvestUnitID); pInputQuoteActionField_InvestUnitID = nullptr; }
		if(pInputQuoteActionField_ClientID != nullptr){ strcpy_s(pInputQuoteActionField->ClientID, pInputQuoteActionField_ClientID); pInputQuoteActionField_ClientID = nullptr; }
		if(pInputQuoteActionField_IPAddress != nullptr){ strcpy_s(pInputQuoteActionField->IPAddress, pInputQuoteActionField_IPAddress); pInputQuoteActionField_IPAddress = nullptr; }
		if(pInputQuoteActionField_MacAddress != nullptr){ strcpy_s(pInputQuoteActionField->MacAddress, pInputQuoteActionField_MacAddress); pInputQuoteActionField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInputQuoteActionField *pInputQuoteActionField)
{
	if(pInputQuoteActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i,s:y,s:i,s:i,s:i,s:y,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pInputQuoteActionField->BrokerID
		, "InvestorID", pInputQuoteActionField->InvestorID
		, "QuoteActionRef", pInputQuoteActionField->QuoteActionRef
		, "QuoteRef", pInputQuoteActionField->QuoteRef
		, "RequestID", pInputQuoteActionField->RequestID
		, "FrontID", pInputQuoteActionField->FrontID
		, "SessionID", pInputQuoteActionField->SessionID
		, "ExchangeID", pInputQuoteActionField->ExchangeID
		, "QuoteSysID", pInputQuoteActionField->QuoteSysID
		, "ActionFlag", pInputQuoteActionField->ActionFlag
		, "UserID", pInputQuoteActionField->UserID
		, "InstrumentID", pInputQuoteActionField->InstrumentID
		, "InvestUnitID", pInputQuoteActionField->InvestUnitID
		, "ClientID", pInputQuoteActionField->ClientID
		, "IPAddress", pInputQuoteActionField->IPAddress
		, "MacAddress", pInputQuoteActionField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQuoteField *pQuoteField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "QuoteRef", "UserID", "AskPrice", "BidPrice", "AskVolume", "BidVolume", "RequestID", "BusinessUnit", "AskOffsetFlag", "BidOffsetFlag", "AskHedgeFlag", "BidHedgeFlag", "QuoteLocalID", "ExchangeID", "ParticipantID", "ClientID", "ExchangeInstID", "TraderID", "InstallID", "NotifySequence", "OrderSubmitStatus", "TradingDay", "SettlementID", "QuoteSysID", "InsertDate", "InsertTime", "CancelTime", "QuoteStatus", "ClearingPartID", "SequenceNo", "AskOrderSysID", "BidOrderSysID", "FrontID", "SessionID", "UserProductInfo", "StatusMsg", "ActiveUserID", "BrokerQuoteSeq", "AskOrderRef", "BidOrderRef", "ForQuoteSysID", "BranchID", "InvestUnitID", "AccountID", "CurrencyID", "IPAddress", "MacAddress", nullptr};
	char *pQuoteField_BrokerID = nullptr;
	char *pQuoteField_InvestorID = nullptr;
	char *pQuoteField_InstrumentID = nullptr;
	char *pQuoteField_QuoteRef = nullptr;
	char *pQuoteField_UserID = nullptr;
	double pQuoteField_AskPrice = 0.0;
	double pQuoteField_BidPrice = 0.0;
	int pQuoteField_AskVolume = 0;
	int pQuoteField_BidVolume = 0;
	int pQuoteField_RequestID = 0;
	char *pQuoteField_BusinessUnit = nullptr;
	char pQuoteField_AskOffsetFlag = 0;
	char pQuoteField_BidOffsetFlag = 0;
	char pQuoteField_AskHedgeFlag = 0;
	char pQuoteField_BidHedgeFlag = 0;
	char *pQuoteField_QuoteLocalID = nullptr;
	char *pQuoteField_ExchangeID = nullptr;
	char *pQuoteField_ParticipantID = nullptr;
	char *pQuoteField_ClientID = nullptr;
	char *pQuoteField_ExchangeInstID = nullptr;
	char *pQuoteField_TraderID = nullptr;
	int pQuoteField_InstallID = 0;
	int pQuoteField_NotifySequence = 0;
	char pQuoteField_OrderSubmitStatus = 0;
	char *pQuoteField_TradingDay = nullptr;
	int pQuoteField_SettlementID = 0;
	char *pQuoteField_QuoteSysID = nullptr;
	char *pQuoteField_InsertDate = nullptr;
	char *pQuoteField_InsertTime = nullptr;
	char *pQuoteField_CancelTime = nullptr;
	char pQuoteField_QuoteStatus = 0;
	char *pQuoteField_ClearingPartID = nullptr;
	int pQuoteField_SequenceNo = 0;
	char *pQuoteField_AskOrderSysID = nullptr;
	char *pQuoteField_BidOrderSysID = nullptr;
	int pQuoteField_FrontID = 0;
	int pQuoteField_SessionID = 0;
	char *pQuoteField_UserProductInfo = nullptr;
	char *pQuoteField_StatusMsg = nullptr;
	char *pQuoteField_ActiveUserID = nullptr;
	int pQuoteField_BrokerQuoteSeq = 0;
	char *pQuoteField_AskOrderRef = nullptr;
	char *pQuoteField_BidOrderRef = nullptr;
	char *pQuoteField_ForQuoteSysID = nullptr;
	char *pQuoteField_BranchID = nullptr;
	char *pQuoteField_InvestUnitID = nullptr;
	char *pQuoteField_AccountID = nullptr;
	char *pQuoteField_CurrencyID = nullptr;
	char *pQuoteField_IPAddress = nullptr;
	char *pQuoteField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQuoteField, "|yyyyyddiiiyccccyyyyyyiicyiyyyycyiyyiiyyyiyyyyyyyyy")
		, &pQuoteField_BrokerID
		, &pQuoteField_InvestorID
		, &pQuoteField_InstrumentID
		, &pQuoteField_QuoteRef
		, &pQuoteField_UserID
		, &pQuoteField_AskPrice
		, &pQuoteField_BidPrice
		, &pQuoteField_AskVolume
		, &pQuoteField_BidVolume
		, &pQuoteField_RequestID
		, &pQuoteField_BusinessUnit
		, &pQuoteField_AskOffsetFlag
		, &pQuoteField_BidOffsetFlag
		, &pQuoteField_AskHedgeFlag
		, &pQuoteField_BidHedgeFlag
		, &pQuoteField_QuoteLocalID
		, &pQuoteField_ExchangeID
		, &pQuoteField_ParticipantID
		, &pQuoteField_ClientID
		, &pQuoteField_ExchangeInstID
		, &pQuoteField_TraderID
		, &pQuoteField_InstallID
		, &pQuoteField_NotifySequence
		, &pQuoteField_OrderSubmitStatus
		, &pQuoteField_TradingDay
		, &pQuoteField_SettlementID
		, &pQuoteField_QuoteSysID
		, &pQuoteField_InsertDate
		, &pQuoteField_InsertTime
		, &pQuoteField_CancelTime
		, &pQuoteField_QuoteStatus
		, &pQuoteField_ClearingPartID
		, &pQuoteField_SequenceNo
		, &pQuoteField_AskOrderSysID
		, &pQuoteField_BidOrderSysID
		, &pQuoteField_FrontID
		, &pQuoteField_SessionID
		, &pQuoteField_UserProductInfo
		, &pQuoteField_StatusMsg
		, &pQuoteField_ActiveUserID
		, &pQuoteField_BrokerQuoteSeq
		, &pQuoteField_AskOrderRef
		, &pQuoteField_BidOrderRef
		, &pQuoteField_ForQuoteSysID
		, &pQuoteField_BranchID
		, &pQuoteField_InvestUnitID
		, &pQuoteField_AccountID
		, &pQuoteField_CurrencyID
		, &pQuoteField_IPAddress
		, &pQuoteField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pQuoteField_BrokerID != nullptr){ strcpy_s(pQuoteField->BrokerID, pQuoteField_BrokerID); pQuoteField_BrokerID = nullptr; }
		if(pQuoteField_InvestorID != nullptr){ strcpy_s(pQuoteField->InvestorID, pQuoteField_InvestorID); pQuoteField_InvestorID = nullptr; }
		if(pQuoteField_InstrumentID != nullptr){ strcpy_s(pQuoteField->InstrumentID, pQuoteField_InstrumentID); pQuoteField_InstrumentID = nullptr; }
		if(pQuoteField_QuoteRef != nullptr){ strcpy_s(pQuoteField->QuoteRef, pQuoteField_QuoteRef); pQuoteField_QuoteRef = nullptr; }
		if(pQuoteField_UserID != nullptr){ strcpy_s(pQuoteField->UserID, pQuoteField_UserID); pQuoteField_UserID = nullptr; }
		pQuoteField->AskPrice = pQuoteField_AskPrice;
		pQuoteField->BidPrice = pQuoteField_BidPrice;
		pQuoteField->AskVolume = pQuoteField_AskVolume;
		pQuoteField->BidVolume = pQuoteField_BidVolume;
		pQuoteField->RequestID = pQuoteField_RequestID;
		if(pQuoteField_BusinessUnit != nullptr){ strcpy_s(pQuoteField->BusinessUnit, pQuoteField_BusinessUnit); pQuoteField_BusinessUnit = nullptr; }
		pQuoteField->AskOffsetFlag = pQuoteField_AskOffsetFlag;
		pQuoteField->BidOffsetFlag = pQuoteField_BidOffsetFlag;
		pQuoteField->AskHedgeFlag = pQuoteField_AskHedgeFlag;
		pQuoteField->BidHedgeFlag = pQuoteField_BidHedgeFlag;
		if(pQuoteField_QuoteLocalID != nullptr){ strcpy_s(pQuoteField->QuoteLocalID, pQuoteField_QuoteLocalID); pQuoteField_QuoteLocalID = nullptr; }
		if(pQuoteField_ExchangeID != nullptr){ strcpy_s(pQuoteField->ExchangeID, pQuoteField_ExchangeID); pQuoteField_ExchangeID = nullptr; }
		if(pQuoteField_ParticipantID != nullptr){ strcpy_s(pQuoteField->ParticipantID, pQuoteField_ParticipantID); pQuoteField_ParticipantID = nullptr; }
		if(pQuoteField_ClientID != nullptr){ strcpy_s(pQuoteField->ClientID, pQuoteField_ClientID); pQuoteField_ClientID = nullptr; }
		if(pQuoteField_ExchangeInstID != nullptr){ strcpy_s(pQuoteField->ExchangeInstID, pQuoteField_ExchangeInstID); pQuoteField_ExchangeInstID = nullptr; }
		if(pQuoteField_TraderID != nullptr){ strcpy_s(pQuoteField->TraderID, pQuoteField_TraderID); pQuoteField_TraderID = nullptr; }
		pQuoteField->InstallID = pQuoteField_InstallID;
		pQuoteField->NotifySequence = pQuoteField_NotifySequence;
		pQuoteField->OrderSubmitStatus = pQuoteField_OrderSubmitStatus;
		if(pQuoteField_TradingDay != nullptr){ strcpy_s(pQuoteField->TradingDay, pQuoteField_TradingDay); pQuoteField_TradingDay = nullptr; }
		pQuoteField->SettlementID = pQuoteField_SettlementID;
		if(pQuoteField_QuoteSysID != nullptr){ strcpy_s(pQuoteField->QuoteSysID, pQuoteField_QuoteSysID); pQuoteField_QuoteSysID = nullptr; }
		if(pQuoteField_InsertDate != nullptr){ strcpy_s(pQuoteField->InsertDate, pQuoteField_InsertDate); pQuoteField_InsertDate = nullptr; }
		if(pQuoteField_InsertTime != nullptr){ strcpy_s(pQuoteField->InsertTime, pQuoteField_InsertTime); pQuoteField_InsertTime = nullptr; }
		if(pQuoteField_CancelTime != nullptr){ strcpy_s(pQuoteField->CancelTime, pQuoteField_CancelTime); pQuoteField_CancelTime = nullptr; }
		pQuoteField->QuoteStatus = pQuoteField_QuoteStatus;
		if(pQuoteField_ClearingPartID != nullptr){ strcpy_s(pQuoteField->ClearingPartID, pQuoteField_ClearingPartID); pQuoteField_ClearingPartID = nullptr; }
		pQuoteField->SequenceNo = pQuoteField_SequenceNo;
		if(pQuoteField_AskOrderSysID != nullptr){ strcpy_s(pQuoteField->AskOrderSysID, pQuoteField_AskOrderSysID); pQuoteField_AskOrderSysID = nullptr; }
		if(pQuoteField_BidOrderSysID != nullptr){ strcpy_s(pQuoteField->BidOrderSysID, pQuoteField_BidOrderSysID); pQuoteField_BidOrderSysID = nullptr; }
		pQuoteField->FrontID = pQuoteField_FrontID;
		pQuoteField->SessionID = pQuoteField_SessionID;
		if(pQuoteField_UserProductInfo != nullptr){ strcpy_s(pQuoteField->UserProductInfo, pQuoteField_UserProductInfo); pQuoteField_UserProductInfo = nullptr; }
		if(pQuoteField_StatusMsg != nullptr){ strcpy_s(pQuoteField->StatusMsg, pQuoteField_StatusMsg); pQuoteField_StatusMsg = nullptr; }
		if(pQuoteField_ActiveUserID != nullptr){ strcpy_s(pQuoteField->ActiveUserID, pQuoteField_ActiveUserID); pQuoteField_ActiveUserID = nullptr; }
		pQuoteField->BrokerQuoteSeq = pQuoteField_BrokerQuoteSeq;
		if(pQuoteField_AskOrderRef != nullptr){ strcpy_s(pQuoteField->AskOrderRef, pQuoteField_AskOrderRef); pQuoteField_AskOrderRef = nullptr; }
		if(pQuoteField_BidOrderRef != nullptr){ strcpy_s(pQuoteField->BidOrderRef, pQuoteField_BidOrderRef); pQuoteField_BidOrderRef = nullptr; }
		if(pQuoteField_ForQuoteSysID != nullptr){ strcpy_s(pQuoteField->ForQuoteSysID, pQuoteField_ForQuoteSysID); pQuoteField_ForQuoteSysID = nullptr; }
		if(pQuoteField_BranchID != nullptr){ strcpy_s(pQuoteField->BranchID, pQuoteField_BranchID); pQuoteField_BranchID = nullptr; }
		if(pQuoteField_InvestUnitID != nullptr){ strcpy_s(pQuoteField->InvestUnitID, pQuoteField_InvestUnitID); pQuoteField_InvestUnitID = nullptr; }
		if(pQuoteField_AccountID != nullptr){ strcpy_s(pQuoteField->AccountID, pQuoteField_AccountID); pQuoteField_AccountID = nullptr; }
		if(pQuoteField_CurrencyID != nullptr){ strcpy_s(pQuoteField->CurrencyID, pQuoteField_CurrencyID); pQuoteField_CurrencyID = nullptr; }
		if(pQuoteField_IPAddress != nullptr){ strcpy_s(pQuoteField->IPAddress, pQuoteField_IPAddress); pQuoteField_IPAddress = nullptr; }
		if(pQuoteField_MacAddress != nullptr){ strcpy_s(pQuoteField->MacAddress, pQuoteField_MacAddress); pQuoteField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQuoteField *pQuoteField)
{
	if(pQuoteField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:d,s:d,s:i,s:i,s:i,s:y,s:c,s:c,s:c,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:i,s:c,s:y,s:i,s:y,s:y,s:y,s:y,s:c,s:y,s:i,s:y,s:y,s:i,s:i,s:y,s:y,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQuoteField->BrokerID
		, "InvestorID", pQuoteField->InvestorID
		, "InstrumentID", pQuoteField->InstrumentID
		, "QuoteRef", pQuoteField->QuoteRef
		, "UserID", pQuoteField->UserID
		, "AskPrice", pQuoteField->AskPrice
		, "BidPrice", pQuoteField->BidPrice
		, "AskVolume", pQuoteField->AskVolume
		, "BidVolume", pQuoteField->BidVolume
		, "RequestID", pQuoteField->RequestID
		, "BusinessUnit", pQuoteField->BusinessUnit
		, "AskOffsetFlag", pQuoteField->AskOffsetFlag
		, "BidOffsetFlag", pQuoteField->BidOffsetFlag
		, "AskHedgeFlag", pQuoteField->AskHedgeFlag
		, "BidHedgeFlag", pQuoteField->BidHedgeFlag
		, "QuoteLocalID", pQuoteField->QuoteLocalID
		, "ExchangeID", pQuoteField->ExchangeID
		, "ParticipantID", pQuoteField->ParticipantID
		, "ClientID", pQuoteField->ClientID
		, "ExchangeInstID", pQuoteField->ExchangeInstID
		, "TraderID", pQuoteField->TraderID
		, "InstallID", pQuoteField->InstallID
		, "NotifySequence", pQuoteField->NotifySequence
		, "OrderSubmitStatus", pQuoteField->OrderSubmitStatus
		, "TradingDay", pQuoteField->TradingDay
		, "SettlementID", pQuoteField->SettlementID
		, "QuoteSysID", pQuoteField->QuoteSysID
		, "InsertDate", pQuoteField->InsertDate
		, "InsertTime", pQuoteField->InsertTime
		, "CancelTime", pQuoteField->CancelTime
		, "QuoteStatus", pQuoteField->QuoteStatus
		, "ClearingPartID", pQuoteField->ClearingPartID
		, "SequenceNo", pQuoteField->SequenceNo
		, "AskOrderSysID", pQuoteField->AskOrderSysID
		, "BidOrderSysID", pQuoteField->BidOrderSysID
		, "FrontID", pQuoteField->FrontID
		, "SessionID", pQuoteField->SessionID
		, "UserProductInfo", pQuoteField->UserProductInfo
		, "StatusMsg", pQuoteField->StatusMsg
		, "ActiveUserID", pQuoteField->ActiveUserID
		, "BrokerQuoteSeq", pQuoteField->BrokerQuoteSeq
		, "AskOrderRef", pQuoteField->AskOrderRef
		, "BidOrderRef", pQuoteField->BidOrderRef
		, "ForQuoteSysID", pQuoteField->ForQuoteSysID
		, "BranchID", pQuoteField->BranchID
		, "InvestUnitID", pQuoteField->InvestUnitID
		, "AccountID", pQuoteField->AccountID
		, "CurrencyID", pQuoteField->CurrencyID
		, "IPAddress", pQuoteField->IPAddress
		, "MacAddress", pQuoteField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQuoteActionField *pQuoteActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "QuoteActionRef", "QuoteRef", "RequestID", "FrontID", "SessionID", "ExchangeID", "QuoteSysID", "ActionFlag", "ActionDate", "ActionTime", "TraderID", "InstallID", "QuoteLocalID", "ActionLocalID", "ParticipantID", "ClientID", "BusinessUnit", "OrderActionStatus", "UserID", "StatusMsg", "InstrumentID", "BranchID", "InvestUnitID", "IPAddress", "MacAddress", nullptr};
	char *pQuoteActionField_BrokerID = nullptr;
	char *pQuoteActionField_InvestorID = nullptr;
	int pQuoteActionField_QuoteActionRef = 0;
	char *pQuoteActionField_QuoteRef = nullptr;
	int pQuoteActionField_RequestID = 0;
	int pQuoteActionField_FrontID = 0;
	int pQuoteActionField_SessionID = 0;
	char *pQuoteActionField_ExchangeID = nullptr;
	char *pQuoteActionField_QuoteSysID = nullptr;
	char pQuoteActionField_ActionFlag = 0;
	char *pQuoteActionField_ActionDate = nullptr;
	char *pQuoteActionField_ActionTime = nullptr;
	char *pQuoteActionField_TraderID = nullptr;
	int pQuoteActionField_InstallID = 0;
	char *pQuoteActionField_QuoteLocalID = nullptr;
	char *pQuoteActionField_ActionLocalID = nullptr;
	char *pQuoteActionField_ParticipantID = nullptr;
	char *pQuoteActionField_ClientID = nullptr;
	char *pQuoteActionField_BusinessUnit = nullptr;
	char pQuoteActionField_OrderActionStatus = 0;
	char *pQuoteActionField_UserID = nullptr;
	char *pQuoteActionField_StatusMsg = nullptr;
	char *pQuoteActionField_InstrumentID = nullptr;
	char *pQuoteActionField_BranchID = nullptr;
	char *pQuoteActionField_InvestUnitID = nullptr;
	char *pQuoteActionField_IPAddress = nullptr;
	char *pQuoteActionField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQuoteActionField, "|yyiyiiiyycyyyiyyyyycyyyyyyy")
		, &pQuoteActionField_BrokerID
		, &pQuoteActionField_InvestorID
		, &pQuoteActionField_QuoteActionRef
		, &pQuoteActionField_QuoteRef
		, &pQuoteActionField_RequestID
		, &pQuoteActionField_FrontID
		, &pQuoteActionField_SessionID
		, &pQuoteActionField_ExchangeID
		, &pQuoteActionField_QuoteSysID
		, &pQuoteActionField_ActionFlag
		, &pQuoteActionField_ActionDate
		, &pQuoteActionField_ActionTime
		, &pQuoteActionField_TraderID
		, &pQuoteActionField_InstallID
		, &pQuoteActionField_QuoteLocalID
		, &pQuoteActionField_ActionLocalID
		, &pQuoteActionField_ParticipantID
		, &pQuoteActionField_ClientID
		, &pQuoteActionField_BusinessUnit
		, &pQuoteActionField_OrderActionStatus
		, &pQuoteActionField_UserID
		, &pQuoteActionField_StatusMsg
		, &pQuoteActionField_InstrumentID
		, &pQuoteActionField_BranchID
		, &pQuoteActionField_InvestUnitID
		, &pQuoteActionField_IPAddress
		, &pQuoteActionField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pQuoteActionField_BrokerID != nullptr){ strcpy_s(pQuoteActionField->BrokerID, pQuoteActionField_BrokerID); pQuoteActionField_BrokerID = nullptr; }
		if(pQuoteActionField_InvestorID != nullptr){ strcpy_s(pQuoteActionField->InvestorID, pQuoteActionField_InvestorID); pQuoteActionField_InvestorID = nullptr; }
		pQuoteActionField->QuoteActionRef = pQuoteActionField_QuoteActionRef;
		if(pQuoteActionField_QuoteRef != nullptr){ strcpy_s(pQuoteActionField->QuoteRef, pQuoteActionField_QuoteRef); pQuoteActionField_QuoteRef = nullptr; }
		pQuoteActionField->RequestID = pQuoteActionField_RequestID;
		pQuoteActionField->FrontID = pQuoteActionField_FrontID;
		pQuoteActionField->SessionID = pQuoteActionField_SessionID;
		if(pQuoteActionField_ExchangeID != nullptr){ strcpy_s(pQuoteActionField->ExchangeID, pQuoteActionField_ExchangeID); pQuoteActionField_ExchangeID = nullptr; }
		if(pQuoteActionField_QuoteSysID != nullptr){ strcpy_s(pQuoteActionField->QuoteSysID, pQuoteActionField_QuoteSysID); pQuoteActionField_QuoteSysID = nullptr; }
		pQuoteActionField->ActionFlag = pQuoteActionField_ActionFlag;
		if(pQuoteActionField_ActionDate != nullptr){ strcpy_s(pQuoteActionField->ActionDate, pQuoteActionField_ActionDate); pQuoteActionField_ActionDate = nullptr; }
		if(pQuoteActionField_ActionTime != nullptr){ strcpy_s(pQuoteActionField->ActionTime, pQuoteActionField_ActionTime); pQuoteActionField_ActionTime = nullptr; }
		if(pQuoteActionField_TraderID != nullptr){ strcpy_s(pQuoteActionField->TraderID, pQuoteActionField_TraderID); pQuoteActionField_TraderID = nullptr; }
		pQuoteActionField->InstallID = pQuoteActionField_InstallID;
		if(pQuoteActionField_QuoteLocalID != nullptr){ strcpy_s(pQuoteActionField->QuoteLocalID, pQuoteActionField_QuoteLocalID); pQuoteActionField_QuoteLocalID = nullptr; }
		if(pQuoteActionField_ActionLocalID != nullptr){ strcpy_s(pQuoteActionField->ActionLocalID, pQuoteActionField_ActionLocalID); pQuoteActionField_ActionLocalID = nullptr; }
		if(pQuoteActionField_ParticipantID != nullptr){ strcpy_s(pQuoteActionField->ParticipantID, pQuoteActionField_ParticipantID); pQuoteActionField_ParticipantID = nullptr; }
		if(pQuoteActionField_ClientID != nullptr){ strcpy_s(pQuoteActionField->ClientID, pQuoteActionField_ClientID); pQuoteActionField_ClientID = nullptr; }
		if(pQuoteActionField_BusinessUnit != nullptr){ strcpy_s(pQuoteActionField->BusinessUnit, pQuoteActionField_BusinessUnit); pQuoteActionField_BusinessUnit = nullptr; }
		pQuoteActionField->OrderActionStatus = pQuoteActionField_OrderActionStatus;
		if(pQuoteActionField_UserID != nullptr){ strcpy_s(pQuoteActionField->UserID, pQuoteActionField_UserID); pQuoteActionField_UserID = nullptr; }
		if(pQuoteActionField_StatusMsg != nullptr){ strcpy_s(pQuoteActionField->StatusMsg, pQuoteActionField_StatusMsg); pQuoteActionField_StatusMsg = nullptr; }
		if(pQuoteActionField_InstrumentID != nullptr){ strcpy_s(pQuoteActionField->InstrumentID, pQuoteActionField_InstrumentID); pQuoteActionField_InstrumentID = nullptr; }
		if(pQuoteActionField_BranchID != nullptr){ strcpy_s(pQuoteActionField->BranchID, pQuoteActionField_BranchID); pQuoteActionField_BranchID = nullptr; }
		if(pQuoteActionField_InvestUnitID != nullptr){ strcpy_s(pQuoteActionField->InvestUnitID, pQuoteActionField_InvestUnitID); pQuoteActionField_InvestUnitID = nullptr; }
		if(pQuoteActionField_IPAddress != nullptr){ strcpy_s(pQuoteActionField->IPAddress, pQuoteActionField_IPAddress); pQuoteActionField_IPAddress = nullptr; }
		if(pQuoteActionField_MacAddress != nullptr){ strcpy_s(pQuoteActionField->MacAddress, pQuoteActionField_MacAddress); pQuoteActionField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQuoteActionField *pQuoteActionField)
{
	if(pQuoteActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i,s:y,s:i,s:i,s:i,s:y,s:y,s:c,s:y,s:y,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQuoteActionField->BrokerID
		, "InvestorID", pQuoteActionField->InvestorID
		, "QuoteActionRef", pQuoteActionField->QuoteActionRef
		, "QuoteRef", pQuoteActionField->QuoteRef
		, "RequestID", pQuoteActionField->RequestID
		, "FrontID", pQuoteActionField->FrontID
		, "SessionID", pQuoteActionField->SessionID
		, "ExchangeID", pQuoteActionField->ExchangeID
		, "QuoteSysID", pQuoteActionField->QuoteSysID
		, "ActionFlag", pQuoteActionField->ActionFlag
		, "ActionDate", pQuoteActionField->ActionDate
		, "ActionTime", pQuoteActionField->ActionTime
		, "TraderID", pQuoteActionField->TraderID
		, "InstallID", pQuoteActionField->InstallID
		, "QuoteLocalID", pQuoteActionField->QuoteLocalID
		, "ActionLocalID", pQuoteActionField->ActionLocalID
		, "ParticipantID", pQuoteActionField->ParticipantID
		, "ClientID", pQuoteActionField->ClientID
		, "BusinessUnit", pQuoteActionField->BusinessUnit
		, "OrderActionStatus", pQuoteActionField->OrderActionStatus
		, "UserID", pQuoteActionField->UserID
		, "StatusMsg", pQuoteActionField->StatusMsg
		, "InstrumentID", pQuoteActionField->InstrumentID
		, "BranchID", pQuoteActionField->BranchID
		, "InvestUnitID", pQuoteActionField->InvestUnitID
		, "IPAddress", pQuoteActionField->IPAddress
		, "MacAddress", pQuoteActionField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryQuoteField *pQryQuoteField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ExchangeID", "QuoteSysID", "InsertTimeStart", "InsertTimeEnd", "InvestUnitID", nullptr};
	char *pQryQuoteField_BrokerID = nullptr;
	char *pQryQuoteField_InvestorID = nullptr;
	char *pQryQuoteField_InstrumentID = nullptr;
	char *pQryQuoteField_ExchangeID = nullptr;
	char *pQryQuoteField_QuoteSysID = nullptr;
	char *pQryQuoteField_InsertTimeStart = nullptr;
	char *pQryQuoteField_InsertTimeEnd = nullptr;
	char *pQryQuoteField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryQuoteField, "|yyyyyyyy")
		, &pQryQuoteField_BrokerID
		, &pQryQuoteField_InvestorID
		, &pQryQuoteField_InstrumentID
		, &pQryQuoteField_ExchangeID
		, &pQryQuoteField_QuoteSysID
		, &pQryQuoteField_InsertTimeStart
		, &pQryQuoteField_InsertTimeEnd
		, &pQryQuoteField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryQuoteField_BrokerID != nullptr){ strcpy_s(pQryQuoteField->BrokerID, pQryQuoteField_BrokerID); pQryQuoteField_BrokerID = nullptr; }
		if(pQryQuoteField_InvestorID != nullptr){ strcpy_s(pQryQuoteField->InvestorID, pQryQuoteField_InvestorID); pQryQuoteField_InvestorID = nullptr; }
		if(pQryQuoteField_InstrumentID != nullptr){ strcpy_s(pQryQuoteField->InstrumentID, pQryQuoteField_InstrumentID); pQryQuoteField_InstrumentID = nullptr; }
		if(pQryQuoteField_ExchangeID != nullptr){ strcpy_s(pQryQuoteField->ExchangeID, pQryQuoteField_ExchangeID); pQryQuoteField_ExchangeID = nullptr; }
		if(pQryQuoteField_QuoteSysID != nullptr){ strcpy_s(pQryQuoteField->QuoteSysID, pQryQuoteField_QuoteSysID); pQryQuoteField_QuoteSysID = nullptr; }
		if(pQryQuoteField_InsertTimeStart != nullptr){ strcpy_s(pQryQuoteField->InsertTimeStart, pQryQuoteField_InsertTimeStart); pQryQuoteField_InsertTimeStart = nullptr; }
		if(pQryQuoteField_InsertTimeEnd != nullptr){ strcpy_s(pQryQuoteField->InsertTimeEnd, pQryQuoteField_InsertTimeEnd); pQryQuoteField_InsertTimeEnd = nullptr; }
		if(pQryQuoteField_InvestUnitID != nullptr){ strcpy_s(pQryQuoteField->InvestUnitID, pQryQuoteField_InvestUnitID); pQryQuoteField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryQuoteField *pQryQuoteField)
{
	if(pQryQuoteField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQryQuoteField->BrokerID
		, "InvestorID", pQryQuoteField->InvestorID
		, "InstrumentID", pQryQuoteField->InstrumentID
		, "ExchangeID", pQryQuoteField->ExchangeID
		, "QuoteSysID", pQryQuoteField->QuoteSysID
		, "InsertTimeStart", pQryQuoteField->InsertTimeStart
		, "InsertTimeEnd", pQryQuoteField->InsertTimeEnd
		, "InvestUnitID", pQryQuoteField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeQuoteField *pExchangeQuoteField, PyObject *dict)
{
	static char *kwlist[] = {"AskPrice", "BidPrice", "AskVolume", "BidVolume", "RequestID", "BusinessUnit", "AskOffsetFlag", "BidOffsetFlag", "AskHedgeFlag", "BidHedgeFlag", "QuoteLocalID", "ExchangeID", "ParticipantID", "ClientID", "ExchangeInstID", "TraderID", "InstallID", "NotifySequence", "OrderSubmitStatus", "TradingDay", "SettlementID", "QuoteSysID", "InsertDate", "InsertTime", "CancelTime", "QuoteStatus", "ClearingPartID", "SequenceNo", "AskOrderSysID", "BidOrderSysID", "ForQuoteSysID", "BranchID", "IPAddress", "MacAddress", nullptr};
	double pExchangeQuoteField_AskPrice = 0.0;
	double pExchangeQuoteField_BidPrice = 0.0;
	int pExchangeQuoteField_AskVolume = 0;
	int pExchangeQuoteField_BidVolume = 0;
	int pExchangeQuoteField_RequestID = 0;
	char *pExchangeQuoteField_BusinessUnit = nullptr;
	char pExchangeQuoteField_AskOffsetFlag = 0;
	char pExchangeQuoteField_BidOffsetFlag = 0;
	char pExchangeQuoteField_AskHedgeFlag = 0;
	char pExchangeQuoteField_BidHedgeFlag = 0;
	char *pExchangeQuoteField_QuoteLocalID = nullptr;
	char *pExchangeQuoteField_ExchangeID = nullptr;
	char *pExchangeQuoteField_ParticipantID = nullptr;
	char *pExchangeQuoteField_ClientID = nullptr;
	char *pExchangeQuoteField_ExchangeInstID = nullptr;
	char *pExchangeQuoteField_TraderID = nullptr;
	int pExchangeQuoteField_InstallID = 0;
	int pExchangeQuoteField_NotifySequence = 0;
	char pExchangeQuoteField_OrderSubmitStatus = 0;
	char *pExchangeQuoteField_TradingDay = nullptr;
	int pExchangeQuoteField_SettlementID = 0;
	char *pExchangeQuoteField_QuoteSysID = nullptr;
	char *pExchangeQuoteField_InsertDate = nullptr;
	char *pExchangeQuoteField_InsertTime = nullptr;
	char *pExchangeQuoteField_CancelTime = nullptr;
	char pExchangeQuoteField_QuoteStatus = 0;
	char *pExchangeQuoteField_ClearingPartID = nullptr;
	int pExchangeQuoteField_SequenceNo = 0;
	char *pExchangeQuoteField_AskOrderSysID = nullptr;
	char *pExchangeQuoteField_BidOrderSysID = nullptr;
	char *pExchangeQuoteField_ForQuoteSysID = nullptr;
	char *pExchangeQuoteField_BranchID = nullptr;
	char *pExchangeQuoteField_IPAddress = nullptr;
	char *pExchangeQuoteField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeQuoteField, "|ddiiiyccccyyyyyyiicyiyyyycyiyyyyyy")
		, &pExchangeQuoteField_AskPrice
		, &pExchangeQuoteField_BidPrice
		, &pExchangeQuoteField_AskVolume
		, &pExchangeQuoteField_BidVolume
		, &pExchangeQuoteField_RequestID
		, &pExchangeQuoteField_BusinessUnit
		, &pExchangeQuoteField_AskOffsetFlag
		, &pExchangeQuoteField_BidOffsetFlag
		, &pExchangeQuoteField_AskHedgeFlag
		, &pExchangeQuoteField_BidHedgeFlag
		, &pExchangeQuoteField_QuoteLocalID
		, &pExchangeQuoteField_ExchangeID
		, &pExchangeQuoteField_ParticipantID
		, &pExchangeQuoteField_ClientID
		, &pExchangeQuoteField_ExchangeInstID
		, &pExchangeQuoteField_TraderID
		, &pExchangeQuoteField_InstallID
		, &pExchangeQuoteField_NotifySequence
		, &pExchangeQuoteField_OrderSubmitStatus
		, &pExchangeQuoteField_TradingDay
		, &pExchangeQuoteField_SettlementID
		, &pExchangeQuoteField_QuoteSysID
		, &pExchangeQuoteField_InsertDate
		, &pExchangeQuoteField_InsertTime
		, &pExchangeQuoteField_CancelTime
		, &pExchangeQuoteField_QuoteStatus
		, &pExchangeQuoteField_ClearingPartID
		, &pExchangeQuoteField_SequenceNo
		, &pExchangeQuoteField_AskOrderSysID
		, &pExchangeQuoteField_BidOrderSysID
		, &pExchangeQuoteField_ForQuoteSysID
		, &pExchangeQuoteField_BranchID
		, &pExchangeQuoteField_IPAddress
		, &pExchangeQuoteField_MacAddress
	PyCTP_PyDict_FromStruct_END
		pExchangeQuoteField->AskPrice = pExchangeQuoteField_AskPrice;
		pExchangeQuoteField->BidPrice = pExchangeQuoteField_BidPrice;
		pExchangeQuoteField->AskVolume = pExchangeQuoteField_AskVolume;
		pExchangeQuoteField->BidVolume = pExchangeQuoteField_BidVolume;
		pExchangeQuoteField->RequestID = pExchangeQuoteField_RequestID;
		if(pExchangeQuoteField_BusinessUnit != nullptr){ strcpy_s(pExchangeQuoteField->BusinessUnit, pExchangeQuoteField_BusinessUnit); pExchangeQuoteField_BusinessUnit = nullptr; }
		pExchangeQuoteField->AskOffsetFlag = pExchangeQuoteField_AskOffsetFlag;
		pExchangeQuoteField->BidOffsetFlag = pExchangeQuoteField_BidOffsetFlag;
		pExchangeQuoteField->AskHedgeFlag = pExchangeQuoteField_AskHedgeFlag;
		pExchangeQuoteField->BidHedgeFlag = pExchangeQuoteField_BidHedgeFlag;
		if(pExchangeQuoteField_QuoteLocalID != nullptr){ strcpy_s(pExchangeQuoteField->QuoteLocalID, pExchangeQuoteField_QuoteLocalID); pExchangeQuoteField_QuoteLocalID = nullptr; }
		if(pExchangeQuoteField_ExchangeID != nullptr){ strcpy_s(pExchangeQuoteField->ExchangeID, pExchangeQuoteField_ExchangeID); pExchangeQuoteField_ExchangeID = nullptr; }
		if(pExchangeQuoteField_ParticipantID != nullptr){ strcpy_s(pExchangeQuoteField->ParticipantID, pExchangeQuoteField_ParticipantID); pExchangeQuoteField_ParticipantID = nullptr; }
		if(pExchangeQuoteField_ClientID != nullptr){ strcpy_s(pExchangeQuoteField->ClientID, pExchangeQuoteField_ClientID); pExchangeQuoteField_ClientID = nullptr; }
		if(pExchangeQuoteField_ExchangeInstID != nullptr){ strcpy_s(pExchangeQuoteField->ExchangeInstID, pExchangeQuoteField_ExchangeInstID); pExchangeQuoteField_ExchangeInstID = nullptr; }
		if(pExchangeQuoteField_TraderID != nullptr){ strcpy_s(pExchangeQuoteField->TraderID, pExchangeQuoteField_TraderID); pExchangeQuoteField_TraderID = nullptr; }
		pExchangeQuoteField->InstallID = pExchangeQuoteField_InstallID;
		pExchangeQuoteField->NotifySequence = pExchangeQuoteField_NotifySequence;
		pExchangeQuoteField->OrderSubmitStatus = pExchangeQuoteField_OrderSubmitStatus;
		if(pExchangeQuoteField_TradingDay != nullptr){ strcpy_s(pExchangeQuoteField->TradingDay, pExchangeQuoteField_TradingDay); pExchangeQuoteField_TradingDay = nullptr; }
		pExchangeQuoteField->SettlementID = pExchangeQuoteField_SettlementID;
		if(pExchangeQuoteField_QuoteSysID != nullptr){ strcpy_s(pExchangeQuoteField->QuoteSysID, pExchangeQuoteField_QuoteSysID); pExchangeQuoteField_QuoteSysID = nullptr; }
		if(pExchangeQuoteField_InsertDate != nullptr){ strcpy_s(pExchangeQuoteField->InsertDate, pExchangeQuoteField_InsertDate); pExchangeQuoteField_InsertDate = nullptr; }
		if(pExchangeQuoteField_InsertTime != nullptr){ strcpy_s(pExchangeQuoteField->InsertTime, pExchangeQuoteField_InsertTime); pExchangeQuoteField_InsertTime = nullptr; }
		if(pExchangeQuoteField_CancelTime != nullptr){ strcpy_s(pExchangeQuoteField->CancelTime, pExchangeQuoteField_CancelTime); pExchangeQuoteField_CancelTime = nullptr; }
		pExchangeQuoteField->QuoteStatus = pExchangeQuoteField_QuoteStatus;
		if(pExchangeQuoteField_ClearingPartID != nullptr){ strcpy_s(pExchangeQuoteField->ClearingPartID, pExchangeQuoteField_ClearingPartID); pExchangeQuoteField_ClearingPartID = nullptr; }
		pExchangeQuoteField->SequenceNo = pExchangeQuoteField_SequenceNo;
		if(pExchangeQuoteField_AskOrderSysID != nullptr){ strcpy_s(pExchangeQuoteField->AskOrderSysID, pExchangeQuoteField_AskOrderSysID); pExchangeQuoteField_AskOrderSysID = nullptr; }
		if(pExchangeQuoteField_BidOrderSysID != nullptr){ strcpy_s(pExchangeQuoteField->BidOrderSysID, pExchangeQuoteField_BidOrderSysID); pExchangeQuoteField_BidOrderSysID = nullptr; }
		if(pExchangeQuoteField_ForQuoteSysID != nullptr){ strcpy_s(pExchangeQuoteField->ForQuoteSysID, pExchangeQuoteField_ForQuoteSysID); pExchangeQuoteField_ForQuoteSysID = nullptr; }
		if(pExchangeQuoteField_BranchID != nullptr){ strcpy_s(pExchangeQuoteField->BranchID, pExchangeQuoteField_BranchID); pExchangeQuoteField_BranchID = nullptr; }
		if(pExchangeQuoteField_IPAddress != nullptr){ strcpy_s(pExchangeQuoteField->IPAddress, pExchangeQuoteField_IPAddress); pExchangeQuoteField_IPAddress = nullptr; }
		if(pExchangeQuoteField_MacAddress != nullptr){ strcpy_s(pExchangeQuoteField->MacAddress, pExchangeQuoteField_MacAddress); pExchangeQuoteField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeQuoteField *pExchangeQuoteField)
{
	if(pExchangeQuoteField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:d,s:d,s:i,s:i,s:i,s:y,s:c,s:c,s:c,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:i,s:c,s:y,s:i,s:y,s:y,s:y,s:y,s:c,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "AskPrice", pExchangeQuoteField->AskPrice
		, "BidPrice", pExchangeQuoteField->BidPrice
		, "AskVolume", pExchangeQuoteField->AskVolume
		, "BidVolume", pExchangeQuoteField->BidVolume
		, "RequestID", pExchangeQuoteField->RequestID
		, "BusinessUnit", pExchangeQuoteField->BusinessUnit
		, "AskOffsetFlag", pExchangeQuoteField->AskOffsetFlag
		, "BidOffsetFlag", pExchangeQuoteField->BidOffsetFlag
		, "AskHedgeFlag", pExchangeQuoteField->AskHedgeFlag
		, "BidHedgeFlag", pExchangeQuoteField->BidHedgeFlag
		, "QuoteLocalID", pExchangeQuoteField->QuoteLocalID
		, "ExchangeID", pExchangeQuoteField->ExchangeID
		, "ParticipantID", pExchangeQuoteField->ParticipantID
		, "ClientID", pExchangeQuoteField->ClientID
		, "ExchangeInstID", pExchangeQuoteField->ExchangeInstID
		, "TraderID", pExchangeQuoteField->TraderID
		, "InstallID", pExchangeQuoteField->InstallID
		, "NotifySequence", pExchangeQuoteField->NotifySequence
		, "OrderSubmitStatus", pExchangeQuoteField->OrderSubmitStatus
		, "TradingDay", pExchangeQuoteField->TradingDay
		, "SettlementID", pExchangeQuoteField->SettlementID
		, "QuoteSysID", pExchangeQuoteField->QuoteSysID
		, "InsertDate", pExchangeQuoteField->InsertDate
		, "InsertTime", pExchangeQuoteField->InsertTime
		, "CancelTime", pExchangeQuoteField->CancelTime
		, "QuoteStatus", pExchangeQuoteField->QuoteStatus
		, "ClearingPartID", pExchangeQuoteField->ClearingPartID
		, "SequenceNo", pExchangeQuoteField->SequenceNo
		, "AskOrderSysID", pExchangeQuoteField->AskOrderSysID
		, "BidOrderSysID", pExchangeQuoteField->BidOrderSysID
		, "ForQuoteSysID", pExchangeQuoteField->ForQuoteSysID
		, "BranchID", pExchangeQuoteField->BranchID
		, "IPAddress", pExchangeQuoteField->IPAddress
		, "MacAddress", pExchangeQuoteField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryExchangeQuoteField *pQryExchangeQuoteField, PyObject *dict)
{
	static char *kwlist[] = {"ParticipantID", "ClientID", "ExchangeInstID", "ExchangeID", "TraderID", nullptr};
	char *pQryExchangeQuoteField_ParticipantID = nullptr;
	char *pQryExchangeQuoteField_ClientID = nullptr;
	char *pQryExchangeQuoteField_ExchangeInstID = nullptr;
	char *pQryExchangeQuoteField_ExchangeID = nullptr;
	char *pQryExchangeQuoteField_TraderID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryExchangeQuoteField, "|yyyyy")
		, &pQryExchangeQuoteField_ParticipantID
		, &pQryExchangeQuoteField_ClientID
		, &pQryExchangeQuoteField_ExchangeInstID
		, &pQryExchangeQuoteField_ExchangeID
		, &pQryExchangeQuoteField_TraderID
	PyCTP_PyDict_FromStruct_END
		if(pQryExchangeQuoteField_ParticipantID != nullptr){ strcpy_s(pQryExchangeQuoteField->ParticipantID, pQryExchangeQuoteField_ParticipantID); pQryExchangeQuoteField_ParticipantID = nullptr; }
		if(pQryExchangeQuoteField_ClientID != nullptr){ strcpy_s(pQryExchangeQuoteField->ClientID, pQryExchangeQuoteField_ClientID); pQryExchangeQuoteField_ClientID = nullptr; }
		if(pQryExchangeQuoteField_ExchangeInstID != nullptr){ strcpy_s(pQryExchangeQuoteField->ExchangeInstID, pQryExchangeQuoteField_ExchangeInstID); pQryExchangeQuoteField_ExchangeInstID = nullptr; }
		if(pQryExchangeQuoteField_ExchangeID != nullptr){ strcpy_s(pQryExchangeQuoteField->ExchangeID, pQryExchangeQuoteField_ExchangeID); pQryExchangeQuoteField_ExchangeID = nullptr; }
		if(pQryExchangeQuoteField_TraderID != nullptr){ strcpy_s(pQryExchangeQuoteField->TraderID, pQryExchangeQuoteField_TraderID); pQryExchangeQuoteField_TraderID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryExchangeQuoteField *pQryExchangeQuoteField)
{
	if(pQryExchangeQuoteField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "ParticipantID", pQryExchangeQuoteField->ParticipantID
		, "ClientID", pQryExchangeQuoteField->ClientID
		, "ExchangeInstID", pQryExchangeQuoteField->ExchangeInstID
		, "ExchangeID", pQryExchangeQuoteField->ExchangeID
		, "TraderID", pQryExchangeQuoteField->TraderID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryQuoteActionField *pQryQuoteActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "ExchangeID", nullptr};
	char *pQryQuoteActionField_BrokerID = nullptr;
	char *pQryQuoteActionField_InvestorID = nullptr;
	char *pQryQuoteActionField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryQuoteActionField, "|yyy")
		, &pQryQuoteActionField_BrokerID
		, &pQryQuoteActionField_InvestorID
		, &pQryQuoteActionField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pQryQuoteActionField_BrokerID != nullptr){ strcpy_s(pQryQuoteActionField->BrokerID, pQryQuoteActionField_BrokerID); pQryQuoteActionField_BrokerID = nullptr; }
		if(pQryQuoteActionField_InvestorID != nullptr){ strcpy_s(pQryQuoteActionField->InvestorID, pQryQuoteActionField_InvestorID); pQryQuoteActionField_InvestorID = nullptr; }
		if(pQryQuoteActionField_ExchangeID != nullptr){ strcpy_s(pQryQuoteActionField->ExchangeID, pQryQuoteActionField_ExchangeID); pQryQuoteActionField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryQuoteActionField *pQryQuoteActionField)
{
	if(pQryQuoteActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pQryQuoteActionField->BrokerID
		, "InvestorID", pQryQuoteActionField->InvestorID
		, "ExchangeID", pQryQuoteActionField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeQuoteActionField *pExchangeQuoteActionField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "QuoteSysID", "ActionFlag", "ActionDate", "ActionTime", "TraderID", "InstallID", "QuoteLocalID", "ActionLocalID", "ParticipantID", "ClientID", "BusinessUnit", "OrderActionStatus", "UserID", "IPAddress", "MacAddress", nullptr};
	char *pExchangeQuoteActionField_ExchangeID = nullptr;
	char *pExchangeQuoteActionField_QuoteSysID = nullptr;
	char pExchangeQuoteActionField_ActionFlag = 0;
	char *pExchangeQuoteActionField_ActionDate = nullptr;
	char *pExchangeQuoteActionField_ActionTime = nullptr;
	char *pExchangeQuoteActionField_TraderID = nullptr;
	int pExchangeQuoteActionField_InstallID = 0;
	char *pExchangeQuoteActionField_QuoteLocalID = nullptr;
	char *pExchangeQuoteActionField_ActionLocalID = nullptr;
	char *pExchangeQuoteActionField_ParticipantID = nullptr;
	char *pExchangeQuoteActionField_ClientID = nullptr;
	char *pExchangeQuoteActionField_BusinessUnit = nullptr;
	char pExchangeQuoteActionField_OrderActionStatus = 0;
	char *pExchangeQuoteActionField_UserID = nullptr;
	char *pExchangeQuoteActionField_IPAddress = nullptr;
	char *pExchangeQuoteActionField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeQuoteActionField, "|yycyyyiyyyyycyyy")
		, &pExchangeQuoteActionField_ExchangeID
		, &pExchangeQuoteActionField_QuoteSysID
		, &pExchangeQuoteActionField_ActionFlag
		, &pExchangeQuoteActionField_ActionDate
		, &pExchangeQuoteActionField_ActionTime
		, &pExchangeQuoteActionField_TraderID
		, &pExchangeQuoteActionField_InstallID
		, &pExchangeQuoteActionField_QuoteLocalID
		, &pExchangeQuoteActionField_ActionLocalID
		, &pExchangeQuoteActionField_ParticipantID
		, &pExchangeQuoteActionField_ClientID
		, &pExchangeQuoteActionField_BusinessUnit
		, &pExchangeQuoteActionField_OrderActionStatus
		, &pExchangeQuoteActionField_UserID
		, &pExchangeQuoteActionField_IPAddress
		, &pExchangeQuoteActionField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pExchangeQuoteActionField_ExchangeID != nullptr){ strcpy_s(pExchangeQuoteActionField->ExchangeID, pExchangeQuoteActionField_ExchangeID); pExchangeQuoteActionField_ExchangeID = nullptr; }
		if(pExchangeQuoteActionField_QuoteSysID != nullptr){ strcpy_s(pExchangeQuoteActionField->QuoteSysID, pExchangeQuoteActionField_QuoteSysID); pExchangeQuoteActionField_QuoteSysID = nullptr; }
		pExchangeQuoteActionField->ActionFlag = pExchangeQuoteActionField_ActionFlag;
		if(pExchangeQuoteActionField_ActionDate != nullptr){ strcpy_s(pExchangeQuoteActionField->ActionDate, pExchangeQuoteActionField_ActionDate); pExchangeQuoteActionField_ActionDate = nullptr; }
		if(pExchangeQuoteActionField_ActionTime != nullptr){ strcpy_s(pExchangeQuoteActionField->ActionTime, pExchangeQuoteActionField_ActionTime); pExchangeQuoteActionField_ActionTime = nullptr; }
		if(pExchangeQuoteActionField_TraderID != nullptr){ strcpy_s(pExchangeQuoteActionField->TraderID, pExchangeQuoteActionField_TraderID); pExchangeQuoteActionField_TraderID = nullptr; }
		pExchangeQuoteActionField->InstallID = pExchangeQuoteActionField_InstallID;
		if(pExchangeQuoteActionField_QuoteLocalID != nullptr){ strcpy_s(pExchangeQuoteActionField->QuoteLocalID, pExchangeQuoteActionField_QuoteLocalID); pExchangeQuoteActionField_QuoteLocalID = nullptr; }
		if(pExchangeQuoteActionField_ActionLocalID != nullptr){ strcpy_s(pExchangeQuoteActionField->ActionLocalID, pExchangeQuoteActionField_ActionLocalID); pExchangeQuoteActionField_ActionLocalID = nullptr; }
		if(pExchangeQuoteActionField_ParticipantID != nullptr){ strcpy_s(pExchangeQuoteActionField->ParticipantID, pExchangeQuoteActionField_ParticipantID); pExchangeQuoteActionField_ParticipantID = nullptr; }
		if(pExchangeQuoteActionField_ClientID != nullptr){ strcpy_s(pExchangeQuoteActionField->ClientID, pExchangeQuoteActionField_ClientID); pExchangeQuoteActionField_ClientID = nullptr; }
		if(pExchangeQuoteActionField_BusinessUnit != nullptr){ strcpy_s(pExchangeQuoteActionField->BusinessUnit, pExchangeQuoteActionField_BusinessUnit); pExchangeQuoteActionField_BusinessUnit = nullptr; }
		pExchangeQuoteActionField->OrderActionStatus = pExchangeQuoteActionField_OrderActionStatus;
		if(pExchangeQuoteActionField_UserID != nullptr){ strcpy_s(pExchangeQuoteActionField->UserID, pExchangeQuoteActionField_UserID); pExchangeQuoteActionField_UserID = nullptr; }
		if(pExchangeQuoteActionField_IPAddress != nullptr){ strcpy_s(pExchangeQuoteActionField->IPAddress, pExchangeQuoteActionField_IPAddress); pExchangeQuoteActionField_IPAddress = nullptr; }
		if(pExchangeQuoteActionField_MacAddress != nullptr){ strcpy_s(pExchangeQuoteActionField->MacAddress, pExchangeQuoteActionField_MacAddress); pExchangeQuoteActionField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeQuoteActionField *pExchangeQuoteActionField)
{
	if(pExchangeQuoteActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c,s:y,s:y,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:y}"
		, "ExchangeID", pExchangeQuoteActionField->ExchangeID
		, "QuoteSysID", pExchangeQuoteActionField->QuoteSysID
		, "ActionFlag", pExchangeQuoteActionField->ActionFlag
		, "ActionDate", pExchangeQuoteActionField->ActionDate
		, "ActionTime", pExchangeQuoteActionField->ActionTime
		, "TraderID", pExchangeQuoteActionField->TraderID
		, "InstallID", pExchangeQuoteActionField->InstallID
		, "QuoteLocalID", pExchangeQuoteActionField->QuoteLocalID
		, "ActionLocalID", pExchangeQuoteActionField->ActionLocalID
		, "ParticipantID", pExchangeQuoteActionField->ParticipantID
		, "ClientID", pExchangeQuoteActionField->ClientID
		, "BusinessUnit", pExchangeQuoteActionField->BusinessUnit
		, "OrderActionStatus", pExchangeQuoteActionField->OrderActionStatus
		, "UserID", pExchangeQuoteActionField->UserID
		, "IPAddress", pExchangeQuoteActionField->IPAddress
		, "MacAddress", pExchangeQuoteActionField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryExchangeQuoteActionField *pQryExchangeQuoteActionField, PyObject *dict)
{
	static char *kwlist[] = {"ParticipantID", "ClientID", "ExchangeID", "TraderID", nullptr};
	char *pQryExchangeQuoteActionField_ParticipantID = nullptr;
	char *pQryExchangeQuoteActionField_ClientID = nullptr;
	char *pQryExchangeQuoteActionField_ExchangeID = nullptr;
	char *pQryExchangeQuoteActionField_TraderID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryExchangeQuoteActionField, "|yyyy")
		, &pQryExchangeQuoteActionField_ParticipantID
		, &pQryExchangeQuoteActionField_ClientID
		, &pQryExchangeQuoteActionField_ExchangeID
		, &pQryExchangeQuoteActionField_TraderID
	PyCTP_PyDict_FromStruct_END
		if(pQryExchangeQuoteActionField_ParticipantID != nullptr){ strcpy_s(pQryExchangeQuoteActionField->ParticipantID, pQryExchangeQuoteActionField_ParticipantID); pQryExchangeQuoteActionField_ParticipantID = nullptr; }
		if(pQryExchangeQuoteActionField_ClientID != nullptr){ strcpy_s(pQryExchangeQuoteActionField->ClientID, pQryExchangeQuoteActionField_ClientID); pQryExchangeQuoteActionField_ClientID = nullptr; }
		if(pQryExchangeQuoteActionField_ExchangeID != nullptr){ strcpy_s(pQryExchangeQuoteActionField->ExchangeID, pQryExchangeQuoteActionField_ExchangeID); pQryExchangeQuoteActionField_ExchangeID = nullptr; }
		if(pQryExchangeQuoteActionField_TraderID != nullptr){ strcpy_s(pQryExchangeQuoteActionField->TraderID, pQryExchangeQuoteActionField_TraderID); pQryExchangeQuoteActionField_TraderID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryExchangeQuoteActionField *pQryExchangeQuoteActionField)
{
	if(pQryExchangeQuoteActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y}"
		, "ParticipantID", pQryExchangeQuoteActionField->ParticipantID
		, "ClientID", pQryExchangeQuoteActionField->ClientID
		, "ExchangeID", pQryExchangeQuoteActionField->ExchangeID
		, "TraderID", pQryExchangeQuoteActionField->TraderID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcOptionInstrDeltaField *pOptionInstrDeltaField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "InvestorRange", "BrokerID", "InvestorID", "Delta", nullptr};
	char *pOptionInstrDeltaField_InstrumentID = nullptr;
	char pOptionInstrDeltaField_InvestorRange = 0;
	char *pOptionInstrDeltaField_BrokerID = nullptr;
	char *pOptionInstrDeltaField_InvestorID = nullptr;
	double pOptionInstrDeltaField_Delta = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pOptionInstrDeltaField, "|ycyyd")
		, &pOptionInstrDeltaField_InstrumentID
		, &pOptionInstrDeltaField_InvestorRange
		, &pOptionInstrDeltaField_BrokerID
		, &pOptionInstrDeltaField_InvestorID
		, &pOptionInstrDeltaField_Delta
	PyCTP_PyDict_FromStruct_END
		if(pOptionInstrDeltaField_InstrumentID != nullptr){ strcpy_s(pOptionInstrDeltaField->InstrumentID, pOptionInstrDeltaField_InstrumentID); pOptionInstrDeltaField_InstrumentID = nullptr; }
		pOptionInstrDeltaField->InvestorRange = pOptionInstrDeltaField_InvestorRange;
		if(pOptionInstrDeltaField_BrokerID != nullptr){ strcpy_s(pOptionInstrDeltaField->BrokerID, pOptionInstrDeltaField_BrokerID); pOptionInstrDeltaField_BrokerID = nullptr; }
		if(pOptionInstrDeltaField_InvestorID != nullptr){ strcpy_s(pOptionInstrDeltaField->InvestorID, pOptionInstrDeltaField_InvestorID); pOptionInstrDeltaField_InvestorID = nullptr; }
		pOptionInstrDeltaField->Delta = pOptionInstrDeltaField_Delta;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcOptionInstrDeltaField *pOptionInstrDeltaField)
{
	if(pOptionInstrDeltaField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y,s:d}"
		, "InstrumentID", pOptionInstrDeltaField->InstrumentID
		, "InvestorRange", pOptionInstrDeltaField->InvestorRange
		, "BrokerID", pOptionInstrDeltaField->BrokerID
		, "InvestorID", pOptionInstrDeltaField->InvestorID
		, "Delta", pOptionInstrDeltaField->Delta
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcForQuoteRspField *pForQuoteRspField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "InstrumentID", "ForQuoteSysID", "ForQuoteTime", "ActionDay", "ExchangeID", nullptr};
	char *pForQuoteRspField_TradingDay = nullptr;
	char *pForQuoteRspField_InstrumentID = nullptr;
	char *pForQuoteRspField_ForQuoteSysID = nullptr;
	char *pForQuoteRspField_ForQuoteTime = nullptr;
	char *pForQuoteRspField_ActionDay = nullptr;
	char *pForQuoteRspField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pForQuoteRspField, "|yyyyyy")
		, &pForQuoteRspField_TradingDay
		, &pForQuoteRspField_InstrumentID
		, &pForQuoteRspField_ForQuoteSysID
		, &pForQuoteRspField_ForQuoteTime
		, &pForQuoteRspField_ActionDay
		, &pForQuoteRspField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pForQuoteRspField_TradingDay != nullptr){ strcpy_s(pForQuoteRspField->TradingDay, pForQuoteRspField_TradingDay); pForQuoteRspField_TradingDay = nullptr; }
		if(pForQuoteRspField_InstrumentID != nullptr){ strcpy_s(pForQuoteRspField->InstrumentID, pForQuoteRspField_InstrumentID); pForQuoteRspField_InstrumentID = nullptr; }
		if(pForQuoteRspField_ForQuoteSysID != nullptr){ strcpy_s(pForQuoteRspField->ForQuoteSysID, pForQuoteRspField_ForQuoteSysID); pForQuoteRspField_ForQuoteSysID = nullptr; }
		if(pForQuoteRspField_ForQuoteTime != nullptr){ strcpy_s(pForQuoteRspField->ForQuoteTime, pForQuoteRspField_ForQuoteTime); pForQuoteRspField_ForQuoteTime = nullptr; }
		if(pForQuoteRspField_ActionDay != nullptr){ strcpy_s(pForQuoteRspField->ActionDay, pForQuoteRspField_ActionDay); pForQuoteRspField_ActionDay = nullptr; }
		if(pForQuoteRspField_ExchangeID != nullptr){ strcpy_s(pForQuoteRspField->ExchangeID, pForQuoteRspField_ExchangeID); pForQuoteRspField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcForQuoteRspField *pForQuoteRspField)
{
	if(pForQuoteRspField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y}"
		, "TradingDay", pForQuoteRspField->TradingDay
		, "InstrumentID", pForQuoteRspField->InstrumentID
		, "ForQuoteSysID", pForQuoteRspField->ForQuoteSysID
		, "ForQuoteTime", pForQuoteRspField->ForQuoteTime
		, "ActionDay", pForQuoteRspField->ActionDay
		, "ExchangeID", pForQuoteRspField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcStrikeOffsetField *pStrikeOffsetField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "InvestorRange", "BrokerID", "InvestorID", "Offset", "OffsetType", nullptr};
	char *pStrikeOffsetField_InstrumentID = nullptr;
	char pStrikeOffsetField_InvestorRange = 0;
	char *pStrikeOffsetField_BrokerID = nullptr;
	char *pStrikeOffsetField_InvestorID = nullptr;
	double pStrikeOffsetField_Offset = 0.0;
	char pStrikeOffsetField_OffsetType = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pStrikeOffsetField, "|ycyydc")
		, &pStrikeOffsetField_InstrumentID
		, &pStrikeOffsetField_InvestorRange
		, &pStrikeOffsetField_BrokerID
		, &pStrikeOffsetField_InvestorID
		, &pStrikeOffsetField_Offset
		, &pStrikeOffsetField_OffsetType
	PyCTP_PyDict_FromStruct_END
		if(pStrikeOffsetField_InstrumentID != nullptr){ strcpy_s(pStrikeOffsetField->InstrumentID, pStrikeOffsetField_InstrumentID); pStrikeOffsetField_InstrumentID = nullptr; }
		pStrikeOffsetField->InvestorRange = pStrikeOffsetField_InvestorRange;
		if(pStrikeOffsetField_BrokerID != nullptr){ strcpy_s(pStrikeOffsetField->BrokerID, pStrikeOffsetField_BrokerID); pStrikeOffsetField_BrokerID = nullptr; }
		if(pStrikeOffsetField_InvestorID != nullptr){ strcpy_s(pStrikeOffsetField->InvestorID, pStrikeOffsetField_InvestorID); pStrikeOffsetField_InvestorID = nullptr; }
		pStrikeOffsetField->Offset = pStrikeOffsetField_Offset;
		pStrikeOffsetField->OffsetType = pStrikeOffsetField_OffsetType;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcStrikeOffsetField *pStrikeOffsetField)
{
	if(pStrikeOffsetField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y,s:d,s:c}"
		, "InstrumentID", pStrikeOffsetField->InstrumentID
		, "InvestorRange", pStrikeOffsetField->InvestorRange
		, "BrokerID", pStrikeOffsetField->BrokerID
		, "InvestorID", pStrikeOffsetField->InvestorID
		, "Offset", pStrikeOffsetField->Offset
		, "OffsetType", pStrikeOffsetField->OffsetType
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryStrikeOffsetField *pQryStrikeOffsetField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", nullptr};
	char *pQryStrikeOffsetField_BrokerID = nullptr;
	char *pQryStrikeOffsetField_InvestorID = nullptr;
	char *pQryStrikeOffsetField_InstrumentID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryStrikeOffsetField, "|yyy")
		, &pQryStrikeOffsetField_BrokerID
		, &pQryStrikeOffsetField_InvestorID
		, &pQryStrikeOffsetField_InstrumentID
	PyCTP_PyDict_FromStruct_END
		if(pQryStrikeOffsetField_BrokerID != nullptr){ strcpy_s(pQryStrikeOffsetField->BrokerID, pQryStrikeOffsetField_BrokerID); pQryStrikeOffsetField_BrokerID = nullptr; }
		if(pQryStrikeOffsetField_InvestorID != nullptr){ strcpy_s(pQryStrikeOffsetField->InvestorID, pQryStrikeOffsetField_InvestorID); pQryStrikeOffsetField_InvestorID = nullptr; }
		if(pQryStrikeOffsetField_InstrumentID != nullptr){ strcpy_s(pQryStrikeOffsetField->InstrumentID, pQryStrikeOffsetField_InstrumentID); pQryStrikeOffsetField_InstrumentID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryStrikeOffsetField *pQryStrikeOffsetField)
{
	if(pQryStrikeOffsetField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pQryStrikeOffsetField->BrokerID
		, "InvestorID", pQryStrikeOffsetField->InvestorID
		, "InstrumentID", pQryStrikeOffsetField->InstrumentID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInputBatchOrderActionField *pInputBatchOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "OrderActionRef", "RequestID", "FrontID", "SessionID", "ExchangeID", "UserID", "InvestUnitID", "IPAddress", "MacAddress", nullptr};
	char *pInputBatchOrderActionField_BrokerID = nullptr;
	char *pInputBatchOrderActionField_InvestorID = nullptr;
	int pInputBatchOrderActionField_OrderActionRef = 0;
	int pInputBatchOrderActionField_RequestID = 0;
	int pInputBatchOrderActionField_FrontID = 0;
	int pInputBatchOrderActionField_SessionID = 0;
	char *pInputBatchOrderActionField_ExchangeID = nullptr;
	char *pInputBatchOrderActionField_UserID = nullptr;
	char *pInputBatchOrderActionField_InvestUnitID = nullptr;
	char *pInputBatchOrderActionField_IPAddress = nullptr;
	char *pInputBatchOrderActionField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInputBatchOrderActionField, "|yyiiiiyyyyy")
		, &pInputBatchOrderActionField_BrokerID
		, &pInputBatchOrderActionField_InvestorID
		, &pInputBatchOrderActionField_OrderActionRef
		, &pInputBatchOrderActionField_RequestID
		, &pInputBatchOrderActionField_FrontID
		, &pInputBatchOrderActionField_SessionID
		, &pInputBatchOrderActionField_ExchangeID
		, &pInputBatchOrderActionField_UserID
		, &pInputBatchOrderActionField_InvestUnitID
		, &pInputBatchOrderActionField_IPAddress
		, &pInputBatchOrderActionField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pInputBatchOrderActionField_BrokerID != nullptr){ strcpy_s(pInputBatchOrderActionField->BrokerID, pInputBatchOrderActionField_BrokerID); pInputBatchOrderActionField_BrokerID = nullptr; }
		if(pInputBatchOrderActionField_InvestorID != nullptr){ strcpy_s(pInputBatchOrderActionField->InvestorID, pInputBatchOrderActionField_InvestorID); pInputBatchOrderActionField_InvestorID = nullptr; }
		pInputBatchOrderActionField->OrderActionRef = pInputBatchOrderActionField_OrderActionRef;
		pInputBatchOrderActionField->RequestID = pInputBatchOrderActionField_RequestID;
		pInputBatchOrderActionField->FrontID = pInputBatchOrderActionField_FrontID;
		pInputBatchOrderActionField->SessionID = pInputBatchOrderActionField_SessionID;
		if(pInputBatchOrderActionField_ExchangeID != nullptr){ strcpy_s(pInputBatchOrderActionField->ExchangeID, pInputBatchOrderActionField_ExchangeID); pInputBatchOrderActionField_ExchangeID = nullptr; }
		if(pInputBatchOrderActionField_UserID != nullptr){ strcpy_s(pInputBatchOrderActionField->UserID, pInputBatchOrderActionField_UserID); pInputBatchOrderActionField_UserID = nullptr; }
		if(pInputBatchOrderActionField_InvestUnitID != nullptr){ strcpy_s(pInputBatchOrderActionField->InvestUnitID, pInputBatchOrderActionField_InvestUnitID); pInputBatchOrderActionField_InvestUnitID = nullptr; }
		if(pInputBatchOrderActionField_IPAddress != nullptr){ strcpy_s(pInputBatchOrderActionField->IPAddress, pInputBatchOrderActionField_IPAddress); pInputBatchOrderActionField_IPAddress = nullptr; }
		if(pInputBatchOrderActionField_MacAddress != nullptr){ strcpy_s(pInputBatchOrderActionField->MacAddress, pInputBatchOrderActionField_MacAddress); pInputBatchOrderActionField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInputBatchOrderActionField *pInputBatchOrderActionField)
{
	if(pInputBatchOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i,s:i,s:i,s:i,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pInputBatchOrderActionField->BrokerID
		, "InvestorID", pInputBatchOrderActionField->InvestorID
		, "OrderActionRef", pInputBatchOrderActionField->OrderActionRef
		, "RequestID", pInputBatchOrderActionField->RequestID
		, "FrontID", pInputBatchOrderActionField->FrontID
		, "SessionID", pInputBatchOrderActionField->SessionID
		, "ExchangeID", pInputBatchOrderActionField->ExchangeID
		, "UserID", pInputBatchOrderActionField->UserID
		, "InvestUnitID", pInputBatchOrderActionField->InvestUnitID
		, "IPAddress", pInputBatchOrderActionField->IPAddress
		, "MacAddress", pInputBatchOrderActionField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcBatchOrderActionField *pBatchOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "OrderActionRef", "RequestID", "FrontID", "SessionID", "ExchangeID", "ActionDate", "ActionTime", "TraderID", "InstallID", "ActionLocalID", "ParticipantID", "ClientID", "BusinessUnit", "OrderActionStatus", "UserID", "StatusMsg", "InvestUnitID", "IPAddress", "MacAddress", nullptr};
	char *pBatchOrderActionField_BrokerID = nullptr;
	char *pBatchOrderActionField_InvestorID = nullptr;
	int pBatchOrderActionField_OrderActionRef = 0;
	int pBatchOrderActionField_RequestID = 0;
	int pBatchOrderActionField_FrontID = 0;
	int pBatchOrderActionField_SessionID = 0;
	char *pBatchOrderActionField_ExchangeID = nullptr;
	char *pBatchOrderActionField_ActionDate = nullptr;
	char *pBatchOrderActionField_ActionTime = nullptr;
	char *pBatchOrderActionField_TraderID = nullptr;
	int pBatchOrderActionField_InstallID = 0;
	char *pBatchOrderActionField_ActionLocalID = nullptr;
	char *pBatchOrderActionField_ParticipantID = nullptr;
	char *pBatchOrderActionField_ClientID = nullptr;
	char *pBatchOrderActionField_BusinessUnit = nullptr;
	char pBatchOrderActionField_OrderActionStatus = 0;
	char *pBatchOrderActionField_UserID = nullptr;
	char *pBatchOrderActionField_StatusMsg = nullptr;
	char *pBatchOrderActionField_InvestUnitID = nullptr;
	char *pBatchOrderActionField_IPAddress = nullptr;
	char *pBatchOrderActionField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pBatchOrderActionField, "|yyiiiiyyyyiyyyycyyyyy")
		, &pBatchOrderActionField_BrokerID
		, &pBatchOrderActionField_InvestorID
		, &pBatchOrderActionField_OrderActionRef
		, &pBatchOrderActionField_RequestID
		, &pBatchOrderActionField_FrontID
		, &pBatchOrderActionField_SessionID
		, &pBatchOrderActionField_ExchangeID
		, &pBatchOrderActionField_ActionDate
		, &pBatchOrderActionField_ActionTime
		, &pBatchOrderActionField_TraderID
		, &pBatchOrderActionField_InstallID
		, &pBatchOrderActionField_ActionLocalID
		, &pBatchOrderActionField_ParticipantID
		, &pBatchOrderActionField_ClientID
		, &pBatchOrderActionField_BusinessUnit
		, &pBatchOrderActionField_OrderActionStatus
		, &pBatchOrderActionField_UserID
		, &pBatchOrderActionField_StatusMsg
		, &pBatchOrderActionField_InvestUnitID
		, &pBatchOrderActionField_IPAddress
		, &pBatchOrderActionField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pBatchOrderActionField_BrokerID != nullptr){ strcpy_s(pBatchOrderActionField->BrokerID, pBatchOrderActionField_BrokerID); pBatchOrderActionField_BrokerID = nullptr; }
		if(pBatchOrderActionField_InvestorID != nullptr){ strcpy_s(pBatchOrderActionField->InvestorID, pBatchOrderActionField_InvestorID); pBatchOrderActionField_InvestorID = nullptr; }
		pBatchOrderActionField->OrderActionRef = pBatchOrderActionField_OrderActionRef;
		pBatchOrderActionField->RequestID = pBatchOrderActionField_RequestID;
		pBatchOrderActionField->FrontID = pBatchOrderActionField_FrontID;
		pBatchOrderActionField->SessionID = pBatchOrderActionField_SessionID;
		if(pBatchOrderActionField_ExchangeID != nullptr){ strcpy_s(pBatchOrderActionField->ExchangeID, pBatchOrderActionField_ExchangeID); pBatchOrderActionField_ExchangeID = nullptr; }
		if(pBatchOrderActionField_ActionDate != nullptr){ strcpy_s(pBatchOrderActionField->ActionDate, pBatchOrderActionField_ActionDate); pBatchOrderActionField_ActionDate = nullptr; }
		if(pBatchOrderActionField_ActionTime != nullptr){ strcpy_s(pBatchOrderActionField->ActionTime, pBatchOrderActionField_ActionTime); pBatchOrderActionField_ActionTime = nullptr; }
		if(pBatchOrderActionField_TraderID != nullptr){ strcpy_s(pBatchOrderActionField->TraderID, pBatchOrderActionField_TraderID); pBatchOrderActionField_TraderID = nullptr; }
		pBatchOrderActionField->InstallID = pBatchOrderActionField_InstallID;
		if(pBatchOrderActionField_ActionLocalID != nullptr){ strcpy_s(pBatchOrderActionField->ActionLocalID, pBatchOrderActionField_ActionLocalID); pBatchOrderActionField_ActionLocalID = nullptr; }
		if(pBatchOrderActionField_ParticipantID != nullptr){ strcpy_s(pBatchOrderActionField->ParticipantID, pBatchOrderActionField_ParticipantID); pBatchOrderActionField_ParticipantID = nullptr; }
		if(pBatchOrderActionField_ClientID != nullptr){ strcpy_s(pBatchOrderActionField->ClientID, pBatchOrderActionField_ClientID); pBatchOrderActionField_ClientID = nullptr; }
		if(pBatchOrderActionField_BusinessUnit != nullptr){ strcpy_s(pBatchOrderActionField->BusinessUnit, pBatchOrderActionField_BusinessUnit); pBatchOrderActionField_BusinessUnit = nullptr; }
		pBatchOrderActionField->OrderActionStatus = pBatchOrderActionField_OrderActionStatus;
		if(pBatchOrderActionField_UserID != nullptr){ strcpy_s(pBatchOrderActionField->UserID, pBatchOrderActionField_UserID); pBatchOrderActionField_UserID = nullptr; }
		if(pBatchOrderActionField_StatusMsg != nullptr){ strcpy_s(pBatchOrderActionField->StatusMsg, pBatchOrderActionField_StatusMsg); pBatchOrderActionField_StatusMsg = nullptr; }
		if(pBatchOrderActionField_InvestUnitID != nullptr){ strcpy_s(pBatchOrderActionField->InvestUnitID, pBatchOrderActionField_InvestUnitID); pBatchOrderActionField_InvestUnitID = nullptr; }
		if(pBatchOrderActionField_IPAddress != nullptr){ strcpy_s(pBatchOrderActionField->IPAddress, pBatchOrderActionField_IPAddress); pBatchOrderActionField_IPAddress = nullptr; }
		if(pBatchOrderActionField_MacAddress != nullptr){ strcpy_s(pBatchOrderActionField->MacAddress, pBatchOrderActionField_MacAddress); pBatchOrderActionField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcBatchOrderActionField *pBatchOrderActionField)
{
	if(pBatchOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i,s:i,s:i,s:i,s:y,s:y,s:y,s:y,s:i,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pBatchOrderActionField->BrokerID
		, "InvestorID", pBatchOrderActionField->InvestorID
		, "OrderActionRef", pBatchOrderActionField->OrderActionRef
		, "RequestID", pBatchOrderActionField->RequestID
		, "FrontID", pBatchOrderActionField->FrontID
		, "SessionID", pBatchOrderActionField->SessionID
		, "ExchangeID", pBatchOrderActionField->ExchangeID
		, "ActionDate", pBatchOrderActionField->ActionDate
		, "ActionTime", pBatchOrderActionField->ActionTime
		, "TraderID", pBatchOrderActionField->TraderID
		, "InstallID", pBatchOrderActionField->InstallID
		, "ActionLocalID", pBatchOrderActionField->ActionLocalID
		, "ParticipantID", pBatchOrderActionField->ParticipantID
		, "ClientID", pBatchOrderActionField->ClientID
		, "BusinessUnit", pBatchOrderActionField->BusinessUnit
		, "OrderActionStatus", pBatchOrderActionField->OrderActionStatus
		, "UserID", pBatchOrderActionField->UserID
		, "StatusMsg", pBatchOrderActionField->StatusMsg
		, "InvestUnitID", pBatchOrderActionField->InvestUnitID
		, "IPAddress", pBatchOrderActionField->IPAddress
		, "MacAddress", pBatchOrderActionField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeBatchOrderActionField *pExchangeBatchOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "ActionDate", "ActionTime", "TraderID", "InstallID", "ActionLocalID", "ParticipantID", "ClientID", "BusinessUnit", "OrderActionStatus", "UserID", "IPAddress", "MacAddress", nullptr};
	char *pExchangeBatchOrderActionField_ExchangeID = nullptr;
	char *pExchangeBatchOrderActionField_ActionDate = nullptr;
	char *pExchangeBatchOrderActionField_ActionTime = nullptr;
	char *pExchangeBatchOrderActionField_TraderID = nullptr;
	int pExchangeBatchOrderActionField_InstallID = 0;
	char *pExchangeBatchOrderActionField_ActionLocalID = nullptr;
	char *pExchangeBatchOrderActionField_ParticipantID = nullptr;
	char *pExchangeBatchOrderActionField_ClientID = nullptr;
	char *pExchangeBatchOrderActionField_BusinessUnit = nullptr;
	char pExchangeBatchOrderActionField_OrderActionStatus = 0;
	char *pExchangeBatchOrderActionField_UserID = nullptr;
	char *pExchangeBatchOrderActionField_IPAddress = nullptr;
	char *pExchangeBatchOrderActionField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeBatchOrderActionField, "|yyyyiyyyycyyy")
		, &pExchangeBatchOrderActionField_ExchangeID
		, &pExchangeBatchOrderActionField_ActionDate
		, &pExchangeBatchOrderActionField_ActionTime
		, &pExchangeBatchOrderActionField_TraderID
		, &pExchangeBatchOrderActionField_InstallID
		, &pExchangeBatchOrderActionField_ActionLocalID
		, &pExchangeBatchOrderActionField_ParticipantID
		, &pExchangeBatchOrderActionField_ClientID
		, &pExchangeBatchOrderActionField_BusinessUnit
		, &pExchangeBatchOrderActionField_OrderActionStatus
		, &pExchangeBatchOrderActionField_UserID
		, &pExchangeBatchOrderActionField_IPAddress
		, &pExchangeBatchOrderActionField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pExchangeBatchOrderActionField_ExchangeID != nullptr){ strcpy_s(pExchangeBatchOrderActionField->ExchangeID, pExchangeBatchOrderActionField_ExchangeID); pExchangeBatchOrderActionField_ExchangeID = nullptr; }
		if(pExchangeBatchOrderActionField_ActionDate != nullptr){ strcpy_s(pExchangeBatchOrderActionField->ActionDate, pExchangeBatchOrderActionField_ActionDate); pExchangeBatchOrderActionField_ActionDate = nullptr; }
		if(pExchangeBatchOrderActionField_ActionTime != nullptr){ strcpy_s(pExchangeBatchOrderActionField->ActionTime, pExchangeBatchOrderActionField_ActionTime); pExchangeBatchOrderActionField_ActionTime = nullptr; }
		if(pExchangeBatchOrderActionField_TraderID != nullptr){ strcpy_s(pExchangeBatchOrderActionField->TraderID, pExchangeBatchOrderActionField_TraderID); pExchangeBatchOrderActionField_TraderID = nullptr; }
		pExchangeBatchOrderActionField->InstallID = pExchangeBatchOrderActionField_InstallID;
		if(pExchangeBatchOrderActionField_ActionLocalID != nullptr){ strcpy_s(pExchangeBatchOrderActionField->ActionLocalID, pExchangeBatchOrderActionField_ActionLocalID); pExchangeBatchOrderActionField_ActionLocalID = nullptr; }
		if(pExchangeBatchOrderActionField_ParticipantID != nullptr){ strcpy_s(pExchangeBatchOrderActionField->ParticipantID, pExchangeBatchOrderActionField_ParticipantID); pExchangeBatchOrderActionField_ParticipantID = nullptr; }
		if(pExchangeBatchOrderActionField_ClientID != nullptr){ strcpy_s(pExchangeBatchOrderActionField->ClientID, pExchangeBatchOrderActionField_ClientID); pExchangeBatchOrderActionField_ClientID = nullptr; }
		if(pExchangeBatchOrderActionField_BusinessUnit != nullptr){ strcpy_s(pExchangeBatchOrderActionField->BusinessUnit, pExchangeBatchOrderActionField_BusinessUnit); pExchangeBatchOrderActionField_BusinessUnit = nullptr; }
		pExchangeBatchOrderActionField->OrderActionStatus = pExchangeBatchOrderActionField_OrderActionStatus;
		if(pExchangeBatchOrderActionField_UserID != nullptr){ strcpy_s(pExchangeBatchOrderActionField->UserID, pExchangeBatchOrderActionField_UserID); pExchangeBatchOrderActionField_UserID = nullptr; }
		if(pExchangeBatchOrderActionField_IPAddress != nullptr){ strcpy_s(pExchangeBatchOrderActionField->IPAddress, pExchangeBatchOrderActionField_IPAddress); pExchangeBatchOrderActionField_IPAddress = nullptr; }
		if(pExchangeBatchOrderActionField_MacAddress != nullptr){ strcpy_s(pExchangeBatchOrderActionField->MacAddress, pExchangeBatchOrderActionField_MacAddress); pExchangeBatchOrderActionField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeBatchOrderActionField *pExchangeBatchOrderActionField)
{
	if(pExchangeBatchOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:i,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:y}"
		, "ExchangeID", pExchangeBatchOrderActionField->ExchangeID
		, "ActionDate", pExchangeBatchOrderActionField->ActionDate
		, "ActionTime", pExchangeBatchOrderActionField->ActionTime
		, "TraderID", pExchangeBatchOrderActionField->TraderID
		, "InstallID", pExchangeBatchOrderActionField->InstallID
		, "ActionLocalID", pExchangeBatchOrderActionField->ActionLocalID
		, "ParticipantID", pExchangeBatchOrderActionField->ParticipantID
		, "ClientID", pExchangeBatchOrderActionField->ClientID
		, "BusinessUnit", pExchangeBatchOrderActionField->BusinessUnit
		, "OrderActionStatus", pExchangeBatchOrderActionField->OrderActionStatus
		, "UserID", pExchangeBatchOrderActionField->UserID
		, "IPAddress", pExchangeBatchOrderActionField->IPAddress
		, "MacAddress", pExchangeBatchOrderActionField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryBatchOrderActionField *pQryBatchOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "ExchangeID", nullptr};
	char *pQryBatchOrderActionField_BrokerID = nullptr;
	char *pQryBatchOrderActionField_InvestorID = nullptr;
	char *pQryBatchOrderActionField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryBatchOrderActionField, "|yyy")
		, &pQryBatchOrderActionField_BrokerID
		, &pQryBatchOrderActionField_InvestorID
		, &pQryBatchOrderActionField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pQryBatchOrderActionField_BrokerID != nullptr){ strcpy_s(pQryBatchOrderActionField->BrokerID, pQryBatchOrderActionField_BrokerID); pQryBatchOrderActionField_BrokerID = nullptr; }
		if(pQryBatchOrderActionField_InvestorID != nullptr){ strcpy_s(pQryBatchOrderActionField->InvestorID, pQryBatchOrderActionField_InvestorID); pQryBatchOrderActionField_InvestorID = nullptr; }
		if(pQryBatchOrderActionField_ExchangeID != nullptr){ strcpy_s(pQryBatchOrderActionField->ExchangeID, pQryBatchOrderActionField_ExchangeID); pQryBatchOrderActionField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryBatchOrderActionField *pQryBatchOrderActionField)
{
	if(pQryBatchOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pQryBatchOrderActionField->BrokerID
		, "InvestorID", pQryBatchOrderActionField->InvestorID
		, "ExchangeID", pQryBatchOrderActionField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcCombInstrumentGuardField *pCombInstrumentGuardField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InstrumentID", "GuarantRatio", "ExchangeID", nullptr};
	char *pCombInstrumentGuardField_BrokerID = nullptr;
	char *pCombInstrumentGuardField_InstrumentID = nullptr;
	double pCombInstrumentGuardField_GuarantRatio = 0.0;
	char *pCombInstrumentGuardField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pCombInstrumentGuardField, "|yydy")
		, &pCombInstrumentGuardField_BrokerID
		, &pCombInstrumentGuardField_InstrumentID
		, &pCombInstrumentGuardField_GuarantRatio
		, &pCombInstrumentGuardField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pCombInstrumentGuardField_BrokerID != nullptr){ strcpy_s(pCombInstrumentGuardField->BrokerID, pCombInstrumentGuardField_BrokerID); pCombInstrumentGuardField_BrokerID = nullptr; }
		if(pCombInstrumentGuardField_InstrumentID != nullptr){ strcpy_s(pCombInstrumentGuardField->InstrumentID, pCombInstrumentGuardField_InstrumentID); pCombInstrumentGuardField_InstrumentID = nullptr; }
		pCombInstrumentGuardField->GuarantRatio = pCombInstrumentGuardField_GuarantRatio;
		if(pCombInstrumentGuardField_ExchangeID != nullptr){ strcpy_s(pCombInstrumentGuardField->ExchangeID, pCombInstrumentGuardField_ExchangeID); pCombInstrumentGuardField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcCombInstrumentGuardField *pCombInstrumentGuardField)
{
	if(pCombInstrumentGuardField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:d,s:y}"
		, "BrokerID", pCombInstrumentGuardField->BrokerID
		, "InstrumentID", pCombInstrumentGuardField->InstrumentID
		, "GuarantRatio", pCombInstrumentGuardField->GuarantRatio
		, "ExchangeID", pCombInstrumentGuardField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryCombInstrumentGuardField *pQryCombInstrumentGuardField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InstrumentID", "ExchangeID", nullptr};
	char *pQryCombInstrumentGuardField_BrokerID = nullptr;
	char *pQryCombInstrumentGuardField_InstrumentID = nullptr;
	char *pQryCombInstrumentGuardField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryCombInstrumentGuardField, "|yyy")
		, &pQryCombInstrumentGuardField_BrokerID
		, &pQryCombInstrumentGuardField_InstrumentID
		, &pQryCombInstrumentGuardField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pQryCombInstrumentGuardField_BrokerID != nullptr){ strcpy_s(pQryCombInstrumentGuardField->BrokerID, pQryCombInstrumentGuardField_BrokerID); pQryCombInstrumentGuardField_BrokerID = nullptr; }
		if(pQryCombInstrumentGuardField_InstrumentID != nullptr){ strcpy_s(pQryCombInstrumentGuardField->InstrumentID, pQryCombInstrumentGuardField_InstrumentID); pQryCombInstrumentGuardField_InstrumentID = nullptr; }
		if(pQryCombInstrumentGuardField_ExchangeID != nullptr){ strcpy_s(pQryCombInstrumentGuardField->ExchangeID, pQryCombInstrumentGuardField_ExchangeID); pQryCombInstrumentGuardField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryCombInstrumentGuardField *pQryCombInstrumentGuardField)
{
	if(pQryCombInstrumentGuardField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pQryCombInstrumentGuardField->BrokerID
		, "InstrumentID", pQryCombInstrumentGuardField->InstrumentID
		, "ExchangeID", pQryCombInstrumentGuardField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInputCombActionField *pInputCombActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "CombActionRef", "UserID", "Direction", "Volume", "CombDirection", "HedgeFlag", "ExchangeID", "IPAddress", "MacAddress", "InvestUnitID", nullptr};
	char *pInputCombActionField_BrokerID = nullptr;
	char *pInputCombActionField_InvestorID = nullptr;
	char *pInputCombActionField_InstrumentID = nullptr;
	char *pInputCombActionField_CombActionRef = nullptr;
	char *pInputCombActionField_UserID = nullptr;
	char pInputCombActionField_Direction = 0;
	int pInputCombActionField_Volume = 0;
	char pInputCombActionField_CombDirection = 0;
	char pInputCombActionField_HedgeFlag = 0;
	char *pInputCombActionField_ExchangeID = nullptr;
	char *pInputCombActionField_IPAddress = nullptr;
	char *pInputCombActionField_MacAddress = nullptr;
	char *pInputCombActionField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInputCombActionField, "|yyyyyciccyyyy")
		, &pInputCombActionField_BrokerID
		, &pInputCombActionField_InvestorID
		, &pInputCombActionField_InstrumentID
		, &pInputCombActionField_CombActionRef
		, &pInputCombActionField_UserID
		, &pInputCombActionField_Direction
		, &pInputCombActionField_Volume
		, &pInputCombActionField_CombDirection
		, &pInputCombActionField_HedgeFlag
		, &pInputCombActionField_ExchangeID
		, &pInputCombActionField_IPAddress
		, &pInputCombActionField_MacAddress
		, &pInputCombActionField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pInputCombActionField_BrokerID != nullptr){ strcpy_s(pInputCombActionField->BrokerID, pInputCombActionField_BrokerID); pInputCombActionField_BrokerID = nullptr; }
		if(pInputCombActionField_InvestorID != nullptr){ strcpy_s(pInputCombActionField->InvestorID, pInputCombActionField_InvestorID); pInputCombActionField_InvestorID = nullptr; }
		if(pInputCombActionField_InstrumentID != nullptr){ strcpy_s(pInputCombActionField->InstrumentID, pInputCombActionField_InstrumentID); pInputCombActionField_InstrumentID = nullptr; }
		if(pInputCombActionField_CombActionRef != nullptr){ strcpy_s(pInputCombActionField->CombActionRef, pInputCombActionField_CombActionRef); pInputCombActionField_CombActionRef = nullptr; }
		if(pInputCombActionField_UserID != nullptr){ strcpy_s(pInputCombActionField->UserID, pInputCombActionField_UserID); pInputCombActionField_UserID = nullptr; }
		pInputCombActionField->Direction = pInputCombActionField_Direction;
		pInputCombActionField->Volume = pInputCombActionField_Volume;
		pInputCombActionField->CombDirection = pInputCombActionField_CombDirection;
		pInputCombActionField->HedgeFlag = pInputCombActionField_HedgeFlag;
		if(pInputCombActionField_ExchangeID != nullptr){ strcpy_s(pInputCombActionField->ExchangeID, pInputCombActionField_ExchangeID); pInputCombActionField_ExchangeID = nullptr; }
		if(pInputCombActionField_IPAddress != nullptr){ strcpy_s(pInputCombActionField->IPAddress, pInputCombActionField_IPAddress); pInputCombActionField_IPAddress = nullptr; }
		if(pInputCombActionField_MacAddress != nullptr){ strcpy_s(pInputCombActionField->MacAddress, pInputCombActionField_MacAddress); pInputCombActionField_MacAddress = nullptr; }
		if(pInputCombActionField_InvestUnitID != nullptr){ strcpy_s(pInputCombActionField->InvestUnitID, pInputCombActionField_InvestUnitID); pInputCombActionField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInputCombActionField *pInputCombActionField)
{
	if(pInputCombActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:c,s:i,s:c,s:c,s:y,s:y,s:y,s:y}"
		, "BrokerID", pInputCombActionField->BrokerID
		, "InvestorID", pInputCombActionField->InvestorID
		, "InstrumentID", pInputCombActionField->InstrumentID
		, "CombActionRef", pInputCombActionField->CombActionRef
		, "UserID", pInputCombActionField->UserID
		, "Direction", pInputCombActionField->Direction
		, "Volume", pInputCombActionField->Volume
		, "CombDirection", pInputCombActionField->CombDirection
		, "HedgeFlag", pInputCombActionField->HedgeFlag
		, "ExchangeID", pInputCombActionField->ExchangeID
		, "IPAddress", pInputCombActionField->IPAddress
		, "MacAddress", pInputCombActionField->MacAddress
		, "InvestUnitID", pInputCombActionField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcCombActionField *pCombActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "CombActionRef", "UserID", "Direction", "Volume", "CombDirection", "HedgeFlag", "ActionLocalID", "ExchangeID", "ParticipantID", "ClientID", "ExchangeInstID", "TraderID", "InstallID", "ActionStatus", "NotifySequence", "TradingDay", "SettlementID", "SequenceNo", "FrontID", "SessionID", "UserProductInfo", "StatusMsg", "IPAddress", "MacAddress", "ComTradeID", "BranchID", "InvestUnitID", nullptr};
	char *pCombActionField_BrokerID = nullptr;
	char *pCombActionField_InvestorID = nullptr;
	char *pCombActionField_InstrumentID = nullptr;
	char *pCombActionField_CombActionRef = nullptr;
	char *pCombActionField_UserID = nullptr;
	char pCombActionField_Direction = 0;
	int pCombActionField_Volume = 0;
	char pCombActionField_CombDirection = 0;
	char pCombActionField_HedgeFlag = 0;
	char *pCombActionField_ActionLocalID = nullptr;
	char *pCombActionField_ExchangeID = nullptr;
	char *pCombActionField_ParticipantID = nullptr;
	char *pCombActionField_ClientID = nullptr;
	char *pCombActionField_ExchangeInstID = nullptr;
	char *pCombActionField_TraderID = nullptr;
	int pCombActionField_InstallID = 0;
	char pCombActionField_ActionStatus = 0;
	int pCombActionField_NotifySequence = 0;
	char *pCombActionField_TradingDay = nullptr;
	int pCombActionField_SettlementID = 0;
	int pCombActionField_SequenceNo = 0;
	int pCombActionField_FrontID = 0;
	int pCombActionField_SessionID = 0;
	char *pCombActionField_UserProductInfo = nullptr;
	char *pCombActionField_StatusMsg = nullptr;
	char *pCombActionField_IPAddress = nullptr;
	char *pCombActionField_MacAddress = nullptr;
	char *pCombActionField_ComTradeID = nullptr;
	char *pCombActionField_BranchID = nullptr;
	char *pCombActionField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pCombActionField, "|yyyyyciccyyyyyyiciyiiiiyyyyyyy")
		, &pCombActionField_BrokerID
		, &pCombActionField_InvestorID
		, &pCombActionField_InstrumentID
		, &pCombActionField_CombActionRef
		, &pCombActionField_UserID
		, &pCombActionField_Direction
		, &pCombActionField_Volume
		, &pCombActionField_CombDirection
		, &pCombActionField_HedgeFlag
		, &pCombActionField_ActionLocalID
		, &pCombActionField_ExchangeID
		, &pCombActionField_ParticipantID
		, &pCombActionField_ClientID
		, &pCombActionField_ExchangeInstID
		, &pCombActionField_TraderID
		, &pCombActionField_InstallID
		, &pCombActionField_ActionStatus
		, &pCombActionField_NotifySequence
		, &pCombActionField_TradingDay
		, &pCombActionField_SettlementID
		, &pCombActionField_SequenceNo
		, &pCombActionField_FrontID
		, &pCombActionField_SessionID
		, &pCombActionField_UserProductInfo
		, &pCombActionField_StatusMsg
		, &pCombActionField_IPAddress
		, &pCombActionField_MacAddress
		, &pCombActionField_ComTradeID
		, &pCombActionField_BranchID
		, &pCombActionField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pCombActionField_BrokerID != nullptr){ strcpy_s(pCombActionField->BrokerID, pCombActionField_BrokerID); pCombActionField_BrokerID = nullptr; }
		if(pCombActionField_InvestorID != nullptr){ strcpy_s(pCombActionField->InvestorID, pCombActionField_InvestorID); pCombActionField_InvestorID = nullptr; }
		if(pCombActionField_InstrumentID != nullptr){ strcpy_s(pCombActionField->InstrumentID, pCombActionField_InstrumentID); pCombActionField_InstrumentID = nullptr; }
		if(pCombActionField_CombActionRef != nullptr){ strcpy_s(pCombActionField->CombActionRef, pCombActionField_CombActionRef); pCombActionField_CombActionRef = nullptr; }
		if(pCombActionField_UserID != nullptr){ strcpy_s(pCombActionField->UserID, pCombActionField_UserID); pCombActionField_UserID = nullptr; }
		pCombActionField->Direction = pCombActionField_Direction;
		pCombActionField->Volume = pCombActionField_Volume;
		pCombActionField->CombDirection = pCombActionField_CombDirection;
		pCombActionField->HedgeFlag = pCombActionField_HedgeFlag;
		if(pCombActionField_ActionLocalID != nullptr){ strcpy_s(pCombActionField->ActionLocalID, pCombActionField_ActionLocalID); pCombActionField_ActionLocalID = nullptr; }
		if(pCombActionField_ExchangeID != nullptr){ strcpy_s(pCombActionField->ExchangeID, pCombActionField_ExchangeID); pCombActionField_ExchangeID = nullptr; }
		if(pCombActionField_ParticipantID != nullptr){ strcpy_s(pCombActionField->ParticipantID, pCombActionField_ParticipantID); pCombActionField_ParticipantID = nullptr; }
		if(pCombActionField_ClientID != nullptr){ strcpy_s(pCombActionField->ClientID, pCombActionField_ClientID); pCombActionField_ClientID = nullptr; }
		if(pCombActionField_ExchangeInstID != nullptr){ strcpy_s(pCombActionField->ExchangeInstID, pCombActionField_ExchangeInstID); pCombActionField_ExchangeInstID = nullptr; }
		if(pCombActionField_TraderID != nullptr){ strcpy_s(pCombActionField->TraderID, pCombActionField_TraderID); pCombActionField_TraderID = nullptr; }
		pCombActionField->InstallID = pCombActionField_InstallID;
		pCombActionField->ActionStatus = pCombActionField_ActionStatus;
		pCombActionField->NotifySequence = pCombActionField_NotifySequence;
		if(pCombActionField_TradingDay != nullptr){ strcpy_s(pCombActionField->TradingDay, pCombActionField_TradingDay); pCombActionField_TradingDay = nullptr; }
		pCombActionField->SettlementID = pCombActionField_SettlementID;
		pCombActionField->SequenceNo = pCombActionField_SequenceNo;
		pCombActionField->FrontID = pCombActionField_FrontID;
		pCombActionField->SessionID = pCombActionField_SessionID;
		if(pCombActionField_UserProductInfo != nullptr){ strcpy_s(pCombActionField->UserProductInfo, pCombActionField_UserProductInfo); pCombActionField_UserProductInfo = nullptr; }
		if(pCombActionField_StatusMsg != nullptr){ strcpy_s(pCombActionField->StatusMsg, pCombActionField_StatusMsg); pCombActionField_StatusMsg = nullptr; }
		if(pCombActionField_IPAddress != nullptr){ strcpy_s(pCombActionField->IPAddress, pCombActionField_IPAddress); pCombActionField_IPAddress = nullptr; }
		if(pCombActionField_MacAddress != nullptr){ strcpy_s(pCombActionField->MacAddress, pCombActionField_MacAddress); pCombActionField_MacAddress = nullptr; }
		if(pCombActionField_ComTradeID != nullptr){ strcpy_s(pCombActionField->ComTradeID, pCombActionField_ComTradeID); pCombActionField_ComTradeID = nullptr; }
		if(pCombActionField_BranchID != nullptr){ strcpy_s(pCombActionField->BranchID, pCombActionField_BranchID); pCombActionField_BranchID = nullptr; }
		if(pCombActionField_InvestUnitID != nullptr){ strcpy_s(pCombActionField->InvestUnitID, pCombActionField_InvestUnitID); pCombActionField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcCombActionField *pCombActionField)
{
	if(pCombActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:c,s:i,s:c,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:i,s:i,s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pCombActionField->BrokerID
		, "InvestorID", pCombActionField->InvestorID
		, "InstrumentID", pCombActionField->InstrumentID
		, "CombActionRef", pCombActionField->CombActionRef
		, "UserID", pCombActionField->UserID
		, "Direction", pCombActionField->Direction
		, "Volume", pCombActionField->Volume
		, "CombDirection", pCombActionField->CombDirection
		, "HedgeFlag", pCombActionField->HedgeFlag
		, "ActionLocalID", pCombActionField->ActionLocalID
		, "ExchangeID", pCombActionField->ExchangeID
		, "ParticipantID", pCombActionField->ParticipantID
		, "ClientID", pCombActionField->ClientID
		, "ExchangeInstID", pCombActionField->ExchangeInstID
		, "TraderID", pCombActionField->TraderID
		, "InstallID", pCombActionField->InstallID
		, "ActionStatus", pCombActionField->ActionStatus
		, "NotifySequence", pCombActionField->NotifySequence
		, "TradingDay", pCombActionField->TradingDay
		, "SettlementID", pCombActionField->SettlementID
		, "SequenceNo", pCombActionField->SequenceNo
		, "FrontID", pCombActionField->FrontID
		, "SessionID", pCombActionField->SessionID
		, "UserProductInfo", pCombActionField->UserProductInfo
		, "StatusMsg", pCombActionField->StatusMsg
		, "IPAddress", pCombActionField->IPAddress
		, "MacAddress", pCombActionField->MacAddress
		, "ComTradeID", pCombActionField->ComTradeID
		, "BranchID", pCombActionField->BranchID
		, "InvestUnitID", pCombActionField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryCombActionField *pQryCombActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ExchangeID", "InvestUnitID", nullptr};
	char *pQryCombActionField_BrokerID = nullptr;
	char *pQryCombActionField_InvestorID = nullptr;
	char *pQryCombActionField_InstrumentID = nullptr;
	char *pQryCombActionField_ExchangeID = nullptr;
	char *pQryCombActionField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryCombActionField, "|yyyyy")
		, &pQryCombActionField_BrokerID
		, &pQryCombActionField_InvestorID
		, &pQryCombActionField_InstrumentID
		, &pQryCombActionField_ExchangeID
		, &pQryCombActionField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryCombActionField_BrokerID != nullptr){ strcpy_s(pQryCombActionField->BrokerID, pQryCombActionField_BrokerID); pQryCombActionField_BrokerID = nullptr; }
		if(pQryCombActionField_InvestorID != nullptr){ strcpy_s(pQryCombActionField->InvestorID, pQryCombActionField_InvestorID); pQryCombActionField_InvestorID = nullptr; }
		if(pQryCombActionField_InstrumentID != nullptr){ strcpy_s(pQryCombActionField->InstrumentID, pQryCombActionField_InstrumentID); pQryCombActionField_InstrumentID = nullptr; }
		if(pQryCombActionField_ExchangeID != nullptr){ strcpy_s(pQryCombActionField->ExchangeID, pQryCombActionField_ExchangeID); pQryCombActionField_ExchangeID = nullptr; }
		if(pQryCombActionField_InvestUnitID != nullptr){ strcpy_s(pQryCombActionField->InvestUnitID, pQryCombActionField_InvestUnitID); pQryCombActionField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryCombActionField *pQryCombActionField)
{
	if(pQryCombActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQryCombActionField->BrokerID
		, "InvestorID", pQryCombActionField->InvestorID
		, "InstrumentID", pQryCombActionField->InstrumentID
		, "ExchangeID", pQryCombActionField->ExchangeID
		, "InvestUnitID", pQryCombActionField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeCombActionField *pExchangeCombActionField, PyObject *dict)
{
	static char *kwlist[] = {"Direction", "Volume", "CombDirection", "HedgeFlag", "ActionLocalID", "ExchangeID", "ParticipantID", "ClientID", "ExchangeInstID", "TraderID", "InstallID", "ActionStatus", "NotifySequence", "TradingDay", "SettlementID", "SequenceNo", "IPAddress", "MacAddress", "ComTradeID", "BranchID", nullptr};
	char pExchangeCombActionField_Direction = 0;
	int pExchangeCombActionField_Volume = 0;
	char pExchangeCombActionField_CombDirection = 0;
	char pExchangeCombActionField_HedgeFlag = 0;
	char *pExchangeCombActionField_ActionLocalID = nullptr;
	char *pExchangeCombActionField_ExchangeID = nullptr;
	char *pExchangeCombActionField_ParticipantID = nullptr;
	char *pExchangeCombActionField_ClientID = nullptr;
	char *pExchangeCombActionField_ExchangeInstID = nullptr;
	char *pExchangeCombActionField_TraderID = nullptr;
	int pExchangeCombActionField_InstallID = 0;
	char pExchangeCombActionField_ActionStatus = 0;
	int pExchangeCombActionField_NotifySequence = 0;
	char *pExchangeCombActionField_TradingDay = nullptr;
	int pExchangeCombActionField_SettlementID = 0;
	int pExchangeCombActionField_SequenceNo = 0;
	char *pExchangeCombActionField_IPAddress = nullptr;
	char *pExchangeCombActionField_MacAddress = nullptr;
	char *pExchangeCombActionField_ComTradeID = nullptr;
	char *pExchangeCombActionField_BranchID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeCombActionField, "|ciccyyyyyyiciyiiyyyy")
		, &pExchangeCombActionField_Direction
		, &pExchangeCombActionField_Volume
		, &pExchangeCombActionField_CombDirection
		, &pExchangeCombActionField_HedgeFlag
		, &pExchangeCombActionField_ActionLocalID
		, &pExchangeCombActionField_ExchangeID
		, &pExchangeCombActionField_ParticipantID
		, &pExchangeCombActionField_ClientID
		, &pExchangeCombActionField_ExchangeInstID
		, &pExchangeCombActionField_TraderID
		, &pExchangeCombActionField_InstallID
		, &pExchangeCombActionField_ActionStatus
		, &pExchangeCombActionField_NotifySequence
		, &pExchangeCombActionField_TradingDay
		, &pExchangeCombActionField_SettlementID
		, &pExchangeCombActionField_SequenceNo
		, &pExchangeCombActionField_IPAddress
		, &pExchangeCombActionField_MacAddress
		, &pExchangeCombActionField_ComTradeID
		, &pExchangeCombActionField_BranchID
	PyCTP_PyDict_FromStruct_END
		pExchangeCombActionField->Direction = pExchangeCombActionField_Direction;
		pExchangeCombActionField->Volume = pExchangeCombActionField_Volume;
		pExchangeCombActionField->CombDirection = pExchangeCombActionField_CombDirection;
		pExchangeCombActionField->HedgeFlag = pExchangeCombActionField_HedgeFlag;
		if(pExchangeCombActionField_ActionLocalID != nullptr){ strcpy_s(pExchangeCombActionField->ActionLocalID, pExchangeCombActionField_ActionLocalID); pExchangeCombActionField_ActionLocalID = nullptr; }
		if(pExchangeCombActionField_ExchangeID != nullptr){ strcpy_s(pExchangeCombActionField->ExchangeID, pExchangeCombActionField_ExchangeID); pExchangeCombActionField_ExchangeID = nullptr; }
		if(pExchangeCombActionField_ParticipantID != nullptr){ strcpy_s(pExchangeCombActionField->ParticipantID, pExchangeCombActionField_ParticipantID); pExchangeCombActionField_ParticipantID = nullptr; }
		if(pExchangeCombActionField_ClientID != nullptr){ strcpy_s(pExchangeCombActionField->ClientID, pExchangeCombActionField_ClientID); pExchangeCombActionField_ClientID = nullptr; }
		if(pExchangeCombActionField_ExchangeInstID != nullptr){ strcpy_s(pExchangeCombActionField->ExchangeInstID, pExchangeCombActionField_ExchangeInstID); pExchangeCombActionField_ExchangeInstID = nullptr; }
		if(pExchangeCombActionField_TraderID != nullptr){ strcpy_s(pExchangeCombActionField->TraderID, pExchangeCombActionField_TraderID); pExchangeCombActionField_TraderID = nullptr; }
		pExchangeCombActionField->InstallID = pExchangeCombActionField_InstallID;
		pExchangeCombActionField->ActionStatus = pExchangeCombActionField_ActionStatus;
		pExchangeCombActionField->NotifySequence = pExchangeCombActionField_NotifySequence;
		if(pExchangeCombActionField_TradingDay != nullptr){ strcpy_s(pExchangeCombActionField->TradingDay, pExchangeCombActionField_TradingDay); pExchangeCombActionField_TradingDay = nullptr; }
		pExchangeCombActionField->SettlementID = pExchangeCombActionField_SettlementID;
		pExchangeCombActionField->SequenceNo = pExchangeCombActionField_SequenceNo;
		if(pExchangeCombActionField_IPAddress != nullptr){ strcpy_s(pExchangeCombActionField->IPAddress, pExchangeCombActionField_IPAddress); pExchangeCombActionField_IPAddress = nullptr; }
		if(pExchangeCombActionField_MacAddress != nullptr){ strcpy_s(pExchangeCombActionField->MacAddress, pExchangeCombActionField_MacAddress); pExchangeCombActionField_MacAddress = nullptr; }
		if(pExchangeCombActionField_ComTradeID != nullptr){ strcpy_s(pExchangeCombActionField->ComTradeID, pExchangeCombActionField_ComTradeID); pExchangeCombActionField_ComTradeID = nullptr; }
		if(pExchangeCombActionField_BranchID != nullptr){ strcpy_s(pExchangeCombActionField->BranchID, pExchangeCombActionField_BranchID); pExchangeCombActionField_BranchID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeCombActionField *pExchangeCombActionField)
{
	if(pExchangeCombActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:c,s:i,s:c,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:i,s:i,s:y,s:y,s:y,s:y}"
		, "Direction", pExchangeCombActionField->Direction
		, "Volume", pExchangeCombActionField->Volume
		, "CombDirection", pExchangeCombActionField->CombDirection
		, "HedgeFlag", pExchangeCombActionField->HedgeFlag
		, "ActionLocalID", pExchangeCombActionField->ActionLocalID
		, "ExchangeID", pExchangeCombActionField->ExchangeID
		, "ParticipantID", pExchangeCombActionField->ParticipantID
		, "ClientID", pExchangeCombActionField->ClientID
		, "ExchangeInstID", pExchangeCombActionField->ExchangeInstID
		, "TraderID", pExchangeCombActionField->TraderID
		, "InstallID", pExchangeCombActionField->InstallID
		, "ActionStatus", pExchangeCombActionField->ActionStatus
		, "NotifySequence", pExchangeCombActionField->NotifySequence
		, "TradingDay", pExchangeCombActionField->TradingDay
		, "SettlementID", pExchangeCombActionField->SettlementID
		, "SequenceNo", pExchangeCombActionField->SequenceNo
		, "IPAddress", pExchangeCombActionField->IPAddress
		, "MacAddress", pExchangeCombActionField->MacAddress
		, "ComTradeID", pExchangeCombActionField->ComTradeID
		, "BranchID", pExchangeCombActionField->BranchID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryExchangeCombActionField *pQryExchangeCombActionField, PyObject *dict)
{
	static char *kwlist[] = {"ParticipantID", "ClientID", "ExchangeInstID", "ExchangeID", "TraderID", nullptr};
	char *pQryExchangeCombActionField_ParticipantID = nullptr;
	char *pQryExchangeCombActionField_ClientID = nullptr;
	char *pQryExchangeCombActionField_ExchangeInstID = nullptr;
	char *pQryExchangeCombActionField_ExchangeID = nullptr;
	char *pQryExchangeCombActionField_TraderID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryExchangeCombActionField, "|yyyyy")
		, &pQryExchangeCombActionField_ParticipantID
		, &pQryExchangeCombActionField_ClientID
		, &pQryExchangeCombActionField_ExchangeInstID
		, &pQryExchangeCombActionField_ExchangeID
		, &pQryExchangeCombActionField_TraderID
	PyCTP_PyDict_FromStruct_END
		if(pQryExchangeCombActionField_ParticipantID != nullptr){ strcpy_s(pQryExchangeCombActionField->ParticipantID, pQryExchangeCombActionField_ParticipantID); pQryExchangeCombActionField_ParticipantID = nullptr; }
		if(pQryExchangeCombActionField_ClientID != nullptr){ strcpy_s(pQryExchangeCombActionField->ClientID, pQryExchangeCombActionField_ClientID); pQryExchangeCombActionField_ClientID = nullptr; }
		if(pQryExchangeCombActionField_ExchangeInstID != nullptr){ strcpy_s(pQryExchangeCombActionField->ExchangeInstID, pQryExchangeCombActionField_ExchangeInstID); pQryExchangeCombActionField_ExchangeInstID = nullptr; }
		if(pQryExchangeCombActionField_ExchangeID != nullptr){ strcpy_s(pQryExchangeCombActionField->ExchangeID, pQryExchangeCombActionField_ExchangeID); pQryExchangeCombActionField_ExchangeID = nullptr; }
		if(pQryExchangeCombActionField_TraderID != nullptr){ strcpy_s(pQryExchangeCombActionField->TraderID, pQryExchangeCombActionField_TraderID); pQryExchangeCombActionField_TraderID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryExchangeCombActionField *pQryExchangeCombActionField)
{
	if(pQryExchangeCombActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "ParticipantID", pQryExchangeCombActionField->ParticipantID
		, "ClientID", pQryExchangeCombActionField->ClientID
		, "ExchangeInstID", pQryExchangeCombActionField->ExchangeInstID
		, "ExchangeID", pQryExchangeCombActionField->ExchangeID
		, "TraderID", pQryExchangeCombActionField->TraderID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcProductExchRateField *pProductExchRateField, PyObject *dict)
{
	static char *kwlist[] = {"ProductID", "QuoteCurrencyID", "ExchangeRate", "ExchangeID", nullptr};
	char *pProductExchRateField_ProductID = nullptr;
	char *pProductExchRateField_QuoteCurrencyID = nullptr;
	double pProductExchRateField_ExchangeRate = 0.0;
	char *pProductExchRateField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pProductExchRateField, "|yydy")
		, &pProductExchRateField_ProductID
		, &pProductExchRateField_QuoteCurrencyID
		, &pProductExchRateField_ExchangeRate
		, &pProductExchRateField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pProductExchRateField_ProductID != nullptr){ strcpy_s(pProductExchRateField->ProductID, pProductExchRateField_ProductID); pProductExchRateField_ProductID = nullptr; }
		if(pProductExchRateField_QuoteCurrencyID != nullptr){ strcpy_s(pProductExchRateField->QuoteCurrencyID, pProductExchRateField_QuoteCurrencyID); pProductExchRateField_QuoteCurrencyID = nullptr; }
		pProductExchRateField->ExchangeRate = pProductExchRateField_ExchangeRate;
		if(pProductExchRateField_ExchangeID != nullptr){ strcpy_s(pProductExchRateField->ExchangeID, pProductExchRateField_ExchangeID); pProductExchRateField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcProductExchRateField *pProductExchRateField)
{
	if(pProductExchRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:d,s:y}"
		, "ProductID", pProductExchRateField->ProductID
		, "QuoteCurrencyID", pProductExchRateField->QuoteCurrencyID
		, "ExchangeRate", pProductExchRateField->ExchangeRate
		, "ExchangeID", pProductExchRateField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryProductExchRateField *pQryProductExchRateField, PyObject *dict)
{
	static char *kwlist[] = {"ProductID", "ExchangeID", nullptr};
	char *pQryProductExchRateField_ProductID = nullptr;
	char *pQryProductExchRateField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryProductExchRateField, "|yy")
		, &pQryProductExchRateField_ProductID
		, &pQryProductExchRateField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pQryProductExchRateField_ProductID != nullptr){ strcpy_s(pQryProductExchRateField->ProductID, pQryProductExchRateField_ProductID); pQryProductExchRateField_ProductID = nullptr; }
		if(pQryProductExchRateField_ExchangeID != nullptr){ strcpy_s(pQryProductExchRateField->ExchangeID, pQryProductExchRateField_ExchangeID); pQryProductExchRateField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryProductExchRateField *pQryProductExchRateField)
{
	if(pQryProductExchRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "ProductID", pQryProductExchRateField->ProductID
		, "ExchangeID", pQryProductExchRateField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryForQuoteParamField *pQryForQuoteParamField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InstrumentID", "ExchangeID", nullptr};
	char *pQryForQuoteParamField_BrokerID = nullptr;
	char *pQryForQuoteParamField_InstrumentID = nullptr;
	char *pQryForQuoteParamField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryForQuoteParamField, "|yyy")
		, &pQryForQuoteParamField_BrokerID
		, &pQryForQuoteParamField_InstrumentID
		, &pQryForQuoteParamField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pQryForQuoteParamField_BrokerID != nullptr){ strcpy_s(pQryForQuoteParamField->BrokerID, pQryForQuoteParamField_BrokerID); pQryForQuoteParamField_BrokerID = nullptr; }
		if(pQryForQuoteParamField_InstrumentID != nullptr){ strcpy_s(pQryForQuoteParamField->InstrumentID, pQryForQuoteParamField_InstrumentID); pQryForQuoteParamField_InstrumentID = nullptr; }
		if(pQryForQuoteParamField_ExchangeID != nullptr){ strcpy_s(pQryForQuoteParamField->ExchangeID, pQryForQuoteParamField_ExchangeID); pQryForQuoteParamField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryForQuoteParamField *pQryForQuoteParamField)
{
	if(pQryForQuoteParamField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pQryForQuoteParamField->BrokerID
		, "InstrumentID", pQryForQuoteParamField->InstrumentID
		, "ExchangeID", pQryForQuoteParamField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcForQuoteParamField *pForQuoteParamField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InstrumentID", "ExchangeID", "LastPrice", "PriceInterval", nullptr};
	char *pForQuoteParamField_BrokerID = nullptr;
	char *pForQuoteParamField_InstrumentID = nullptr;
	char *pForQuoteParamField_ExchangeID = nullptr;
	double pForQuoteParamField_LastPrice = 0.0;
	double pForQuoteParamField_PriceInterval = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pForQuoteParamField, "|yyydd")
		, &pForQuoteParamField_BrokerID
		, &pForQuoteParamField_InstrumentID
		, &pForQuoteParamField_ExchangeID
		, &pForQuoteParamField_LastPrice
		, &pForQuoteParamField_PriceInterval
	PyCTP_PyDict_FromStruct_END
		if(pForQuoteParamField_BrokerID != nullptr){ strcpy_s(pForQuoteParamField->BrokerID, pForQuoteParamField_BrokerID); pForQuoteParamField_BrokerID = nullptr; }
		if(pForQuoteParamField_InstrumentID != nullptr){ strcpy_s(pForQuoteParamField->InstrumentID, pForQuoteParamField_InstrumentID); pForQuoteParamField_InstrumentID = nullptr; }
		if(pForQuoteParamField_ExchangeID != nullptr){ strcpy_s(pForQuoteParamField->ExchangeID, pForQuoteParamField_ExchangeID); pForQuoteParamField_ExchangeID = nullptr; }
		pForQuoteParamField->LastPrice = pForQuoteParamField_LastPrice;
		pForQuoteParamField->PriceInterval = pForQuoteParamField_PriceInterval;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcForQuoteParamField *pForQuoteParamField)
{
	if(pForQuoteParamField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:d,s:d}"
		, "BrokerID", pForQuoteParamField->BrokerID
		, "InstrumentID", pForQuoteParamField->InstrumentID
		, "ExchangeID", pForQuoteParamField->ExchangeID
		, "LastPrice", pForQuoteParamField->LastPrice
		, "PriceInterval", pForQuoteParamField->PriceInterval
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcMMOptionInstrCommRateField *pMMOptionInstrCommRateField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "InvestorRange", "BrokerID", "InvestorID", "OpenRatioByMoney", "OpenRatioByVolume", "CloseRatioByMoney", "CloseRatioByVolume", "CloseTodayRatioByMoney", "CloseTodayRatioByVolume", "StrikeRatioByMoney", "StrikeRatioByVolume", nullptr};
	char *pMMOptionInstrCommRateField_InstrumentID = nullptr;
	char pMMOptionInstrCommRateField_InvestorRange = 0;
	char *pMMOptionInstrCommRateField_BrokerID = nullptr;
	char *pMMOptionInstrCommRateField_InvestorID = nullptr;
	double pMMOptionInstrCommRateField_OpenRatioByMoney = 0.0;
	double pMMOptionInstrCommRateField_OpenRatioByVolume = 0.0;
	double pMMOptionInstrCommRateField_CloseRatioByMoney = 0.0;
	double pMMOptionInstrCommRateField_CloseRatioByVolume = 0.0;
	double pMMOptionInstrCommRateField_CloseTodayRatioByMoney = 0.0;
	double pMMOptionInstrCommRateField_CloseTodayRatioByVolume = 0.0;
	double pMMOptionInstrCommRateField_StrikeRatioByMoney = 0.0;
	double pMMOptionInstrCommRateField_StrikeRatioByVolume = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pMMOptionInstrCommRateField, "|ycyydddddddd")
		, &pMMOptionInstrCommRateField_InstrumentID
		, &pMMOptionInstrCommRateField_InvestorRange
		, &pMMOptionInstrCommRateField_BrokerID
		, &pMMOptionInstrCommRateField_InvestorID
		, &pMMOptionInstrCommRateField_OpenRatioByMoney
		, &pMMOptionInstrCommRateField_OpenRatioByVolume
		, &pMMOptionInstrCommRateField_CloseRatioByMoney
		, &pMMOptionInstrCommRateField_CloseRatioByVolume
		, &pMMOptionInstrCommRateField_CloseTodayRatioByMoney
		, &pMMOptionInstrCommRateField_CloseTodayRatioByVolume
		, &pMMOptionInstrCommRateField_StrikeRatioByMoney
		, &pMMOptionInstrCommRateField_StrikeRatioByVolume
	PyCTP_PyDict_FromStruct_END
		if(pMMOptionInstrCommRateField_InstrumentID != nullptr){ strcpy_s(pMMOptionInstrCommRateField->InstrumentID, pMMOptionInstrCommRateField_InstrumentID); pMMOptionInstrCommRateField_InstrumentID = nullptr; }
		pMMOptionInstrCommRateField->InvestorRange = pMMOptionInstrCommRateField_InvestorRange;
		if(pMMOptionInstrCommRateField_BrokerID != nullptr){ strcpy_s(pMMOptionInstrCommRateField->BrokerID, pMMOptionInstrCommRateField_BrokerID); pMMOptionInstrCommRateField_BrokerID = nullptr; }
		if(pMMOptionInstrCommRateField_InvestorID != nullptr){ strcpy_s(pMMOptionInstrCommRateField->InvestorID, pMMOptionInstrCommRateField_InvestorID); pMMOptionInstrCommRateField_InvestorID = nullptr; }
		pMMOptionInstrCommRateField->OpenRatioByMoney = pMMOptionInstrCommRateField_OpenRatioByMoney;
		pMMOptionInstrCommRateField->OpenRatioByVolume = pMMOptionInstrCommRateField_OpenRatioByVolume;
		pMMOptionInstrCommRateField->CloseRatioByMoney = pMMOptionInstrCommRateField_CloseRatioByMoney;
		pMMOptionInstrCommRateField->CloseRatioByVolume = pMMOptionInstrCommRateField_CloseRatioByVolume;
		pMMOptionInstrCommRateField->CloseTodayRatioByMoney = pMMOptionInstrCommRateField_CloseTodayRatioByMoney;
		pMMOptionInstrCommRateField->CloseTodayRatioByVolume = pMMOptionInstrCommRateField_CloseTodayRatioByVolume;
		pMMOptionInstrCommRateField->StrikeRatioByMoney = pMMOptionInstrCommRateField_StrikeRatioByMoney;
		pMMOptionInstrCommRateField->StrikeRatioByVolume = pMMOptionInstrCommRateField_StrikeRatioByVolume;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcMMOptionInstrCommRateField *pMMOptionInstrCommRateField)
{
	if(pMMOptionInstrCommRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d}"
		, "InstrumentID", pMMOptionInstrCommRateField->InstrumentID
		, "InvestorRange", pMMOptionInstrCommRateField->InvestorRange
		, "BrokerID", pMMOptionInstrCommRateField->BrokerID
		, "InvestorID", pMMOptionInstrCommRateField->InvestorID
		, "OpenRatioByMoney", pMMOptionInstrCommRateField->OpenRatioByMoney
		, "OpenRatioByVolume", pMMOptionInstrCommRateField->OpenRatioByVolume
		, "CloseRatioByMoney", pMMOptionInstrCommRateField->CloseRatioByMoney
		, "CloseRatioByVolume", pMMOptionInstrCommRateField->CloseRatioByVolume
		, "CloseTodayRatioByMoney", pMMOptionInstrCommRateField->CloseTodayRatioByMoney
		, "CloseTodayRatioByVolume", pMMOptionInstrCommRateField->CloseTodayRatioByVolume
		, "StrikeRatioByMoney", pMMOptionInstrCommRateField->StrikeRatioByMoney
		, "StrikeRatioByVolume", pMMOptionInstrCommRateField->StrikeRatioByVolume
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryMMOptionInstrCommRateField *pQryMMOptionInstrCommRateField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", nullptr};
	char *pQryMMOptionInstrCommRateField_BrokerID = nullptr;
	char *pQryMMOptionInstrCommRateField_InvestorID = nullptr;
	char *pQryMMOptionInstrCommRateField_InstrumentID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryMMOptionInstrCommRateField, "|yyy")
		, &pQryMMOptionInstrCommRateField_BrokerID
		, &pQryMMOptionInstrCommRateField_InvestorID
		, &pQryMMOptionInstrCommRateField_InstrumentID
	PyCTP_PyDict_FromStruct_END
		if(pQryMMOptionInstrCommRateField_BrokerID != nullptr){ strcpy_s(pQryMMOptionInstrCommRateField->BrokerID, pQryMMOptionInstrCommRateField_BrokerID); pQryMMOptionInstrCommRateField_BrokerID = nullptr; }
		if(pQryMMOptionInstrCommRateField_InvestorID != nullptr){ strcpy_s(pQryMMOptionInstrCommRateField->InvestorID, pQryMMOptionInstrCommRateField_InvestorID); pQryMMOptionInstrCommRateField_InvestorID = nullptr; }
		if(pQryMMOptionInstrCommRateField_InstrumentID != nullptr){ strcpy_s(pQryMMOptionInstrCommRateField->InstrumentID, pQryMMOptionInstrCommRateField_InstrumentID); pQryMMOptionInstrCommRateField_InstrumentID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryMMOptionInstrCommRateField *pQryMMOptionInstrCommRateField)
{
	if(pQryMMOptionInstrCommRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pQryMMOptionInstrCommRateField->BrokerID
		, "InvestorID", pQryMMOptionInstrCommRateField->InvestorID
		, "InstrumentID", pQryMMOptionInstrCommRateField->InstrumentID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcMMInstrumentCommissionRateField *pMMInstrumentCommissionRateField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "InvestorRange", "BrokerID", "InvestorID", "OpenRatioByMoney", "OpenRatioByVolume", "CloseRatioByMoney", "CloseRatioByVolume", "CloseTodayRatioByMoney", "CloseTodayRatioByVolume", nullptr};
	char *pMMInstrumentCommissionRateField_InstrumentID = nullptr;
	char pMMInstrumentCommissionRateField_InvestorRange = 0;
	char *pMMInstrumentCommissionRateField_BrokerID = nullptr;
	char *pMMInstrumentCommissionRateField_InvestorID = nullptr;
	double pMMInstrumentCommissionRateField_OpenRatioByMoney = 0.0;
	double pMMInstrumentCommissionRateField_OpenRatioByVolume = 0.0;
	double pMMInstrumentCommissionRateField_CloseRatioByMoney = 0.0;
	double pMMInstrumentCommissionRateField_CloseRatioByVolume = 0.0;
	double pMMInstrumentCommissionRateField_CloseTodayRatioByMoney = 0.0;
	double pMMInstrumentCommissionRateField_CloseTodayRatioByVolume = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pMMInstrumentCommissionRateField, "|ycyydddddd")
		, &pMMInstrumentCommissionRateField_InstrumentID
		, &pMMInstrumentCommissionRateField_InvestorRange
		, &pMMInstrumentCommissionRateField_BrokerID
		, &pMMInstrumentCommissionRateField_InvestorID
		, &pMMInstrumentCommissionRateField_OpenRatioByMoney
		, &pMMInstrumentCommissionRateField_OpenRatioByVolume
		, &pMMInstrumentCommissionRateField_CloseRatioByMoney
		, &pMMInstrumentCommissionRateField_CloseRatioByVolume
		, &pMMInstrumentCommissionRateField_CloseTodayRatioByMoney
		, &pMMInstrumentCommissionRateField_CloseTodayRatioByVolume
	PyCTP_PyDict_FromStruct_END
		if(pMMInstrumentCommissionRateField_InstrumentID != nullptr){ strcpy_s(pMMInstrumentCommissionRateField->InstrumentID, pMMInstrumentCommissionRateField_InstrumentID); pMMInstrumentCommissionRateField_InstrumentID = nullptr; }
		pMMInstrumentCommissionRateField->InvestorRange = pMMInstrumentCommissionRateField_InvestorRange;
		if(pMMInstrumentCommissionRateField_BrokerID != nullptr){ strcpy_s(pMMInstrumentCommissionRateField->BrokerID, pMMInstrumentCommissionRateField_BrokerID); pMMInstrumentCommissionRateField_BrokerID = nullptr; }
		if(pMMInstrumentCommissionRateField_InvestorID != nullptr){ strcpy_s(pMMInstrumentCommissionRateField->InvestorID, pMMInstrumentCommissionRateField_InvestorID); pMMInstrumentCommissionRateField_InvestorID = nullptr; }
		pMMInstrumentCommissionRateField->OpenRatioByMoney = pMMInstrumentCommissionRateField_OpenRatioByMoney;
		pMMInstrumentCommissionRateField->OpenRatioByVolume = pMMInstrumentCommissionRateField_OpenRatioByVolume;
		pMMInstrumentCommissionRateField->CloseRatioByMoney = pMMInstrumentCommissionRateField_CloseRatioByMoney;
		pMMInstrumentCommissionRateField->CloseRatioByVolume = pMMInstrumentCommissionRateField_CloseRatioByVolume;
		pMMInstrumentCommissionRateField->CloseTodayRatioByMoney = pMMInstrumentCommissionRateField_CloseTodayRatioByMoney;
		pMMInstrumentCommissionRateField->CloseTodayRatioByVolume = pMMInstrumentCommissionRateField_CloseTodayRatioByVolume;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcMMInstrumentCommissionRateField *pMMInstrumentCommissionRateField)
{
	if(pMMInstrumentCommissionRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y,s:d,s:d,s:d,s:d,s:d,s:d}"
		, "InstrumentID", pMMInstrumentCommissionRateField->InstrumentID
		, "InvestorRange", pMMInstrumentCommissionRateField->InvestorRange
		, "BrokerID", pMMInstrumentCommissionRateField->BrokerID
		, "InvestorID", pMMInstrumentCommissionRateField->InvestorID
		, "OpenRatioByMoney", pMMInstrumentCommissionRateField->OpenRatioByMoney
		, "OpenRatioByVolume", pMMInstrumentCommissionRateField->OpenRatioByVolume
		, "CloseRatioByMoney", pMMInstrumentCommissionRateField->CloseRatioByMoney
		, "CloseRatioByVolume", pMMInstrumentCommissionRateField->CloseRatioByVolume
		, "CloseTodayRatioByMoney", pMMInstrumentCommissionRateField->CloseTodayRatioByMoney
		, "CloseTodayRatioByVolume", pMMInstrumentCommissionRateField->CloseTodayRatioByVolume
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryMMInstrumentCommissionRateField *pQryMMInstrumentCommissionRateField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", nullptr};
	char *pQryMMInstrumentCommissionRateField_BrokerID = nullptr;
	char *pQryMMInstrumentCommissionRateField_InvestorID = nullptr;
	char *pQryMMInstrumentCommissionRateField_InstrumentID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryMMInstrumentCommissionRateField, "|yyy")
		, &pQryMMInstrumentCommissionRateField_BrokerID
		, &pQryMMInstrumentCommissionRateField_InvestorID
		, &pQryMMInstrumentCommissionRateField_InstrumentID
	PyCTP_PyDict_FromStruct_END
		if(pQryMMInstrumentCommissionRateField_BrokerID != nullptr){ strcpy_s(pQryMMInstrumentCommissionRateField->BrokerID, pQryMMInstrumentCommissionRateField_BrokerID); pQryMMInstrumentCommissionRateField_BrokerID = nullptr; }
		if(pQryMMInstrumentCommissionRateField_InvestorID != nullptr){ strcpy_s(pQryMMInstrumentCommissionRateField->InvestorID, pQryMMInstrumentCommissionRateField_InvestorID); pQryMMInstrumentCommissionRateField_InvestorID = nullptr; }
		if(pQryMMInstrumentCommissionRateField_InstrumentID != nullptr){ strcpy_s(pQryMMInstrumentCommissionRateField->InstrumentID, pQryMMInstrumentCommissionRateField_InstrumentID); pQryMMInstrumentCommissionRateField_InstrumentID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryMMInstrumentCommissionRateField *pQryMMInstrumentCommissionRateField)
{
	if(pQryMMInstrumentCommissionRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pQryMMInstrumentCommissionRateField->BrokerID
		, "InvestorID", pQryMMInstrumentCommissionRateField->InvestorID
		, "InstrumentID", pQryMMInstrumentCommissionRateField->InstrumentID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInstrumentOrderCommRateField *pInstrumentOrderCommRateField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "InvestorRange", "BrokerID", "InvestorID", "HedgeFlag", "OrderCommByVolume", "OrderActionCommByVolume", "ExchangeID", "InvestUnitID", nullptr};
	char *pInstrumentOrderCommRateField_InstrumentID = nullptr;
	char pInstrumentOrderCommRateField_InvestorRange = 0;
	char *pInstrumentOrderCommRateField_BrokerID = nullptr;
	char *pInstrumentOrderCommRateField_InvestorID = nullptr;
	char pInstrumentOrderCommRateField_HedgeFlag = 0;
	double pInstrumentOrderCommRateField_OrderCommByVolume = 0.0;
	double pInstrumentOrderCommRateField_OrderActionCommByVolume = 0.0;
	char *pInstrumentOrderCommRateField_ExchangeID = nullptr;
	char *pInstrumentOrderCommRateField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInstrumentOrderCommRateField, "|ycyycddyy")
		, &pInstrumentOrderCommRateField_InstrumentID
		, &pInstrumentOrderCommRateField_InvestorRange
		, &pInstrumentOrderCommRateField_BrokerID
		, &pInstrumentOrderCommRateField_InvestorID
		, &pInstrumentOrderCommRateField_HedgeFlag
		, &pInstrumentOrderCommRateField_OrderCommByVolume
		, &pInstrumentOrderCommRateField_OrderActionCommByVolume
		, &pInstrumentOrderCommRateField_ExchangeID
		, &pInstrumentOrderCommRateField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pInstrumentOrderCommRateField_InstrumentID != nullptr){ strcpy_s(pInstrumentOrderCommRateField->InstrumentID, pInstrumentOrderCommRateField_InstrumentID); pInstrumentOrderCommRateField_InstrumentID = nullptr; }
		pInstrumentOrderCommRateField->InvestorRange = pInstrumentOrderCommRateField_InvestorRange;
		if(pInstrumentOrderCommRateField_BrokerID != nullptr){ strcpy_s(pInstrumentOrderCommRateField->BrokerID, pInstrumentOrderCommRateField_BrokerID); pInstrumentOrderCommRateField_BrokerID = nullptr; }
		if(pInstrumentOrderCommRateField_InvestorID != nullptr){ strcpy_s(pInstrumentOrderCommRateField->InvestorID, pInstrumentOrderCommRateField_InvestorID); pInstrumentOrderCommRateField_InvestorID = nullptr; }
		pInstrumentOrderCommRateField->HedgeFlag = pInstrumentOrderCommRateField_HedgeFlag;
		pInstrumentOrderCommRateField->OrderCommByVolume = pInstrumentOrderCommRateField_OrderCommByVolume;
		pInstrumentOrderCommRateField->OrderActionCommByVolume = pInstrumentOrderCommRateField_OrderActionCommByVolume;
		if(pInstrumentOrderCommRateField_ExchangeID != nullptr){ strcpy_s(pInstrumentOrderCommRateField->ExchangeID, pInstrumentOrderCommRateField_ExchangeID); pInstrumentOrderCommRateField_ExchangeID = nullptr; }
		if(pInstrumentOrderCommRateField_InvestUnitID != nullptr){ strcpy_s(pInstrumentOrderCommRateField->InvestUnitID, pInstrumentOrderCommRateField_InvestUnitID); pInstrumentOrderCommRateField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInstrumentOrderCommRateField *pInstrumentOrderCommRateField)
{
	if(pInstrumentOrderCommRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y,s:c,s:d,s:d,s:y,s:y}"
		, "InstrumentID", pInstrumentOrderCommRateField->InstrumentID
		, "InvestorRange", pInstrumentOrderCommRateField->InvestorRange
		, "BrokerID", pInstrumentOrderCommRateField->BrokerID
		, "InvestorID", pInstrumentOrderCommRateField->InvestorID
		, "HedgeFlag", pInstrumentOrderCommRateField->HedgeFlag
		, "OrderCommByVolume", pInstrumentOrderCommRateField->OrderCommByVolume
		, "OrderActionCommByVolume", pInstrumentOrderCommRateField->OrderActionCommByVolume
		, "ExchangeID", pInstrumentOrderCommRateField->ExchangeID
		, "InvestUnitID", pInstrumentOrderCommRateField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryInstrumentOrderCommRateField *pQryInstrumentOrderCommRateField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", nullptr};
	char *pQryInstrumentOrderCommRateField_BrokerID = nullptr;
	char *pQryInstrumentOrderCommRateField_InvestorID = nullptr;
	char *pQryInstrumentOrderCommRateField_InstrumentID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryInstrumentOrderCommRateField, "|yyy")
		, &pQryInstrumentOrderCommRateField_BrokerID
		, &pQryInstrumentOrderCommRateField_InvestorID
		, &pQryInstrumentOrderCommRateField_InstrumentID
	PyCTP_PyDict_FromStruct_END
		if(pQryInstrumentOrderCommRateField_BrokerID != nullptr){ strcpy_s(pQryInstrumentOrderCommRateField->BrokerID, pQryInstrumentOrderCommRateField_BrokerID); pQryInstrumentOrderCommRateField_BrokerID = nullptr; }
		if(pQryInstrumentOrderCommRateField_InvestorID != nullptr){ strcpy_s(pQryInstrumentOrderCommRateField->InvestorID, pQryInstrumentOrderCommRateField_InvestorID); pQryInstrumentOrderCommRateField_InvestorID = nullptr; }
		if(pQryInstrumentOrderCommRateField_InstrumentID != nullptr){ strcpy_s(pQryInstrumentOrderCommRateField->InstrumentID, pQryInstrumentOrderCommRateField_InstrumentID); pQryInstrumentOrderCommRateField_InstrumentID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryInstrumentOrderCommRateField *pQryInstrumentOrderCommRateField)
{
	if(pQryInstrumentOrderCommRateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pQryInstrumentOrderCommRateField->BrokerID
		, "InvestorID", pQryInstrumentOrderCommRateField->InvestorID
		, "InstrumentID", pQryInstrumentOrderCommRateField->InstrumentID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTradeParamField *pTradeParamField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "TradeParamID", "TradeParamValue", "Memo", nullptr};
	char *pTradeParamField_BrokerID = nullptr;
	char pTradeParamField_TradeParamID = 0;
	char *pTradeParamField_TradeParamValue = nullptr;
	char *pTradeParamField_Memo = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTradeParamField, "|ycyy")
		, &pTradeParamField_BrokerID
		, &pTradeParamField_TradeParamID
		, &pTradeParamField_TradeParamValue
		, &pTradeParamField_Memo
	PyCTP_PyDict_FromStruct_END
		if(pTradeParamField_BrokerID != nullptr){ strcpy_s(pTradeParamField->BrokerID, pTradeParamField_BrokerID); pTradeParamField_BrokerID = nullptr; }
		pTradeParamField->TradeParamID = pTradeParamField_TradeParamID;
		if(pTradeParamField_TradeParamValue != nullptr){ strcpy_s(pTradeParamField->TradeParamValue, pTradeParamField_TradeParamValue); pTradeParamField_TradeParamValue = nullptr; }
		if(pTradeParamField_Memo != nullptr){ strcpy_s(pTradeParamField->Memo, pTradeParamField_Memo); pTradeParamField_Memo = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTradeParamField *pTradeParamField)
{
	if(pTradeParamField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y}"
		, "BrokerID", pTradeParamField->BrokerID
		, "TradeParamID", pTradeParamField->TradeParamID
		, "TradeParamValue", pTradeParamField->TradeParamValue
		, "Memo", pTradeParamField->Memo
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInstrumentMarginRateULField *pInstrumentMarginRateULField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "InvestorRange", "BrokerID", "InvestorID", "HedgeFlag", "LongMarginRatioByMoney", "LongMarginRatioByVolume", "ShortMarginRatioByMoney", "ShortMarginRatioByVolume", nullptr};
	char *pInstrumentMarginRateULField_InstrumentID = nullptr;
	char pInstrumentMarginRateULField_InvestorRange = 0;
	char *pInstrumentMarginRateULField_BrokerID = nullptr;
	char *pInstrumentMarginRateULField_InvestorID = nullptr;
	char pInstrumentMarginRateULField_HedgeFlag = 0;
	double pInstrumentMarginRateULField_LongMarginRatioByMoney = 0.0;
	double pInstrumentMarginRateULField_LongMarginRatioByVolume = 0.0;
	double pInstrumentMarginRateULField_ShortMarginRatioByMoney = 0.0;
	double pInstrumentMarginRateULField_ShortMarginRatioByVolume = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pInstrumentMarginRateULField, "|ycyycdddd")
		, &pInstrumentMarginRateULField_InstrumentID
		, &pInstrumentMarginRateULField_InvestorRange
		, &pInstrumentMarginRateULField_BrokerID
		, &pInstrumentMarginRateULField_InvestorID
		, &pInstrumentMarginRateULField_HedgeFlag
		, &pInstrumentMarginRateULField_LongMarginRatioByMoney
		, &pInstrumentMarginRateULField_LongMarginRatioByVolume
		, &pInstrumentMarginRateULField_ShortMarginRatioByMoney
		, &pInstrumentMarginRateULField_ShortMarginRatioByVolume
	PyCTP_PyDict_FromStruct_END
		if(pInstrumentMarginRateULField_InstrumentID != nullptr){ strcpy_s(pInstrumentMarginRateULField->InstrumentID, pInstrumentMarginRateULField_InstrumentID); pInstrumentMarginRateULField_InstrumentID = nullptr; }
		pInstrumentMarginRateULField->InvestorRange = pInstrumentMarginRateULField_InvestorRange;
		if(pInstrumentMarginRateULField_BrokerID != nullptr){ strcpy_s(pInstrumentMarginRateULField->BrokerID, pInstrumentMarginRateULField_BrokerID); pInstrumentMarginRateULField_BrokerID = nullptr; }
		if(pInstrumentMarginRateULField_InvestorID != nullptr){ strcpy_s(pInstrumentMarginRateULField->InvestorID, pInstrumentMarginRateULField_InvestorID); pInstrumentMarginRateULField_InvestorID = nullptr; }
		pInstrumentMarginRateULField->HedgeFlag = pInstrumentMarginRateULField_HedgeFlag;
		pInstrumentMarginRateULField->LongMarginRatioByMoney = pInstrumentMarginRateULField_LongMarginRatioByMoney;
		pInstrumentMarginRateULField->LongMarginRatioByVolume = pInstrumentMarginRateULField_LongMarginRatioByVolume;
		pInstrumentMarginRateULField->ShortMarginRatioByMoney = pInstrumentMarginRateULField_ShortMarginRatioByMoney;
		pInstrumentMarginRateULField->ShortMarginRatioByVolume = pInstrumentMarginRateULField_ShortMarginRatioByVolume;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInstrumentMarginRateULField *pInstrumentMarginRateULField)
{
	if(pInstrumentMarginRateULField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:y,s:c,s:d,s:d,s:d,s:d}"
		, "InstrumentID", pInstrumentMarginRateULField->InstrumentID
		, "InvestorRange", pInstrumentMarginRateULField->InvestorRange
		, "BrokerID", pInstrumentMarginRateULField->BrokerID
		, "InvestorID", pInstrumentMarginRateULField->InvestorID
		, "HedgeFlag", pInstrumentMarginRateULField->HedgeFlag
		, "LongMarginRatioByMoney", pInstrumentMarginRateULField->LongMarginRatioByMoney
		, "LongMarginRatioByVolume", pInstrumentMarginRateULField->LongMarginRatioByVolume
		, "ShortMarginRatioByMoney", pInstrumentMarginRateULField->ShortMarginRatioByMoney
		, "ShortMarginRatioByVolume", pInstrumentMarginRateULField->ShortMarginRatioByVolume
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcFutureLimitPosiParamField *pFutureLimitPosiParamField, PyObject *dict)
{
	static char *kwlist[] = {"InvestorRange", "BrokerID", "InvestorID", "ProductID", "SpecOpenVolume", "ArbiOpenVolume", "OpenVolume", nullptr};
	char pFutureLimitPosiParamField_InvestorRange = 0;
	char *pFutureLimitPosiParamField_BrokerID = nullptr;
	char *pFutureLimitPosiParamField_InvestorID = nullptr;
	char *pFutureLimitPosiParamField_ProductID = nullptr;
	int pFutureLimitPosiParamField_SpecOpenVolume = 0;
	int pFutureLimitPosiParamField_ArbiOpenVolume = 0;
	int pFutureLimitPosiParamField_OpenVolume = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pFutureLimitPosiParamField, "|cyyyiii")
		, &pFutureLimitPosiParamField_InvestorRange
		, &pFutureLimitPosiParamField_BrokerID
		, &pFutureLimitPosiParamField_InvestorID
		, &pFutureLimitPosiParamField_ProductID
		, &pFutureLimitPosiParamField_SpecOpenVolume
		, &pFutureLimitPosiParamField_ArbiOpenVolume
		, &pFutureLimitPosiParamField_OpenVolume
	PyCTP_PyDict_FromStruct_END
		pFutureLimitPosiParamField->InvestorRange = pFutureLimitPosiParamField_InvestorRange;
		if(pFutureLimitPosiParamField_BrokerID != nullptr){ strcpy_s(pFutureLimitPosiParamField->BrokerID, pFutureLimitPosiParamField_BrokerID); pFutureLimitPosiParamField_BrokerID = nullptr; }
		if(pFutureLimitPosiParamField_InvestorID != nullptr){ strcpy_s(pFutureLimitPosiParamField->InvestorID, pFutureLimitPosiParamField_InvestorID); pFutureLimitPosiParamField_InvestorID = nullptr; }
		if(pFutureLimitPosiParamField_ProductID != nullptr){ strcpy_s(pFutureLimitPosiParamField->ProductID, pFutureLimitPosiParamField_ProductID); pFutureLimitPosiParamField_ProductID = nullptr; }
		pFutureLimitPosiParamField->SpecOpenVolume = pFutureLimitPosiParamField_SpecOpenVolume;
		pFutureLimitPosiParamField->ArbiOpenVolume = pFutureLimitPosiParamField_ArbiOpenVolume;
		pFutureLimitPosiParamField->OpenVolume = pFutureLimitPosiParamField_OpenVolume;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcFutureLimitPosiParamField *pFutureLimitPosiParamField)
{
	if(pFutureLimitPosiParamField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:c,s:y,s:y,s:y,s:i,s:i,s:i}"
		, "InvestorRange", pFutureLimitPosiParamField->InvestorRange
		, "BrokerID", pFutureLimitPosiParamField->BrokerID
		, "InvestorID", pFutureLimitPosiParamField->InvestorID
		, "ProductID", pFutureLimitPosiParamField->ProductID
		, "SpecOpenVolume", pFutureLimitPosiParamField->SpecOpenVolume
		, "ArbiOpenVolume", pFutureLimitPosiParamField->ArbiOpenVolume
		, "OpenVolume", pFutureLimitPosiParamField->OpenVolume
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcLoginForbiddenIPField *pLoginForbiddenIPField, PyObject *dict)
{
	static char *kwlist[] = {"IPAddress", nullptr};
	char *pLoginForbiddenIPField_IPAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pLoginForbiddenIPField, "|y")
		, &pLoginForbiddenIPField_IPAddress
	PyCTP_PyDict_FromStruct_END
		if(pLoginForbiddenIPField_IPAddress != nullptr){ strcpy_s(pLoginForbiddenIPField->IPAddress, pLoginForbiddenIPField_IPAddress); pLoginForbiddenIPField_IPAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcLoginForbiddenIPField *pLoginForbiddenIPField)
{
	if(pLoginForbiddenIPField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y}"
		, "IPAddress", pLoginForbiddenIPField->IPAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcIPListField *pIPListField, PyObject *dict)
{
	static char *kwlist[] = {"IPAddress", "IsWhite", nullptr};
	char *pIPListField_IPAddress = nullptr;
	int pIPListField_IsWhite = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pIPListField, "|yi")
		, &pIPListField_IPAddress
		, &pIPListField_IsWhite
	PyCTP_PyDict_FromStruct_END
		if(pIPListField_IPAddress != nullptr){ strcpy_s(pIPListField->IPAddress, pIPListField_IPAddress); pIPListField_IPAddress = nullptr; }
		pIPListField->IsWhite = pIPListField_IsWhite;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcIPListField *pIPListField)
{
	if(pIPListField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:i}"
		, "IPAddress", pIPListField->IPAddress
		, "IsWhite", pIPListField->IsWhite
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInputOptionSelfCloseField *pInputOptionSelfCloseField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "OptionSelfCloseRef", "UserID", "Volume", "RequestID", "BusinessUnit", "HedgeFlag", "OptSelfCloseFlag", "ExchangeID", "InvestUnitID", "AccountID", "CurrencyID", "ClientID", "IPAddress", "MacAddress", nullptr};
	char *pInputOptionSelfCloseField_BrokerID = nullptr;
	char *pInputOptionSelfCloseField_InvestorID = nullptr;
	char *pInputOptionSelfCloseField_InstrumentID = nullptr;
	char *pInputOptionSelfCloseField_OptionSelfCloseRef = nullptr;
	char *pInputOptionSelfCloseField_UserID = nullptr;
	int pInputOptionSelfCloseField_Volume = 0;
	int pInputOptionSelfCloseField_RequestID = 0;
	char *pInputOptionSelfCloseField_BusinessUnit = nullptr;
	char pInputOptionSelfCloseField_HedgeFlag = 0;
	char pInputOptionSelfCloseField_OptSelfCloseFlag = 0;
	char *pInputOptionSelfCloseField_ExchangeID = nullptr;
	char *pInputOptionSelfCloseField_InvestUnitID = nullptr;
	char *pInputOptionSelfCloseField_AccountID = nullptr;
	char *pInputOptionSelfCloseField_CurrencyID = nullptr;
	char *pInputOptionSelfCloseField_ClientID = nullptr;
	char *pInputOptionSelfCloseField_IPAddress = nullptr;
	char *pInputOptionSelfCloseField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInputOptionSelfCloseField, "|yyyyyiiyccyyyyyyy")
		, &pInputOptionSelfCloseField_BrokerID
		, &pInputOptionSelfCloseField_InvestorID
		, &pInputOptionSelfCloseField_InstrumentID
		, &pInputOptionSelfCloseField_OptionSelfCloseRef
		, &pInputOptionSelfCloseField_UserID
		, &pInputOptionSelfCloseField_Volume
		, &pInputOptionSelfCloseField_RequestID
		, &pInputOptionSelfCloseField_BusinessUnit
		, &pInputOptionSelfCloseField_HedgeFlag
		, &pInputOptionSelfCloseField_OptSelfCloseFlag
		, &pInputOptionSelfCloseField_ExchangeID
		, &pInputOptionSelfCloseField_InvestUnitID
		, &pInputOptionSelfCloseField_AccountID
		, &pInputOptionSelfCloseField_CurrencyID
		, &pInputOptionSelfCloseField_ClientID
		, &pInputOptionSelfCloseField_IPAddress
		, &pInputOptionSelfCloseField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pInputOptionSelfCloseField_BrokerID != nullptr){ strcpy_s(pInputOptionSelfCloseField->BrokerID, pInputOptionSelfCloseField_BrokerID); pInputOptionSelfCloseField_BrokerID = nullptr; }
		if(pInputOptionSelfCloseField_InvestorID != nullptr){ strcpy_s(pInputOptionSelfCloseField->InvestorID, pInputOptionSelfCloseField_InvestorID); pInputOptionSelfCloseField_InvestorID = nullptr; }
		if(pInputOptionSelfCloseField_InstrumentID != nullptr){ strcpy_s(pInputOptionSelfCloseField->InstrumentID, pInputOptionSelfCloseField_InstrumentID); pInputOptionSelfCloseField_InstrumentID = nullptr; }
		if(pInputOptionSelfCloseField_OptionSelfCloseRef != nullptr){ strcpy_s(pInputOptionSelfCloseField->OptionSelfCloseRef, pInputOptionSelfCloseField_OptionSelfCloseRef); pInputOptionSelfCloseField_OptionSelfCloseRef = nullptr; }
		if(pInputOptionSelfCloseField_UserID != nullptr){ strcpy_s(pInputOptionSelfCloseField->UserID, pInputOptionSelfCloseField_UserID); pInputOptionSelfCloseField_UserID = nullptr; }
		pInputOptionSelfCloseField->Volume = pInputOptionSelfCloseField_Volume;
		pInputOptionSelfCloseField->RequestID = pInputOptionSelfCloseField_RequestID;
		if(pInputOptionSelfCloseField_BusinessUnit != nullptr){ strcpy_s(pInputOptionSelfCloseField->BusinessUnit, pInputOptionSelfCloseField_BusinessUnit); pInputOptionSelfCloseField_BusinessUnit = nullptr; }
		pInputOptionSelfCloseField->HedgeFlag = pInputOptionSelfCloseField_HedgeFlag;
		pInputOptionSelfCloseField->OptSelfCloseFlag = pInputOptionSelfCloseField_OptSelfCloseFlag;
		if(pInputOptionSelfCloseField_ExchangeID != nullptr){ strcpy_s(pInputOptionSelfCloseField->ExchangeID, pInputOptionSelfCloseField_ExchangeID); pInputOptionSelfCloseField_ExchangeID = nullptr; }
		if(pInputOptionSelfCloseField_InvestUnitID != nullptr){ strcpy_s(pInputOptionSelfCloseField->InvestUnitID, pInputOptionSelfCloseField_InvestUnitID); pInputOptionSelfCloseField_InvestUnitID = nullptr; }
		if(pInputOptionSelfCloseField_AccountID != nullptr){ strcpy_s(pInputOptionSelfCloseField->AccountID, pInputOptionSelfCloseField_AccountID); pInputOptionSelfCloseField_AccountID = nullptr; }
		if(pInputOptionSelfCloseField_CurrencyID != nullptr){ strcpy_s(pInputOptionSelfCloseField->CurrencyID, pInputOptionSelfCloseField_CurrencyID); pInputOptionSelfCloseField_CurrencyID = nullptr; }
		if(pInputOptionSelfCloseField_ClientID != nullptr){ strcpy_s(pInputOptionSelfCloseField->ClientID, pInputOptionSelfCloseField_ClientID); pInputOptionSelfCloseField_ClientID = nullptr; }
		if(pInputOptionSelfCloseField_IPAddress != nullptr){ strcpy_s(pInputOptionSelfCloseField->IPAddress, pInputOptionSelfCloseField_IPAddress); pInputOptionSelfCloseField_IPAddress = nullptr; }
		if(pInputOptionSelfCloseField_MacAddress != nullptr){ strcpy_s(pInputOptionSelfCloseField->MacAddress, pInputOptionSelfCloseField_MacAddress); pInputOptionSelfCloseField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInputOptionSelfCloseField *pInputOptionSelfCloseField)
{
	if(pInputOptionSelfCloseField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:i,s:i,s:y,s:c,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pInputOptionSelfCloseField->BrokerID
		, "InvestorID", pInputOptionSelfCloseField->InvestorID
		, "InstrumentID", pInputOptionSelfCloseField->InstrumentID
		, "OptionSelfCloseRef", pInputOptionSelfCloseField->OptionSelfCloseRef
		, "UserID", pInputOptionSelfCloseField->UserID
		, "Volume", pInputOptionSelfCloseField->Volume
		, "RequestID", pInputOptionSelfCloseField->RequestID
		, "BusinessUnit", pInputOptionSelfCloseField->BusinessUnit
		, "HedgeFlag", pInputOptionSelfCloseField->HedgeFlag
		, "OptSelfCloseFlag", pInputOptionSelfCloseField->OptSelfCloseFlag
		, "ExchangeID", pInputOptionSelfCloseField->ExchangeID
		, "InvestUnitID", pInputOptionSelfCloseField->InvestUnitID
		, "AccountID", pInputOptionSelfCloseField->AccountID
		, "CurrencyID", pInputOptionSelfCloseField->CurrencyID
		, "ClientID", pInputOptionSelfCloseField->ClientID
		, "IPAddress", pInputOptionSelfCloseField->IPAddress
		, "MacAddress", pInputOptionSelfCloseField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInputOptionSelfCloseActionField *pInputOptionSelfCloseActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "OptionSelfCloseActionRef", "OptionSelfCloseRef", "RequestID", "FrontID", "SessionID", "ExchangeID", "OptionSelfCloseSysID", "ActionFlag", "UserID", "InstrumentID", "InvestUnitID", "IPAddress", "MacAddress", nullptr};
	char *pInputOptionSelfCloseActionField_BrokerID = nullptr;
	char *pInputOptionSelfCloseActionField_InvestorID = nullptr;
	int pInputOptionSelfCloseActionField_OptionSelfCloseActionRef = 0;
	char *pInputOptionSelfCloseActionField_OptionSelfCloseRef = nullptr;
	int pInputOptionSelfCloseActionField_RequestID = 0;
	int pInputOptionSelfCloseActionField_FrontID = 0;
	int pInputOptionSelfCloseActionField_SessionID = 0;
	char *pInputOptionSelfCloseActionField_ExchangeID = nullptr;
	char *pInputOptionSelfCloseActionField_OptionSelfCloseSysID = nullptr;
	char pInputOptionSelfCloseActionField_ActionFlag = 0;
	char *pInputOptionSelfCloseActionField_UserID = nullptr;
	char *pInputOptionSelfCloseActionField_InstrumentID = nullptr;
	char *pInputOptionSelfCloseActionField_InvestUnitID = nullptr;
	char *pInputOptionSelfCloseActionField_IPAddress = nullptr;
	char *pInputOptionSelfCloseActionField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInputOptionSelfCloseActionField, "|yyiyiiiyycyyyyy")
		, &pInputOptionSelfCloseActionField_BrokerID
		, &pInputOptionSelfCloseActionField_InvestorID
		, &pInputOptionSelfCloseActionField_OptionSelfCloseActionRef
		, &pInputOptionSelfCloseActionField_OptionSelfCloseRef
		, &pInputOptionSelfCloseActionField_RequestID
		, &pInputOptionSelfCloseActionField_FrontID
		, &pInputOptionSelfCloseActionField_SessionID
		, &pInputOptionSelfCloseActionField_ExchangeID
		, &pInputOptionSelfCloseActionField_OptionSelfCloseSysID
		, &pInputOptionSelfCloseActionField_ActionFlag
		, &pInputOptionSelfCloseActionField_UserID
		, &pInputOptionSelfCloseActionField_InstrumentID
		, &pInputOptionSelfCloseActionField_InvestUnitID
		, &pInputOptionSelfCloseActionField_IPAddress
		, &pInputOptionSelfCloseActionField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pInputOptionSelfCloseActionField_BrokerID != nullptr){ strcpy_s(pInputOptionSelfCloseActionField->BrokerID, pInputOptionSelfCloseActionField_BrokerID); pInputOptionSelfCloseActionField_BrokerID = nullptr; }
		if(pInputOptionSelfCloseActionField_InvestorID != nullptr){ strcpy_s(pInputOptionSelfCloseActionField->InvestorID, pInputOptionSelfCloseActionField_InvestorID); pInputOptionSelfCloseActionField_InvestorID = nullptr; }
		pInputOptionSelfCloseActionField->OptionSelfCloseActionRef = pInputOptionSelfCloseActionField_OptionSelfCloseActionRef;
		if(pInputOptionSelfCloseActionField_OptionSelfCloseRef != nullptr){ strcpy_s(pInputOptionSelfCloseActionField->OptionSelfCloseRef, pInputOptionSelfCloseActionField_OptionSelfCloseRef); pInputOptionSelfCloseActionField_OptionSelfCloseRef = nullptr; }
		pInputOptionSelfCloseActionField->RequestID = pInputOptionSelfCloseActionField_RequestID;
		pInputOptionSelfCloseActionField->FrontID = pInputOptionSelfCloseActionField_FrontID;
		pInputOptionSelfCloseActionField->SessionID = pInputOptionSelfCloseActionField_SessionID;
		if(pInputOptionSelfCloseActionField_ExchangeID != nullptr){ strcpy_s(pInputOptionSelfCloseActionField->ExchangeID, pInputOptionSelfCloseActionField_ExchangeID); pInputOptionSelfCloseActionField_ExchangeID = nullptr; }
		if(pInputOptionSelfCloseActionField_OptionSelfCloseSysID != nullptr){ strcpy_s(pInputOptionSelfCloseActionField->OptionSelfCloseSysID, pInputOptionSelfCloseActionField_OptionSelfCloseSysID); pInputOptionSelfCloseActionField_OptionSelfCloseSysID = nullptr; }
		pInputOptionSelfCloseActionField->ActionFlag = pInputOptionSelfCloseActionField_ActionFlag;
		if(pInputOptionSelfCloseActionField_UserID != nullptr){ strcpy_s(pInputOptionSelfCloseActionField->UserID, pInputOptionSelfCloseActionField_UserID); pInputOptionSelfCloseActionField_UserID = nullptr; }
		if(pInputOptionSelfCloseActionField_InstrumentID != nullptr){ strcpy_s(pInputOptionSelfCloseActionField->InstrumentID, pInputOptionSelfCloseActionField_InstrumentID); pInputOptionSelfCloseActionField_InstrumentID = nullptr; }
		if(pInputOptionSelfCloseActionField_InvestUnitID != nullptr){ strcpy_s(pInputOptionSelfCloseActionField->InvestUnitID, pInputOptionSelfCloseActionField_InvestUnitID); pInputOptionSelfCloseActionField_InvestUnitID = nullptr; }
		if(pInputOptionSelfCloseActionField_IPAddress != nullptr){ strcpy_s(pInputOptionSelfCloseActionField->IPAddress, pInputOptionSelfCloseActionField_IPAddress); pInputOptionSelfCloseActionField_IPAddress = nullptr; }
		if(pInputOptionSelfCloseActionField_MacAddress != nullptr){ strcpy_s(pInputOptionSelfCloseActionField->MacAddress, pInputOptionSelfCloseActionField_MacAddress); pInputOptionSelfCloseActionField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInputOptionSelfCloseActionField *pInputOptionSelfCloseActionField)
{
	if(pInputOptionSelfCloseActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i,s:y,s:i,s:i,s:i,s:y,s:y,s:c,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pInputOptionSelfCloseActionField->BrokerID
		, "InvestorID", pInputOptionSelfCloseActionField->InvestorID
		, "OptionSelfCloseActionRef", pInputOptionSelfCloseActionField->OptionSelfCloseActionRef
		, "OptionSelfCloseRef", pInputOptionSelfCloseActionField->OptionSelfCloseRef
		, "RequestID", pInputOptionSelfCloseActionField->RequestID
		, "FrontID", pInputOptionSelfCloseActionField->FrontID
		, "SessionID", pInputOptionSelfCloseActionField->SessionID
		, "ExchangeID", pInputOptionSelfCloseActionField->ExchangeID
		, "OptionSelfCloseSysID", pInputOptionSelfCloseActionField->OptionSelfCloseSysID
		, "ActionFlag", pInputOptionSelfCloseActionField->ActionFlag
		, "UserID", pInputOptionSelfCloseActionField->UserID
		, "InstrumentID", pInputOptionSelfCloseActionField->InstrumentID
		, "InvestUnitID", pInputOptionSelfCloseActionField->InvestUnitID
		, "IPAddress", pInputOptionSelfCloseActionField->IPAddress
		, "MacAddress", pInputOptionSelfCloseActionField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcOptionSelfCloseField *pOptionSelfCloseField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "OptionSelfCloseRef", "UserID", "Volume", "RequestID", "BusinessUnit", "HedgeFlag", "OptSelfCloseFlag", "OptionSelfCloseLocalID", "ExchangeID", "ParticipantID", "ClientID", "ExchangeInstID", "TraderID", "InstallID", "OrderSubmitStatus", "NotifySequence", "TradingDay", "SettlementID", "OptionSelfCloseSysID", "InsertDate", "InsertTime", "CancelTime", "ExecResult", "ClearingPartID", "SequenceNo", "FrontID", "SessionID", "UserProductInfo", "StatusMsg", "ActiveUserID", "BrokerOptionSelfCloseSeq", "BranchID", "InvestUnitID", "AccountID", "CurrencyID", "IPAddress", "MacAddress", nullptr};
	char *pOptionSelfCloseField_BrokerID = nullptr;
	char *pOptionSelfCloseField_InvestorID = nullptr;
	char *pOptionSelfCloseField_InstrumentID = nullptr;
	char *pOptionSelfCloseField_OptionSelfCloseRef = nullptr;
	char *pOptionSelfCloseField_UserID = nullptr;
	int pOptionSelfCloseField_Volume = 0;
	int pOptionSelfCloseField_RequestID = 0;
	char *pOptionSelfCloseField_BusinessUnit = nullptr;
	char pOptionSelfCloseField_HedgeFlag = 0;
	char pOptionSelfCloseField_OptSelfCloseFlag = 0;
	char *pOptionSelfCloseField_OptionSelfCloseLocalID = nullptr;
	char *pOptionSelfCloseField_ExchangeID = nullptr;
	char *pOptionSelfCloseField_ParticipantID = nullptr;
	char *pOptionSelfCloseField_ClientID = nullptr;
	char *pOptionSelfCloseField_ExchangeInstID = nullptr;
	char *pOptionSelfCloseField_TraderID = nullptr;
	int pOptionSelfCloseField_InstallID = 0;
	char pOptionSelfCloseField_OrderSubmitStatus = 0;
	int pOptionSelfCloseField_NotifySequence = 0;
	char *pOptionSelfCloseField_TradingDay = nullptr;
	int pOptionSelfCloseField_SettlementID = 0;
	char *pOptionSelfCloseField_OptionSelfCloseSysID = nullptr;
	char *pOptionSelfCloseField_InsertDate = nullptr;
	char *pOptionSelfCloseField_InsertTime = nullptr;
	char *pOptionSelfCloseField_CancelTime = nullptr;
	char pOptionSelfCloseField_ExecResult = 0;
	char *pOptionSelfCloseField_ClearingPartID = nullptr;
	int pOptionSelfCloseField_SequenceNo = 0;
	int pOptionSelfCloseField_FrontID = 0;
	int pOptionSelfCloseField_SessionID = 0;
	char *pOptionSelfCloseField_UserProductInfo = nullptr;
	char *pOptionSelfCloseField_StatusMsg = nullptr;
	char *pOptionSelfCloseField_ActiveUserID = nullptr;
	int pOptionSelfCloseField_BrokerOptionSelfCloseSeq = 0;
	char *pOptionSelfCloseField_BranchID = nullptr;
	char *pOptionSelfCloseField_InvestUnitID = nullptr;
	char *pOptionSelfCloseField_AccountID = nullptr;
	char *pOptionSelfCloseField_CurrencyID = nullptr;
	char *pOptionSelfCloseField_IPAddress = nullptr;
	char *pOptionSelfCloseField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pOptionSelfCloseField, "|yyyyyiiyccyyyyyyiciyiyyyycyiiiyyyiyyyyyy")
		, &pOptionSelfCloseField_BrokerID
		, &pOptionSelfCloseField_InvestorID
		, &pOptionSelfCloseField_InstrumentID
		, &pOptionSelfCloseField_OptionSelfCloseRef
		, &pOptionSelfCloseField_UserID
		, &pOptionSelfCloseField_Volume
		, &pOptionSelfCloseField_RequestID
		, &pOptionSelfCloseField_BusinessUnit
		, &pOptionSelfCloseField_HedgeFlag
		, &pOptionSelfCloseField_OptSelfCloseFlag
		, &pOptionSelfCloseField_OptionSelfCloseLocalID
		, &pOptionSelfCloseField_ExchangeID
		, &pOptionSelfCloseField_ParticipantID
		, &pOptionSelfCloseField_ClientID
		, &pOptionSelfCloseField_ExchangeInstID
		, &pOptionSelfCloseField_TraderID
		, &pOptionSelfCloseField_InstallID
		, &pOptionSelfCloseField_OrderSubmitStatus
		, &pOptionSelfCloseField_NotifySequence
		, &pOptionSelfCloseField_TradingDay
		, &pOptionSelfCloseField_SettlementID
		, &pOptionSelfCloseField_OptionSelfCloseSysID
		, &pOptionSelfCloseField_InsertDate
		, &pOptionSelfCloseField_InsertTime
		, &pOptionSelfCloseField_CancelTime
		, &pOptionSelfCloseField_ExecResult
		, &pOptionSelfCloseField_ClearingPartID
		, &pOptionSelfCloseField_SequenceNo
		, &pOptionSelfCloseField_FrontID
		, &pOptionSelfCloseField_SessionID
		, &pOptionSelfCloseField_UserProductInfo
		, &pOptionSelfCloseField_StatusMsg
		, &pOptionSelfCloseField_ActiveUserID
		, &pOptionSelfCloseField_BrokerOptionSelfCloseSeq
		, &pOptionSelfCloseField_BranchID
		, &pOptionSelfCloseField_InvestUnitID
		, &pOptionSelfCloseField_AccountID
		, &pOptionSelfCloseField_CurrencyID
		, &pOptionSelfCloseField_IPAddress
		, &pOptionSelfCloseField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pOptionSelfCloseField_BrokerID != nullptr){ strcpy_s(pOptionSelfCloseField->BrokerID, pOptionSelfCloseField_BrokerID); pOptionSelfCloseField_BrokerID = nullptr; }
		if(pOptionSelfCloseField_InvestorID != nullptr){ strcpy_s(pOptionSelfCloseField->InvestorID, pOptionSelfCloseField_InvestorID); pOptionSelfCloseField_InvestorID = nullptr; }
		if(pOptionSelfCloseField_InstrumentID != nullptr){ strcpy_s(pOptionSelfCloseField->InstrumentID, pOptionSelfCloseField_InstrumentID); pOptionSelfCloseField_InstrumentID = nullptr; }
		if(pOptionSelfCloseField_OptionSelfCloseRef != nullptr){ strcpy_s(pOptionSelfCloseField->OptionSelfCloseRef, pOptionSelfCloseField_OptionSelfCloseRef); pOptionSelfCloseField_OptionSelfCloseRef = nullptr; }
		if(pOptionSelfCloseField_UserID != nullptr){ strcpy_s(pOptionSelfCloseField->UserID, pOptionSelfCloseField_UserID); pOptionSelfCloseField_UserID = nullptr; }
		pOptionSelfCloseField->Volume = pOptionSelfCloseField_Volume;
		pOptionSelfCloseField->RequestID = pOptionSelfCloseField_RequestID;
		if(pOptionSelfCloseField_BusinessUnit != nullptr){ strcpy_s(pOptionSelfCloseField->BusinessUnit, pOptionSelfCloseField_BusinessUnit); pOptionSelfCloseField_BusinessUnit = nullptr; }
		pOptionSelfCloseField->HedgeFlag = pOptionSelfCloseField_HedgeFlag;
		pOptionSelfCloseField->OptSelfCloseFlag = pOptionSelfCloseField_OptSelfCloseFlag;
		if(pOptionSelfCloseField_OptionSelfCloseLocalID != nullptr){ strcpy_s(pOptionSelfCloseField->OptionSelfCloseLocalID, pOptionSelfCloseField_OptionSelfCloseLocalID); pOptionSelfCloseField_OptionSelfCloseLocalID = nullptr; }
		if(pOptionSelfCloseField_ExchangeID != nullptr){ strcpy_s(pOptionSelfCloseField->ExchangeID, pOptionSelfCloseField_ExchangeID); pOptionSelfCloseField_ExchangeID = nullptr; }
		if(pOptionSelfCloseField_ParticipantID != nullptr){ strcpy_s(pOptionSelfCloseField->ParticipantID, pOptionSelfCloseField_ParticipantID); pOptionSelfCloseField_ParticipantID = nullptr; }
		if(pOptionSelfCloseField_ClientID != nullptr){ strcpy_s(pOptionSelfCloseField->ClientID, pOptionSelfCloseField_ClientID); pOptionSelfCloseField_ClientID = nullptr; }
		if(pOptionSelfCloseField_ExchangeInstID != nullptr){ strcpy_s(pOptionSelfCloseField->ExchangeInstID, pOptionSelfCloseField_ExchangeInstID); pOptionSelfCloseField_ExchangeInstID = nullptr; }
		if(pOptionSelfCloseField_TraderID != nullptr){ strcpy_s(pOptionSelfCloseField->TraderID, pOptionSelfCloseField_TraderID); pOptionSelfCloseField_TraderID = nullptr; }
		pOptionSelfCloseField->InstallID = pOptionSelfCloseField_InstallID;
		pOptionSelfCloseField->OrderSubmitStatus = pOptionSelfCloseField_OrderSubmitStatus;
		pOptionSelfCloseField->NotifySequence = pOptionSelfCloseField_NotifySequence;
		if(pOptionSelfCloseField_TradingDay != nullptr){ strcpy_s(pOptionSelfCloseField->TradingDay, pOptionSelfCloseField_TradingDay); pOptionSelfCloseField_TradingDay = nullptr; }
		pOptionSelfCloseField->SettlementID = pOptionSelfCloseField_SettlementID;
		if(pOptionSelfCloseField_OptionSelfCloseSysID != nullptr){ strcpy_s(pOptionSelfCloseField->OptionSelfCloseSysID, pOptionSelfCloseField_OptionSelfCloseSysID); pOptionSelfCloseField_OptionSelfCloseSysID = nullptr; }
		if(pOptionSelfCloseField_InsertDate != nullptr){ strcpy_s(pOptionSelfCloseField->InsertDate, pOptionSelfCloseField_InsertDate); pOptionSelfCloseField_InsertDate = nullptr; }
		if(pOptionSelfCloseField_InsertTime != nullptr){ strcpy_s(pOptionSelfCloseField->InsertTime, pOptionSelfCloseField_InsertTime); pOptionSelfCloseField_InsertTime = nullptr; }
		if(pOptionSelfCloseField_CancelTime != nullptr){ strcpy_s(pOptionSelfCloseField->CancelTime, pOptionSelfCloseField_CancelTime); pOptionSelfCloseField_CancelTime = nullptr; }
		pOptionSelfCloseField->ExecResult = pOptionSelfCloseField_ExecResult;
		if(pOptionSelfCloseField_ClearingPartID != nullptr){ strcpy_s(pOptionSelfCloseField->ClearingPartID, pOptionSelfCloseField_ClearingPartID); pOptionSelfCloseField_ClearingPartID = nullptr; }
		pOptionSelfCloseField->SequenceNo = pOptionSelfCloseField_SequenceNo;
		pOptionSelfCloseField->FrontID = pOptionSelfCloseField_FrontID;
		pOptionSelfCloseField->SessionID = pOptionSelfCloseField_SessionID;
		if(pOptionSelfCloseField_UserProductInfo != nullptr){ strcpy_s(pOptionSelfCloseField->UserProductInfo, pOptionSelfCloseField_UserProductInfo); pOptionSelfCloseField_UserProductInfo = nullptr; }
		if(pOptionSelfCloseField_StatusMsg != nullptr){ strcpy_s(pOptionSelfCloseField->StatusMsg, pOptionSelfCloseField_StatusMsg); pOptionSelfCloseField_StatusMsg = nullptr; }
		if(pOptionSelfCloseField_ActiveUserID != nullptr){ strcpy_s(pOptionSelfCloseField->ActiveUserID, pOptionSelfCloseField_ActiveUserID); pOptionSelfCloseField_ActiveUserID = nullptr; }
		pOptionSelfCloseField->BrokerOptionSelfCloseSeq = pOptionSelfCloseField_BrokerOptionSelfCloseSeq;
		if(pOptionSelfCloseField_BranchID != nullptr){ strcpy_s(pOptionSelfCloseField->BranchID, pOptionSelfCloseField_BranchID); pOptionSelfCloseField_BranchID = nullptr; }
		if(pOptionSelfCloseField_InvestUnitID != nullptr){ strcpy_s(pOptionSelfCloseField->InvestUnitID, pOptionSelfCloseField_InvestUnitID); pOptionSelfCloseField_InvestUnitID = nullptr; }
		if(pOptionSelfCloseField_AccountID != nullptr){ strcpy_s(pOptionSelfCloseField->AccountID, pOptionSelfCloseField_AccountID); pOptionSelfCloseField_AccountID = nullptr; }
		if(pOptionSelfCloseField_CurrencyID != nullptr){ strcpy_s(pOptionSelfCloseField->CurrencyID, pOptionSelfCloseField_CurrencyID); pOptionSelfCloseField_CurrencyID = nullptr; }
		if(pOptionSelfCloseField_IPAddress != nullptr){ strcpy_s(pOptionSelfCloseField->IPAddress, pOptionSelfCloseField_IPAddress); pOptionSelfCloseField_IPAddress = nullptr; }
		if(pOptionSelfCloseField_MacAddress != nullptr){ strcpy_s(pOptionSelfCloseField->MacAddress, pOptionSelfCloseField_MacAddress); pOptionSelfCloseField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcOptionSelfCloseField *pOptionSelfCloseField)
{
	if(pOptionSelfCloseField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:i,s:i,s:y,s:c,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:i,s:y,s:y,s:y,s:y,s:c,s:y,s:i,s:i,s:i,s:y,s:y,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pOptionSelfCloseField->BrokerID
		, "InvestorID", pOptionSelfCloseField->InvestorID
		, "InstrumentID", pOptionSelfCloseField->InstrumentID
		, "OptionSelfCloseRef", pOptionSelfCloseField->OptionSelfCloseRef
		, "UserID", pOptionSelfCloseField->UserID
		, "Volume", pOptionSelfCloseField->Volume
		, "RequestID", pOptionSelfCloseField->RequestID
		, "BusinessUnit", pOptionSelfCloseField->BusinessUnit
		, "HedgeFlag", pOptionSelfCloseField->HedgeFlag
		, "OptSelfCloseFlag", pOptionSelfCloseField->OptSelfCloseFlag
		, "OptionSelfCloseLocalID", pOptionSelfCloseField->OptionSelfCloseLocalID
		, "ExchangeID", pOptionSelfCloseField->ExchangeID
		, "ParticipantID", pOptionSelfCloseField->ParticipantID
		, "ClientID", pOptionSelfCloseField->ClientID
		, "ExchangeInstID", pOptionSelfCloseField->ExchangeInstID
		, "TraderID", pOptionSelfCloseField->TraderID
		, "InstallID", pOptionSelfCloseField->InstallID
		, "OrderSubmitStatus", pOptionSelfCloseField->OrderSubmitStatus
		, "NotifySequence", pOptionSelfCloseField->NotifySequence
		, "TradingDay", pOptionSelfCloseField->TradingDay
		, "SettlementID", pOptionSelfCloseField->SettlementID
		, "OptionSelfCloseSysID", pOptionSelfCloseField->OptionSelfCloseSysID
		, "InsertDate", pOptionSelfCloseField->InsertDate
		, "InsertTime", pOptionSelfCloseField->InsertTime
		, "CancelTime", pOptionSelfCloseField->CancelTime
		, "ExecResult", pOptionSelfCloseField->ExecResult
		, "ClearingPartID", pOptionSelfCloseField->ClearingPartID
		, "SequenceNo", pOptionSelfCloseField->SequenceNo
		, "FrontID", pOptionSelfCloseField->FrontID
		, "SessionID", pOptionSelfCloseField->SessionID
		, "UserProductInfo", pOptionSelfCloseField->UserProductInfo
		, "StatusMsg", pOptionSelfCloseField->StatusMsg
		, "ActiveUserID", pOptionSelfCloseField->ActiveUserID
		, "BrokerOptionSelfCloseSeq", pOptionSelfCloseField->BrokerOptionSelfCloseSeq
		, "BranchID", pOptionSelfCloseField->BranchID
		, "InvestUnitID", pOptionSelfCloseField->InvestUnitID
		, "AccountID", pOptionSelfCloseField->AccountID
		, "CurrencyID", pOptionSelfCloseField->CurrencyID
		, "IPAddress", pOptionSelfCloseField->IPAddress
		, "MacAddress", pOptionSelfCloseField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcOptionSelfCloseActionField *pOptionSelfCloseActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "OptionSelfCloseActionRef", "OptionSelfCloseRef", "RequestID", "FrontID", "SessionID", "ExchangeID", "OptionSelfCloseSysID", "ActionFlag", "ActionDate", "ActionTime", "TraderID", "InstallID", "OptionSelfCloseLocalID", "ActionLocalID", "ParticipantID", "ClientID", "BusinessUnit", "OrderActionStatus", "UserID", "StatusMsg", "InstrumentID", "BranchID", "InvestUnitID", "IPAddress", "MacAddress", nullptr};
	char *pOptionSelfCloseActionField_BrokerID = nullptr;
	char *pOptionSelfCloseActionField_InvestorID = nullptr;
	int pOptionSelfCloseActionField_OptionSelfCloseActionRef = 0;
	char *pOptionSelfCloseActionField_OptionSelfCloseRef = nullptr;
	int pOptionSelfCloseActionField_RequestID = 0;
	int pOptionSelfCloseActionField_FrontID = 0;
	int pOptionSelfCloseActionField_SessionID = 0;
	char *pOptionSelfCloseActionField_ExchangeID = nullptr;
	char *pOptionSelfCloseActionField_OptionSelfCloseSysID = nullptr;
	char pOptionSelfCloseActionField_ActionFlag = 0;
	char *pOptionSelfCloseActionField_ActionDate = nullptr;
	char *pOptionSelfCloseActionField_ActionTime = nullptr;
	char *pOptionSelfCloseActionField_TraderID = nullptr;
	int pOptionSelfCloseActionField_InstallID = 0;
	char *pOptionSelfCloseActionField_OptionSelfCloseLocalID = nullptr;
	char *pOptionSelfCloseActionField_ActionLocalID = nullptr;
	char *pOptionSelfCloseActionField_ParticipantID = nullptr;
	char *pOptionSelfCloseActionField_ClientID = nullptr;
	char *pOptionSelfCloseActionField_BusinessUnit = nullptr;
	char pOptionSelfCloseActionField_OrderActionStatus = 0;
	char *pOptionSelfCloseActionField_UserID = nullptr;
	char *pOptionSelfCloseActionField_StatusMsg = nullptr;
	char *pOptionSelfCloseActionField_InstrumentID = nullptr;
	char *pOptionSelfCloseActionField_BranchID = nullptr;
	char *pOptionSelfCloseActionField_InvestUnitID = nullptr;
	char *pOptionSelfCloseActionField_IPAddress = nullptr;
	char *pOptionSelfCloseActionField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pOptionSelfCloseActionField, "|yyiyiiiyycyyyiyyyyycyyyyyyy")
		, &pOptionSelfCloseActionField_BrokerID
		, &pOptionSelfCloseActionField_InvestorID
		, &pOptionSelfCloseActionField_OptionSelfCloseActionRef
		, &pOptionSelfCloseActionField_OptionSelfCloseRef
		, &pOptionSelfCloseActionField_RequestID
		, &pOptionSelfCloseActionField_FrontID
		, &pOptionSelfCloseActionField_SessionID
		, &pOptionSelfCloseActionField_ExchangeID
		, &pOptionSelfCloseActionField_OptionSelfCloseSysID
		, &pOptionSelfCloseActionField_ActionFlag
		, &pOptionSelfCloseActionField_ActionDate
		, &pOptionSelfCloseActionField_ActionTime
		, &pOptionSelfCloseActionField_TraderID
		, &pOptionSelfCloseActionField_InstallID
		, &pOptionSelfCloseActionField_OptionSelfCloseLocalID
		, &pOptionSelfCloseActionField_ActionLocalID
		, &pOptionSelfCloseActionField_ParticipantID
		, &pOptionSelfCloseActionField_ClientID
		, &pOptionSelfCloseActionField_BusinessUnit
		, &pOptionSelfCloseActionField_OrderActionStatus
		, &pOptionSelfCloseActionField_UserID
		, &pOptionSelfCloseActionField_StatusMsg
		, &pOptionSelfCloseActionField_InstrumentID
		, &pOptionSelfCloseActionField_BranchID
		, &pOptionSelfCloseActionField_InvestUnitID
		, &pOptionSelfCloseActionField_IPAddress
		, &pOptionSelfCloseActionField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pOptionSelfCloseActionField_BrokerID != nullptr){ strcpy_s(pOptionSelfCloseActionField->BrokerID, pOptionSelfCloseActionField_BrokerID); pOptionSelfCloseActionField_BrokerID = nullptr; }
		if(pOptionSelfCloseActionField_InvestorID != nullptr){ strcpy_s(pOptionSelfCloseActionField->InvestorID, pOptionSelfCloseActionField_InvestorID); pOptionSelfCloseActionField_InvestorID = nullptr; }
		pOptionSelfCloseActionField->OptionSelfCloseActionRef = pOptionSelfCloseActionField_OptionSelfCloseActionRef;
		if(pOptionSelfCloseActionField_OptionSelfCloseRef != nullptr){ strcpy_s(pOptionSelfCloseActionField->OptionSelfCloseRef, pOptionSelfCloseActionField_OptionSelfCloseRef); pOptionSelfCloseActionField_OptionSelfCloseRef = nullptr; }
		pOptionSelfCloseActionField->RequestID = pOptionSelfCloseActionField_RequestID;
		pOptionSelfCloseActionField->FrontID = pOptionSelfCloseActionField_FrontID;
		pOptionSelfCloseActionField->SessionID = pOptionSelfCloseActionField_SessionID;
		if(pOptionSelfCloseActionField_ExchangeID != nullptr){ strcpy_s(pOptionSelfCloseActionField->ExchangeID, pOptionSelfCloseActionField_ExchangeID); pOptionSelfCloseActionField_ExchangeID = nullptr; }
		if(pOptionSelfCloseActionField_OptionSelfCloseSysID != nullptr){ strcpy_s(pOptionSelfCloseActionField->OptionSelfCloseSysID, pOptionSelfCloseActionField_OptionSelfCloseSysID); pOptionSelfCloseActionField_OptionSelfCloseSysID = nullptr; }
		pOptionSelfCloseActionField->ActionFlag = pOptionSelfCloseActionField_ActionFlag;
		if(pOptionSelfCloseActionField_ActionDate != nullptr){ strcpy_s(pOptionSelfCloseActionField->ActionDate, pOptionSelfCloseActionField_ActionDate); pOptionSelfCloseActionField_ActionDate = nullptr; }
		if(pOptionSelfCloseActionField_ActionTime != nullptr){ strcpy_s(pOptionSelfCloseActionField->ActionTime, pOptionSelfCloseActionField_ActionTime); pOptionSelfCloseActionField_ActionTime = nullptr; }
		if(pOptionSelfCloseActionField_TraderID != nullptr){ strcpy_s(pOptionSelfCloseActionField->TraderID, pOptionSelfCloseActionField_TraderID); pOptionSelfCloseActionField_TraderID = nullptr; }
		pOptionSelfCloseActionField->InstallID = pOptionSelfCloseActionField_InstallID;
		if(pOptionSelfCloseActionField_OptionSelfCloseLocalID != nullptr){ strcpy_s(pOptionSelfCloseActionField->OptionSelfCloseLocalID, pOptionSelfCloseActionField_OptionSelfCloseLocalID); pOptionSelfCloseActionField_OptionSelfCloseLocalID = nullptr; }
		if(pOptionSelfCloseActionField_ActionLocalID != nullptr){ strcpy_s(pOptionSelfCloseActionField->ActionLocalID, pOptionSelfCloseActionField_ActionLocalID); pOptionSelfCloseActionField_ActionLocalID = nullptr; }
		if(pOptionSelfCloseActionField_ParticipantID != nullptr){ strcpy_s(pOptionSelfCloseActionField->ParticipantID, pOptionSelfCloseActionField_ParticipantID); pOptionSelfCloseActionField_ParticipantID = nullptr; }
		if(pOptionSelfCloseActionField_ClientID != nullptr){ strcpy_s(pOptionSelfCloseActionField->ClientID, pOptionSelfCloseActionField_ClientID); pOptionSelfCloseActionField_ClientID = nullptr; }
		if(pOptionSelfCloseActionField_BusinessUnit != nullptr){ strcpy_s(pOptionSelfCloseActionField->BusinessUnit, pOptionSelfCloseActionField_BusinessUnit); pOptionSelfCloseActionField_BusinessUnit = nullptr; }
		pOptionSelfCloseActionField->OrderActionStatus = pOptionSelfCloseActionField_OrderActionStatus;
		if(pOptionSelfCloseActionField_UserID != nullptr){ strcpy_s(pOptionSelfCloseActionField->UserID, pOptionSelfCloseActionField_UserID); pOptionSelfCloseActionField_UserID = nullptr; }
		if(pOptionSelfCloseActionField_StatusMsg != nullptr){ strcpy_s(pOptionSelfCloseActionField->StatusMsg, pOptionSelfCloseActionField_StatusMsg); pOptionSelfCloseActionField_StatusMsg = nullptr; }
		if(pOptionSelfCloseActionField_InstrumentID != nullptr){ strcpy_s(pOptionSelfCloseActionField->InstrumentID, pOptionSelfCloseActionField_InstrumentID); pOptionSelfCloseActionField_InstrumentID = nullptr; }
		if(pOptionSelfCloseActionField_BranchID != nullptr){ strcpy_s(pOptionSelfCloseActionField->BranchID, pOptionSelfCloseActionField_BranchID); pOptionSelfCloseActionField_BranchID = nullptr; }
		if(pOptionSelfCloseActionField_InvestUnitID != nullptr){ strcpy_s(pOptionSelfCloseActionField->InvestUnitID, pOptionSelfCloseActionField_InvestUnitID); pOptionSelfCloseActionField_InvestUnitID = nullptr; }
		if(pOptionSelfCloseActionField_IPAddress != nullptr){ strcpy_s(pOptionSelfCloseActionField->IPAddress, pOptionSelfCloseActionField_IPAddress); pOptionSelfCloseActionField_IPAddress = nullptr; }
		if(pOptionSelfCloseActionField_MacAddress != nullptr){ strcpy_s(pOptionSelfCloseActionField->MacAddress, pOptionSelfCloseActionField_MacAddress); pOptionSelfCloseActionField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcOptionSelfCloseActionField *pOptionSelfCloseActionField)
{
	if(pOptionSelfCloseActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i,s:y,s:i,s:i,s:i,s:y,s:y,s:c,s:y,s:y,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pOptionSelfCloseActionField->BrokerID
		, "InvestorID", pOptionSelfCloseActionField->InvestorID
		, "OptionSelfCloseActionRef", pOptionSelfCloseActionField->OptionSelfCloseActionRef
		, "OptionSelfCloseRef", pOptionSelfCloseActionField->OptionSelfCloseRef
		, "RequestID", pOptionSelfCloseActionField->RequestID
		, "FrontID", pOptionSelfCloseActionField->FrontID
		, "SessionID", pOptionSelfCloseActionField->SessionID
		, "ExchangeID", pOptionSelfCloseActionField->ExchangeID
		, "OptionSelfCloseSysID", pOptionSelfCloseActionField->OptionSelfCloseSysID
		, "ActionFlag", pOptionSelfCloseActionField->ActionFlag
		, "ActionDate", pOptionSelfCloseActionField->ActionDate
		, "ActionTime", pOptionSelfCloseActionField->ActionTime
		, "TraderID", pOptionSelfCloseActionField->TraderID
		, "InstallID", pOptionSelfCloseActionField->InstallID
		, "OptionSelfCloseLocalID", pOptionSelfCloseActionField->OptionSelfCloseLocalID
		, "ActionLocalID", pOptionSelfCloseActionField->ActionLocalID
		, "ParticipantID", pOptionSelfCloseActionField->ParticipantID
		, "ClientID", pOptionSelfCloseActionField->ClientID
		, "BusinessUnit", pOptionSelfCloseActionField->BusinessUnit
		, "OrderActionStatus", pOptionSelfCloseActionField->OrderActionStatus
		, "UserID", pOptionSelfCloseActionField->UserID
		, "StatusMsg", pOptionSelfCloseActionField->StatusMsg
		, "InstrumentID", pOptionSelfCloseActionField->InstrumentID
		, "BranchID", pOptionSelfCloseActionField->BranchID
		, "InvestUnitID", pOptionSelfCloseActionField->InvestUnitID
		, "IPAddress", pOptionSelfCloseActionField->IPAddress
		, "MacAddress", pOptionSelfCloseActionField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryOptionSelfCloseField *pQryOptionSelfCloseField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ExchangeID", "OptionSelfCloseSysID", "InsertTimeStart", "InsertTimeEnd", nullptr};
	char *pQryOptionSelfCloseField_BrokerID = nullptr;
	char *pQryOptionSelfCloseField_InvestorID = nullptr;
	char *pQryOptionSelfCloseField_InstrumentID = nullptr;
	char *pQryOptionSelfCloseField_ExchangeID = nullptr;
	char *pQryOptionSelfCloseField_OptionSelfCloseSysID = nullptr;
	char *pQryOptionSelfCloseField_InsertTimeStart = nullptr;
	char *pQryOptionSelfCloseField_InsertTimeEnd = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryOptionSelfCloseField, "|yyyyyyy")
		, &pQryOptionSelfCloseField_BrokerID
		, &pQryOptionSelfCloseField_InvestorID
		, &pQryOptionSelfCloseField_InstrumentID
		, &pQryOptionSelfCloseField_ExchangeID
		, &pQryOptionSelfCloseField_OptionSelfCloseSysID
		, &pQryOptionSelfCloseField_InsertTimeStart
		, &pQryOptionSelfCloseField_InsertTimeEnd
	PyCTP_PyDict_FromStruct_END
		if(pQryOptionSelfCloseField_BrokerID != nullptr){ strcpy_s(pQryOptionSelfCloseField->BrokerID, pQryOptionSelfCloseField_BrokerID); pQryOptionSelfCloseField_BrokerID = nullptr; }
		if(pQryOptionSelfCloseField_InvestorID != nullptr){ strcpy_s(pQryOptionSelfCloseField->InvestorID, pQryOptionSelfCloseField_InvestorID); pQryOptionSelfCloseField_InvestorID = nullptr; }
		if(pQryOptionSelfCloseField_InstrumentID != nullptr){ strcpy_s(pQryOptionSelfCloseField->InstrumentID, pQryOptionSelfCloseField_InstrumentID); pQryOptionSelfCloseField_InstrumentID = nullptr; }
		if(pQryOptionSelfCloseField_ExchangeID != nullptr){ strcpy_s(pQryOptionSelfCloseField->ExchangeID, pQryOptionSelfCloseField_ExchangeID); pQryOptionSelfCloseField_ExchangeID = nullptr; }
		if(pQryOptionSelfCloseField_OptionSelfCloseSysID != nullptr){ strcpy_s(pQryOptionSelfCloseField->OptionSelfCloseSysID, pQryOptionSelfCloseField_OptionSelfCloseSysID); pQryOptionSelfCloseField_OptionSelfCloseSysID = nullptr; }
		if(pQryOptionSelfCloseField_InsertTimeStart != nullptr){ strcpy_s(pQryOptionSelfCloseField->InsertTimeStart, pQryOptionSelfCloseField_InsertTimeStart); pQryOptionSelfCloseField_InsertTimeStart = nullptr; }
		if(pQryOptionSelfCloseField_InsertTimeEnd != nullptr){ strcpy_s(pQryOptionSelfCloseField->InsertTimeEnd, pQryOptionSelfCloseField_InsertTimeEnd); pQryOptionSelfCloseField_InsertTimeEnd = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryOptionSelfCloseField *pQryOptionSelfCloseField)
{
	if(pQryOptionSelfCloseField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQryOptionSelfCloseField->BrokerID
		, "InvestorID", pQryOptionSelfCloseField->InvestorID
		, "InstrumentID", pQryOptionSelfCloseField->InstrumentID
		, "ExchangeID", pQryOptionSelfCloseField->ExchangeID
		, "OptionSelfCloseSysID", pQryOptionSelfCloseField->OptionSelfCloseSysID
		, "InsertTimeStart", pQryOptionSelfCloseField->InsertTimeStart
		, "InsertTimeEnd", pQryOptionSelfCloseField->InsertTimeEnd
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeOptionSelfCloseField *pExchangeOptionSelfCloseField, PyObject *dict)
{
	static char *kwlist[] = {"Volume", "RequestID", "BusinessUnit", "HedgeFlag", "OptSelfCloseFlag", "OptionSelfCloseLocalID", "ExchangeID", "ParticipantID", "ClientID", "ExchangeInstID", "TraderID", "InstallID", "OrderSubmitStatus", "NotifySequence", "TradingDay", "SettlementID", "OptionSelfCloseSysID", "InsertDate", "InsertTime", "CancelTime", "ExecResult", "ClearingPartID", "SequenceNo", "BranchID", "IPAddress", "MacAddress", nullptr};
	int pExchangeOptionSelfCloseField_Volume = 0;
	int pExchangeOptionSelfCloseField_RequestID = 0;
	char *pExchangeOptionSelfCloseField_BusinessUnit = nullptr;
	char pExchangeOptionSelfCloseField_HedgeFlag = 0;
	char pExchangeOptionSelfCloseField_OptSelfCloseFlag = 0;
	char *pExchangeOptionSelfCloseField_OptionSelfCloseLocalID = nullptr;
	char *pExchangeOptionSelfCloseField_ExchangeID = nullptr;
	char *pExchangeOptionSelfCloseField_ParticipantID = nullptr;
	char *pExchangeOptionSelfCloseField_ClientID = nullptr;
	char *pExchangeOptionSelfCloseField_ExchangeInstID = nullptr;
	char *pExchangeOptionSelfCloseField_TraderID = nullptr;
	int pExchangeOptionSelfCloseField_InstallID = 0;
	char pExchangeOptionSelfCloseField_OrderSubmitStatus = 0;
	int pExchangeOptionSelfCloseField_NotifySequence = 0;
	char *pExchangeOptionSelfCloseField_TradingDay = nullptr;
	int pExchangeOptionSelfCloseField_SettlementID = 0;
	char *pExchangeOptionSelfCloseField_OptionSelfCloseSysID = nullptr;
	char *pExchangeOptionSelfCloseField_InsertDate = nullptr;
	char *pExchangeOptionSelfCloseField_InsertTime = nullptr;
	char *pExchangeOptionSelfCloseField_CancelTime = nullptr;
	char pExchangeOptionSelfCloseField_ExecResult = 0;
	char *pExchangeOptionSelfCloseField_ClearingPartID = nullptr;
	int pExchangeOptionSelfCloseField_SequenceNo = 0;
	char *pExchangeOptionSelfCloseField_BranchID = nullptr;
	char *pExchangeOptionSelfCloseField_IPAddress = nullptr;
	char *pExchangeOptionSelfCloseField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeOptionSelfCloseField, "|iiyccyyyyyyiciyiyyyycyiyyy")
		, &pExchangeOptionSelfCloseField_Volume
		, &pExchangeOptionSelfCloseField_RequestID
		, &pExchangeOptionSelfCloseField_BusinessUnit
		, &pExchangeOptionSelfCloseField_HedgeFlag
		, &pExchangeOptionSelfCloseField_OptSelfCloseFlag
		, &pExchangeOptionSelfCloseField_OptionSelfCloseLocalID
		, &pExchangeOptionSelfCloseField_ExchangeID
		, &pExchangeOptionSelfCloseField_ParticipantID
		, &pExchangeOptionSelfCloseField_ClientID
		, &pExchangeOptionSelfCloseField_ExchangeInstID
		, &pExchangeOptionSelfCloseField_TraderID
		, &pExchangeOptionSelfCloseField_InstallID
		, &pExchangeOptionSelfCloseField_OrderSubmitStatus
		, &pExchangeOptionSelfCloseField_NotifySequence
		, &pExchangeOptionSelfCloseField_TradingDay
		, &pExchangeOptionSelfCloseField_SettlementID
		, &pExchangeOptionSelfCloseField_OptionSelfCloseSysID
		, &pExchangeOptionSelfCloseField_InsertDate
		, &pExchangeOptionSelfCloseField_InsertTime
		, &pExchangeOptionSelfCloseField_CancelTime
		, &pExchangeOptionSelfCloseField_ExecResult
		, &pExchangeOptionSelfCloseField_ClearingPartID
		, &pExchangeOptionSelfCloseField_SequenceNo
		, &pExchangeOptionSelfCloseField_BranchID
		, &pExchangeOptionSelfCloseField_IPAddress
		, &pExchangeOptionSelfCloseField_MacAddress
	PyCTP_PyDict_FromStruct_END
		pExchangeOptionSelfCloseField->Volume = pExchangeOptionSelfCloseField_Volume;
		pExchangeOptionSelfCloseField->RequestID = pExchangeOptionSelfCloseField_RequestID;
		if(pExchangeOptionSelfCloseField_BusinessUnit != nullptr){ strcpy_s(pExchangeOptionSelfCloseField->BusinessUnit, pExchangeOptionSelfCloseField_BusinessUnit); pExchangeOptionSelfCloseField_BusinessUnit = nullptr; }
		pExchangeOptionSelfCloseField->HedgeFlag = pExchangeOptionSelfCloseField_HedgeFlag;
		pExchangeOptionSelfCloseField->OptSelfCloseFlag = pExchangeOptionSelfCloseField_OptSelfCloseFlag;
		if(pExchangeOptionSelfCloseField_OptionSelfCloseLocalID != nullptr){ strcpy_s(pExchangeOptionSelfCloseField->OptionSelfCloseLocalID, pExchangeOptionSelfCloseField_OptionSelfCloseLocalID); pExchangeOptionSelfCloseField_OptionSelfCloseLocalID = nullptr; }
		if(pExchangeOptionSelfCloseField_ExchangeID != nullptr){ strcpy_s(pExchangeOptionSelfCloseField->ExchangeID, pExchangeOptionSelfCloseField_ExchangeID); pExchangeOptionSelfCloseField_ExchangeID = nullptr; }
		if(pExchangeOptionSelfCloseField_ParticipantID != nullptr){ strcpy_s(pExchangeOptionSelfCloseField->ParticipantID, pExchangeOptionSelfCloseField_ParticipantID); pExchangeOptionSelfCloseField_ParticipantID = nullptr; }
		if(pExchangeOptionSelfCloseField_ClientID != nullptr){ strcpy_s(pExchangeOptionSelfCloseField->ClientID, pExchangeOptionSelfCloseField_ClientID); pExchangeOptionSelfCloseField_ClientID = nullptr; }
		if(pExchangeOptionSelfCloseField_ExchangeInstID != nullptr){ strcpy_s(pExchangeOptionSelfCloseField->ExchangeInstID, pExchangeOptionSelfCloseField_ExchangeInstID); pExchangeOptionSelfCloseField_ExchangeInstID = nullptr; }
		if(pExchangeOptionSelfCloseField_TraderID != nullptr){ strcpy_s(pExchangeOptionSelfCloseField->TraderID, pExchangeOptionSelfCloseField_TraderID); pExchangeOptionSelfCloseField_TraderID = nullptr; }
		pExchangeOptionSelfCloseField->InstallID = pExchangeOptionSelfCloseField_InstallID;
		pExchangeOptionSelfCloseField->OrderSubmitStatus = pExchangeOptionSelfCloseField_OrderSubmitStatus;
		pExchangeOptionSelfCloseField->NotifySequence = pExchangeOptionSelfCloseField_NotifySequence;
		if(pExchangeOptionSelfCloseField_TradingDay != nullptr){ strcpy_s(pExchangeOptionSelfCloseField->TradingDay, pExchangeOptionSelfCloseField_TradingDay); pExchangeOptionSelfCloseField_TradingDay = nullptr; }
		pExchangeOptionSelfCloseField->SettlementID = pExchangeOptionSelfCloseField_SettlementID;
		if(pExchangeOptionSelfCloseField_OptionSelfCloseSysID != nullptr){ strcpy_s(pExchangeOptionSelfCloseField->OptionSelfCloseSysID, pExchangeOptionSelfCloseField_OptionSelfCloseSysID); pExchangeOptionSelfCloseField_OptionSelfCloseSysID = nullptr; }
		if(pExchangeOptionSelfCloseField_InsertDate != nullptr){ strcpy_s(pExchangeOptionSelfCloseField->InsertDate, pExchangeOptionSelfCloseField_InsertDate); pExchangeOptionSelfCloseField_InsertDate = nullptr; }
		if(pExchangeOptionSelfCloseField_InsertTime != nullptr){ strcpy_s(pExchangeOptionSelfCloseField->InsertTime, pExchangeOptionSelfCloseField_InsertTime); pExchangeOptionSelfCloseField_InsertTime = nullptr; }
		if(pExchangeOptionSelfCloseField_CancelTime != nullptr){ strcpy_s(pExchangeOptionSelfCloseField->CancelTime, pExchangeOptionSelfCloseField_CancelTime); pExchangeOptionSelfCloseField_CancelTime = nullptr; }
		pExchangeOptionSelfCloseField->ExecResult = pExchangeOptionSelfCloseField_ExecResult;
		if(pExchangeOptionSelfCloseField_ClearingPartID != nullptr){ strcpy_s(pExchangeOptionSelfCloseField->ClearingPartID, pExchangeOptionSelfCloseField_ClearingPartID); pExchangeOptionSelfCloseField_ClearingPartID = nullptr; }
		pExchangeOptionSelfCloseField->SequenceNo = pExchangeOptionSelfCloseField_SequenceNo;
		if(pExchangeOptionSelfCloseField_BranchID != nullptr){ strcpy_s(pExchangeOptionSelfCloseField->BranchID, pExchangeOptionSelfCloseField_BranchID); pExchangeOptionSelfCloseField_BranchID = nullptr; }
		if(pExchangeOptionSelfCloseField_IPAddress != nullptr){ strcpy_s(pExchangeOptionSelfCloseField->IPAddress, pExchangeOptionSelfCloseField_IPAddress); pExchangeOptionSelfCloseField_IPAddress = nullptr; }
		if(pExchangeOptionSelfCloseField_MacAddress != nullptr){ strcpy_s(pExchangeOptionSelfCloseField->MacAddress, pExchangeOptionSelfCloseField_MacAddress); pExchangeOptionSelfCloseField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeOptionSelfCloseField *pExchangeOptionSelfCloseField)
{
	if(pExchangeOptionSelfCloseField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i,s:i,s:y,s:c,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:i,s:y,s:y,s:y,s:y,s:c,s:y,s:i,s:y,s:y,s:y}"
		, "Volume", pExchangeOptionSelfCloseField->Volume
		, "RequestID", pExchangeOptionSelfCloseField->RequestID
		, "BusinessUnit", pExchangeOptionSelfCloseField->BusinessUnit
		, "HedgeFlag", pExchangeOptionSelfCloseField->HedgeFlag
		, "OptSelfCloseFlag", pExchangeOptionSelfCloseField->OptSelfCloseFlag
		, "OptionSelfCloseLocalID", pExchangeOptionSelfCloseField->OptionSelfCloseLocalID
		, "ExchangeID", pExchangeOptionSelfCloseField->ExchangeID
		, "ParticipantID", pExchangeOptionSelfCloseField->ParticipantID
		, "ClientID", pExchangeOptionSelfCloseField->ClientID
		, "ExchangeInstID", pExchangeOptionSelfCloseField->ExchangeInstID
		, "TraderID", pExchangeOptionSelfCloseField->TraderID
		, "InstallID", pExchangeOptionSelfCloseField->InstallID
		, "OrderSubmitStatus", pExchangeOptionSelfCloseField->OrderSubmitStatus
		, "NotifySequence", pExchangeOptionSelfCloseField->NotifySequence
		, "TradingDay", pExchangeOptionSelfCloseField->TradingDay
		, "SettlementID", pExchangeOptionSelfCloseField->SettlementID
		, "OptionSelfCloseSysID", pExchangeOptionSelfCloseField->OptionSelfCloseSysID
		, "InsertDate", pExchangeOptionSelfCloseField->InsertDate
		, "InsertTime", pExchangeOptionSelfCloseField->InsertTime
		, "CancelTime", pExchangeOptionSelfCloseField->CancelTime
		, "ExecResult", pExchangeOptionSelfCloseField->ExecResult
		, "ClearingPartID", pExchangeOptionSelfCloseField->ClearingPartID
		, "SequenceNo", pExchangeOptionSelfCloseField->SequenceNo
		, "BranchID", pExchangeOptionSelfCloseField->BranchID
		, "IPAddress", pExchangeOptionSelfCloseField->IPAddress
		, "MacAddress", pExchangeOptionSelfCloseField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryOptionSelfCloseActionField *pQryOptionSelfCloseActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "ExchangeID", nullptr};
	char *pQryOptionSelfCloseActionField_BrokerID = nullptr;
	char *pQryOptionSelfCloseActionField_InvestorID = nullptr;
	char *pQryOptionSelfCloseActionField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryOptionSelfCloseActionField, "|yyy")
		, &pQryOptionSelfCloseActionField_BrokerID
		, &pQryOptionSelfCloseActionField_InvestorID
		, &pQryOptionSelfCloseActionField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pQryOptionSelfCloseActionField_BrokerID != nullptr){ strcpy_s(pQryOptionSelfCloseActionField->BrokerID, pQryOptionSelfCloseActionField_BrokerID); pQryOptionSelfCloseActionField_BrokerID = nullptr; }
		if(pQryOptionSelfCloseActionField_InvestorID != nullptr){ strcpy_s(pQryOptionSelfCloseActionField->InvestorID, pQryOptionSelfCloseActionField_InvestorID); pQryOptionSelfCloseActionField_InvestorID = nullptr; }
		if(pQryOptionSelfCloseActionField_ExchangeID != nullptr){ strcpy_s(pQryOptionSelfCloseActionField->ExchangeID, pQryOptionSelfCloseActionField_ExchangeID); pQryOptionSelfCloseActionField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryOptionSelfCloseActionField *pQryOptionSelfCloseActionField)
{
	if(pQryOptionSelfCloseActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pQryOptionSelfCloseActionField->BrokerID
		, "InvestorID", pQryOptionSelfCloseActionField->InvestorID
		, "ExchangeID", pQryOptionSelfCloseActionField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeOptionSelfCloseActionField *pExchangeOptionSelfCloseActionField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "OptionSelfCloseSysID", "ActionFlag", "ActionDate", "ActionTime", "TraderID", "InstallID", "OptionSelfCloseLocalID", "ActionLocalID", "ParticipantID", "ClientID", "BusinessUnit", "OrderActionStatus", "UserID", "BranchID", "IPAddress", "MacAddress", "ExchangeInstID", "OptSelfCloseFlag", nullptr};
	char *pExchangeOptionSelfCloseActionField_ExchangeID = nullptr;
	char *pExchangeOptionSelfCloseActionField_OptionSelfCloseSysID = nullptr;
	char pExchangeOptionSelfCloseActionField_ActionFlag = 0;
	char *pExchangeOptionSelfCloseActionField_ActionDate = nullptr;
	char *pExchangeOptionSelfCloseActionField_ActionTime = nullptr;
	char *pExchangeOptionSelfCloseActionField_TraderID = nullptr;
	int pExchangeOptionSelfCloseActionField_InstallID = 0;
	char *pExchangeOptionSelfCloseActionField_OptionSelfCloseLocalID = nullptr;
	char *pExchangeOptionSelfCloseActionField_ActionLocalID = nullptr;
	char *pExchangeOptionSelfCloseActionField_ParticipantID = nullptr;
	char *pExchangeOptionSelfCloseActionField_ClientID = nullptr;
	char *pExchangeOptionSelfCloseActionField_BusinessUnit = nullptr;
	char pExchangeOptionSelfCloseActionField_OrderActionStatus = 0;
	char *pExchangeOptionSelfCloseActionField_UserID = nullptr;
	char *pExchangeOptionSelfCloseActionField_BranchID = nullptr;
	char *pExchangeOptionSelfCloseActionField_IPAddress = nullptr;
	char *pExchangeOptionSelfCloseActionField_MacAddress = nullptr;
	char *pExchangeOptionSelfCloseActionField_ExchangeInstID = nullptr;
	char pExchangeOptionSelfCloseActionField_OptSelfCloseFlag = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeOptionSelfCloseActionField, "|yycyyyiyyyyycyyyyyc")
		, &pExchangeOptionSelfCloseActionField_ExchangeID
		, &pExchangeOptionSelfCloseActionField_OptionSelfCloseSysID
		, &pExchangeOptionSelfCloseActionField_ActionFlag
		, &pExchangeOptionSelfCloseActionField_ActionDate
		, &pExchangeOptionSelfCloseActionField_ActionTime
		, &pExchangeOptionSelfCloseActionField_TraderID
		, &pExchangeOptionSelfCloseActionField_InstallID
		, &pExchangeOptionSelfCloseActionField_OptionSelfCloseLocalID
		, &pExchangeOptionSelfCloseActionField_ActionLocalID
		, &pExchangeOptionSelfCloseActionField_ParticipantID
		, &pExchangeOptionSelfCloseActionField_ClientID
		, &pExchangeOptionSelfCloseActionField_BusinessUnit
		, &pExchangeOptionSelfCloseActionField_OrderActionStatus
		, &pExchangeOptionSelfCloseActionField_UserID
		, &pExchangeOptionSelfCloseActionField_BranchID
		, &pExchangeOptionSelfCloseActionField_IPAddress
		, &pExchangeOptionSelfCloseActionField_MacAddress
		, &pExchangeOptionSelfCloseActionField_ExchangeInstID
		, &pExchangeOptionSelfCloseActionField_OptSelfCloseFlag
	PyCTP_PyDict_FromStruct_END
		if(pExchangeOptionSelfCloseActionField_ExchangeID != nullptr){ strcpy_s(pExchangeOptionSelfCloseActionField->ExchangeID, pExchangeOptionSelfCloseActionField_ExchangeID); pExchangeOptionSelfCloseActionField_ExchangeID = nullptr; }
		if(pExchangeOptionSelfCloseActionField_OptionSelfCloseSysID != nullptr){ strcpy_s(pExchangeOptionSelfCloseActionField->OptionSelfCloseSysID, pExchangeOptionSelfCloseActionField_OptionSelfCloseSysID); pExchangeOptionSelfCloseActionField_OptionSelfCloseSysID = nullptr; }
		pExchangeOptionSelfCloseActionField->ActionFlag = pExchangeOptionSelfCloseActionField_ActionFlag;
		if(pExchangeOptionSelfCloseActionField_ActionDate != nullptr){ strcpy_s(pExchangeOptionSelfCloseActionField->ActionDate, pExchangeOptionSelfCloseActionField_ActionDate); pExchangeOptionSelfCloseActionField_ActionDate = nullptr; }
		if(pExchangeOptionSelfCloseActionField_ActionTime != nullptr){ strcpy_s(pExchangeOptionSelfCloseActionField->ActionTime, pExchangeOptionSelfCloseActionField_ActionTime); pExchangeOptionSelfCloseActionField_ActionTime = nullptr; }
		if(pExchangeOptionSelfCloseActionField_TraderID != nullptr){ strcpy_s(pExchangeOptionSelfCloseActionField->TraderID, pExchangeOptionSelfCloseActionField_TraderID); pExchangeOptionSelfCloseActionField_TraderID = nullptr; }
		pExchangeOptionSelfCloseActionField->InstallID = pExchangeOptionSelfCloseActionField_InstallID;
		if(pExchangeOptionSelfCloseActionField_OptionSelfCloseLocalID != nullptr){ strcpy_s(pExchangeOptionSelfCloseActionField->OptionSelfCloseLocalID, pExchangeOptionSelfCloseActionField_OptionSelfCloseLocalID); pExchangeOptionSelfCloseActionField_OptionSelfCloseLocalID = nullptr; }
		if(pExchangeOptionSelfCloseActionField_ActionLocalID != nullptr){ strcpy_s(pExchangeOptionSelfCloseActionField->ActionLocalID, pExchangeOptionSelfCloseActionField_ActionLocalID); pExchangeOptionSelfCloseActionField_ActionLocalID = nullptr; }
		if(pExchangeOptionSelfCloseActionField_ParticipantID != nullptr){ strcpy_s(pExchangeOptionSelfCloseActionField->ParticipantID, pExchangeOptionSelfCloseActionField_ParticipantID); pExchangeOptionSelfCloseActionField_ParticipantID = nullptr; }
		if(pExchangeOptionSelfCloseActionField_ClientID != nullptr){ strcpy_s(pExchangeOptionSelfCloseActionField->ClientID, pExchangeOptionSelfCloseActionField_ClientID); pExchangeOptionSelfCloseActionField_ClientID = nullptr; }
		if(pExchangeOptionSelfCloseActionField_BusinessUnit != nullptr){ strcpy_s(pExchangeOptionSelfCloseActionField->BusinessUnit, pExchangeOptionSelfCloseActionField_BusinessUnit); pExchangeOptionSelfCloseActionField_BusinessUnit = nullptr; }
		pExchangeOptionSelfCloseActionField->OrderActionStatus = pExchangeOptionSelfCloseActionField_OrderActionStatus;
		if(pExchangeOptionSelfCloseActionField_UserID != nullptr){ strcpy_s(pExchangeOptionSelfCloseActionField->UserID, pExchangeOptionSelfCloseActionField_UserID); pExchangeOptionSelfCloseActionField_UserID = nullptr; }
		if(pExchangeOptionSelfCloseActionField_BranchID != nullptr){ strcpy_s(pExchangeOptionSelfCloseActionField->BranchID, pExchangeOptionSelfCloseActionField_BranchID); pExchangeOptionSelfCloseActionField_BranchID = nullptr; }
		if(pExchangeOptionSelfCloseActionField_IPAddress != nullptr){ strcpy_s(pExchangeOptionSelfCloseActionField->IPAddress, pExchangeOptionSelfCloseActionField_IPAddress); pExchangeOptionSelfCloseActionField_IPAddress = nullptr; }
		if(pExchangeOptionSelfCloseActionField_MacAddress != nullptr){ strcpy_s(pExchangeOptionSelfCloseActionField->MacAddress, pExchangeOptionSelfCloseActionField_MacAddress); pExchangeOptionSelfCloseActionField_MacAddress = nullptr; }
		if(pExchangeOptionSelfCloseActionField_ExchangeInstID != nullptr){ strcpy_s(pExchangeOptionSelfCloseActionField->ExchangeInstID, pExchangeOptionSelfCloseActionField_ExchangeInstID); pExchangeOptionSelfCloseActionField_ExchangeInstID = nullptr; }
		pExchangeOptionSelfCloseActionField->OptSelfCloseFlag = pExchangeOptionSelfCloseActionField_OptSelfCloseFlag;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeOptionSelfCloseActionField *pExchangeOptionSelfCloseActionField)
{
	if(pExchangeOptionSelfCloseActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c,s:y,s:y,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:c}"
		, "ExchangeID", pExchangeOptionSelfCloseActionField->ExchangeID
		, "OptionSelfCloseSysID", pExchangeOptionSelfCloseActionField->OptionSelfCloseSysID
		, "ActionFlag", pExchangeOptionSelfCloseActionField->ActionFlag
		, "ActionDate", pExchangeOptionSelfCloseActionField->ActionDate
		, "ActionTime", pExchangeOptionSelfCloseActionField->ActionTime
		, "TraderID", pExchangeOptionSelfCloseActionField->TraderID
		, "InstallID", pExchangeOptionSelfCloseActionField->InstallID
		, "OptionSelfCloseLocalID", pExchangeOptionSelfCloseActionField->OptionSelfCloseLocalID
		, "ActionLocalID", pExchangeOptionSelfCloseActionField->ActionLocalID
		, "ParticipantID", pExchangeOptionSelfCloseActionField->ParticipantID
		, "ClientID", pExchangeOptionSelfCloseActionField->ClientID
		, "BusinessUnit", pExchangeOptionSelfCloseActionField->BusinessUnit
		, "OrderActionStatus", pExchangeOptionSelfCloseActionField->OrderActionStatus
		, "UserID", pExchangeOptionSelfCloseActionField->UserID
		, "BranchID", pExchangeOptionSelfCloseActionField->BranchID
		, "IPAddress", pExchangeOptionSelfCloseActionField->IPAddress
		, "MacAddress", pExchangeOptionSelfCloseActionField->MacAddress
		, "ExchangeInstID", pExchangeOptionSelfCloseActionField->ExchangeInstID
		, "OptSelfCloseFlag", pExchangeOptionSelfCloseActionField->OptSelfCloseFlag
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSyncDelaySwapField *pSyncDelaySwapField, PyObject *dict)
{
	static char *kwlist[] = {"DelaySwapSeqNo", "BrokerID", "InvestorID", "FromCurrencyID", "FromAmount", "FromFrozenSwap", "FromRemainSwap", "ToCurrencyID", "ToAmount", nullptr};
	char *pSyncDelaySwapField_DelaySwapSeqNo = nullptr;
	char *pSyncDelaySwapField_BrokerID = nullptr;
	char *pSyncDelaySwapField_InvestorID = nullptr;
	char *pSyncDelaySwapField_FromCurrencyID = nullptr;
	double pSyncDelaySwapField_FromAmount = 0.0;
	double pSyncDelaySwapField_FromFrozenSwap = 0.0;
	double pSyncDelaySwapField_FromRemainSwap = 0.0;
	char *pSyncDelaySwapField_ToCurrencyID = nullptr;
	double pSyncDelaySwapField_ToAmount = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pSyncDelaySwapField, "|yyyydddyd")
		, &pSyncDelaySwapField_DelaySwapSeqNo
		, &pSyncDelaySwapField_BrokerID
		, &pSyncDelaySwapField_InvestorID
		, &pSyncDelaySwapField_FromCurrencyID
		, &pSyncDelaySwapField_FromAmount
		, &pSyncDelaySwapField_FromFrozenSwap
		, &pSyncDelaySwapField_FromRemainSwap
		, &pSyncDelaySwapField_ToCurrencyID
		, &pSyncDelaySwapField_ToAmount
	PyCTP_PyDict_FromStruct_END
		if(pSyncDelaySwapField_DelaySwapSeqNo != nullptr){ strcpy_s(pSyncDelaySwapField->DelaySwapSeqNo, pSyncDelaySwapField_DelaySwapSeqNo); pSyncDelaySwapField_DelaySwapSeqNo = nullptr; }
		if(pSyncDelaySwapField_BrokerID != nullptr){ strcpy_s(pSyncDelaySwapField->BrokerID, pSyncDelaySwapField_BrokerID); pSyncDelaySwapField_BrokerID = nullptr; }
		if(pSyncDelaySwapField_InvestorID != nullptr){ strcpy_s(pSyncDelaySwapField->InvestorID, pSyncDelaySwapField_InvestorID); pSyncDelaySwapField_InvestorID = nullptr; }
		if(pSyncDelaySwapField_FromCurrencyID != nullptr){ strcpy_s(pSyncDelaySwapField->FromCurrencyID, pSyncDelaySwapField_FromCurrencyID); pSyncDelaySwapField_FromCurrencyID = nullptr; }
		pSyncDelaySwapField->FromAmount = pSyncDelaySwapField_FromAmount;
		pSyncDelaySwapField->FromFrozenSwap = pSyncDelaySwapField_FromFrozenSwap;
		pSyncDelaySwapField->FromRemainSwap = pSyncDelaySwapField_FromRemainSwap;
		if(pSyncDelaySwapField_ToCurrencyID != nullptr){ strcpy_s(pSyncDelaySwapField->ToCurrencyID, pSyncDelaySwapField_ToCurrencyID); pSyncDelaySwapField_ToCurrencyID = nullptr; }
		pSyncDelaySwapField->ToAmount = pSyncDelaySwapField_ToAmount;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSyncDelaySwapField *pSyncDelaySwapField)
{
	if(pSyncDelaySwapField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:d,s:d,s:d,s:y,s:d}"
		, "DelaySwapSeqNo", pSyncDelaySwapField->DelaySwapSeqNo
		, "BrokerID", pSyncDelaySwapField->BrokerID
		, "InvestorID", pSyncDelaySwapField->InvestorID
		, "FromCurrencyID", pSyncDelaySwapField->FromCurrencyID
		, "FromAmount", pSyncDelaySwapField->FromAmount
		, "FromFrozenSwap", pSyncDelaySwapField->FromFrozenSwap
		, "FromRemainSwap", pSyncDelaySwapField->FromRemainSwap
		, "ToCurrencyID", pSyncDelaySwapField->ToCurrencyID
		, "ToAmount", pSyncDelaySwapField->ToAmount
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQrySyncDelaySwapField *pQrySyncDelaySwapField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "DelaySwapSeqNo", nullptr};
	char *pQrySyncDelaySwapField_BrokerID = nullptr;
	char *pQrySyncDelaySwapField_DelaySwapSeqNo = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQrySyncDelaySwapField, "|yy")
		, &pQrySyncDelaySwapField_BrokerID
		, &pQrySyncDelaySwapField_DelaySwapSeqNo
	PyCTP_PyDict_FromStruct_END
		if(pQrySyncDelaySwapField_BrokerID != nullptr){ strcpy_s(pQrySyncDelaySwapField->BrokerID, pQrySyncDelaySwapField_BrokerID); pQrySyncDelaySwapField_BrokerID = nullptr; }
		if(pQrySyncDelaySwapField_DelaySwapSeqNo != nullptr){ strcpy_s(pQrySyncDelaySwapField->DelaySwapSeqNo, pQrySyncDelaySwapField_DelaySwapSeqNo); pQrySyncDelaySwapField_DelaySwapSeqNo = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQrySyncDelaySwapField *pQrySyncDelaySwapField)
{
	if(pQrySyncDelaySwapField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQrySyncDelaySwapField->BrokerID
		, "DelaySwapSeqNo", pQrySyncDelaySwapField->DelaySwapSeqNo
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInvestUnitField *pInvestUnitField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InvestUnitID", "InvestorUnitName", "InvestorGroupID", "CommModelID", "MarginModelID", "AccountID", "CurrencyID", nullptr};
	char *pInvestUnitField_BrokerID = nullptr;
	char *pInvestUnitField_InvestorID = nullptr;
	char *pInvestUnitField_InvestUnitID = nullptr;
	char *pInvestUnitField_InvestorUnitName = nullptr;
	char *pInvestUnitField_InvestorGroupID = nullptr;
	char *pInvestUnitField_CommModelID = nullptr;
	char *pInvestUnitField_MarginModelID = nullptr;
	char *pInvestUnitField_AccountID = nullptr;
	char *pInvestUnitField_CurrencyID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInvestUnitField, "|yyyyyyyyy")
		, &pInvestUnitField_BrokerID
		, &pInvestUnitField_InvestorID
		, &pInvestUnitField_InvestUnitID
		, &pInvestUnitField_InvestorUnitName
		, &pInvestUnitField_InvestorGroupID
		, &pInvestUnitField_CommModelID
		, &pInvestUnitField_MarginModelID
		, &pInvestUnitField_AccountID
		, &pInvestUnitField_CurrencyID
	PyCTP_PyDict_FromStruct_END
		if(pInvestUnitField_BrokerID != nullptr){ strcpy_s(pInvestUnitField->BrokerID, pInvestUnitField_BrokerID); pInvestUnitField_BrokerID = nullptr; }
		if(pInvestUnitField_InvestorID != nullptr){ strcpy_s(pInvestUnitField->InvestorID, pInvestUnitField_InvestorID); pInvestUnitField_InvestorID = nullptr; }
		if(pInvestUnitField_InvestUnitID != nullptr){ strcpy_s(pInvestUnitField->InvestUnitID, pInvestUnitField_InvestUnitID); pInvestUnitField_InvestUnitID = nullptr; }
		if(pInvestUnitField_InvestorUnitName != nullptr){ strcpy_s(pInvestUnitField->InvestorUnitName, pInvestUnitField_InvestorUnitName); pInvestUnitField_InvestorUnitName = nullptr; }
		if(pInvestUnitField_InvestorGroupID != nullptr){ strcpy_s(pInvestUnitField->InvestorGroupID, pInvestUnitField_InvestorGroupID); pInvestUnitField_InvestorGroupID = nullptr; }
		if(pInvestUnitField_CommModelID != nullptr){ strcpy_s(pInvestUnitField->CommModelID, pInvestUnitField_CommModelID); pInvestUnitField_CommModelID = nullptr; }
		if(pInvestUnitField_MarginModelID != nullptr){ strcpy_s(pInvestUnitField->MarginModelID, pInvestUnitField_MarginModelID); pInvestUnitField_MarginModelID = nullptr; }
		if(pInvestUnitField_AccountID != nullptr){ strcpy_s(pInvestUnitField->AccountID, pInvestUnitField_AccountID); pInvestUnitField_AccountID = nullptr; }
		if(pInvestUnitField_CurrencyID != nullptr){ strcpy_s(pInvestUnitField->CurrencyID, pInvestUnitField_CurrencyID); pInvestUnitField_CurrencyID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInvestUnitField *pInvestUnitField)
{
	if(pInvestUnitField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pInvestUnitField->BrokerID
		, "InvestorID", pInvestUnitField->InvestorID
		, "InvestUnitID", pInvestUnitField->InvestUnitID
		, "InvestorUnitName", pInvestUnitField->InvestorUnitName
		, "InvestorGroupID", pInvestUnitField->InvestorGroupID
		, "CommModelID", pInvestUnitField->CommModelID
		, "MarginModelID", pInvestUnitField->MarginModelID
		, "AccountID", pInvestUnitField->AccountID
		, "CurrencyID", pInvestUnitField->CurrencyID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryInvestUnitField *pQryInvestUnitField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InvestUnitID", nullptr};
	char *pQryInvestUnitField_BrokerID = nullptr;
	char *pQryInvestUnitField_InvestorID = nullptr;
	char *pQryInvestUnitField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryInvestUnitField, "|yyy")
		, &pQryInvestUnitField_BrokerID
		, &pQryInvestUnitField_InvestorID
		, &pQryInvestUnitField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryInvestUnitField_BrokerID != nullptr){ strcpy_s(pQryInvestUnitField->BrokerID, pQryInvestUnitField_BrokerID); pQryInvestUnitField_BrokerID = nullptr; }
		if(pQryInvestUnitField_InvestorID != nullptr){ strcpy_s(pQryInvestUnitField->InvestorID, pQryInvestUnitField_InvestorID); pQryInvestUnitField_InvestorID = nullptr; }
		if(pQryInvestUnitField_InvestUnitID != nullptr){ strcpy_s(pQryInvestUnitField->InvestUnitID, pQryInvestUnitField_InvestUnitID); pQryInvestUnitField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryInvestUnitField *pQryInvestUnitField)
{
	if(pQryInvestUnitField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pQryInvestUnitField->BrokerID
		, "InvestorID", pQryInvestUnitField->InvestorID
		, "InvestUnitID", pQryInvestUnitField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSecAgentCheckModeField *pSecAgentCheckModeField, PyObject *dict)
{
	static char *kwlist[] = {"InvestorID", "BrokerID", "CurrencyID", "BrokerSecAgentID", "CheckSelfAccount", nullptr};
	char *pSecAgentCheckModeField_InvestorID = nullptr;
	char *pSecAgentCheckModeField_BrokerID = nullptr;
	char *pSecAgentCheckModeField_CurrencyID = nullptr;
	char *pSecAgentCheckModeField_BrokerSecAgentID = nullptr;
	int pSecAgentCheckModeField_CheckSelfAccount = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pSecAgentCheckModeField, "|yyyyi")
		, &pSecAgentCheckModeField_InvestorID
		, &pSecAgentCheckModeField_BrokerID
		, &pSecAgentCheckModeField_CurrencyID
		, &pSecAgentCheckModeField_BrokerSecAgentID
		, &pSecAgentCheckModeField_CheckSelfAccount
	PyCTP_PyDict_FromStruct_END
		if(pSecAgentCheckModeField_InvestorID != nullptr){ strcpy_s(pSecAgentCheckModeField->InvestorID, pSecAgentCheckModeField_InvestorID); pSecAgentCheckModeField_InvestorID = nullptr; }
		if(pSecAgentCheckModeField_BrokerID != nullptr){ strcpy_s(pSecAgentCheckModeField->BrokerID, pSecAgentCheckModeField_BrokerID); pSecAgentCheckModeField_BrokerID = nullptr; }
		if(pSecAgentCheckModeField_CurrencyID != nullptr){ strcpy_s(pSecAgentCheckModeField->CurrencyID, pSecAgentCheckModeField_CurrencyID); pSecAgentCheckModeField_CurrencyID = nullptr; }
		if(pSecAgentCheckModeField_BrokerSecAgentID != nullptr){ strcpy_s(pSecAgentCheckModeField->BrokerSecAgentID, pSecAgentCheckModeField_BrokerSecAgentID); pSecAgentCheckModeField_BrokerSecAgentID = nullptr; }
		pSecAgentCheckModeField->CheckSelfAccount = pSecAgentCheckModeField_CheckSelfAccount;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSecAgentCheckModeField *pSecAgentCheckModeField)
{
	if(pSecAgentCheckModeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:i}"
		, "InvestorID", pSecAgentCheckModeField->InvestorID
		, "BrokerID", pSecAgentCheckModeField->BrokerID
		, "CurrencyID", pSecAgentCheckModeField->CurrencyID
		, "BrokerSecAgentID", pSecAgentCheckModeField->BrokerSecAgentID
		, "CheckSelfAccount", pSecAgentCheckModeField->CheckSelfAccount
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSecAgentTradeInfoField *pSecAgentTradeInfoField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "BrokerSecAgentID", "InvestorID", "LongCustomerName", nullptr};
	char *pSecAgentTradeInfoField_BrokerID = nullptr;
	char *pSecAgentTradeInfoField_BrokerSecAgentID = nullptr;
	char *pSecAgentTradeInfoField_InvestorID = nullptr;
	char *pSecAgentTradeInfoField_LongCustomerName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pSecAgentTradeInfoField, "|yyyy")
		, &pSecAgentTradeInfoField_BrokerID
		, &pSecAgentTradeInfoField_BrokerSecAgentID
		, &pSecAgentTradeInfoField_InvestorID
		, &pSecAgentTradeInfoField_LongCustomerName
	PyCTP_PyDict_FromStruct_END
		if(pSecAgentTradeInfoField_BrokerID != nullptr){ strcpy_s(pSecAgentTradeInfoField->BrokerID, pSecAgentTradeInfoField_BrokerID); pSecAgentTradeInfoField_BrokerID = nullptr; }
		if(pSecAgentTradeInfoField_BrokerSecAgentID != nullptr){ strcpy_s(pSecAgentTradeInfoField->BrokerSecAgentID, pSecAgentTradeInfoField_BrokerSecAgentID); pSecAgentTradeInfoField_BrokerSecAgentID = nullptr; }
		if(pSecAgentTradeInfoField_InvestorID != nullptr){ strcpy_s(pSecAgentTradeInfoField->InvestorID, pSecAgentTradeInfoField_InvestorID); pSecAgentTradeInfoField_InvestorID = nullptr; }
		if(pSecAgentTradeInfoField_LongCustomerName != nullptr){ strcpy_s(pSecAgentTradeInfoField->LongCustomerName, pSecAgentTradeInfoField_LongCustomerName); pSecAgentTradeInfoField_LongCustomerName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSecAgentTradeInfoField *pSecAgentTradeInfoField)
{
	if(pSecAgentTradeInfoField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y}"
		, "BrokerID", pSecAgentTradeInfoField->BrokerID
		, "BrokerSecAgentID", pSecAgentTradeInfoField->BrokerSecAgentID
		, "InvestorID", pSecAgentTradeInfoField->InvestorID
		, "LongCustomerName", pSecAgentTradeInfoField->LongCustomerName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcMarketDataField *pMarketDataField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "InstrumentID", "ExchangeID", "ExchangeInstID", "LastPrice", "PreSettlementPrice", "PreClosePrice", "PreOpenInterest", "OpenPrice", "HighestPrice", "LowestPrice", "Volume", "Turnover", "OpenInterest", "ClosePrice", "SettlementPrice", "UpperLimitPrice", "LowerLimitPrice", "PreDelta", "CurrDelta", "UpdateTime", "UpdateMillisec", "ActionDay", nullptr};
	char *pMarketDataField_TradingDay = nullptr;
	char *pMarketDataField_InstrumentID = nullptr;
	char *pMarketDataField_ExchangeID = nullptr;
	char *pMarketDataField_ExchangeInstID = nullptr;
	double pMarketDataField_LastPrice = 0.0;
	double pMarketDataField_PreSettlementPrice = 0.0;
	double pMarketDataField_PreClosePrice = 0.0;
	double pMarketDataField_PreOpenInterest = 0.0;
	double pMarketDataField_OpenPrice = 0.0;
	double pMarketDataField_HighestPrice = 0.0;
	double pMarketDataField_LowestPrice = 0.0;
	int pMarketDataField_Volume = 0;
	double pMarketDataField_Turnover = 0.0;
	double pMarketDataField_OpenInterest = 0.0;
	double pMarketDataField_ClosePrice = 0.0;
	double pMarketDataField_SettlementPrice = 0.0;
	double pMarketDataField_UpperLimitPrice = 0.0;
	double pMarketDataField_LowerLimitPrice = 0.0;
	double pMarketDataField_PreDelta = 0.0;
	double pMarketDataField_CurrDelta = 0.0;
	char *pMarketDataField_UpdateTime = nullptr;
	int pMarketDataField_UpdateMillisec = 0;
	char *pMarketDataField_ActionDay = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pMarketDataField, "|yyyydddddddiddddddddyiy")
		, &pMarketDataField_TradingDay
		, &pMarketDataField_InstrumentID
		, &pMarketDataField_ExchangeID
		, &pMarketDataField_ExchangeInstID
		, &pMarketDataField_LastPrice
		, &pMarketDataField_PreSettlementPrice
		, &pMarketDataField_PreClosePrice
		, &pMarketDataField_PreOpenInterest
		, &pMarketDataField_OpenPrice
		, &pMarketDataField_HighestPrice
		, &pMarketDataField_LowestPrice
		, &pMarketDataField_Volume
		, &pMarketDataField_Turnover
		, &pMarketDataField_OpenInterest
		, &pMarketDataField_ClosePrice
		, &pMarketDataField_SettlementPrice
		, &pMarketDataField_UpperLimitPrice
		, &pMarketDataField_LowerLimitPrice
		, &pMarketDataField_PreDelta
		, &pMarketDataField_CurrDelta
		, &pMarketDataField_UpdateTime
		, &pMarketDataField_UpdateMillisec
		, &pMarketDataField_ActionDay
	PyCTP_PyDict_FromStruct_END
		if(pMarketDataField_TradingDay != nullptr){ strcpy_s(pMarketDataField->TradingDay, pMarketDataField_TradingDay); pMarketDataField_TradingDay = nullptr; }
		if(pMarketDataField_InstrumentID != nullptr){ strcpy_s(pMarketDataField->InstrumentID, pMarketDataField_InstrumentID); pMarketDataField_InstrumentID = nullptr; }
		if(pMarketDataField_ExchangeID != nullptr){ strcpy_s(pMarketDataField->ExchangeID, pMarketDataField_ExchangeID); pMarketDataField_ExchangeID = nullptr; }
		if(pMarketDataField_ExchangeInstID != nullptr){ strcpy_s(pMarketDataField->ExchangeInstID, pMarketDataField_ExchangeInstID); pMarketDataField_ExchangeInstID = nullptr; }
		pMarketDataField->LastPrice = pMarketDataField_LastPrice;
		pMarketDataField->PreSettlementPrice = pMarketDataField_PreSettlementPrice;
		pMarketDataField->PreClosePrice = pMarketDataField_PreClosePrice;
		pMarketDataField->PreOpenInterest = pMarketDataField_PreOpenInterest;
		pMarketDataField->OpenPrice = pMarketDataField_OpenPrice;
		pMarketDataField->HighestPrice = pMarketDataField_HighestPrice;
		pMarketDataField->LowestPrice = pMarketDataField_LowestPrice;
		pMarketDataField->Volume = pMarketDataField_Volume;
		pMarketDataField->Turnover = pMarketDataField_Turnover;
		pMarketDataField->OpenInterest = pMarketDataField_OpenInterest;
		pMarketDataField->ClosePrice = pMarketDataField_ClosePrice;
		pMarketDataField->SettlementPrice = pMarketDataField_SettlementPrice;
		pMarketDataField->UpperLimitPrice = pMarketDataField_UpperLimitPrice;
		pMarketDataField->LowerLimitPrice = pMarketDataField_LowerLimitPrice;
		pMarketDataField->PreDelta = pMarketDataField_PreDelta;
		pMarketDataField->CurrDelta = pMarketDataField_CurrDelta;
		if(pMarketDataField_UpdateTime != nullptr){ strcpy_s(pMarketDataField->UpdateTime, pMarketDataField_UpdateTime); pMarketDataField_UpdateTime = nullptr; }
		pMarketDataField->UpdateMillisec = pMarketDataField_UpdateMillisec;
		if(pMarketDataField_ActionDay != nullptr){ strcpy_s(pMarketDataField->ActionDay, pMarketDataField_ActionDay); pMarketDataField_ActionDay = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcMarketDataField *pMarketDataField)
{
	if(pMarketDataField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:i,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:y,s:i,s:y}"
		, "TradingDay", pMarketDataField->TradingDay
		, "InstrumentID", pMarketDataField->InstrumentID
		, "ExchangeID", pMarketDataField->ExchangeID
		, "ExchangeInstID", pMarketDataField->ExchangeInstID
		, "LastPrice", pMarketDataField->LastPrice
		, "PreSettlementPrice", pMarketDataField->PreSettlementPrice
		, "PreClosePrice", pMarketDataField->PreClosePrice
		, "PreOpenInterest", pMarketDataField->PreOpenInterest
		, "OpenPrice", pMarketDataField->OpenPrice
		, "HighestPrice", pMarketDataField->HighestPrice
		, "LowestPrice", pMarketDataField->LowestPrice
		, "Volume", pMarketDataField->Volume
		, "Turnover", pMarketDataField->Turnover
		, "OpenInterest", pMarketDataField->OpenInterest
		, "ClosePrice", pMarketDataField->ClosePrice
		, "SettlementPrice", pMarketDataField->SettlementPrice
		, "UpperLimitPrice", pMarketDataField->UpperLimitPrice
		, "LowerLimitPrice", pMarketDataField->LowerLimitPrice
		, "PreDelta", pMarketDataField->PreDelta
		, "CurrDelta", pMarketDataField->CurrDelta
		, "UpdateTime", pMarketDataField->UpdateTime
		, "UpdateMillisec", pMarketDataField->UpdateMillisec
		, "ActionDay", pMarketDataField->ActionDay
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcMarketDataBaseField *pMarketDataBaseField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "PreSettlementPrice", "PreClosePrice", "PreOpenInterest", "PreDelta", nullptr};
	char *pMarketDataBaseField_TradingDay = nullptr;
	double pMarketDataBaseField_PreSettlementPrice = 0.0;
	double pMarketDataBaseField_PreClosePrice = 0.0;
	double pMarketDataBaseField_PreOpenInterest = 0.0;
	double pMarketDataBaseField_PreDelta = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pMarketDataBaseField, "|ydddd")
		, &pMarketDataBaseField_TradingDay
		, &pMarketDataBaseField_PreSettlementPrice
		, &pMarketDataBaseField_PreClosePrice
		, &pMarketDataBaseField_PreOpenInterest
		, &pMarketDataBaseField_PreDelta
	PyCTP_PyDict_FromStruct_END
		if(pMarketDataBaseField_TradingDay != nullptr){ strcpy_s(pMarketDataBaseField->TradingDay, pMarketDataBaseField_TradingDay); pMarketDataBaseField_TradingDay = nullptr; }
		pMarketDataBaseField->PreSettlementPrice = pMarketDataBaseField_PreSettlementPrice;
		pMarketDataBaseField->PreClosePrice = pMarketDataBaseField_PreClosePrice;
		pMarketDataBaseField->PreOpenInterest = pMarketDataBaseField_PreOpenInterest;
		pMarketDataBaseField->PreDelta = pMarketDataBaseField_PreDelta;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcMarketDataBaseField *pMarketDataBaseField)
{
	if(pMarketDataBaseField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:d,s:d,s:d,s:d}"
		, "TradingDay", pMarketDataBaseField->TradingDay
		, "PreSettlementPrice", pMarketDataBaseField->PreSettlementPrice
		, "PreClosePrice", pMarketDataBaseField->PreClosePrice
		, "PreOpenInterest", pMarketDataBaseField->PreOpenInterest
		, "PreDelta", pMarketDataBaseField->PreDelta
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcMarketDataStaticField *pMarketDataStaticField, PyObject *dict)
{
	static char *kwlist[] = {"OpenPrice", "HighestPrice", "LowestPrice", "ClosePrice", "UpperLimitPrice", "LowerLimitPrice", "SettlementPrice", "CurrDelta", nullptr};
	double pMarketDataStaticField_OpenPrice = 0.0;
	double pMarketDataStaticField_HighestPrice = 0.0;
	double pMarketDataStaticField_LowestPrice = 0.0;
	double pMarketDataStaticField_ClosePrice = 0.0;
	double pMarketDataStaticField_UpperLimitPrice = 0.0;
	double pMarketDataStaticField_LowerLimitPrice = 0.0;
	double pMarketDataStaticField_SettlementPrice = 0.0;
	double pMarketDataStaticField_CurrDelta = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pMarketDataStaticField, "|dddddddd")
		, &pMarketDataStaticField_OpenPrice
		, &pMarketDataStaticField_HighestPrice
		, &pMarketDataStaticField_LowestPrice
		, &pMarketDataStaticField_ClosePrice
		, &pMarketDataStaticField_UpperLimitPrice
		, &pMarketDataStaticField_LowerLimitPrice
		, &pMarketDataStaticField_SettlementPrice
		, &pMarketDataStaticField_CurrDelta
	PyCTP_PyDict_FromStruct_END
		pMarketDataStaticField->OpenPrice = pMarketDataStaticField_OpenPrice;
		pMarketDataStaticField->HighestPrice = pMarketDataStaticField_HighestPrice;
		pMarketDataStaticField->LowestPrice = pMarketDataStaticField_LowestPrice;
		pMarketDataStaticField->ClosePrice = pMarketDataStaticField_ClosePrice;
		pMarketDataStaticField->UpperLimitPrice = pMarketDataStaticField_UpperLimitPrice;
		pMarketDataStaticField->LowerLimitPrice = pMarketDataStaticField_LowerLimitPrice;
		pMarketDataStaticField->SettlementPrice = pMarketDataStaticField_SettlementPrice;
		pMarketDataStaticField->CurrDelta = pMarketDataStaticField_CurrDelta;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcMarketDataStaticField *pMarketDataStaticField)
{
	if(pMarketDataStaticField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d}"
		, "OpenPrice", pMarketDataStaticField->OpenPrice
		, "HighestPrice", pMarketDataStaticField->HighestPrice
		, "LowestPrice", pMarketDataStaticField->LowestPrice
		, "ClosePrice", pMarketDataStaticField->ClosePrice
		, "UpperLimitPrice", pMarketDataStaticField->UpperLimitPrice
		, "LowerLimitPrice", pMarketDataStaticField->LowerLimitPrice
		, "SettlementPrice", pMarketDataStaticField->SettlementPrice
		, "CurrDelta", pMarketDataStaticField->CurrDelta
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcMarketDataLastMatchField *pMarketDataLastMatchField, PyObject *dict)
{
	static char *kwlist[] = {"LastPrice", "Volume", "Turnover", "OpenInterest", nullptr};
	double pMarketDataLastMatchField_LastPrice = 0.0;
	int pMarketDataLastMatchField_Volume = 0;
	double pMarketDataLastMatchField_Turnover = 0.0;
	double pMarketDataLastMatchField_OpenInterest = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pMarketDataLastMatchField, "|didd")
		, &pMarketDataLastMatchField_LastPrice
		, &pMarketDataLastMatchField_Volume
		, &pMarketDataLastMatchField_Turnover
		, &pMarketDataLastMatchField_OpenInterest
	PyCTP_PyDict_FromStruct_END
		pMarketDataLastMatchField->LastPrice = pMarketDataLastMatchField_LastPrice;
		pMarketDataLastMatchField->Volume = pMarketDataLastMatchField_Volume;
		pMarketDataLastMatchField->Turnover = pMarketDataLastMatchField_Turnover;
		pMarketDataLastMatchField->OpenInterest = pMarketDataLastMatchField_OpenInterest;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcMarketDataLastMatchField *pMarketDataLastMatchField)
{
	if(pMarketDataLastMatchField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:d,s:i,s:d,s:d}"
		, "LastPrice", pMarketDataLastMatchField->LastPrice
		, "Volume", pMarketDataLastMatchField->Volume
		, "Turnover", pMarketDataLastMatchField->Turnover
		, "OpenInterest", pMarketDataLastMatchField->OpenInterest
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcMarketDataBestPriceField *pMarketDataBestPriceField, PyObject *dict)
{
	static char *kwlist[] = {"BidPrice1", "BidVolume1", "AskPrice1", "AskVolume1", nullptr};
	double pMarketDataBestPriceField_BidPrice1 = 0.0;
	int pMarketDataBestPriceField_BidVolume1 = 0;
	double pMarketDataBestPriceField_AskPrice1 = 0.0;
	int pMarketDataBestPriceField_AskVolume1 = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pMarketDataBestPriceField, "|didi")
		, &pMarketDataBestPriceField_BidPrice1
		, &pMarketDataBestPriceField_BidVolume1
		, &pMarketDataBestPriceField_AskPrice1
		, &pMarketDataBestPriceField_AskVolume1
	PyCTP_PyDict_FromStruct_END
		pMarketDataBestPriceField->BidPrice1 = pMarketDataBestPriceField_BidPrice1;
		pMarketDataBestPriceField->BidVolume1 = pMarketDataBestPriceField_BidVolume1;
		pMarketDataBestPriceField->AskPrice1 = pMarketDataBestPriceField_AskPrice1;
		pMarketDataBestPriceField->AskVolume1 = pMarketDataBestPriceField_AskVolume1;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcMarketDataBestPriceField *pMarketDataBestPriceField)
{
	if(pMarketDataBestPriceField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:d,s:i,s:d,s:i}"
		, "BidPrice1", pMarketDataBestPriceField->BidPrice1
		, "BidVolume1", pMarketDataBestPriceField->BidVolume1
		, "AskPrice1", pMarketDataBestPriceField->AskPrice1
		, "AskVolume1", pMarketDataBestPriceField->AskVolume1
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcMarketDataBid23Field *pMarketDataBid23Field, PyObject *dict)
{
	static char *kwlist[] = {"BidPrice2", "BidVolume2", "BidPrice3", "BidVolume3", nullptr};
	double pMarketDataBid23Field_BidPrice2 = 0.0;
	int pMarketDataBid23Field_BidVolume2 = 0;
	double pMarketDataBid23Field_BidPrice3 = 0.0;
	int pMarketDataBid23Field_BidVolume3 = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pMarketDataBid23Field, "|didi")
		, &pMarketDataBid23Field_BidPrice2
		, &pMarketDataBid23Field_BidVolume2
		, &pMarketDataBid23Field_BidPrice3
		, &pMarketDataBid23Field_BidVolume3
	PyCTP_PyDict_FromStruct_END
		pMarketDataBid23Field->BidPrice2 = pMarketDataBid23Field_BidPrice2;
		pMarketDataBid23Field->BidVolume2 = pMarketDataBid23Field_BidVolume2;
		pMarketDataBid23Field->BidPrice3 = pMarketDataBid23Field_BidPrice3;
		pMarketDataBid23Field->BidVolume3 = pMarketDataBid23Field_BidVolume3;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcMarketDataBid23Field *pMarketDataBid23Field)
{
	if(pMarketDataBid23Field == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:d,s:i,s:d,s:i}"
		, "BidPrice2", pMarketDataBid23Field->BidPrice2
		, "BidVolume2", pMarketDataBid23Field->BidVolume2
		, "BidPrice3", pMarketDataBid23Field->BidPrice3
		, "BidVolume3", pMarketDataBid23Field->BidVolume3
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcMarketDataAsk23Field *pMarketDataAsk23Field, PyObject *dict)
{
	static char *kwlist[] = {"AskPrice2", "AskVolume2", "AskPrice3", "AskVolume3", nullptr};
	double pMarketDataAsk23Field_AskPrice2 = 0.0;
	int pMarketDataAsk23Field_AskVolume2 = 0;
	double pMarketDataAsk23Field_AskPrice3 = 0.0;
	int pMarketDataAsk23Field_AskVolume3 = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pMarketDataAsk23Field, "|didi")
		, &pMarketDataAsk23Field_AskPrice2
		, &pMarketDataAsk23Field_AskVolume2
		, &pMarketDataAsk23Field_AskPrice3
		, &pMarketDataAsk23Field_AskVolume3
	PyCTP_PyDict_FromStruct_END
		pMarketDataAsk23Field->AskPrice2 = pMarketDataAsk23Field_AskPrice2;
		pMarketDataAsk23Field->AskVolume2 = pMarketDataAsk23Field_AskVolume2;
		pMarketDataAsk23Field->AskPrice3 = pMarketDataAsk23Field_AskPrice3;
		pMarketDataAsk23Field->AskVolume3 = pMarketDataAsk23Field_AskVolume3;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcMarketDataAsk23Field *pMarketDataAsk23Field)
{
	if(pMarketDataAsk23Field == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:d,s:i,s:d,s:i}"
		, "AskPrice2", pMarketDataAsk23Field->AskPrice2
		, "AskVolume2", pMarketDataAsk23Field->AskVolume2
		, "AskPrice3", pMarketDataAsk23Field->AskPrice3
		, "AskVolume3", pMarketDataAsk23Field->AskVolume3
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcMarketDataBid45Field *pMarketDataBid45Field, PyObject *dict)
{
	static char *kwlist[] = {"BidPrice4", "BidVolume4", "BidPrice5", "BidVolume5", nullptr};
	double pMarketDataBid45Field_BidPrice4 = 0.0;
	int pMarketDataBid45Field_BidVolume4 = 0;
	double pMarketDataBid45Field_BidPrice5 = 0.0;
	int pMarketDataBid45Field_BidVolume5 = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pMarketDataBid45Field, "|didi")
		, &pMarketDataBid45Field_BidPrice4
		, &pMarketDataBid45Field_BidVolume4
		, &pMarketDataBid45Field_BidPrice5
		, &pMarketDataBid45Field_BidVolume5
	PyCTP_PyDict_FromStruct_END
		pMarketDataBid45Field->BidPrice4 = pMarketDataBid45Field_BidPrice4;
		pMarketDataBid45Field->BidVolume4 = pMarketDataBid45Field_BidVolume4;
		pMarketDataBid45Field->BidPrice5 = pMarketDataBid45Field_BidPrice5;
		pMarketDataBid45Field->BidVolume5 = pMarketDataBid45Field_BidVolume5;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcMarketDataBid45Field *pMarketDataBid45Field)
{
	if(pMarketDataBid45Field == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:d,s:i,s:d,s:i}"
		, "BidPrice4", pMarketDataBid45Field->BidPrice4
		, "BidVolume4", pMarketDataBid45Field->BidVolume4
		, "BidPrice5", pMarketDataBid45Field->BidPrice5
		, "BidVolume5", pMarketDataBid45Field->BidVolume5
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcMarketDataAsk45Field *pMarketDataAsk45Field, PyObject *dict)
{
	static char *kwlist[] = {"AskPrice4", "AskVolume4", "AskPrice5", "AskVolume5", nullptr};
	double pMarketDataAsk45Field_AskPrice4 = 0.0;
	int pMarketDataAsk45Field_AskVolume4 = 0;
	double pMarketDataAsk45Field_AskPrice5 = 0.0;
	int pMarketDataAsk45Field_AskVolume5 = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pMarketDataAsk45Field, "|didi")
		, &pMarketDataAsk45Field_AskPrice4
		, &pMarketDataAsk45Field_AskVolume4
		, &pMarketDataAsk45Field_AskPrice5
		, &pMarketDataAsk45Field_AskVolume5
	PyCTP_PyDict_FromStruct_END
		pMarketDataAsk45Field->AskPrice4 = pMarketDataAsk45Field_AskPrice4;
		pMarketDataAsk45Field->AskVolume4 = pMarketDataAsk45Field_AskVolume4;
		pMarketDataAsk45Field->AskPrice5 = pMarketDataAsk45Field_AskPrice5;
		pMarketDataAsk45Field->AskVolume5 = pMarketDataAsk45Field_AskVolume5;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcMarketDataAsk45Field *pMarketDataAsk45Field)
{
	if(pMarketDataAsk45Field == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:d,s:i,s:d,s:i}"
		, "AskPrice4", pMarketDataAsk45Field->AskPrice4
		, "AskVolume4", pMarketDataAsk45Field->AskVolume4
		, "AskPrice5", pMarketDataAsk45Field->AskPrice5
		, "AskVolume5", pMarketDataAsk45Field->AskVolume5
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcMarketDataUpdateTimeField *pMarketDataUpdateTimeField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "UpdateTime", "UpdateMillisec", "ActionDay", nullptr};
	char *pMarketDataUpdateTimeField_InstrumentID = nullptr;
	char *pMarketDataUpdateTimeField_UpdateTime = nullptr;
	int pMarketDataUpdateTimeField_UpdateMillisec = 0;
	char *pMarketDataUpdateTimeField_ActionDay = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pMarketDataUpdateTimeField, "|yyiy")
		, &pMarketDataUpdateTimeField_InstrumentID
		, &pMarketDataUpdateTimeField_UpdateTime
		, &pMarketDataUpdateTimeField_UpdateMillisec
		, &pMarketDataUpdateTimeField_ActionDay
	PyCTP_PyDict_FromStruct_END
		if(pMarketDataUpdateTimeField_InstrumentID != nullptr){ strcpy_s(pMarketDataUpdateTimeField->InstrumentID, pMarketDataUpdateTimeField_InstrumentID); pMarketDataUpdateTimeField_InstrumentID = nullptr; }
		if(pMarketDataUpdateTimeField_UpdateTime != nullptr){ strcpy_s(pMarketDataUpdateTimeField->UpdateTime, pMarketDataUpdateTimeField_UpdateTime); pMarketDataUpdateTimeField_UpdateTime = nullptr; }
		pMarketDataUpdateTimeField->UpdateMillisec = pMarketDataUpdateTimeField_UpdateMillisec;
		if(pMarketDataUpdateTimeField_ActionDay != nullptr){ strcpy_s(pMarketDataUpdateTimeField->ActionDay, pMarketDataUpdateTimeField_ActionDay); pMarketDataUpdateTimeField_ActionDay = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcMarketDataUpdateTimeField *pMarketDataUpdateTimeField)
{
	if(pMarketDataUpdateTimeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i,s:y}"
		, "InstrumentID", pMarketDataUpdateTimeField->InstrumentID
		, "UpdateTime", pMarketDataUpdateTimeField->UpdateTime
		, "UpdateMillisec", pMarketDataUpdateTimeField->UpdateMillisec
		, "ActionDay", pMarketDataUpdateTimeField->ActionDay
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcMarketDataExchangeField *pMarketDataExchangeField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", nullptr};
	char *pMarketDataExchangeField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pMarketDataExchangeField, "|y")
		, &pMarketDataExchangeField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pMarketDataExchangeField_ExchangeID != nullptr){ strcpy_s(pMarketDataExchangeField->ExchangeID, pMarketDataExchangeField_ExchangeID); pMarketDataExchangeField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcMarketDataExchangeField *pMarketDataExchangeField)
{
	if(pMarketDataExchangeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y}"
		, "ExchangeID", pMarketDataExchangeField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSpecificInstrumentField *pSpecificInstrumentField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", nullptr};
	char *pSpecificInstrumentField_InstrumentID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pSpecificInstrumentField, "|y")
		, &pSpecificInstrumentField_InstrumentID
	PyCTP_PyDict_FromStruct_END
		if(pSpecificInstrumentField_InstrumentID != nullptr){ strcpy_s(pSpecificInstrumentField->InstrumentID, pSpecificInstrumentField_InstrumentID); pSpecificInstrumentField_InstrumentID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSpecificInstrumentField *pSpecificInstrumentField)
{
	if(pSpecificInstrumentField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y}"
		, "InstrumentID", pSpecificInstrumentField->InstrumentID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInstrumentStatusField *pInstrumentStatusField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "ExchangeInstID", "SettlementGroupID", "InstrumentID", "InstrumentStatus", "TradingSegmentSN", "EnterTime", "EnterReason", nullptr};
	char *pInstrumentStatusField_ExchangeID = nullptr;
	char *pInstrumentStatusField_ExchangeInstID = nullptr;
	char *pInstrumentStatusField_SettlementGroupID = nullptr;
	char *pInstrumentStatusField_InstrumentID = nullptr;
	char pInstrumentStatusField_InstrumentStatus = 0;
	int pInstrumentStatusField_TradingSegmentSN = 0;
	char *pInstrumentStatusField_EnterTime = nullptr;
	char pInstrumentStatusField_EnterReason = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pInstrumentStatusField, "|yyyyciyc")
		, &pInstrumentStatusField_ExchangeID
		, &pInstrumentStatusField_ExchangeInstID
		, &pInstrumentStatusField_SettlementGroupID
		, &pInstrumentStatusField_InstrumentID
		, &pInstrumentStatusField_InstrumentStatus
		, &pInstrumentStatusField_TradingSegmentSN
		, &pInstrumentStatusField_EnterTime
		, &pInstrumentStatusField_EnterReason
	PyCTP_PyDict_FromStruct_END
		if(pInstrumentStatusField_ExchangeID != nullptr){ strcpy_s(pInstrumentStatusField->ExchangeID, pInstrumentStatusField_ExchangeID); pInstrumentStatusField_ExchangeID = nullptr; }
		if(pInstrumentStatusField_ExchangeInstID != nullptr){ strcpy_s(pInstrumentStatusField->ExchangeInstID, pInstrumentStatusField_ExchangeInstID); pInstrumentStatusField_ExchangeInstID = nullptr; }
		if(pInstrumentStatusField_SettlementGroupID != nullptr){ strcpy_s(pInstrumentStatusField->SettlementGroupID, pInstrumentStatusField_SettlementGroupID); pInstrumentStatusField_SettlementGroupID = nullptr; }
		if(pInstrumentStatusField_InstrumentID != nullptr){ strcpy_s(pInstrumentStatusField->InstrumentID, pInstrumentStatusField_InstrumentID); pInstrumentStatusField_InstrumentID = nullptr; }
		pInstrumentStatusField->InstrumentStatus = pInstrumentStatusField_InstrumentStatus;
		pInstrumentStatusField->TradingSegmentSN = pInstrumentStatusField_TradingSegmentSN;
		if(pInstrumentStatusField_EnterTime != nullptr){ strcpy_s(pInstrumentStatusField->EnterTime, pInstrumentStatusField_EnterTime); pInstrumentStatusField_EnterTime = nullptr; }
		pInstrumentStatusField->EnterReason = pInstrumentStatusField_EnterReason;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInstrumentStatusField *pInstrumentStatusField)
{
	if(pInstrumentStatusField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:c,s:i,s:y,s:c}"
		, "ExchangeID", pInstrumentStatusField->ExchangeID
		, "ExchangeInstID", pInstrumentStatusField->ExchangeInstID
		, "SettlementGroupID", pInstrumentStatusField->SettlementGroupID
		, "InstrumentID", pInstrumentStatusField->InstrumentID
		, "InstrumentStatus", pInstrumentStatusField->InstrumentStatus
		, "TradingSegmentSN", pInstrumentStatusField->TradingSegmentSN
		, "EnterTime", pInstrumentStatusField->EnterTime
		, "EnterReason", pInstrumentStatusField->EnterReason
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryInstrumentStatusField *pQryInstrumentStatusField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "ExchangeInstID", nullptr};
	char *pQryInstrumentStatusField_ExchangeID = nullptr;
	char *pQryInstrumentStatusField_ExchangeInstID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryInstrumentStatusField, "|yy")
		, &pQryInstrumentStatusField_ExchangeID
		, &pQryInstrumentStatusField_ExchangeInstID
	PyCTP_PyDict_FromStruct_END
		if(pQryInstrumentStatusField_ExchangeID != nullptr){ strcpy_s(pQryInstrumentStatusField->ExchangeID, pQryInstrumentStatusField_ExchangeID); pQryInstrumentStatusField_ExchangeID = nullptr; }
		if(pQryInstrumentStatusField_ExchangeInstID != nullptr){ strcpy_s(pQryInstrumentStatusField->ExchangeInstID, pQryInstrumentStatusField_ExchangeInstID); pQryInstrumentStatusField_ExchangeInstID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryInstrumentStatusField *pQryInstrumentStatusField)
{
	if(pQryInstrumentStatusField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "ExchangeID", pQryInstrumentStatusField->ExchangeID
		, "ExchangeInstID", pQryInstrumentStatusField->ExchangeInstID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInvestorAccountField *pInvestorAccountField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "AccountID", "CurrencyID", nullptr};
	char *pInvestorAccountField_BrokerID = nullptr;
	char *pInvestorAccountField_InvestorID = nullptr;
	char *pInvestorAccountField_AccountID = nullptr;
	char *pInvestorAccountField_CurrencyID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInvestorAccountField, "|yyyy")
		, &pInvestorAccountField_BrokerID
		, &pInvestorAccountField_InvestorID
		, &pInvestorAccountField_AccountID
		, &pInvestorAccountField_CurrencyID
	PyCTP_PyDict_FromStruct_END
		if(pInvestorAccountField_BrokerID != nullptr){ strcpy_s(pInvestorAccountField->BrokerID, pInvestorAccountField_BrokerID); pInvestorAccountField_BrokerID = nullptr; }
		if(pInvestorAccountField_InvestorID != nullptr){ strcpy_s(pInvestorAccountField->InvestorID, pInvestorAccountField_InvestorID); pInvestorAccountField_InvestorID = nullptr; }
		if(pInvestorAccountField_AccountID != nullptr){ strcpy_s(pInvestorAccountField->AccountID, pInvestorAccountField_AccountID); pInvestorAccountField_AccountID = nullptr; }
		if(pInvestorAccountField_CurrencyID != nullptr){ strcpy_s(pInvestorAccountField->CurrencyID, pInvestorAccountField_CurrencyID); pInvestorAccountField_CurrencyID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInvestorAccountField *pInvestorAccountField)
{
	if(pInvestorAccountField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y}"
		, "BrokerID", pInvestorAccountField->BrokerID
		, "InvestorID", pInvestorAccountField->InvestorID
		, "AccountID", pInvestorAccountField->AccountID
		, "CurrencyID", pInvestorAccountField->CurrencyID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcPositionProfitAlgorithmField *pPositionProfitAlgorithmField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "AccountID", "Algorithm", "Memo", "CurrencyID", nullptr};
	char *pPositionProfitAlgorithmField_BrokerID = nullptr;
	char *pPositionProfitAlgorithmField_AccountID = nullptr;
	char pPositionProfitAlgorithmField_Algorithm = 0;
	char *pPositionProfitAlgorithmField_Memo = nullptr;
	char *pPositionProfitAlgorithmField_CurrencyID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pPositionProfitAlgorithmField, "|yycyy")
		, &pPositionProfitAlgorithmField_BrokerID
		, &pPositionProfitAlgorithmField_AccountID
		, &pPositionProfitAlgorithmField_Algorithm
		, &pPositionProfitAlgorithmField_Memo
		, &pPositionProfitAlgorithmField_CurrencyID
	PyCTP_PyDict_FromStruct_END
		if(pPositionProfitAlgorithmField_BrokerID != nullptr){ strcpy_s(pPositionProfitAlgorithmField->BrokerID, pPositionProfitAlgorithmField_BrokerID); pPositionProfitAlgorithmField_BrokerID = nullptr; }
		if(pPositionProfitAlgorithmField_AccountID != nullptr){ strcpy_s(pPositionProfitAlgorithmField->AccountID, pPositionProfitAlgorithmField_AccountID); pPositionProfitAlgorithmField_AccountID = nullptr; }
		pPositionProfitAlgorithmField->Algorithm = pPositionProfitAlgorithmField_Algorithm;
		if(pPositionProfitAlgorithmField_Memo != nullptr){ strcpy_s(pPositionProfitAlgorithmField->Memo, pPositionProfitAlgorithmField_Memo); pPositionProfitAlgorithmField_Memo = nullptr; }
		if(pPositionProfitAlgorithmField_CurrencyID != nullptr){ strcpy_s(pPositionProfitAlgorithmField->CurrencyID, pPositionProfitAlgorithmField_CurrencyID); pPositionProfitAlgorithmField_CurrencyID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcPositionProfitAlgorithmField *pPositionProfitAlgorithmField)
{
	if(pPositionProfitAlgorithmField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c,s:y,s:y}"
		, "BrokerID", pPositionProfitAlgorithmField->BrokerID
		, "AccountID", pPositionProfitAlgorithmField->AccountID
		, "Algorithm", pPositionProfitAlgorithmField->Algorithm
		, "Memo", pPositionProfitAlgorithmField->Memo
		, "CurrencyID", pPositionProfitAlgorithmField->CurrencyID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcDiscountField *pDiscountField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorRange", "InvestorID", "Discount", nullptr};
	char *pDiscountField_BrokerID = nullptr;
	char pDiscountField_InvestorRange = 0;
	char *pDiscountField_InvestorID = nullptr;
	double pDiscountField_Discount = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pDiscountField, "|ycyd")
		, &pDiscountField_BrokerID
		, &pDiscountField_InvestorRange
		, &pDiscountField_InvestorID
		, &pDiscountField_Discount
	PyCTP_PyDict_FromStruct_END
		if(pDiscountField_BrokerID != nullptr){ strcpy_s(pDiscountField->BrokerID, pDiscountField_BrokerID); pDiscountField_BrokerID = nullptr; }
		pDiscountField->InvestorRange = pDiscountField_InvestorRange;
		if(pDiscountField_InvestorID != nullptr){ strcpy_s(pDiscountField->InvestorID, pDiscountField_InvestorID); pDiscountField_InvestorID = nullptr; }
		pDiscountField->Discount = pDiscountField_Discount;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcDiscountField *pDiscountField)
{
	if(pDiscountField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:d}"
		, "BrokerID", pDiscountField->BrokerID
		, "InvestorRange", pDiscountField->InvestorRange
		, "InvestorID", pDiscountField->InvestorID
		, "Discount", pDiscountField->Discount
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryTransferBankField *pQryTransferBankField, PyObject *dict)
{
	static char *kwlist[] = {"BankID", "BankBrchID", nullptr};
	char *pQryTransferBankField_BankID = nullptr;
	char *pQryTransferBankField_BankBrchID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryTransferBankField, "|yy")
		, &pQryTransferBankField_BankID
		, &pQryTransferBankField_BankBrchID
	PyCTP_PyDict_FromStruct_END
		if(pQryTransferBankField_BankID != nullptr){ strcpy_s(pQryTransferBankField->BankID, pQryTransferBankField_BankID); pQryTransferBankField_BankID = nullptr; }
		if(pQryTransferBankField_BankBrchID != nullptr){ strcpy_s(pQryTransferBankField->BankBrchID, pQryTransferBankField_BankBrchID); pQryTransferBankField_BankBrchID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryTransferBankField *pQryTransferBankField)
{
	if(pQryTransferBankField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BankID", pQryTransferBankField->BankID
		, "BankBrchID", pQryTransferBankField->BankBrchID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTransferBankField *pTransferBankField, PyObject *dict)
{
	static char *kwlist[] = {"BankID", "BankBrchID", "BankName", "IsActive", nullptr};
	char *pTransferBankField_BankID = nullptr;
	char *pTransferBankField_BankBrchID = nullptr;
	char *pTransferBankField_BankName = nullptr;
	int pTransferBankField_IsActive = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pTransferBankField, "|yyyi")
		, &pTransferBankField_BankID
		, &pTransferBankField_BankBrchID
		, &pTransferBankField_BankName
		, &pTransferBankField_IsActive
	PyCTP_PyDict_FromStruct_END
		if(pTransferBankField_BankID != nullptr){ strcpy_s(pTransferBankField->BankID, pTransferBankField_BankID); pTransferBankField_BankID = nullptr; }
		if(pTransferBankField_BankBrchID != nullptr){ strcpy_s(pTransferBankField->BankBrchID, pTransferBankField_BankBrchID); pTransferBankField_BankBrchID = nullptr; }
		if(pTransferBankField_BankName != nullptr){ strcpy_s(pTransferBankField->BankName, pTransferBankField_BankName); pTransferBankField_BankName = nullptr; }
		pTransferBankField->IsActive = pTransferBankField_IsActive;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTransferBankField *pTransferBankField)
{
	if(pTransferBankField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:i}"
		, "BankID", pTransferBankField->BankID
		, "BankBrchID", pTransferBankField->BankBrchID
		, "BankName", pTransferBankField->BankName
		, "IsActive", pTransferBankField->IsActive
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryInvestorPositionDetailField *pQryInvestorPositionDetailField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ExchangeID", "InvestUnitID", nullptr};
	char *pQryInvestorPositionDetailField_BrokerID = nullptr;
	char *pQryInvestorPositionDetailField_InvestorID = nullptr;
	char *pQryInvestorPositionDetailField_InstrumentID = nullptr;
	char *pQryInvestorPositionDetailField_ExchangeID = nullptr;
	char *pQryInvestorPositionDetailField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryInvestorPositionDetailField, "|yyyyy")
		, &pQryInvestorPositionDetailField_BrokerID
		, &pQryInvestorPositionDetailField_InvestorID
		, &pQryInvestorPositionDetailField_InstrumentID
		, &pQryInvestorPositionDetailField_ExchangeID
		, &pQryInvestorPositionDetailField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryInvestorPositionDetailField_BrokerID != nullptr){ strcpy_s(pQryInvestorPositionDetailField->BrokerID, pQryInvestorPositionDetailField_BrokerID); pQryInvestorPositionDetailField_BrokerID = nullptr; }
		if(pQryInvestorPositionDetailField_InvestorID != nullptr){ strcpy_s(pQryInvestorPositionDetailField->InvestorID, pQryInvestorPositionDetailField_InvestorID); pQryInvestorPositionDetailField_InvestorID = nullptr; }
		if(pQryInvestorPositionDetailField_InstrumentID != nullptr){ strcpy_s(pQryInvestorPositionDetailField->InstrumentID, pQryInvestorPositionDetailField_InstrumentID); pQryInvestorPositionDetailField_InstrumentID = nullptr; }
		if(pQryInvestorPositionDetailField_ExchangeID != nullptr){ strcpy_s(pQryInvestorPositionDetailField->ExchangeID, pQryInvestorPositionDetailField_ExchangeID); pQryInvestorPositionDetailField_ExchangeID = nullptr; }
		if(pQryInvestorPositionDetailField_InvestUnitID != nullptr){ strcpy_s(pQryInvestorPositionDetailField->InvestUnitID, pQryInvestorPositionDetailField_InvestUnitID); pQryInvestorPositionDetailField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryInvestorPositionDetailField *pQryInvestorPositionDetailField)
{
	if(pQryInvestorPositionDetailField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQryInvestorPositionDetailField->BrokerID
		, "InvestorID", pQryInvestorPositionDetailField->InvestorID
		, "InstrumentID", pQryInvestorPositionDetailField->InstrumentID
		, "ExchangeID", pQryInvestorPositionDetailField->ExchangeID
		, "InvestUnitID", pQryInvestorPositionDetailField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInvestorPositionDetailField *pInvestorPositionDetailField, PyObject *dict)
{
	static char *kwlist[] = {"InstrumentID", "BrokerID", "InvestorID", "HedgeFlag", "Direction", "OpenDate", "TradeID", "Volume", "OpenPrice", "TradingDay", "SettlementID", "TradeType", "CombInstrumentID", "ExchangeID", "CloseProfitByDate", "CloseProfitByTrade", "PositionProfitByDate", "PositionProfitByTrade", "Margin", "ExchMargin", "MarginRateByMoney", "MarginRateByVolume", "LastSettlementPrice", "SettlementPrice", "CloseVolume", "CloseAmount", "InvestUnitID", nullptr};
	char *pInvestorPositionDetailField_InstrumentID = nullptr;
	char *pInvestorPositionDetailField_BrokerID = nullptr;
	char *pInvestorPositionDetailField_InvestorID = nullptr;
	char pInvestorPositionDetailField_HedgeFlag = 0;
	char pInvestorPositionDetailField_Direction = 0;
	char *pInvestorPositionDetailField_OpenDate = nullptr;
	char *pInvestorPositionDetailField_TradeID = nullptr;
	int pInvestorPositionDetailField_Volume = 0;
	double pInvestorPositionDetailField_OpenPrice = 0.0;
	char *pInvestorPositionDetailField_TradingDay = nullptr;
	int pInvestorPositionDetailField_SettlementID = 0;
	char pInvestorPositionDetailField_TradeType = 0;
	char *pInvestorPositionDetailField_CombInstrumentID = nullptr;
	char *pInvestorPositionDetailField_ExchangeID = nullptr;
	double pInvestorPositionDetailField_CloseProfitByDate = 0.0;
	double pInvestorPositionDetailField_CloseProfitByTrade = 0.0;
	double pInvestorPositionDetailField_PositionProfitByDate = 0.0;
	double pInvestorPositionDetailField_PositionProfitByTrade = 0.0;
	double pInvestorPositionDetailField_Margin = 0.0;
	double pInvestorPositionDetailField_ExchMargin = 0.0;
	double pInvestorPositionDetailField_MarginRateByMoney = 0.0;
	double pInvestorPositionDetailField_MarginRateByVolume = 0.0;
	double pInvestorPositionDetailField_LastSettlementPrice = 0.0;
	double pInvestorPositionDetailField_SettlementPrice = 0.0;
	int pInvestorPositionDetailField_CloseVolume = 0;
	double pInvestorPositionDetailField_CloseAmount = 0.0;
	char *pInvestorPositionDetailField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInvestorPositionDetailField, "|yyyccyyidyicyyddddddddddidy")
		, &pInvestorPositionDetailField_InstrumentID
		, &pInvestorPositionDetailField_BrokerID
		, &pInvestorPositionDetailField_InvestorID
		, &pInvestorPositionDetailField_HedgeFlag
		, &pInvestorPositionDetailField_Direction
		, &pInvestorPositionDetailField_OpenDate
		, &pInvestorPositionDetailField_TradeID
		, &pInvestorPositionDetailField_Volume
		, &pInvestorPositionDetailField_OpenPrice
		, &pInvestorPositionDetailField_TradingDay
		, &pInvestorPositionDetailField_SettlementID
		, &pInvestorPositionDetailField_TradeType
		, &pInvestorPositionDetailField_CombInstrumentID
		, &pInvestorPositionDetailField_ExchangeID
		, &pInvestorPositionDetailField_CloseProfitByDate
		, &pInvestorPositionDetailField_CloseProfitByTrade
		, &pInvestorPositionDetailField_PositionProfitByDate
		, &pInvestorPositionDetailField_PositionProfitByTrade
		, &pInvestorPositionDetailField_Margin
		, &pInvestorPositionDetailField_ExchMargin
		, &pInvestorPositionDetailField_MarginRateByMoney
		, &pInvestorPositionDetailField_MarginRateByVolume
		, &pInvestorPositionDetailField_LastSettlementPrice
		, &pInvestorPositionDetailField_SettlementPrice
		, &pInvestorPositionDetailField_CloseVolume
		, &pInvestorPositionDetailField_CloseAmount
		, &pInvestorPositionDetailField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pInvestorPositionDetailField_InstrumentID != nullptr){ strcpy_s(pInvestorPositionDetailField->InstrumentID, pInvestorPositionDetailField_InstrumentID); pInvestorPositionDetailField_InstrumentID = nullptr; }
		if(pInvestorPositionDetailField_BrokerID != nullptr){ strcpy_s(pInvestorPositionDetailField->BrokerID, pInvestorPositionDetailField_BrokerID); pInvestorPositionDetailField_BrokerID = nullptr; }
		if(pInvestorPositionDetailField_InvestorID != nullptr){ strcpy_s(pInvestorPositionDetailField->InvestorID, pInvestorPositionDetailField_InvestorID); pInvestorPositionDetailField_InvestorID = nullptr; }
		pInvestorPositionDetailField->HedgeFlag = pInvestorPositionDetailField_HedgeFlag;
		pInvestorPositionDetailField->Direction = pInvestorPositionDetailField_Direction;
		if(pInvestorPositionDetailField_OpenDate != nullptr){ strcpy_s(pInvestorPositionDetailField->OpenDate, pInvestorPositionDetailField_OpenDate); pInvestorPositionDetailField_OpenDate = nullptr; }
		if(pInvestorPositionDetailField_TradeID != nullptr){ strcpy_s(pInvestorPositionDetailField->TradeID, pInvestorPositionDetailField_TradeID); pInvestorPositionDetailField_TradeID = nullptr; }
		pInvestorPositionDetailField->Volume = pInvestorPositionDetailField_Volume;
		pInvestorPositionDetailField->OpenPrice = pInvestorPositionDetailField_OpenPrice;
		if(pInvestorPositionDetailField_TradingDay != nullptr){ strcpy_s(pInvestorPositionDetailField->TradingDay, pInvestorPositionDetailField_TradingDay); pInvestorPositionDetailField_TradingDay = nullptr; }
		pInvestorPositionDetailField->SettlementID = pInvestorPositionDetailField_SettlementID;
		pInvestorPositionDetailField->TradeType = pInvestorPositionDetailField_TradeType;
		if(pInvestorPositionDetailField_CombInstrumentID != nullptr){ strcpy_s(pInvestorPositionDetailField->CombInstrumentID, pInvestorPositionDetailField_CombInstrumentID); pInvestorPositionDetailField_CombInstrumentID = nullptr; }
		if(pInvestorPositionDetailField_ExchangeID != nullptr){ strcpy_s(pInvestorPositionDetailField->ExchangeID, pInvestorPositionDetailField_ExchangeID); pInvestorPositionDetailField_ExchangeID = nullptr; }
		pInvestorPositionDetailField->CloseProfitByDate = pInvestorPositionDetailField_CloseProfitByDate;
		pInvestorPositionDetailField->CloseProfitByTrade = pInvestorPositionDetailField_CloseProfitByTrade;
		pInvestorPositionDetailField->PositionProfitByDate = pInvestorPositionDetailField_PositionProfitByDate;
		pInvestorPositionDetailField->PositionProfitByTrade = pInvestorPositionDetailField_PositionProfitByTrade;
		pInvestorPositionDetailField->Margin = pInvestorPositionDetailField_Margin;
		pInvestorPositionDetailField->ExchMargin = pInvestorPositionDetailField_ExchMargin;
		pInvestorPositionDetailField->MarginRateByMoney = pInvestorPositionDetailField_MarginRateByMoney;
		pInvestorPositionDetailField->MarginRateByVolume = pInvestorPositionDetailField_MarginRateByVolume;
		pInvestorPositionDetailField->LastSettlementPrice = pInvestorPositionDetailField_LastSettlementPrice;
		pInvestorPositionDetailField->SettlementPrice = pInvestorPositionDetailField_SettlementPrice;
		pInvestorPositionDetailField->CloseVolume = pInvestorPositionDetailField_CloseVolume;
		pInvestorPositionDetailField->CloseAmount = pInvestorPositionDetailField_CloseAmount;
		if(pInvestorPositionDetailField_InvestUnitID != nullptr){ strcpy_s(pInvestorPositionDetailField->InvestUnitID, pInvestorPositionDetailField_InvestUnitID); pInvestorPositionDetailField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInvestorPositionDetailField *pInvestorPositionDetailField)
{
	if(pInvestorPositionDetailField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:c,s:c,s:y,s:y,s:i,s:d,s:y,s:i,s:c,s:y,s:y,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:i,s:d,s:y}"
		, "InstrumentID", pInvestorPositionDetailField->InstrumentID
		, "BrokerID", pInvestorPositionDetailField->BrokerID
		, "InvestorID", pInvestorPositionDetailField->InvestorID
		, "HedgeFlag", pInvestorPositionDetailField->HedgeFlag
		, "Direction", pInvestorPositionDetailField->Direction
		, "OpenDate", pInvestorPositionDetailField->OpenDate
		, "TradeID", pInvestorPositionDetailField->TradeID
		, "Volume", pInvestorPositionDetailField->Volume
		, "OpenPrice", pInvestorPositionDetailField->OpenPrice
		, "TradingDay", pInvestorPositionDetailField->TradingDay
		, "SettlementID", pInvestorPositionDetailField->SettlementID
		, "TradeType", pInvestorPositionDetailField->TradeType
		, "CombInstrumentID", pInvestorPositionDetailField->CombInstrumentID
		, "ExchangeID", pInvestorPositionDetailField->ExchangeID
		, "CloseProfitByDate", pInvestorPositionDetailField->CloseProfitByDate
		, "CloseProfitByTrade", pInvestorPositionDetailField->CloseProfitByTrade
		, "PositionProfitByDate", pInvestorPositionDetailField->PositionProfitByDate
		, "PositionProfitByTrade", pInvestorPositionDetailField->PositionProfitByTrade
		, "Margin", pInvestorPositionDetailField->Margin
		, "ExchMargin", pInvestorPositionDetailField->ExchMargin
		, "MarginRateByMoney", pInvestorPositionDetailField->MarginRateByMoney
		, "MarginRateByVolume", pInvestorPositionDetailField->MarginRateByVolume
		, "LastSettlementPrice", pInvestorPositionDetailField->LastSettlementPrice
		, "SettlementPrice", pInvestorPositionDetailField->SettlementPrice
		, "CloseVolume", pInvestorPositionDetailField->CloseVolume
		, "CloseAmount", pInvestorPositionDetailField->CloseAmount
		, "InvestUnitID", pInvestorPositionDetailField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTradingAccountPasswordField *pTradingAccountPasswordField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "AccountID", "Password", "CurrencyID", nullptr};
	char *pTradingAccountPasswordField_BrokerID = nullptr;
	char *pTradingAccountPasswordField_AccountID = nullptr;
	char *pTradingAccountPasswordField_Password = nullptr;
	char *pTradingAccountPasswordField_CurrencyID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTradingAccountPasswordField, "|yyyy")
		, &pTradingAccountPasswordField_BrokerID
		, &pTradingAccountPasswordField_AccountID
		, &pTradingAccountPasswordField_Password
		, &pTradingAccountPasswordField_CurrencyID
	PyCTP_PyDict_FromStruct_END
		if(pTradingAccountPasswordField_BrokerID != nullptr){ strcpy_s(pTradingAccountPasswordField->BrokerID, pTradingAccountPasswordField_BrokerID); pTradingAccountPasswordField_BrokerID = nullptr; }
		if(pTradingAccountPasswordField_AccountID != nullptr){ strcpy_s(pTradingAccountPasswordField->AccountID, pTradingAccountPasswordField_AccountID); pTradingAccountPasswordField_AccountID = nullptr; }
		if(pTradingAccountPasswordField_Password != nullptr){ strcpy_s(pTradingAccountPasswordField->Password, pTradingAccountPasswordField_Password); pTradingAccountPasswordField_Password = nullptr; }
		if(pTradingAccountPasswordField_CurrencyID != nullptr){ strcpy_s(pTradingAccountPasswordField->CurrencyID, pTradingAccountPasswordField_CurrencyID); pTradingAccountPasswordField_CurrencyID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTradingAccountPasswordField *pTradingAccountPasswordField)
{
	if(pTradingAccountPasswordField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y}"
		, "BrokerID", pTradingAccountPasswordField->BrokerID
		, "AccountID", pTradingAccountPasswordField->AccountID
		, "Password", pTradingAccountPasswordField->Password
		, "CurrencyID", pTradingAccountPasswordField->CurrencyID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcMDTraderOfferField *pMDTraderOfferField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "TraderID", "ParticipantID", "Password", "InstallID", "OrderLocalID", "TraderConnectStatus", "ConnectRequestDate", "ConnectRequestTime", "LastReportDate", "LastReportTime", "ConnectDate", "ConnectTime", "StartDate", "StartTime", "TradingDay", "BrokerID", "MaxTradeID", "MaxOrderMessageReference", nullptr};
	char *pMDTraderOfferField_ExchangeID = nullptr;
	char *pMDTraderOfferField_TraderID = nullptr;
	char *pMDTraderOfferField_ParticipantID = nullptr;
	char *pMDTraderOfferField_Password = nullptr;
	int pMDTraderOfferField_InstallID = 0;
	char *pMDTraderOfferField_OrderLocalID = nullptr;
	char pMDTraderOfferField_TraderConnectStatus = 0;
	char *pMDTraderOfferField_ConnectRequestDate = nullptr;
	char *pMDTraderOfferField_ConnectRequestTime = nullptr;
	char *pMDTraderOfferField_LastReportDate = nullptr;
	char *pMDTraderOfferField_LastReportTime = nullptr;
	char *pMDTraderOfferField_ConnectDate = nullptr;
	char *pMDTraderOfferField_ConnectTime = nullptr;
	char *pMDTraderOfferField_StartDate = nullptr;
	char *pMDTraderOfferField_StartTime = nullptr;
	char *pMDTraderOfferField_TradingDay = nullptr;
	char *pMDTraderOfferField_BrokerID = nullptr;
	char *pMDTraderOfferField_MaxTradeID = nullptr;
	char *pMDTraderOfferField_MaxOrderMessageReference = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pMDTraderOfferField, "|yyyyiycyyyyyyyyyyyy")
		, &pMDTraderOfferField_ExchangeID
		, &pMDTraderOfferField_TraderID
		, &pMDTraderOfferField_ParticipantID
		, &pMDTraderOfferField_Password
		, &pMDTraderOfferField_InstallID
		, &pMDTraderOfferField_OrderLocalID
		, &pMDTraderOfferField_TraderConnectStatus
		, &pMDTraderOfferField_ConnectRequestDate
		, &pMDTraderOfferField_ConnectRequestTime
		, &pMDTraderOfferField_LastReportDate
		, &pMDTraderOfferField_LastReportTime
		, &pMDTraderOfferField_ConnectDate
		, &pMDTraderOfferField_ConnectTime
		, &pMDTraderOfferField_StartDate
		, &pMDTraderOfferField_StartTime
		, &pMDTraderOfferField_TradingDay
		, &pMDTraderOfferField_BrokerID
		, &pMDTraderOfferField_MaxTradeID
		, &pMDTraderOfferField_MaxOrderMessageReference
	PyCTP_PyDict_FromStruct_END
		if(pMDTraderOfferField_ExchangeID != nullptr){ strcpy_s(pMDTraderOfferField->ExchangeID, pMDTraderOfferField_ExchangeID); pMDTraderOfferField_ExchangeID = nullptr; }
		if(pMDTraderOfferField_TraderID != nullptr){ strcpy_s(pMDTraderOfferField->TraderID, pMDTraderOfferField_TraderID); pMDTraderOfferField_TraderID = nullptr; }
		if(pMDTraderOfferField_ParticipantID != nullptr){ strcpy_s(pMDTraderOfferField->ParticipantID, pMDTraderOfferField_ParticipantID); pMDTraderOfferField_ParticipantID = nullptr; }
		if(pMDTraderOfferField_Password != nullptr){ strcpy_s(pMDTraderOfferField->Password, pMDTraderOfferField_Password); pMDTraderOfferField_Password = nullptr; }
		pMDTraderOfferField->InstallID = pMDTraderOfferField_InstallID;
		if(pMDTraderOfferField_OrderLocalID != nullptr){ strcpy_s(pMDTraderOfferField->OrderLocalID, pMDTraderOfferField_OrderLocalID); pMDTraderOfferField_OrderLocalID = nullptr; }
		pMDTraderOfferField->TraderConnectStatus = pMDTraderOfferField_TraderConnectStatus;
		if(pMDTraderOfferField_ConnectRequestDate != nullptr){ strcpy_s(pMDTraderOfferField->ConnectRequestDate, pMDTraderOfferField_ConnectRequestDate); pMDTraderOfferField_ConnectRequestDate = nullptr; }
		if(pMDTraderOfferField_ConnectRequestTime != nullptr){ strcpy_s(pMDTraderOfferField->ConnectRequestTime, pMDTraderOfferField_ConnectRequestTime); pMDTraderOfferField_ConnectRequestTime = nullptr; }
		if(pMDTraderOfferField_LastReportDate != nullptr){ strcpy_s(pMDTraderOfferField->LastReportDate, pMDTraderOfferField_LastReportDate); pMDTraderOfferField_LastReportDate = nullptr; }
		if(pMDTraderOfferField_LastReportTime != nullptr){ strcpy_s(pMDTraderOfferField->LastReportTime, pMDTraderOfferField_LastReportTime); pMDTraderOfferField_LastReportTime = nullptr; }
		if(pMDTraderOfferField_ConnectDate != nullptr){ strcpy_s(pMDTraderOfferField->ConnectDate, pMDTraderOfferField_ConnectDate); pMDTraderOfferField_ConnectDate = nullptr; }
		if(pMDTraderOfferField_ConnectTime != nullptr){ strcpy_s(pMDTraderOfferField->ConnectTime, pMDTraderOfferField_ConnectTime); pMDTraderOfferField_ConnectTime = nullptr; }
		if(pMDTraderOfferField_StartDate != nullptr){ strcpy_s(pMDTraderOfferField->StartDate, pMDTraderOfferField_StartDate); pMDTraderOfferField_StartDate = nullptr; }
		if(pMDTraderOfferField_StartTime != nullptr){ strcpy_s(pMDTraderOfferField->StartTime, pMDTraderOfferField_StartTime); pMDTraderOfferField_StartTime = nullptr; }
		if(pMDTraderOfferField_TradingDay != nullptr){ strcpy_s(pMDTraderOfferField->TradingDay, pMDTraderOfferField_TradingDay); pMDTraderOfferField_TradingDay = nullptr; }
		if(pMDTraderOfferField_BrokerID != nullptr){ strcpy_s(pMDTraderOfferField->BrokerID, pMDTraderOfferField_BrokerID); pMDTraderOfferField_BrokerID = nullptr; }
		if(pMDTraderOfferField_MaxTradeID != nullptr){ strcpy_s(pMDTraderOfferField->MaxTradeID, pMDTraderOfferField_MaxTradeID); pMDTraderOfferField_MaxTradeID = nullptr; }
		if(pMDTraderOfferField_MaxOrderMessageReference != nullptr){ strcpy_s(pMDTraderOfferField->MaxOrderMessageReference, pMDTraderOfferField_MaxOrderMessageReference); pMDTraderOfferField_MaxOrderMessageReference = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcMDTraderOfferField *pMDTraderOfferField)
{
	if(pMDTraderOfferField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:i,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "ExchangeID", pMDTraderOfferField->ExchangeID
		, "TraderID", pMDTraderOfferField->TraderID
		, "ParticipantID", pMDTraderOfferField->ParticipantID
		, "Password", pMDTraderOfferField->Password
		, "InstallID", pMDTraderOfferField->InstallID
		, "OrderLocalID", pMDTraderOfferField->OrderLocalID
		, "TraderConnectStatus", pMDTraderOfferField->TraderConnectStatus
		, "ConnectRequestDate", pMDTraderOfferField->ConnectRequestDate
		, "ConnectRequestTime", pMDTraderOfferField->ConnectRequestTime
		, "LastReportDate", pMDTraderOfferField->LastReportDate
		, "LastReportTime", pMDTraderOfferField->LastReportTime
		, "ConnectDate", pMDTraderOfferField->ConnectDate
		, "ConnectTime", pMDTraderOfferField->ConnectTime
		, "StartDate", pMDTraderOfferField->StartDate
		, "StartTime", pMDTraderOfferField->StartTime
		, "TradingDay", pMDTraderOfferField->TradingDay
		, "BrokerID", pMDTraderOfferField->BrokerID
		, "MaxTradeID", pMDTraderOfferField->MaxTradeID
		, "MaxOrderMessageReference", pMDTraderOfferField->MaxOrderMessageReference
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryMDTraderOfferField *pQryMDTraderOfferField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "ParticipantID", "TraderID", nullptr};
	char *pQryMDTraderOfferField_ExchangeID = nullptr;
	char *pQryMDTraderOfferField_ParticipantID = nullptr;
	char *pQryMDTraderOfferField_TraderID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryMDTraderOfferField, "|yyy")
		, &pQryMDTraderOfferField_ExchangeID
		, &pQryMDTraderOfferField_ParticipantID
		, &pQryMDTraderOfferField_TraderID
	PyCTP_PyDict_FromStruct_END
		if(pQryMDTraderOfferField_ExchangeID != nullptr){ strcpy_s(pQryMDTraderOfferField->ExchangeID, pQryMDTraderOfferField_ExchangeID); pQryMDTraderOfferField_ExchangeID = nullptr; }
		if(pQryMDTraderOfferField_ParticipantID != nullptr){ strcpy_s(pQryMDTraderOfferField->ParticipantID, pQryMDTraderOfferField_ParticipantID); pQryMDTraderOfferField_ParticipantID = nullptr; }
		if(pQryMDTraderOfferField_TraderID != nullptr){ strcpy_s(pQryMDTraderOfferField->TraderID, pQryMDTraderOfferField_TraderID); pQryMDTraderOfferField_TraderID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryMDTraderOfferField *pQryMDTraderOfferField)
{
	if(pQryMDTraderOfferField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "ExchangeID", pQryMDTraderOfferField->ExchangeID
		, "ParticipantID", pQryMDTraderOfferField->ParticipantID
		, "TraderID", pQryMDTraderOfferField->TraderID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryNoticeField *pQryNoticeField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", nullptr};
	char *pQryNoticeField_BrokerID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryNoticeField, "|y")
		, &pQryNoticeField_BrokerID
	PyCTP_PyDict_FromStruct_END
		if(pQryNoticeField_BrokerID != nullptr){ strcpy_s(pQryNoticeField->BrokerID, pQryNoticeField_BrokerID); pQryNoticeField_BrokerID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryNoticeField *pQryNoticeField)
{
	if(pQryNoticeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y}"
		, "BrokerID", pQryNoticeField->BrokerID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcNoticeField *pNoticeField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "Content", "SequenceLabel", nullptr};
	char *pNoticeField_BrokerID = nullptr;
	char *pNoticeField_Content = nullptr;
	char *pNoticeField_SequenceLabel = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pNoticeField, "|yyy")
		, &pNoticeField_BrokerID
		, &pNoticeField_Content
		, &pNoticeField_SequenceLabel
	PyCTP_PyDict_FromStruct_END
		if(pNoticeField_BrokerID != nullptr){ strcpy_s(pNoticeField->BrokerID, pNoticeField_BrokerID); pNoticeField_BrokerID = nullptr; }
		if(pNoticeField_Content != nullptr){ strcpy_s(pNoticeField->Content, pNoticeField_Content); pNoticeField_Content = nullptr; }
		if(pNoticeField_SequenceLabel != nullptr){ strcpy_s(pNoticeField->SequenceLabel, pNoticeField_SequenceLabel); pNoticeField_SequenceLabel = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcNoticeField *pNoticeField)
{
	if(pNoticeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pNoticeField->BrokerID
		, "Content", pNoticeField->Content
		, "SequenceLabel", pNoticeField->SequenceLabel
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcUserRightField *pUserRightField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "UserRightType", "IsForbidden", nullptr};
	char *pUserRightField_BrokerID = nullptr;
	char *pUserRightField_UserID = nullptr;
	char pUserRightField_UserRightType = 0;
	int pUserRightField_IsForbidden = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pUserRightField, "|yyci")
		, &pUserRightField_BrokerID
		, &pUserRightField_UserID
		, &pUserRightField_UserRightType
		, &pUserRightField_IsForbidden
	PyCTP_PyDict_FromStruct_END
		if(pUserRightField_BrokerID != nullptr){ strcpy_s(pUserRightField->BrokerID, pUserRightField_BrokerID); pUserRightField_BrokerID = nullptr; }
		if(pUserRightField_UserID != nullptr){ strcpy_s(pUserRightField->UserID, pUserRightField_UserID); pUserRightField_UserID = nullptr; }
		pUserRightField->UserRightType = pUserRightField_UserRightType;
		pUserRightField->IsForbidden = pUserRightField_IsForbidden;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcUserRightField *pUserRightField)
{
	if(pUserRightField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c,s:i}"
		, "BrokerID", pUserRightField->BrokerID
		, "UserID", pUserRightField->UserID
		, "UserRightType", pUserRightField->UserRightType
		, "IsForbidden", pUserRightField->IsForbidden
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQrySettlementInfoConfirmField *pQrySettlementInfoConfirmField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "AccountID", "CurrencyID", nullptr};
	char *pQrySettlementInfoConfirmField_BrokerID = nullptr;
	char *pQrySettlementInfoConfirmField_InvestorID = nullptr;
	char *pQrySettlementInfoConfirmField_AccountID = nullptr;
	char *pQrySettlementInfoConfirmField_CurrencyID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQrySettlementInfoConfirmField, "|yyyy")
		, &pQrySettlementInfoConfirmField_BrokerID
		, &pQrySettlementInfoConfirmField_InvestorID
		, &pQrySettlementInfoConfirmField_AccountID
		, &pQrySettlementInfoConfirmField_CurrencyID
	PyCTP_PyDict_FromStruct_END
		if(pQrySettlementInfoConfirmField_BrokerID != nullptr){ strcpy_s(pQrySettlementInfoConfirmField->BrokerID, pQrySettlementInfoConfirmField_BrokerID); pQrySettlementInfoConfirmField_BrokerID = nullptr; }
		if(pQrySettlementInfoConfirmField_InvestorID != nullptr){ strcpy_s(pQrySettlementInfoConfirmField->InvestorID, pQrySettlementInfoConfirmField_InvestorID); pQrySettlementInfoConfirmField_InvestorID = nullptr; }
		if(pQrySettlementInfoConfirmField_AccountID != nullptr){ strcpy_s(pQrySettlementInfoConfirmField->AccountID, pQrySettlementInfoConfirmField_AccountID); pQrySettlementInfoConfirmField_AccountID = nullptr; }
		if(pQrySettlementInfoConfirmField_CurrencyID != nullptr){ strcpy_s(pQrySettlementInfoConfirmField->CurrencyID, pQrySettlementInfoConfirmField_CurrencyID); pQrySettlementInfoConfirmField_CurrencyID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQrySettlementInfoConfirmField *pQrySettlementInfoConfirmField)
{
	if(pQrySettlementInfoConfirmField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y}"
		, "BrokerID", pQrySettlementInfoConfirmField->BrokerID
		, "InvestorID", pQrySettlementInfoConfirmField->InvestorID
		, "AccountID", pQrySettlementInfoConfirmField->AccountID
		, "CurrencyID", pQrySettlementInfoConfirmField->CurrencyID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcLoadSettlementInfoField *pLoadSettlementInfoField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", nullptr};
	char *pLoadSettlementInfoField_BrokerID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pLoadSettlementInfoField, "|y")
		, &pLoadSettlementInfoField_BrokerID
	PyCTP_PyDict_FromStruct_END
		if(pLoadSettlementInfoField_BrokerID != nullptr){ strcpy_s(pLoadSettlementInfoField->BrokerID, pLoadSettlementInfoField_BrokerID); pLoadSettlementInfoField_BrokerID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcLoadSettlementInfoField *pLoadSettlementInfoField)
{
	if(pLoadSettlementInfoField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y}"
		, "BrokerID", pLoadSettlementInfoField->BrokerID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcBrokerWithdrawAlgorithmField *pBrokerWithdrawAlgorithmField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "WithdrawAlgorithm", "UsingRatio", "IncludeCloseProfit", "AllWithoutTrade", "AvailIncludeCloseProfit", "IsBrokerUserEvent", "CurrencyID", "FundMortgageRatio", "BalanceAlgorithm", nullptr};
	char *pBrokerWithdrawAlgorithmField_BrokerID = nullptr;
	char pBrokerWithdrawAlgorithmField_WithdrawAlgorithm = 0;
	double pBrokerWithdrawAlgorithmField_UsingRatio = 0.0;
	char pBrokerWithdrawAlgorithmField_IncludeCloseProfit = 0;
	char pBrokerWithdrawAlgorithmField_AllWithoutTrade = 0;
	char pBrokerWithdrawAlgorithmField_AvailIncludeCloseProfit = 0;
	int pBrokerWithdrawAlgorithmField_IsBrokerUserEvent = 0;
	char *pBrokerWithdrawAlgorithmField_CurrencyID = nullptr;
	double pBrokerWithdrawAlgorithmField_FundMortgageRatio = 0.0;
	char pBrokerWithdrawAlgorithmField_BalanceAlgorithm = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pBrokerWithdrawAlgorithmField, "|ycdccciydc")
		, &pBrokerWithdrawAlgorithmField_BrokerID
		, &pBrokerWithdrawAlgorithmField_WithdrawAlgorithm
		, &pBrokerWithdrawAlgorithmField_UsingRatio
		, &pBrokerWithdrawAlgorithmField_IncludeCloseProfit
		, &pBrokerWithdrawAlgorithmField_AllWithoutTrade
		, &pBrokerWithdrawAlgorithmField_AvailIncludeCloseProfit
		, &pBrokerWithdrawAlgorithmField_IsBrokerUserEvent
		, &pBrokerWithdrawAlgorithmField_CurrencyID
		, &pBrokerWithdrawAlgorithmField_FundMortgageRatio
		, &pBrokerWithdrawAlgorithmField_BalanceAlgorithm
	PyCTP_PyDict_FromStruct_END
		if(pBrokerWithdrawAlgorithmField_BrokerID != nullptr){ strcpy_s(pBrokerWithdrawAlgorithmField->BrokerID, pBrokerWithdrawAlgorithmField_BrokerID); pBrokerWithdrawAlgorithmField_BrokerID = nullptr; }
		pBrokerWithdrawAlgorithmField->WithdrawAlgorithm = pBrokerWithdrawAlgorithmField_WithdrawAlgorithm;
		pBrokerWithdrawAlgorithmField->UsingRatio = pBrokerWithdrawAlgorithmField_UsingRatio;
		pBrokerWithdrawAlgorithmField->IncludeCloseProfit = pBrokerWithdrawAlgorithmField_IncludeCloseProfit;
		pBrokerWithdrawAlgorithmField->AllWithoutTrade = pBrokerWithdrawAlgorithmField_AllWithoutTrade;
		pBrokerWithdrawAlgorithmField->AvailIncludeCloseProfit = pBrokerWithdrawAlgorithmField_AvailIncludeCloseProfit;
		pBrokerWithdrawAlgorithmField->IsBrokerUserEvent = pBrokerWithdrawAlgorithmField_IsBrokerUserEvent;
		if(pBrokerWithdrawAlgorithmField_CurrencyID != nullptr){ strcpy_s(pBrokerWithdrawAlgorithmField->CurrencyID, pBrokerWithdrawAlgorithmField_CurrencyID); pBrokerWithdrawAlgorithmField_CurrencyID = nullptr; }
		pBrokerWithdrawAlgorithmField->FundMortgageRatio = pBrokerWithdrawAlgorithmField_FundMortgageRatio;
		pBrokerWithdrawAlgorithmField->BalanceAlgorithm = pBrokerWithdrawAlgorithmField_BalanceAlgorithm;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcBrokerWithdrawAlgorithmField *pBrokerWithdrawAlgorithmField)
{
	if(pBrokerWithdrawAlgorithmField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:d,s:c,s:c,s:c,s:i,s:y,s:d,s:c}"
		, "BrokerID", pBrokerWithdrawAlgorithmField->BrokerID
		, "WithdrawAlgorithm", pBrokerWithdrawAlgorithmField->WithdrawAlgorithm
		, "UsingRatio", pBrokerWithdrawAlgorithmField->UsingRatio
		, "IncludeCloseProfit", pBrokerWithdrawAlgorithmField->IncludeCloseProfit
		, "AllWithoutTrade", pBrokerWithdrawAlgorithmField->AllWithoutTrade
		, "AvailIncludeCloseProfit", pBrokerWithdrawAlgorithmField->AvailIncludeCloseProfit
		, "IsBrokerUserEvent", pBrokerWithdrawAlgorithmField->IsBrokerUserEvent
		, "CurrencyID", pBrokerWithdrawAlgorithmField->CurrencyID
		, "FundMortgageRatio", pBrokerWithdrawAlgorithmField->FundMortgageRatio
		, "BalanceAlgorithm", pBrokerWithdrawAlgorithmField->BalanceAlgorithm
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTradingAccountPasswordUpdateV1Field *pTradingAccountPasswordUpdateV1Field, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "OldPassword", "NewPassword", nullptr};
	char *pTradingAccountPasswordUpdateV1Field_BrokerID = nullptr;
	char *pTradingAccountPasswordUpdateV1Field_InvestorID = nullptr;
	char *pTradingAccountPasswordUpdateV1Field_OldPassword = nullptr;
	char *pTradingAccountPasswordUpdateV1Field_NewPassword = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTradingAccountPasswordUpdateV1Field, "|yyyy")
		, &pTradingAccountPasswordUpdateV1Field_BrokerID
		, &pTradingAccountPasswordUpdateV1Field_InvestorID
		, &pTradingAccountPasswordUpdateV1Field_OldPassword
		, &pTradingAccountPasswordUpdateV1Field_NewPassword
	PyCTP_PyDict_FromStruct_END
		if(pTradingAccountPasswordUpdateV1Field_BrokerID != nullptr){ strcpy_s(pTradingAccountPasswordUpdateV1Field->BrokerID, pTradingAccountPasswordUpdateV1Field_BrokerID); pTradingAccountPasswordUpdateV1Field_BrokerID = nullptr; }
		if(pTradingAccountPasswordUpdateV1Field_InvestorID != nullptr){ strcpy_s(pTradingAccountPasswordUpdateV1Field->InvestorID, pTradingAccountPasswordUpdateV1Field_InvestorID); pTradingAccountPasswordUpdateV1Field_InvestorID = nullptr; }
		if(pTradingAccountPasswordUpdateV1Field_OldPassword != nullptr){ strcpy_s(pTradingAccountPasswordUpdateV1Field->OldPassword, pTradingAccountPasswordUpdateV1Field_OldPassword); pTradingAccountPasswordUpdateV1Field_OldPassword = nullptr; }
		if(pTradingAccountPasswordUpdateV1Field_NewPassword != nullptr){ strcpy_s(pTradingAccountPasswordUpdateV1Field->NewPassword, pTradingAccountPasswordUpdateV1Field_NewPassword); pTradingAccountPasswordUpdateV1Field_NewPassword = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTradingAccountPasswordUpdateV1Field *pTradingAccountPasswordUpdateV1Field)
{
	if(pTradingAccountPasswordUpdateV1Field == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y}"
		, "BrokerID", pTradingAccountPasswordUpdateV1Field->BrokerID
		, "InvestorID", pTradingAccountPasswordUpdateV1Field->InvestorID
		, "OldPassword", pTradingAccountPasswordUpdateV1Field->OldPassword
		, "NewPassword", pTradingAccountPasswordUpdateV1Field->NewPassword
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTradingAccountPasswordUpdateField *pTradingAccountPasswordUpdateField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "AccountID", "OldPassword", "NewPassword", "CurrencyID", nullptr};
	char *pTradingAccountPasswordUpdateField_BrokerID = nullptr;
	char *pTradingAccountPasswordUpdateField_AccountID = nullptr;
	char *pTradingAccountPasswordUpdateField_OldPassword = nullptr;
	char *pTradingAccountPasswordUpdateField_NewPassword = nullptr;
	char *pTradingAccountPasswordUpdateField_CurrencyID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTradingAccountPasswordUpdateField, "|yyyyy")
		, &pTradingAccountPasswordUpdateField_BrokerID
		, &pTradingAccountPasswordUpdateField_AccountID
		, &pTradingAccountPasswordUpdateField_OldPassword
		, &pTradingAccountPasswordUpdateField_NewPassword
		, &pTradingAccountPasswordUpdateField_CurrencyID
	PyCTP_PyDict_FromStruct_END
		if(pTradingAccountPasswordUpdateField_BrokerID != nullptr){ strcpy_s(pTradingAccountPasswordUpdateField->BrokerID, pTradingAccountPasswordUpdateField_BrokerID); pTradingAccountPasswordUpdateField_BrokerID = nullptr; }
		if(pTradingAccountPasswordUpdateField_AccountID != nullptr){ strcpy_s(pTradingAccountPasswordUpdateField->AccountID, pTradingAccountPasswordUpdateField_AccountID); pTradingAccountPasswordUpdateField_AccountID = nullptr; }
		if(pTradingAccountPasswordUpdateField_OldPassword != nullptr){ strcpy_s(pTradingAccountPasswordUpdateField->OldPassword, pTradingAccountPasswordUpdateField_OldPassword); pTradingAccountPasswordUpdateField_OldPassword = nullptr; }
		if(pTradingAccountPasswordUpdateField_NewPassword != nullptr){ strcpy_s(pTradingAccountPasswordUpdateField->NewPassword, pTradingAccountPasswordUpdateField_NewPassword); pTradingAccountPasswordUpdateField_NewPassword = nullptr; }
		if(pTradingAccountPasswordUpdateField_CurrencyID != nullptr){ strcpy_s(pTradingAccountPasswordUpdateField->CurrencyID, pTradingAccountPasswordUpdateField_CurrencyID); pTradingAccountPasswordUpdateField_CurrencyID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTradingAccountPasswordUpdateField *pTradingAccountPasswordUpdateField)
{
	if(pTradingAccountPasswordUpdateField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pTradingAccountPasswordUpdateField->BrokerID
		, "AccountID", pTradingAccountPasswordUpdateField->AccountID
		, "OldPassword", pTradingAccountPasswordUpdateField->OldPassword
		, "NewPassword", pTradingAccountPasswordUpdateField->NewPassword
		, "CurrencyID", pTradingAccountPasswordUpdateField->CurrencyID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryCombinationLegField *pQryCombinationLegField, PyObject *dict)
{
	static char *kwlist[] = {"CombInstrumentID", "LegID", "LegInstrumentID", nullptr};
	char *pQryCombinationLegField_CombInstrumentID = nullptr;
	int pQryCombinationLegField_LegID = 0;
	char *pQryCombinationLegField_LegInstrumentID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryCombinationLegField, "|yiy")
		, &pQryCombinationLegField_CombInstrumentID
		, &pQryCombinationLegField_LegID
		, &pQryCombinationLegField_LegInstrumentID
	PyCTP_PyDict_FromStruct_END
		if(pQryCombinationLegField_CombInstrumentID != nullptr){ strcpy_s(pQryCombinationLegField->CombInstrumentID, pQryCombinationLegField_CombInstrumentID); pQryCombinationLegField_CombInstrumentID = nullptr; }
		pQryCombinationLegField->LegID = pQryCombinationLegField_LegID;
		if(pQryCombinationLegField_LegInstrumentID != nullptr){ strcpy_s(pQryCombinationLegField->LegInstrumentID, pQryCombinationLegField_LegInstrumentID); pQryCombinationLegField_LegInstrumentID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryCombinationLegField *pQryCombinationLegField)
{
	if(pQryCombinationLegField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:i,s:y}"
		, "CombInstrumentID", pQryCombinationLegField->CombInstrumentID
		, "LegID", pQryCombinationLegField->LegID
		, "LegInstrumentID", pQryCombinationLegField->LegInstrumentID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQrySyncStatusField *pQrySyncStatusField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", nullptr};
	char *pQrySyncStatusField_TradingDay = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQrySyncStatusField, "|y")
		, &pQrySyncStatusField_TradingDay
	PyCTP_PyDict_FromStruct_END
		if(pQrySyncStatusField_TradingDay != nullptr){ strcpy_s(pQrySyncStatusField->TradingDay, pQrySyncStatusField_TradingDay); pQrySyncStatusField_TradingDay = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQrySyncStatusField *pQrySyncStatusField)
{
	if(pQrySyncStatusField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y}"
		, "TradingDay", pQrySyncStatusField->TradingDay
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcCombinationLegField *pCombinationLegField, PyObject *dict)
{
	static char *kwlist[] = {"CombInstrumentID", "LegID", "LegInstrumentID", "Direction", "LegMultiple", "ImplyLevel", nullptr};
	char *pCombinationLegField_CombInstrumentID = nullptr;
	int pCombinationLegField_LegID = 0;
	char *pCombinationLegField_LegInstrumentID = nullptr;
	char pCombinationLegField_Direction = 0;
	int pCombinationLegField_LegMultiple = 0;
	int pCombinationLegField_ImplyLevel = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pCombinationLegField, "|yiycii")
		, &pCombinationLegField_CombInstrumentID
		, &pCombinationLegField_LegID
		, &pCombinationLegField_LegInstrumentID
		, &pCombinationLegField_Direction
		, &pCombinationLegField_LegMultiple
		, &pCombinationLegField_ImplyLevel
	PyCTP_PyDict_FromStruct_END
		if(pCombinationLegField_CombInstrumentID != nullptr){ strcpy_s(pCombinationLegField->CombInstrumentID, pCombinationLegField_CombInstrumentID); pCombinationLegField_CombInstrumentID = nullptr; }
		pCombinationLegField->LegID = pCombinationLegField_LegID;
		if(pCombinationLegField_LegInstrumentID != nullptr){ strcpy_s(pCombinationLegField->LegInstrumentID, pCombinationLegField_LegInstrumentID); pCombinationLegField_LegInstrumentID = nullptr; }
		pCombinationLegField->Direction = pCombinationLegField_Direction;
		pCombinationLegField->LegMultiple = pCombinationLegField_LegMultiple;
		pCombinationLegField->ImplyLevel = pCombinationLegField_ImplyLevel;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcCombinationLegField *pCombinationLegField)
{
	if(pCombinationLegField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:i,s:y,s:c,s:i,s:i}"
		, "CombInstrumentID", pCombinationLegField->CombInstrumentID
		, "LegID", pCombinationLegField->LegID
		, "LegInstrumentID", pCombinationLegField->LegInstrumentID
		, "Direction", pCombinationLegField->Direction
		, "LegMultiple", pCombinationLegField->LegMultiple
		, "ImplyLevel", pCombinationLegField->ImplyLevel
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSyncStatusField *pSyncStatusField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "DataSyncStatus", nullptr};
	char *pSyncStatusField_TradingDay = nullptr;
	char pSyncStatusField_DataSyncStatus = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pSyncStatusField, "|yc")
		, &pSyncStatusField_TradingDay
		, &pSyncStatusField_DataSyncStatus
	PyCTP_PyDict_FromStruct_END
		if(pSyncStatusField_TradingDay != nullptr){ strcpy_s(pSyncStatusField->TradingDay, pSyncStatusField_TradingDay); pSyncStatusField_TradingDay = nullptr; }
		pSyncStatusField->DataSyncStatus = pSyncStatusField_DataSyncStatus;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSyncStatusField *pSyncStatusField)
{
	if(pSyncStatusField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c}"
		, "TradingDay", pSyncStatusField->TradingDay
		, "DataSyncStatus", pSyncStatusField->DataSyncStatus
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryLinkManField *pQryLinkManField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", nullptr};
	char *pQryLinkManField_BrokerID = nullptr;
	char *pQryLinkManField_InvestorID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryLinkManField, "|yy")
		, &pQryLinkManField_BrokerID
		, &pQryLinkManField_InvestorID
	PyCTP_PyDict_FromStruct_END
		if(pQryLinkManField_BrokerID != nullptr){ strcpy_s(pQryLinkManField->BrokerID, pQryLinkManField_BrokerID); pQryLinkManField_BrokerID = nullptr; }
		if(pQryLinkManField_InvestorID != nullptr){ strcpy_s(pQryLinkManField->InvestorID, pQryLinkManField_InvestorID); pQryLinkManField_InvestorID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryLinkManField *pQryLinkManField)
{
	if(pQryLinkManField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQryLinkManField->BrokerID
		, "InvestorID", pQryLinkManField->InvestorID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcLinkManField *pLinkManField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "PersonType", "IdentifiedCardType", "IdentifiedCardNo", "PersonName", "Telephone", "Address", "ZipCode", "Priority", "UOAZipCode", "PersonFullName", nullptr};
	char *pLinkManField_BrokerID = nullptr;
	char *pLinkManField_InvestorID = nullptr;
	char pLinkManField_PersonType = 0;
	char pLinkManField_IdentifiedCardType = 0;
	char *pLinkManField_IdentifiedCardNo = nullptr;
	char *pLinkManField_PersonName = nullptr;
	char *pLinkManField_Telephone = nullptr;
	char *pLinkManField_Address = nullptr;
	char *pLinkManField_ZipCode = nullptr;
	int pLinkManField_Priority = 0;
	char *pLinkManField_UOAZipCode = nullptr;
	char *pLinkManField_PersonFullName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pLinkManField, "|yyccyyyyyiyy")
		, &pLinkManField_BrokerID
		, &pLinkManField_InvestorID
		, &pLinkManField_PersonType
		, &pLinkManField_IdentifiedCardType
		, &pLinkManField_IdentifiedCardNo
		, &pLinkManField_PersonName
		, &pLinkManField_Telephone
		, &pLinkManField_Address
		, &pLinkManField_ZipCode
		, &pLinkManField_Priority
		, &pLinkManField_UOAZipCode
		, &pLinkManField_PersonFullName
	PyCTP_PyDict_FromStruct_END
		if(pLinkManField_BrokerID != nullptr){ strcpy_s(pLinkManField->BrokerID, pLinkManField_BrokerID); pLinkManField_BrokerID = nullptr; }
		if(pLinkManField_InvestorID != nullptr){ strcpy_s(pLinkManField->InvestorID, pLinkManField_InvestorID); pLinkManField_InvestorID = nullptr; }
		pLinkManField->PersonType = pLinkManField_PersonType;
		pLinkManField->IdentifiedCardType = pLinkManField_IdentifiedCardType;
		if(pLinkManField_IdentifiedCardNo != nullptr){ strcpy_s(pLinkManField->IdentifiedCardNo, pLinkManField_IdentifiedCardNo); pLinkManField_IdentifiedCardNo = nullptr; }
		if(pLinkManField_PersonName != nullptr){ strcpy_s(pLinkManField->PersonName, pLinkManField_PersonName); pLinkManField_PersonName = nullptr; }
		if(pLinkManField_Telephone != nullptr){ strcpy_s(pLinkManField->Telephone, pLinkManField_Telephone); pLinkManField_Telephone = nullptr; }
		if(pLinkManField_Address != nullptr){ strcpy_s(pLinkManField->Address, pLinkManField_Address); pLinkManField_Address = nullptr; }
		if(pLinkManField_ZipCode != nullptr){ strcpy_s(pLinkManField->ZipCode, pLinkManField_ZipCode); pLinkManField_ZipCode = nullptr; }
		pLinkManField->Priority = pLinkManField_Priority;
		if(pLinkManField_UOAZipCode != nullptr){ strcpy_s(pLinkManField->UOAZipCode, pLinkManField_UOAZipCode); pLinkManField_UOAZipCode = nullptr; }
		if(pLinkManField_PersonFullName != nullptr){ strcpy_s(pLinkManField->PersonFullName, pLinkManField_PersonFullName); pLinkManField_PersonFullName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcLinkManField *pLinkManField)
{
	if(pLinkManField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c,s:c,s:y,s:y,s:y,s:y,s:y,s:i,s:y,s:y}"
		, "BrokerID", pLinkManField->BrokerID
		, "InvestorID", pLinkManField->InvestorID
		, "PersonType", pLinkManField->PersonType
		, "IdentifiedCardType", pLinkManField->IdentifiedCardType
		, "IdentifiedCardNo", pLinkManField->IdentifiedCardNo
		, "PersonName", pLinkManField->PersonName
		, "Telephone", pLinkManField->Telephone
		, "Address", pLinkManField->Address
		, "ZipCode", pLinkManField->ZipCode
		, "Priority", pLinkManField->Priority
		, "UOAZipCode", pLinkManField->UOAZipCode
		, "PersonFullName", pLinkManField->PersonFullName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryBrokerUserEventField *pQryBrokerUserEventField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "UserEventType", nullptr};
	char *pQryBrokerUserEventField_BrokerID = nullptr;
	char *pQryBrokerUserEventField_UserID = nullptr;
	char pQryBrokerUserEventField_UserEventType = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pQryBrokerUserEventField, "|yyc")
		, &pQryBrokerUserEventField_BrokerID
		, &pQryBrokerUserEventField_UserID
		, &pQryBrokerUserEventField_UserEventType
	PyCTP_PyDict_FromStruct_END
		if(pQryBrokerUserEventField_BrokerID != nullptr){ strcpy_s(pQryBrokerUserEventField->BrokerID, pQryBrokerUserEventField_BrokerID); pQryBrokerUserEventField_BrokerID = nullptr; }
		if(pQryBrokerUserEventField_UserID != nullptr){ strcpy_s(pQryBrokerUserEventField->UserID, pQryBrokerUserEventField_UserID); pQryBrokerUserEventField_UserID = nullptr; }
		pQryBrokerUserEventField->UserEventType = pQryBrokerUserEventField_UserEventType;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryBrokerUserEventField *pQryBrokerUserEventField)
{
	if(pQryBrokerUserEventField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c}"
		, "BrokerID", pQryBrokerUserEventField->BrokerID
		, "UserID", pQryBrokerUserEventField->UserID
		, "UserEventType", pQryBrokerUserEventField->UserEventType
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcBrokerUserEventField *pBrokerUserEventField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "UserEventType", "EventSequenceNo", "EventDate", "EventTime", "UserEventInfo", "InvestorID", "InstrumentID", nullptr};
	char *pBrokerUserEventField_BrokerID = nullptr;
	char *pBrokerUserEventField_UserID = nullptr;
	char pBrokerUserEventField_UserEventType = 0;
	int pBrokerUserEventField_EventSequenceNo = 0;
	char *pBrokerUserEventField_EventDate = nullptr;
	char *pBrokerUserEventField_EventTime = nullptr;
	char *pBrokerUserEventField_UserEventInfo = nullptr;
	char *pBrokerUserEventField_InvestorID = nullptr;
	char *pBrokerUserEventField_InstrumentID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pBrokerUserEventField, "|yyciyyyyy")
		, &pBrokerUserEventField_BrokerID
		, &pBrokerUserEventField_UserID
		, &pBrokerUserEventField_UserEventType
		, &pBrokerUserEventField_EventSequenceNo
		, &pBrokerUserEventField_EventDate
		, &pBrokerUserEventField_EventTime
		, &pBrokerUserEventField_UserEventInfo
		, &pBrokerUserEventField_InvestorID
		, &pBrokerUserEventField_InstrumentID
	PyCTP_PyDict_FromStruct_END
		if(pBrokerUserEventField_BrokerID != nullptr){ strcpy_s(pBrokerUserEventField->BrokerID, pBrokerUserEventField_BrokerID); pBrokerUserEventField_BrokerID = nullptr; }
		if(pBrokerUserEventField_UserID != nullptr){ strcpy_s(pBrokerUserEventField->UserID, pBrokerUserEventField_UserID); pBrokerUserEventField_UserID = nullptr; }
		pBrokerUserEventField->UserEventType = pBrokerUserEventField_UserEventType;
		pBrokerUserEventField->EventSequenceNo = pBrokerUserEventField_EventSequenceNo;
		if(pBrokerUserEventField_EventDate != nullptr){ strcpy_s(pBrokerUserEventField->EventDate, pBrokerUserEventField_EventDate); pBrokerUserEventField_EventDate = nullptr; }
		if(pBrokerUserEventField_EventTime != nullptr){ strcpy_s(pBrokerUserEventField->EventTime, pBrokerUserEventField_EventTime); pBrokerUserEventField_EventTime = nullptr; }
		if(pBrokerUserEventField_UserEventInfo != nullptr){ strcpy_s(pBrokerUserEventField->UserEventInfo, pBrokerUserEventField_UserEventInfo); pBrokerUserEventField_UserEventInfo = nullptr; }
		if(pBrokerUserEventField_InvestorID != nullptr){ strcpy_s(pBrokerUserEventField->InvestorID, pBrokerUserEventField_InvestorID); pBrokerUserEventField_InvestorID = nullptr; }
		if(pBrokerUserEventField_InstrumentID != nullptr){ strcpy_s(pBrokerUserEventField->InstrumentID, pBrokerUserEventField_InstrumentID); pBrokerUserEventField_InstrumentID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcBrokerUserEventField *pBrokerUserEventField)
{
	if(pBrokerUserEventField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c,s:i,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pBrokerUserEventField->BrokerID
		, "UserID", pBrokerUserEventField->UserID
		, "UserEventType", pBrokerUserEventField->UserEventType
		, "EventSequenceNo", pBrokerUserEventField->EventSequenceNo
		, "EventDate", pBrokerUserEventField->EventDate
		, "EventTime", pBrokerUserEventField->EventTime
		, "UserEventInfo", pBrokerUserEventField->UserEventInfo
		, "InvestorID", pBrokerUserEventField->InvestorID
		, "InstrumentID", pBrokerUserEventField->InstrumentID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryContractBankField *pQryContractBankField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "BankID", "BankBrchID", nullptr};
	char *pQryContractBankField_BrokerID = nullptr;
	char *pQryContractBankField_BankID = nullptr;
	char *pQryContractBankField_BankBrchID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryContractBankField, "|yyy")
		, &pQryContractBankField_BrokerID
		, &pQryContractBankField_BankID
		, &pQryContractBankField_BankBrchID
	PyCTP_PyDict_FromStruct_END
		if(pQryContractBankField_BrokerID != nullptr){ strcpy_s(pQryContractBankField->BrokerID, pQryContractBankField_BrokerID); pQryContractBankField_BrokerID = nullptr; }
		if(pQryContractBankField_BankID != nullptr){ strcpy_s(pQryContractBankField->BankID, pQryContractBankField_BankID); pQryContractBankField_BankID = nullptr; }
		if(pQryContractBankField_BankBrchID != nullptr){ strcpy_s(pQryContractBankField->BankBrchID, pQryContractBankField_BankBrchID); pQryContractBankField_BankBrchID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryContractBankField *pQryContractBankField)
{
	if(pQryContractBankField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pQryContractBankField->BrokerID
		, "BankID", pQryContractBankField->BankID
		, "BankBrchID", pQryContractBankField->BankBrchID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcContractBankField *pContractBankField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "BankID", "BankBrchID", "BankName", nullptr};
	char *pContractBankField_BrokerID = nullptr;
	char *pContractBankField_BankID = nullptr;
	char *pContractBankField_BankBrchID = nullptr;
	char *pContractBankField_BankName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pContractBankField, "|yyyy")
		, &pContractBankField_BrokerID
		, &pContractBankField_BankID
		, &pContractBankField_BankBrchID
		, &pContractBankField_BankName
	PyCTP_PyDict_FromStruct_END
		if(pContractBankField_BrokerID != nullptr){ strcpy_s(pContractBankField->BrokerID, pContractBankField_BrokerID); pContractBankField_BrokerID = nullptr; }
		if(pContractBankField_BankID != nullptr){ strcpy_s(pContractBankField->BankID, pContractBankField_BankID); pContractBankField_BankID = nullptr; }
		if(pContractBankField_BankBrchID != nullptr){ strcpy_s(pContractBankField->BankBrchID, pContractBankField_BankBrchID); pContractBankField_BankBrchID = nullptr; }
		if(pContractBankField_BankName != nullptr){ strcpy_s(pContractBankField->BankName, pContractBankField_BankName); pContractBankField_BankName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcContractBankField *pContractBankField)
{
	if(pContractBankField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y}"
		, "BrokerID", pContractBankField->BrokerID
		, "BankID", pContractBankField->BankID
		, "BankBrchID", pContractBankField->BankBrchID
		, "BankName", pContractBankField->BankName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInvestorPositionCombineDetailField *pInvestorPositionCombineDetailField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "OpenDate", "ExchangeID", "SettlementID", "BrokerID", "InvestorID", "ComTradeID", "TradeID", "InstrumentID", "HedgeFlag", "Direction", "TotalAmt", "Margin", "ExchMargin", "MarginRateByMoney", "MarginRateByVolume", "LegID", "LegMultiple", "CombInstrumentID", "TradeGroupID", "InvestUnitID", nullptr};
	char *pInvestorPositionCombineDetailField_TradingDay = nullptr;
	char *pInvestorPositionCombineDetailField_OpenDate = nullptr;
	char *pInvestorPositionCombineDetailField_ExchangeID = nullptr;
	int pInvestorPositionCombineDetailField_SettlementID = 0;
	char *pInvestorPositionCombineDetailField_BrokerID = nullptr;
	char *pInvestorPositionCombineDetailField_InvestorID = nullptr;
	char *pInvestorPositionCombineDetailField_ComTradeID = nullptr;
	char *pInvestorPositionCombineDetailField_TradeID = nullptr;
	char *pInvestorPositionCombineDetailField_InstrumentID = nullptr;
	char pInvestorPositionCombineDetailField_HedgeFlag = 0;
	char pInvestorPositionCombineDetailField_Direction = 0;
	int pInvestorPositionCombineDetailField_TotalAmt = 0;
	double pInvestorPositionCombineDetailField_Margin = 0.0;
	double pInvestorPositionCombineDetailField_ExchMargin = 0.0;
	double pInvestorPositionCombineDetailField_MarginRateByMoney = 0.0;
	double pInvestorPositionCombineDetailField_MarginRateByVolume = 0.0;
	int pInvestorPositionCombineDetailField_LegID = 0;
	int pInvestorPositionCombineDetailField_LegMultiple = 0;
	char *pInvestorPositionCombineDetailField_CombInstrumentID = nullptr;
	int pInvestorPositionCombineDetailField_TradeGroupID = 0;
	char *pInvestorPositionCombineDetailField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInvestorPositionCombineDetailField, "|yyyiyyyyycciddddiiyiy")
		, &pInvestorPositionCombineDetailField_TradingDay
		, &pInvestorPositionCombineDetailField_OpenDate
		, &pInvestorPositionCombineDetailField_ExchangeID
		, &pInvestorPositionCombineDetailField_SettlementID
		, &pInvestorPositionCombineDetailField_BrokerID
		, &pInvestorPositionCombineDetailField_InvestorID
		, &pInvestorPositionCombineDetailField_ComTradeID
		, &pInvestorPositionCombineDetailField_TradeID
		, &pInvestorPositionCombineDetailField_InstrumentID
		, &pInvestorPositionCombineDetailField_HedgeFlag
		, &pInvestorPositionCombineDetailField_Direction
		, &pInvestorPositionCombineDetailField_TotalAmt
		, &pInvestorPositionCombineDetailField_Margin
		, &pInvestorPositionCombineDetailField_ExchMargin
		, &pInvestorPositionCombineDetailField_MarginRateByMoney
		, &pInvestorPositionCombineDetailField_MarginRateByVolume
		, &pInvestorPositionCombineDetailField_LegID
		, &pInvestorPositionCombineDetailField_LegMultiple
		, &pInvestorPositionCombineDetailField_CombInstrumentID
		, &pInvestorPositionCombineDetailField_TradeGroupID
		, &pInvestorPositionCombineDetailField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pInvestorPositionCombineDetailField_TradingDay != nullptr){ strcpy_s(pInvestorPositionCombineDetailField->TradingDay, pInvestorPositionCombineDetailField_TradingDay); pInvestorPositionCombineDetailField_TradingDay = nullptr; }
		if(pInvestorPositionCombineDetailField_OpenDate != nullptr){ strcpy_s(pInvestorPositionCombineDetailField->OpenDate, pInvestorPositionCombineDetailField_OpenDate); pInvestorPositionCombineDetailField_OpenDate = nullptr; }
		if(pInvestorPositionCombineDetailField_ExchangeID != nullptr){ strcpy_s(pInvestorPositionCombineDetailField->ExchangeID, pInvestorPositionCombineDetailField_ExchangeID); pInvestorPositionCombineDetailField_ExchangeID = nullptr; }
		pInvestorPositionCombineDetailField->SettlementID = pInvestorPositionCombineDetailField_SettlementID;
		if(pInvestorPositionCombineDetailField_BrokerID != nullptr){ strcpy_s(pInvestorPositionCombineDetailField->BrokerID, pInvestorPositionCombineDetailField_BrokerID); pInvestorPositionCombineDetailField_BrokerID = nullptr; }
		if(pInvestorPositionCombineDetailField_InvestorID != nullptr){ strcpy_s(pInvestorPositionCombineDetailField->InvestorID, pInvestorPositionCombineDetailField_InvestorID); pInvestorPositionCombineDetailField_InvestorID = nullptr; }
		if(pInvestorPositionCombineDetailField_ComTradeID != nullptr){ strcpy_s(pInvestorPositionCombineDetailField->ComTradeID, pInvestorPositionCombineDetailField_ComTradeID); pInvestorPositionCombineDetailField_ComTradeID = nullptr; }
		if(pInvestorPositionCombineDetailField_TradeID != nullptr){ strcpy_s(pInvestorPositionCombineDetailField->TradeID, pInvestorPositionCombineDetailField_TradeID); pInvestorPositionCombineDetailField_TradeID = nullptr; }
		if(pInvestorPositionCombineDetailField_InstrumentID != nullptr){ strcpy_s(pInvestorPositionCombineDetailField->InstrumentID, pInvestorPositionCombineDetailField_InstrumentID); pInvestorPositionCombineDetailField_InstrumentID = nullptr; }
		pInvestorPositionCombineDetailField->HedgeFlag = pInvestorPositionCombineDetailField_HedgeFlag;
		pInvestorPositionCombineDetailField->Direction = pInvestorPositionCombineDetailField_Direction;
		pInvestorPositionCombineDetailField->TotalAmt = pInvestorPositionCombineDetailField_TotalAmt;
		pInvestorPositionCombineDetailField->Margin = pInvestorPositionCombineDetailField_Margin;
		pInvestorPositionCombineDetailField->ExchMargin = pInvestorPositionCombineDetailField_ExchMargin;
		pInvestorPositionCombineDetailField->MarginRateByMoney = pInvestorPositionCombineDetailField_MarginRateByMoney;
		pInvestorPositionCombineDetailField->MarginRateByVolume = pInvestorPositionCombineDetailField_MarginRateByVolume;
		pInvestorPositionCombineDetailField->LegID = pInvestorPositionCombineDetailField_LegID;
		pInvestorPositionCombineDetailField->LegMultiple = pInvestorPositionCombineDetailField_LegMultiple;
		if(pInvestorPositionCombineDetailField_CombInstrumentID != nullptr){ strcpy_s(pInvestorPositionCombineDetailField->CombInstrumentID, pInvestorPositionCombineDetailField_CombInstrumentID); pInvestorPositionCombineDetailField_CombInstrumentID = nullptr; }
		pInvestorPositionCombineDetailField->TradeGroupID = pInvestorPositionCombineDetailField_TradeGroupID;
		if(pInvestorPositionCombineDetailField_InvestUnitID != nullptr){ strcpy_s(pInvestorPositionCombineDetailField->InvestUnitID, pInvestorPositionCombineDetailField_InvestUnitID); pInvestorPositionCombineDetailField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInvestorPositionCombineDetailField *pInvestorPositionCombineDetailField)
{
	if(pInvestorPositionCombineDetailField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:c,s:c,s:i,s:d,s:d,s:d,s:d,s:i,s:i,s:y,s:i,s:y}"
		, "TradingDay", pInvestorPositionCombineDetailField->TradingDay
		, "OpenDate", pInvestorPositionCombineDetailField->OpenDate
		, "ExchangeID", pInvestorPositionCombineDetailField->ExchangeID
		, "SettlementID", pInvestorPositionCombineDetailField->SettlementID
		, "BrokerID", pInvestorPositionCombineDetailField->BrokerID
		, "InvestorID", pInvestorPositionCombineDetailField->InvestorID
		, "ComTradeID", pInvestorPositionCombineDetailField->ComTradeID
		, "TradeID", pInvestorPositionCombineDetailField->TradeID
		, "InstrumentID", pInvestorPositionCombineDetailField->InstrumentID
		, "HedgeFlag", pInvestorPositionCombineDetailField->HedgeFlag
		, "Direction", pInvestorPositionCombineDetailField->Direction
		, "TotalAmt", pInvestorPositionCombineDetailField->TotalAmt
		, "Margin", pInvestorPositionCombineDetailField->Margin
		, "ExchMargin", pInvestorPositionCombineDetailField->ExchMargin
		, "MarginRateByMoney", pInvestorPositionCombineDetailField->MarginRateByMoney
		, "MarginRateByVolume", pInvestorPositionCombineDetailField->MarginRateByVolume
		, "LegID", pInvestorPositionCombineDetailField->LegID
		, "LegMultiple", pInvestorPositionCombineDetailField->LegMultiple
		, "CombInstrumentID", pInvestorPositionCombineDetailField->CombInstrumentID
		, "TradeGroupID", pInvestorPositionCombineDetailField->TradeGroupID
		, "InvestUnitID", pInvestorPositionCombineDetailField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcParkedOrderField *pParkedOrderField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "OrderRef", "UserID", "OrderPriceType", "Direction", "CombOffsetFlag", "CombHedgeFlag", "LimitPrice", "VolumeTotalOriginal", "TimeCondition", "GTDDate", "VolumeCondition", "MinVolume", "ContingentCondition", "StopPrice", "ForceCloseReason", "IsAutoSuspend", "BusinessUnit", "RequestID", "UserForceClose", "ExchangeID", "ParkedOrderID", "UserType", "Status", "ErrorID", "ErrorMsg", "IsSwapOrder", "AccountID", "CurrencyID", "ClientID", "InvestUnitID", "IPAddress", "MacAddress", nullptr};
	char *pParkedOrderField_BrokerID = nullptr;
	char *pParkedOrderField_InvestorID = nullptr;
	char *pParkedOrderField_InstrumentID = nullptr;
	char *pParkedOrderField_OrderRef = nullptr;
	char *pParkedOrderField_UserID = nullptr;
	char pParkedOrderField_OrderPriceType = 0;
	char pParkedOrderField_Direction = 0;
	char *pParkedOrderField_CombOffsetFlag = nullptr;
	char *pParkedOrderField_CombHedgeFlag = nullptr;
	double pParkedOrderField_LimitPrice = 0.0;
	int pParkedOrderField_VolumeTotalOriginal = 0;
	char pParkedOrderField_TimeCondition = 0;
	char *pParkedOrderField_GTDDate = nullptr;
	char pParkedOrderField_VolumeCondition = 0;
	int pParkedOrderField_MinVolume = 0;
	char pParkedOrderField_ContingentCondition = 0;
	double pParkedOrderField_StopPrice = 0.0;
	char pParkedOrderField_ForceCloseReason = 0;
	int pParkedOrderField_IsAutoSuspend = 0;
	char *pParkedOrderField_BusinessUnit = nullptr;
	int pParkedOrderField_RequestID = 0;
	int pParkedOrderField_UserForceClose = 0;
	char *pParkedOrderField_ExchangeID = nullptr;
	char *pParkedOrderField_ParkedOrderID = nullptr;
	char pParkedOrderField_UserType = 0;
	char pParkedOrderField_Status = 0;
	int pParkedOrderField_ErrorID = 0;
	char *pParkedOrderField_ErrorMsg = nullptr;
	int pParkedOrderField_IsSwapOrder = 0;
	char *pParkedOrderField_AccountID = nullptr;
	char *pParkedOrderField_CurrencyID = nullptr;
	char *pParkedOrderField_ClientID = nullptr;
	char *pParkedOrderField_InvestUnitID = nullptr;
	char *pParkedOrderField_IPAddress = nullptr;
	char *pParkedOrderField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pParkedOrderField, "|yyyyyccyydicycicdciyiiyycciyiyyyyyy")
		, &pParkedOrderField_BrokerID
		, &pParkedOrderField_InvestorID
		, &pParkedOrderField_InstrumentID
		, &pParkedOrderField_OrderRef
		, &pParkedOrderField_UserID
		, &pParkedOrderField_OrderPriceType
		, &pParkedOrderField_Direction
		, &pParkedOrderField_CombOffsetFlag
		, &pParkedOrderField_CombHedgeFlag
		, &pParkedOrderField_LimitPrice
		, &pParkedOrderField_VolumeTotalOriginal
		, &pParkedOrderField_TimeCondition
		, &pParkedOrderField_GTDDate
		, &pParkedOrderField_VolumeCondition
		, &pParkedOrderField_MinVolume
		, &pParkedOrderField_ContingentCondition
		, &pParkedOrderField_StopPrice
		, &pParkedOrderField_ForceCloseReason
		, &pParkedOrderField_IsAutoSuspend
		, &pParkedOrderField_BusinessUnit
		, &pParkedOrderField_RequestID
		, &pParkedOrderField_UserForceClose
		, &pParkedOrderField_ExchangeID
		, &pParkedOrderField_ParkedOrderID
		, &pParkedOrderField_UserType
		, &pParkedOrderField_Status
		, &pParkedOrderField_ErrorID
		, &pParkedOrderField_ErrorMsg
		, &pParkedOrderField_IsSwapOrder
		, &pParkedOrderField_AccountID
		, &pParkedOrderField_CurrencyID
		, &pParkedOrderField_ClientID
		, &pParkedOrderField_InvestUnitID
		, &pParkedOrderField_IPAddress
		, &pParkedOrderField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pParkedOrderField_BrokerID != nullptr){ strcpy_s(pParkedOrderField->BrokerID, pParkedOrderField_BrokerID); pParkedOrderField_BrokerID = nullptr; }
		if(pParkedOrderField_InvestorID != nullptr){ strcpy_s(pParkedOrderField->InvestorID, pParkedOrderField_InvestorID); pParkedOrderField_InvestorID = nullptr; }
		if(pParkedOrderField_InstrumentID != nullptr){ strcpy_s(pParkedOrderField->InstrumentID, pParkedOrderField_InstrumentID); pParkedOrderField_InstrumentID = nullptr; }
		if(pParkedOrderField_OrderRef != nullptr){ strcpy_s(pParkedOrderField->OrderRef, pParkedOrderField_OrderRef); pParkedOrderField_OrderRef = nullptr; }
		if(pParkedOrderField_UserID != nullptr){ strcpy_s(pParkedOrderField->UserID, pParkedOrderField_UserID); pParkedOrderField_UserID = nullptr; }
		pParkedOrderField->OrderPriceType = pParkedOrderField_OrderPriceType;
		pParkedOrderField->Direction = pParkedOrderField_Direction;
		if(pParkedOrderField_CombOffsetFlag != nullptr){ strcpy_s(pParkedOrderField->CombOffsetFlag, pParkedOrderField_CombOffsetFlag); pParkedOrderField_CombOffsetFlag = nullptr; }
		if(pParkedOrderField_CombHedgeFlag != nullptr){ strcpy_s(pParkedOrderField->CombHedgeFlag, pParkedOrderField_CombHedgeFlag); pParkedOrderField_CombHedgeFlag = nullptr; }
		pParkedOrderField->LimitPrice = pParkedOrderField_LimitPrice;
		pParkedOrderField->VolumeTotalOriginal = pParkedOrderField_VolumeTotalOriginal;
		pParkedOrderField->TimeCondition = pParkedOrderField_TimeCondition;
		if(pParkedOrderField_GTDDate != nullptr){ strcpy_s(pParkedOrderField->GTDDate, pParkedOrderField_GTDDate); pParkedOrderField_GTDDate = nullptr; }
		pParkedOrderField->VolumeCondition = pParkedOrderField_VolumeCondition;
		pParkedOrderField->MinVolume = pParkedOrderField_MinVolume;
		pParkedOrderField->ContingentCondition = pParkedOrderField_ContingentCondition;
		pParkedOrderField->StopPrice = pParkedOrderField_StopPrice;
		pParkedOrderField->ForceCloseReason = pParkedOrderField_ForceCloseReason;
		pParkedOrderField->IsAutoSuspend = pParkedOrderField_IsAutoSuspend;
		if(pParkedOrderField_BusinessUnit != nullptr){ strcpy_s(pParkedOrderField->BusinessUnit, pParkedOrderField_BusinessUnit); pParkedOrderField_BusinessUnit = nullptr; }
		pParkedOrderField->RequestID = pParkedOrderField_RequestID;
		pParkedOrderField->UserForceClose = pParkedOrderField_UserForceClose;
		if(pParkedOrderField_ExchangeID != nullptr){ strcpy_s(pParkedOrderField->ExchangeID, pParkedOrderField_ExchangeID); pParkedOrderField_ExchangeID = nullptr; }
		if(pParkedOrderField_ParkedOrderID != nullptr){ strcpy_s(pParkedOrderField->ParkedOrderID, pParkedOrderField_ParkedOrderID); pParkedOrderField_ParkedOrderID = nullptr; }
		pParkedOrderField->UserType = pParkedOrderField_UserType;
		pParkedOrderField->Status = pParkedOrderField_Status;
		pParkedOrderField->ErrorID = pParkedOrderField_ErrorID;
		if(pParkedOrderField_ErrorMsg != nullptr){ strcpy_s(pParkedOrderField->ErrorMsg, pParkedOrderField_ErrorMsg); pParkedOrderField_ErrorMsg = nullptr; }
		pParkedOrderField->IsSwapOrder = pParkedOrderField_IsSwapOrder;
		if(pParkedOrderField_AccountID != nullptr){ strcpy_s(pParkedOrderField->AccountID, pParkedOrderField_AccountID); pParkedOrderField_AccountID = nullptr; }
		if(pParkedOrderField_CurrencyID != nullptr){ strcpy_s(pParkedOrderField->CurrencyID, pParkedOrderField_CurrencyID); pParkedOrderField_CurrencyID = nullptr; }
		if(pParkedOrderField_ClientID != nullptr){ strcpy_s(pParkedOrderField->ClientID, pParkedOrderField_ClientID); pParkedOrderField_ClientID = nullptr; }
		if(pParkedOrderField_InvestUnitID != nullptr){ strcpy_s(pParkedOrderField->InvestUnitID, pParkedOrderField_InvestUnitID); pParkedOrderField_InvestUnitID = nullptr; }
		if(pParkedOrderField_IPAddress != nullptr){ strcpy_s(pParkedOrderField->IPAddress, pParkedOrderField_IPAddress); pParkedOrderField_IPAddress = nullptr; }
		if(pParkedOrderField_MacAddress != nullptr){ strcpy_s(pParkedOrderField->MacAddress, pParkedOrderField_MacAddress); pParkedOrderField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcParkedOrderField *pParkedOrderField)
{
	if(pParkedOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:c,s:c,s:y,s:y,s:d,s:i,s:c,s:y,s:c,s:i,s:c,s:d,s:c,s:i,s:y,s:i,s:i,s:y,s:y,s:c,s:c,s:i,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pParkedOrderField->BrokerID
		, "InvestorID", pParkedOrderField->InvestorID
		, "InstrumentID", pParkedOrderField->InstrumentID
		, "OrderRef", pParkedOrderField->OrderRef
		, "UserID", pParkedOrderField->UserID
		, "OrderPriceType", pParkedOrderField->OrderPriceType
		, "Direction", pParkedOrderField->Direction
		, "CombOffsetFlag", pParkedOrderField->CombOffsetFlag
		, "CombHedgeFlag", pParkedOrderField->CombHedgeFlag
		, "LimitPrice", pParkedOrderField->LimitPrice
		, "VolumeTotalOriginal", pParkedOrderField->VolumeTotalOriginal
		, "TimeCondition", pParkedOrderField->TimeCondition
		, "GTDDate", pParkedOrderField->GTDDate
		, "VolumeCondition", pParkedOrderField->VolumeCondition
		, "MinVolume", pParkedOrderField->MinVolume
		, "ContingentCondition", pParkedOrderField->ContingentCondition
		, "StopPrice", pParkedOrderField->StopPrice
		, "ForceCloseReason", pParkedOrderField->ForceCloseReason
		, "IsAutoSuspend", pParkedOrderField->IsAutoSuspend
		, "BusinessUnit", pParkedOrderField->BusinessUnit
		, "RequestID", pParkedOrderField->RequestID
		, "UserForceClose", pParkedOrderField->UserForceClose
		, "ExchangeID", pParkedOrderField->ExchangeID
		, "ParkedOrderID", pParkedOrderField->ParkedOrderID
		, "UserType", pParkedOrderField->UserType
		, "Status", pParkedOrderField->Status
		, "ErrorID", pParkedOrderField->ErrorID
		, "ErrorMsg", pParkedOrderField->ErrorMsg
		, "IsSwapOrder", pParkedOrderField->IsSwapOrder
		, "AccountID", pParkedOrderField->AccountID
		, "CurrencyID", pParkedOrderField->CurrencyID
		, "ClientID", pParkedOrderField->ClientID
		, "InvestUnitID", pParkedOrderField->InvestUnitID
		, "IPAddress", pParkedOrderField->IPAddress
		, "MacAddress", pParkedOrderField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcParkedOrderActionField *pParkedOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "OrderActionRef", "OrderRef", "RequestID", "FrontID", "SessionID", "ExchangeID", "OrderSysID", "ActionFlag", "LimitPrice", "VolumeChange", "UserID", "InstrumentID", "ParkedOrderActionID", "UserType", "Status", "ErrorID", "ErrorMsg", "InvestUnitID", "IPAddress", "MacAddress", nullptr};
	char *pParkedOrderActionField_BrokerID = nullptr;
	char *pParkedOrderActionField_InvestorID = nullptr;
	int pParkedOrderActionField_OrderActionRef = 0;
	char *pParkedOrderActionField_OrderRef = nullptr;
	int pParkedOrderActionField_RequestID = 0;
	int pParkedOrderActionField_FrontID = 0;
	int pParkedOrderActionField_SessionID = 0;
	char *pParkedOrderActionField_ExchangeID = nullptr;
	char *pParkedOrderActionField_OrderSysID = nullptr;
	char pParkedOrderActionField_ActionFlag = 0;
	double pParkedOrderActionField_LimitPrice = 0.0;
	int pParkedOrderActionField_VolumeChange = 0;
	char *pParkedOrderActionField_UserID = nullptr;
	char *pParkedOrderActionField_InstrumentID = nullptr;
	char *pParkedOrderActionField_ParkedOrderActionID = nullptr;
	char pParkedOrderActionField_UserType = 0;
	char pParkedOrderActionField_Status = 0;
	int pParkedOrderActionField_ErrorID = 0;
	char *pParkedOrderActionField_ErrorMsg = nullptr;
	char *pParkedOrderActionField_InvestUnitID = nullptr;
	char *pParkedOrderActionField_IPAddress = nullptr;
	char *pParkedOrderActionField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pParkedOrderActionField, "|yyiyiiiyycdiyyycciyyyy")
		, &pParkedOrderActionField_BrokerID
		, &pParkedOrderActionField_InvestorID
		, &pParkedOrderActionField_OrderActionRef
		, &pParkedOrderActionField_OrderRef
		, &pParkedOrderActionField_RequestID
		, &pParkedOrderActionField_FrontID
		, &pParkedOrderActionField_SessionID
		, &pParkedOrderActionField_ExchangeID
		, &pParkedOrderActionField_OrderSysID
		, &pParkedOrderActionField_ActionFlag
		, &pParkedOrderActionField_LimitPrice
		, &pParkedOrderActionField_VolumeChange
		, &pParkedOrderActionField_UserID
		, &pParkedOrderActionField_InstrumentID
		, &pParkedOrderActionField_ParkedOrderActionID
		, &pParkedOrderActionField_UserType
		, &pParkedOrderActionField_Status
		, &pParkedOrderActionField_ErrorID
		, &pParkedOrderActionField_ErrorMsg
		, &pParkedOrderActionField_InvestUnitID
		, &pParkedOrderActionField_IPAddress
		, &pParkedOrderActionField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pParkedOrderActionField_BrokerID != nullptr){ strcpy_s(pParkedOrderActionField->BrokerID, pParkedOrderActionField_BrokerID); pParkedOrderActionField_BrokerID = nullptr; }
		if(pParkedOrderActionField_InvestorID != nullptr){ strcpy_s(pParkedOrderActionField->InvestorID, pParkedOrderActionField_InvestorID); pParkedOrderActionField_InvestorID = nullptr; }
		pParkedOrderActionField->OrderActionRef = pParkedOrderActionField_OrderActionRef;
		if(pParkedOrderActionField_OrderRef != nullptr){ strcpy_s(pParkedOrderActionField->OrderRef, pParkedOrderActionField_OrderRef); pParkedOrderActionField_OrderRef = nullptr; }
		pParkedOrderActionField->RequestID = pParkedOrderActionField_RequestID;
		pParkedOrderActionField->FrontID = pParkedOrderActionField_FrontID;
		pParkedOrderActionField->SessionID = pParkedOrderActionField_SessionID;
		if(pParkedOrderActionField_ExchangeID != nullptr){ strcpy_s(pParkedOrderActionField->ExchangeID, pParkedOrderActionField_ExchangeID); pParkedOrderActionField_ExchangeID = nullptr; }
		if(pParkedOrderActionField_OrderSysID != nullptr){ strcpy_s(pParkedOrderActionField->OrderSysID, pParkedOrderActionField_OrderSysID); pParkedOrderActionField_OrderSysID = nullptr; }
		pParkedOrderActionField->ActionFlag = pParkedOrderActionField_ActionFlag;
		pParkedOrderActionField->LimitPrice = pParkedOrderActionField_LimitPrice;
		pParkedOrderActionField->VolumeChange = pParkedOrderActionField_VolumeChange;
		if(pParkedOrderActionField_UserID != nullptr){ strcpy_s(pParkedOrderActionField->UserID, pParkedOrderActionField_UserID); pParkedOrderActionField_UserID = nullptr; }
		if(pParkedOrderActionField_InstrumentID != nullptr){ strcpy_s(pParkedOrderActionField->InstrumentID, pParkedOrderActionField_InstrumentID); pParkedOrderActionField_InstrumentID = nullptr; }
		if(pParkedOrderActionField_ParkedOrderActionID != nullptr){ strcpy_s(pParkedOrderActionField->ParkedOrderActionID, pParkedOrderActionField_ParkedOrderActionID); pParkedOrderActionField_ParkedOrderActionID = nullptr; }
		pParkedOrderActionField->UserType = pParkedOrderActionField_UserType;
		pParkedOrderActionField->Status = pParkedOrderActionField_Status;
		pParkedOrderActionField->ErrorID = pParkedOrderActionField_ErrorID;
		if(pParkedOrderActionField_ErrorMsg != nullptr){ strcpy_s(pParkedOrderActionField->ErrorMsg, pParkedOrderActionField_ErrorMsg); pParkedOrderActionField_ErrorMsg = nullptr; }
		if(pParkedOrderActionField_InvestUnitID != nullptr){ strcpy_s(pParkedOrderActionField->InvestUnitID, pParkedOrderActionField_InvestUnitID); pParkedOrderActionField_InvestUnitID = nullptr; }
		if(pParkedOrderActionField_IPAddress != nullptr){ strcpy_s(pParkedOrderActionField->IPAddress, pParkedOrderActionField_IPAddress); pParkedOrderActionField_IPAddress = nullptr; }
		if(pParkedOrderActionField_MacAddress != nullptr){ strcpy_s(pParkedOrderActionField->MacAddress, pParkedOrderActionField_MacAddress); pParkedOrderActionField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcParkedOrderActionField *pParkedOrderActionField)
{
	if(pParkedOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i,s:y,s:i,s:i,s:i,s:y,s:y,s:c,s:d,s:i,s:y,s:y,s:y,s:c,s:c,s:i,s:y,s:y,s:y,s:y}"
		, "BrokerID", pParkedOrderActionField->BrokerID
		, "InvestorID", pParkedOrderActionField->InvestorID
		, "OrderActionRef", pParkedOrderActionField->OrderActionRef
		, "OrderRef", pParkedOrderActionField->OrderRef
		, "RequestID", pParkedOrderActionField->RequestID
		, "FrontID", pParkedOrderActionField->FrontID
		, "SessionID", pParkedOrderActionField->SessionID
		, "ExchangeID", pParkedOrderActionField->ExchangeID
		, "OrderSysID", pParkedOrderActionField->OrderSysID
		, "ActionFlag", pParkedOrderActionField->ActionFlag
		, "LimitPrice", pParkedOrderActionField->LimitPrice
		, "VolumeChange", pParkedOrderActionField->VolumeChange
		, "UserID", pParkedOrderActionField->UserID
		, "InstrumentID", pParkedOrderActionField->InstrumentID
		, "ParkedOrderActionID", pParkedOrderActionField->ParkedOrderActionID
		, "UserType", pParkedOrderActionField->UserType
		, "Status", pParkedOrderActionField->Status
		, "ErrorID", pParkedOrderActionField->ErrorID
		, "ErrorMsg", pParkedOrderActionField->ErrorMsg
		, "InvestUnitID", pParkedOrderActionField->InvestUnitID
		, "IPAddress", pParkedOrderActionField->IPAddress
		, "MacAddress", pParkedOrderActionField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryParkedOrderField *pQryParkedOrderField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ExchangeID", "InvestUnitID", nullptr};
	char *pQryParkedOrderField_BrokerID = nullptr;
	char *pQryParkedOrderField_InvestorID = nullptr;
	char *pQryParkedOrderField_InstrumentID = nullptr;
	char *pQryParkedOrderField_ExchangeID = nullptr;
	char *pQryParkedOrderField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryParkedOrderField, "|yyyyy")
		, &pQryParkedOrderField_BrokerID
		, &pQryParkedOrderField_InvestorID
		, &pQryParkedOrderField_InstrumentID
		, &pQryParkedOrderField_ExchangeID
		, &pQryParkedOrderField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryParkedOrderField_BrokerID != nullptr){ strcpy_s(pQryParkedOrderField->BrokerID, pQryParkedOrderField_BrokerID); pQryParkedOrderField_BrokerID = nullptr; }
		if(pQryParkedOrderField_InvestorID != nullptr){ strcpy_s(pQryParkedOrderField->InvestorID, pQryParkedOrderField_InvestorID); pQryParkedOrderField_InvestorID = nullptr; }
		if(pQryParkedOrderField_InstrumentID != nullptr){ strcpy_s(pQryParkedOrderField->InstrumentID, pQryParkedOrderField_InstrumentID); pQryParkedOrderField_InstrumentID = nullptr; }
		if(pQryParkedOrderField_ExchangeID != nullptr){ strcpy_s(pQryParkedOrderField->ExchangeID, pQryParkedOrderField_ExchangeID); pQryParkedOrderField_ExchangeID = nullptr; }
		if(pQryParkedOrderField_InvestUnitID != nullptr){ strcpy_s(pQryParkedOrderField->InvestUnitID, pQryParkedOrderField_InvestUnitID); pQryParkedOrderField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryParkedOrderField *pQryParkedOrderField)
{
	if(pQryParkedOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQryParkedOrderField->BrokerID
		, "InvestorID", pQryParkedOrderField->InvestorID
		, "InstrumentID", pQryParkedOrderField->InstrumentID
		, "ExchangeID", pQryParkedOrderField->ExchangeID
		, "InvestUnitID", pQryParkedOrderField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryParkedOrderActionField *pQryParkedOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "ExchangeID", "InvestUnitID", nullptr};
	char *pQryParkedOrderActionField_BrokerID = nullptr;
	char *pQryParkedOrderActionField_InvestorID = nullptr;
	char *pQryParkedOrderActionField_InstrumentID = nullptr;
	char *pQryParkedOrderActionField_ExchangeID = nullptr;
	char *pQryParkedOrderActionField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryParkedOrderActionField, "|yyyyy")
		, &pQryParkedOrderActionField_BrokerID
		, &pQryParkedOrderActionField_InvestorID
		, &pQryParkedOrderActionField_InstrumentID
		, &pQryParkedOrderActionField_ExchangeID
		, &pQryParkedOrderActionField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryParkedOrderActionField_BrokerID != nullptr){ strcpy_s(pQryParkedOrderActionField->BrokerID, pQryParkedOrderActionField_BrokerID); pQryParkedOrderActionField_BrokerID = nullptr; }
		if(pQryParkedOrderActionField_InvestorID != nullptr){ strcpy_s(pQryParkedOrderActionField->InvestorID, pQryParkedOrderActionField_InvestorID); pQryParkedOrderActionField_InvestorID = nullptr; }
		if(pQryParkedOrderActionField_InstrumentID != nullptr){ strcpy_s(pQryParkedOrderActionField->InstrumentID, pQryParkedOrderActionField_InstrumentID); pQryParkedOrderActionField_InstrumentID = nullptr; }
		if(pQryParkedOrderActionField_ExchangeID != nullptr){ strcpy_s(pQryParkedOrderActionField->ExchangeID, pQryParkedOrderActionField_ExchangeID); pQryParkedOrderActionField_ExchangeID = nullptr; }
		if(pQryParkedOrderActionField_InvestUnitID != nullptr){ strcpy_s(pQryParkedOrderActionField->InvestUnitID, pQryParkedOrderActionField_InvestUnitID); pQryParkedOrderActionField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryParkedOrderActionField *pQryParkedOrderActionField)
{
	if(pQryParkedOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQryParkedOrderActionField->BrokerID
		, "InvestorID", pQryParkedOrderActionField->InvestorID
		, "InstrumentID", pQryParkedOrderActionField->InstrumentID
		, "ExchangeID", pQryParkedOrderActionField->ExchangeID
		, "InvestUnitID", pQryParkedOrderActionField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcRemoveParkedOrderField *pRemoveParkedOrderField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "ParkedOrderID", "InvestUnitID", nullptr};
	char *pRemoveParkedOrderField_BrokerID = nullptr;
	char *pRemoveParkedOrderField_InvestorID = nullptr;
	char *pRemoveParkedOrderField_ParkedOrderID = nullptr;
	char *pRemoveParkedOrderField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pRemoveParkedOrderField, "|yyyy")
		, &pRemoveParkedOrderField_BrokerID
		, &pRemoveParkedOrderField_InvestorID
		, &pRemoveParkedOrderField_ParkedOrderID
		, &pRemoveParkedOrderField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pRemoveParkedOrderField_BrokerID != nullptr){ strcpy_s(pRemoveParkedOrderField->BrokerID, pRemoveParkedOrderField_BrokerID); pRemoveParkedOrderField_BrokerID = nullptr; }
		if(pRemoveParkedOrderField_InvestorID != nullptr){ strcpy_s(pRemoveParkedOrderField->InvestorID, pRemoveParkedOrderField_InvestorID); pRemoveParkedOrderField_InvestorID = nullptr; }
		if(pRemoveParkedOrderField_ParkedOrderID != nullptr){ strcpy_s(pRemoveParkedOrderField->ParkedOrderID, pRemoveParkedOrderField_ParkedOrderID); pRemoveParkedOrderField_ParkedOrderID = nullptr; }
		if(pRemoveParkedOrderField_InvestUnitID != nullptr){ strcpy_s(pRemoveParkedOrderField->InvestUnitID, pRemoveParkedOrderField_InvestUnitID); pRemoveParkedOrderField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcRemoveParkedOrderField *pRemoveParkedOrderField)
{
	if(pRemoveParkedOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y}"
		, "BrokerID", pRemoveParkedOrderField->BrokerID
		, "InvestorID", pRemoveParkedOrderField->InvestorID
		, "ParkedOrderID", pRemoveParkedOrderField->ParkedOrderID
		, "InvestUnitID", pRemoveParkedOrderField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcRemoveParkedOrderActionField *pRemoveParkedOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "ParkedOrderActionID", "InvestUnitID", nullptr};
	char *pRemoveParkedOrderActionField_BrokerID = nullptr;
	char *pRemoveParkedOrderActionField_InvestorID = nullptr;
	char *pRemoveParkedOrderActionField_ParkedOrderActionID = nullptr;
	char *pRemoveParkedOrderActionField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pRemoveParkedOrderActionField, "|yyyy")
		, &pRemoveParkedOrderActionField_BrokerID
		, &pRemoveParkedOrderActionField_InvestorID
		, &pRemoveParkedOrderActionField_ParkedOrderActionID
		, &pRemoveParkedOrderActionField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pRemoveParkedOrderActionField_BrokerID != nullptr){ strcpy_s(pRemoveParkedOrderActionField->BrokerID, pRemoveParkedOrderActionField_BrokerID); pRemoveParkedOrderActionField_BrokerID = nullptr; }
		if(pRemoveParkedOrderActionField_InvestorID != nullptr){ strcpy_s(pRemoveParkedOrderActionField->InvestorID, pRemoveParkedOrderActionField_InvestorID); pRemoveParkedOrderActionField_InvestorID = nullptr; }
		if(pRemoveParkedOrderActionField_ParkedOrderActionID != nullptr){ strcpy_s(pRemoveParkedOrderActionField->ParkedOrderActionID, pRemoveParkedOrderActionField_ParkedOrderActionID); pRemoveParkedOrderActionField_ParkedOrderActionID = nullptr; }
		if(pRemoveParkedOrderActionField_InvestUnitID != nullptr){ strcpy_s(pRemoveParkedOrderActionField->InvestUnitID, pRemoveParkedOrderActionField_InvestUnitID); pRemoveParkedOrderActionField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcRemoveParkedOrderActionField *pRemoveParkedOrderActionField)
{
	if(pRemoveParkedOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y}"
		, "BrokerID", pRemoveParkedOrderActionField->BrokerID
		, "InvestorID", pRemoveParkedOrderActionField->InvestorID
		, "ParkedOrderActionID", pRemoveParkedOrderActionField->ParkedOrderActionID
		, "InvestUnitID", pRemoveParkedOrderActionField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInvestorWithdrawAlgorithmField *pInvestorWithdrawAlgorithmField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorRange", "InvestorID", "UsingRatio", "CurrencyID", "FundMortgageRatio", nullptr};
	char *pInvestorWithdrawAlgorithmField_BrokerID = nullptr;
	char pInvestorWithdrawAlgorithmField_InvestorRange = 0;
	char *pInvestorWithdrawAlgorithmField_InvestorID = nullptr;
	double pInvestorWithdrawAlgorithmField_UsingRatio = 0.0;
	char *pInvestorWithdrawAlgorithmField_CurrencyID = nullptr;
	double pInvestorWithdrawAlgorithmField_FundMortgageRatio = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pInvestorWithdrawAlgorithmField, "|ycydyd")
		, &pInvestorWithdrawAlgorithmField_BrokerID
		, &pInvestorWithdrawAlgorithmField_InvestorRange
		, &pInvestorWithdrawAlgorithmField_InvestorID
		, &pInvestorWithdrawAlgorithmField_UsingRatio
		, &pInvestorWithdrawAlgorithmField_CurrencyID
		, &pInvestorWithdrawAlgorithmField_FundMortgageRatio
	PyCTP_PyDict_FromStruct_END
		if(pInvestorWithdrawAlgorithmField_BrokerID != nullptr){ strcpy_s(pInvestorWithdrawAlgorithmField->BrokerID, pInvestorWithdrawAlgorithmField_BrokerID); pInvestorWithdrawAlgorithmField_BrokerID = nullptr; }
		pInvestorWithdrawAlgorithmField->InvestorRange = pInvestorWithdrawAlgorithmField_InvestorRange;
		if(pInvestorWithdrawAlgorithmField_InvestorID != nullptr){ strcpy_s(pInvestorWithdrawAlgorithmField->InvestorID, pInvestorWithdrawAlgorithmField_InvestorID); pInvestorWithdrawAlgorithmField_InvestorID = nullptr; }
		pInvestorWithdrawAlgorithmField->UsingRatio = pInvestorWithdrawAlgorithmField_UsingRatio;
		if(pInvestorWithdrawAlgorithmField_CurrencyID != nullptr){ strcpy_s(pInvestorWithdrawAlgorithmField->CurrencyID, pInvestorWithdrawAlgorithmField_CurrencyID); pInvestorWithdrawAlgorithmField_CurrencyID = nullptr; }
		pInvestorWithdrawAlgorithmField->FundMortgageRatio = pInvestorWithdrawAlgorithmField_FundMortgageRatio;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInvestorWithdrawAlgorithmField *pInvestorWithdrawAlgorithmField)
{
	if(pInvestorWithdrawAlgorithmField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:d,s:y,s:d}"
		, "BrokerID", pInvestorWithdrawAlgorithmField->BrokerID
		, "InvestorRange", pInvestorWithdrawAlgorithmField->InvestorRange
		, "InvestorID", pInvestorWithdrawAlgorithmField->InvestorID
		, "UsingRatio", pInvestorWithdrawAlgorithmField->UsingRatio
		, "CurrencyID", pInvestorWithdrawAlgorithmField->CurrencyID
		, "FundMortgageRatio", pInvestorWithdrawAlgorithmField->FundMortgageRatio
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryInvestorPositionCombineDetailField *pQryInvestorPositionCombineDetailField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "CombInstrumentID", "ExchangeID", "InvestUnitID", nullptr};
	char *pQryInvestorPositionCombineDetailField_BrokerID = nullptr;
	char *pQryInvestorPositionCombineDetailField_InvestorID = nullptr;
	char *pQryInvestorPositionCombineDetailField_CombInstrumentID = nullptr;
	char *pQryInvestorPositionCombineDetailField_ExchangeID = nullptr;
	char *pQryInvestorPositionCombineDetailField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryInvestorPositionCombineDetailField, "|yyyyy")
		, &pQryInvestorPositionCombineDetailField_BrokerID
		, &pQryInvestorPositionCombineDetailField_InvestorID
		, &pQryInvestorPositionCombineDetailField_CombInstrumentID
		, &pQryInvestorPositionCombineDetailField_ExchangeID
		, &pQryInvestorPositionCombineDetailField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryInvestorPositionCombineDetailField_BrokerID != nullptr){ strcpy_s(pQryInvestorPositionCombineDetailField->BrokerID, pQryInvestorPositionCombineDetailField_BrokerID); pQryInvestorPositionCombineDetailField_BrokerID = nullptr; }
		if(pQryInvestorPositionCombineDetailField_InvestorID != nullptr){ strcpy_s(pQryInvestorPositionCombineDetailField->InvestorID, pQryInvestorPositionCombineDetailField_InvestorID); pQryInvestorPositionCombineDetailField_InvestorID = nullptr; }
		if(pQryInvestorPositionCombineDetailField_CombInstrumentID != nullptr){ strcpy_s(pQryInvestorPositionCombineDetailField->CombInstrumentID, pQryInvestorPositionCombineDetailField_CombInstrumentID); pQryInvestorPositionCombineDetailField_CombInstrumentID = nullptr; }
		if(pQryInvestorPositionCombineDetailField_ExchangeID != nullptr){ strcpy_s(pQryInvestorPositionCombineDetailField->ExchangeID, pQryInvestorPositionCombineDetailField_ExchangeID); pQryInvestorPositionCombineDetailField_ExchangeID = nullptr; }
		if(pQryInvestorPositionCombineDetailField_InvestUnitID != nullptr){ strcpy_s(pQryInvestorPositionCombineDetailField->InvestUnitID, pQryInvestorPositionCombineDetailField_InvestUnitID); pQryInvestorPositionCombineDetailField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryInvestorPositionCombineDetailField *pQryInvestorPositionCombineDetailField)
{
	if(pQryInvestorPositionCombineDetailField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQryInvestorPositionCombineDetailField->BrokerID
		, "InvestorID", pQryInvestorPositionCombineDetailField->InvestorID
		, "CombInstrumentID", pQryInvestorPositionCombineDetailField->CombInstrumentID
		, "ExchangeID", pQryInvestorPositionCombineDetailField->ExchangeID
		, "InvestUnitID", pQryInvestorPositionCombineDetailField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcMarketDataAveragePriceField *pMarketDataAveragePriceField, PyObject *dict)
{
	static char *kwlist[] = {"AveragePrice", nullptr};
	double pMarketDataAveragePriceField_AveragePrice = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pMarketDataAveragePriceField, "|d")
		, &pMarketDataAveragePriceField_AveragePrice
	PyCTP_PyDict_FromStruct_END
		pMarketDataAveragePriceField->AveragePrice = pMarketDataAveragePriceField_AveragePrice;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcMarketDataAveragePriceField *pMarketDataAveragePriceField)
{
	if(pMarketDataAveragePriceField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:d}"
		, "AveragePrice", pMarketDataAveragePriceField->AveragePrice
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcVerifyInvestorPasswordField *pVerifyInvestorPasswordField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "Password", nullptr};
	char *pVerifyInvestorPasswordField_BrokerID = nullptr;
	char *pVerifyInvestorPasswordField_InvestorID = nullptr;
	char *pVerifyInvestorPasswordField_Password = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pVerifyInvestorPasswordField, "|yyy")
		, &pVerifyInvestorPasswordField_BrokerID
		, &pVerifyInvestorPasswordField_InvestorID
		, &pVerifyInvestorPasswordField_Password
	PyCTP_PyDict_FromStruct_END
		if(pVerifyInvestorPasswordField_BrokerID != nullptr){ strcpy_s(pVerifyInvestorPasswordField->BrokerID, pVerifyInvestorPasswordField_BrokerID); pVerifyInvestorPasswordField_BrokerID = nullptr; }
		if(pVerifyInvestorPasswordField_InvestorID != nullptr){ strcpy_s(pVerifyInvestorPasswordField->InvestorID, pVerifyInvestorPasswordField_InvestorID); pVerifyInvestorPasswordField_InvestorID = nullptr; }
		if(pVerifyInvestorPasswordField_Password != nullptr){ strcpy_s(pVerifyInvestorPasswordField->Password, pVerifyInvestorPasswordField_Password); pVerifyInvestorPasswordField_Password = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcVerifyInvestorPasswordField *pVerifyInvestorPasswordField)
{
	if(pVerifyInvestorPasswordField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pVerifyInvestorPasswordField->BrokerID
		, "InvestorID", pVerifyInvestorPasswordField->InvestorID
		, "Password", pVerifyInvestorPasswordField->Password
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcUserIPField *pUserIPField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "IPAddress", "IPMask", "MacAddress", nullptr};
	char *pUserIPField_BrokerID = nullptr;
	char *pUserIPField_UserID = nullptr;
	char *pUserIPField_IPAddress = nullptr;
	char *pUserIPField_IPMask = nullptr;
	char *pUserIPField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pUserIPField, "|yyyyy")
		, &pUserIPField_BrokerID
		, &pUserIPField_UserID
		, &pUserIPField_IPAddress
		, &pUserIPField_IPMask
		, &pUserIPField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pUserIPField_BrokerID != nullptr){ strcpy_s(pUserIPField->BrokerID, pUserIPField_BrokerID); pUserIPField_BrokerID = nullptr; }
		if(pUserIPField_UserID != nullptr){ strcpy_s(pUserIPField->UserID, pUserIPField_UserID); pUserIPField_UserID = nullptr; }
		if(pUserIPField_IPAddress != nullptr){ strcpy_s(pUserIPField->IPAddress, pUserIPField_IPAddress); pUserIPField_IPAddress = nullptr; }
		if(pUserIPField_IPMask != nullptr){ strcpy_s(pUserIPField->IPMask, pUserIPField_IPMask); pUserIPField_IPMask = nullptr; }
		if(pUserIPField_MacAddress != nullptr){ strcpy_s(pUserIPField->MacAddress, pUserIPField_MacAddress); pUserIPField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcUserIPField *pUserIPField)
{
	if(pUserIPField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pUserIPField->BrokerID
		, "UserID", pUserIPField->UserID
		, "IPAddress", pUserIPField->IPAddress
		, "IPMask", pUserIPField->IPMask
		, "MacAddress", pUserIPField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTradingNoticeInfoField *pTradingNoticeInfoField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "SendTime", "FieldContent", "SequenceSeries", "SequenceNo", "InvestUnitID", nullptr};
	char *pTradingNoticeInfoField_BrokerID = nullptr;
	char *pTradingNoticeInfoField_InvestorID = nullptr;
	char *pTradingNoticeInfoField_SendTime = nullptr;
	char *pTradingNoticeInfoField_FieldContent = nullptr;
	short pTradingNoticeInfoField_SequenceSeries = 0;
	int pTradingNoticeInfoField_SequenceNo = 0;
	char *pTradingNoticeInfoField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTradingNoticeInfoField, "|yyyyhiy")
		, &pTradingNoticeInfoField_BrokerID
		, &pTradingNoticeInfoField_InvestorID
		, &pTradingNoticeInfoField_SendTime
		, &pTradingNoticeInfoField_FieldContent
		, &pTradingNoticeInfoField_SequenceSeries
		, &pTradingNoticeInfoField_SequenceNo
		, &pTradingNoticeInfoField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pTradingNoticeInfoField_BrokerID != nullptr){ strcpy_s(pTradingNoticeInfoField->BrokerID, pTradingNoticeInfoField_BrokerID); pTradingNoticeInfoField_BrokerID = nullptr; }
		if(pTradingNoticeInfoField_InvestorID != nullptr){ strcpy_s(pTradingNoticeInfoField->InvestorID, pTradingNoticeInfoField_InvestorID); pTradingNoticeInfoField_InvestorID = nullptr; }
		if(pTradingNoticeInfoField_SendTime != nullptr){ strcpy_s(pTradingNoticeInfoField->SendTime, pTradingNoticeInfoField_SendTime); pTradingNoticeInfoField_SendTime = nullptr; }
		if(pTradingNoticeInfoField_FieldContent != nullptr){ strcpy_s(pTradingNoticeInfoField->FieldContent, pTradingNoticeInfoField_FieldContent); pTradingNoticeInfoField_FieldContent = nullptr; }
		pTradingNoticeInfoField->SequenceSeries = pTradingNoticeInfoField_SequenceSeries;
		pTradingNoticeInfoField->SequenceNo = pTradingNoticeInfoField_SequenceNo;
		if(pTradingNoticeInfoField_InvestUnitID != nullptr){ strcpy_s(pTradingNoticeInfoField->InvestUnitID, pTradingNoticeInfoField_InvestUnitID); pTradingNoticeInfoField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTradingNoticeInfoField *pTradingNoticeInfoField)
{
	if(pTradingNoticeInfoField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:h,s:i,s:y}"
		, "BrokerID", pTradingNoticeInfoField->BrokerID
		, "InvestorID", pTradingNoticeInfoField->InvestorID
		, "SendTime", pTradingNoticeInfoField->SendTime
		, "FieldContent", pTradingNoticeInfoField->FieldContent
		, "SequenceSeries", pTradingNoticeInfoField->SequenceSeries
		, "SequenceNo", pTradingNoticeInfoField->SequenceNo
		, "InvestUnitID", pTradingNoticeInfoField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTradingNoticeField *pTradingNoticeField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorRange", "InvestorID", "SequenceSeries", "UserID", "SendTime", "SequenceNo", "FieldContent", "InvestUnitID", nullptr};
	char *pTradingNoticeField_BrokerID = nullptr;
	char pTradingNoticeField_InvestorRange = 0;
	char *pTradingNoticeField_InvestorID = nullptr;
	short pTradingNoticeField_SequenceSeries = 0;
	char *pTradingNoticeField_UserID = nullptr;
	char *pTradingNoticeField_SendTime = nullptr;
	int pTradingNoticeField_SequenceNo = 0;
	char *pTradingNoticeField_FieldContent = nullptr;
	char *pTradingNoticeField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTradingNoticeField, "|ycyhyyiyy")
		, &pTradingNoticeField_BrokerID
		, &pTradingNoticeField_InvestorRange
		, &pTradingNoticeField_InvestorID
		, &pTradingNoticeField_SequenceSeries
		, &pTradingNoticeField_UserID
		, &pTradingNoticeField_SendTime
		, &pTradingNoticeField_SequenceNo
		, &pTradingNoticeField_FieldContent
		, &pTradingNoticeField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pTradingNoticeField_BrokerID != nullptr){ strcpy_s(pTradingNoticeField->BrokerID, pTradingNoticeField_BrokerID); pTradingNoticeField_BrokerID = nullptr; }
		pTradingNoticeField->InvestorRange = pTradingNoticeField_InvestorRange;
		if(pTradingNoticeField_InvestorID != nullptr){ strcpy_s(pTradingNoticeField->InvestorID, pTradingNoticeField_InvestorID); pTradingNoticeField_InvestorID = nullptr; }
		pTradingNoticeField->SequenceSeries = pTradingNoticeField_SequenceSeries;
		if(pTradingNoticeField_UserID != nullptr){ strcpy_s(pTradingNoticeField->UserID, pTradingNoticeField_UserID); pTradingNoticeField_UserID = nullptr; }
		if(pTradingNoticeField_SendTime != nullptr){ strcpy_s(pTradingNoticeField->SendTime, pTradingNoticeField_SendTime); pTradingNoticeField_SendTime = nullptr; }
		pTradingNoticeField->SequenceNo = pTradingNoticeField_SequenceNo;
		if(pTradingNoticeField_FieldContent != nullptr){ strcpy_s(pTradingNoticeField->FieldContent, pTradingNoticeField_FieldContent); pTradingNoticeField_FieldContent = nullptr; }
		if(pTradingNoticeField_InvestUnitID != nullptr){ strcpy_s(pTradingNoticeField->InvestUnitID, pTradingNoticeField_InvestUnitID); pTradingNoticeField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTradingNoticeField *pTradingNoticeField)
{
	if(pTradingNoticeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:h,s:y,s:y,s:i,s:y,s:y}"
		, "BrokerID", pTradingNoticeField->BrokerID
		, "InvestorRange", pTradingNoticeField->InvestorRange
		, "InvestorID", pTradingNoticeField->InvestorID
		, "SequenceSeries", pTradingNoticeField->SequenceSeries
		, "UserID", pTradingNoticeField->UserID
		, "SendTime", pTradingNoticeField->SendTime
		, "SequenceNo", pTradingNoticeField->SequenceNo
		, "FieldContent", pTradingNoticeField->FieldContent
		, "InvestUnitID", pTradingNoticeField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryTradingNoticeField *pQryTradingNoticeField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InvestUnitID", nullptr};
	char *pQryTradingNoticeField_BrokerID = nullptr;
	char *pQryTradingNoticeField_InvestorID = nullptr;
	char *pQryTradingNoticeField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryTradingNoticeField, "|yyy")
		, &pQryTradingNoticeField_BrokerID
		, &pQryTradingNoticeField_InvestorID
		, &pQryTradingNoticeField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryTradingNoticeField_BrokerID != nullptr){ strcpy_s(pQryTradingNoticeField->BrokerID, pQryTradingNoticeField_BrokerID); pQryTradingNoticeField_BrokerID = nullptr; }
		if(pQryTradingNoticeField_InvestorID != nullptr){ strcpy_s(pQryTradingNoticeField->InvestorID, pQryTradingNoticeField_InvestorID); pQryTradingNoticeField_InvestorID = nullptr; }
		if(pQryTradingNoticeField_InvestUnitID != nullptr){ strcpy_s(pQryTradingNoticeField->InvestUnitID, pQryTradingNoticeField_InvestUnitID); pQryTradingNoticeField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryTradingNoticeField *pQryTradingNoticeField)
{
	if(pQryTradingNoticeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pQryTradingNoticeField->BrokerID
		, "InvestorID", pQryTradingNoticeField->InvestorID
		, "InvestUnitID", pQryTradingNoticeField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryErrOrderField *pQryErrOrderField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", nullptr};
	char *pQryErrOrderField_BrokerID = nullptr;
	char *pQryErrOrderField_InvestorID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryErrOrderField, "|yy")
		, &pQryErrOrderField_BrokerID
		, &pQryErrOrderField_InvestorID
	PyCTP_PyDict_FromStruct_END
		if(pQryErrOrderField_BrokerID != nullptr){ strcpy_s(pQryErrOrderField->BrokerID, pQryErrOrderField_BrokerID); pQryErrOrderField_BrokerID = nullptr; }
		if(pQryErrOrderField_InvestorID != nullptr){ strcpy_s(pQryErrOrderField->InvestorID, pQryErrOrderField_InvestorID); pQryErrOrderField_InvestorID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryErrOrderField *pQryErrOrderField)
{
	if(pQryErrOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQryErrOrderField->BrokerID
		, "InvestorID", pQryErrOrderField->InvestorID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcErrOrderField *pErrOrderField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "OrderRef", "UserID", "OrderPriceType", "Direction", "CombOffsetFlag", "CombHedgeFlag", "LimitPrice", "VolumeTotalOriginal", "TimeCondition", "GTDDate", "VolumeCondition", "MinVolume", "ContingentCondition", "StopPrice", "ForceCloseReason", "IsAutoSuspend", "BusinessUnit", "RequestID", "UserForceClose", "ErrorID", "ErrorMsg", "IsSwapOrder", "ExchangeID", "InvestUnitID", "AccountID", "CurrencyID", "ClientID", "IPAddress", "MacAddress", nullptr};
	char *pErrOrderField_BrokerID = nullptr;
	char *pErrOrderField_InvestorID = nullptr;
	char *pErrOrderField_InstrumentID = nullptr;
	char *pErrOrderField_OrderRef = nullptr;
	char *pErrOrderField_UserID = nullptr;
	char pErrOrderField_OrderPriceType = 0;
	char pErrOrderField_Direction = 0;
	char *pErrOrderField_CombOffsetFlag = nullptr;
	char *pErrOrderField_CombHedgeFlag = nullptr;
	double pErrOrderField_LimitPrice = 0.0;
	int pErrOrderField_VolumeTotalOriginal = 0;
	char pErrOrderField_TimeCondition = 0;
	char *pErrOrderField_GTDDate = nullptr;
	char pErrOrderField_VolumeCondition = 0;
	int pErrOrderField_MinVolume = 0;
	char pErrOrderField_ContingentCondition = 0;
	double pErrOrderField_StopPrice = 0.0;
	char pErrOrderField_ForceCloseReason = 0;
	int pErrOrderField_IsAutoSuspend = 0;
	char *pErrOrderField_BusinessUnit = nullptr;
	int pErrOrderField_RequestID = 0;
	int pErrOrderField_UserForceClose = 0;
	int pErrOrderField_ErrorID = 0;
	char *pErrOrderField_ErrorMsg = nullptr;
	int pErrOrderField_IsSwapOrder = 0;
	char *pErrOrderField_ExchangeID = nullptr;
	char *pErrOrderField_InvestUnitID = nullptr;
	char *pErrOrderField_AccountID = nullptr;
	char *pErrOrderField_CurrencyID = nullptr;
	char *pErrOrderField_ClientID = nullptr;
	char *pErrOrderField_IPAddress = nullptr;
	char *pErrOrderField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pErrOrderField, "|yyyyyccyydicycicdciyiiiyiyyyyyyy")
		, &pErrOrderField_BrokerID
		, &pErrOrderField_InvestorID
		, &pErrOrderField_InstrumentID
		, &pErrOrderField_OrderRef
		, &pErrOrderField_UserID
		, &pErrOrderField_OrderPriceType
		, &pErrOrderField_Direction
		, &pErrOrderField_CombOffsetFlag
		, &pErrOrderField_CombHedgeFlag
		, &pErrOrderField_LimitPrice
		, &pErrOrderField_VolumeTotalOriginal
		, &pErrOrderField_TimeCondition
		, &pErrOrderField_GTDDate
		, &pErrOrderField_VolumeCondition
		, &pErrOrderField_MinVolume
		, &pErrOrderField_ContingentCondition
		, &pErrOrderField_StopPrice
		, &pErrOrderField_ForceCloseReason
		, &pErrOrderField_IsAutoSuspend
		, &pErrOrderField_BusinessUnit
		, &pErrOrderField_RequestID
		, &pErrOrderField_UserForceClose
		, &pErrOrderField_ErrorID
		, &pErrOrderField_ErrorMsg
		, &pErrOrderField_IsSwapOrder
		, &pErrOrderField_ExchangeID
		, &pErrOrderField_InvestUnitID
		, &pErrOrderField_AccountID
		, &pErrOrderField_CurrencyID
		, &pErrOrderField_ClientID
		, &pErrOrderField_IPAddress
		, &pErrOrderField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pErrOrderField_BrokerID != nullptr){ strcpy_s(pErrOrderField->BrokerID, pErrOrderField_BrokerID); pErrOrderField_BrokerID = nullptr; }
		if(pErrOrderField_InvestorID != nullptr){ strcpy_s(pErrOrderField->InvestorID, pErrOrderField_InvestorID); pErrOrderField_InvestorID = nullptr; }
		if(pErrOrderField_InstrumentID != nullptr){ strcpy_s(pErrOrderField->InstrumentID, pErrOrderField_InstrumentID); pErrOrderField_InstrumentID = nullptr; }
		if(pErrOrderField_OrderRef != nullptr){ strcpy_s(pErrOrderField->OrderRef, pErrOrderField_OrderRef); pErrOrderField_OrderRef = nullptr; }
		if(pErrOrderField_UserID != nullptr){ strcpy_s(pErrOrderField->UserID, pErrOrderField_UserID); pErrOrderField_UserID = nullptr; }
		pErrOrderField->OrderPriceType = pErrOrderField_OrderPriceType;
		pErrOrderField->Direction = pErrOrderField_Direction;
		if(pErrOrderField_CombOffsetFlag != nullptr){ strcpy_s(pErrOrderField->CombOffsetFlag, pErrOrderField_CombOffsetFlag); pErrOrderField_CombOffsetFlag = nullptr; }
		if(pErrOrderField_CombHedgeFlag != nullptr){ strcpy_s(pErrOrderField->CombHedgeFlag, pErrOrderField_CombHedgeFlag); pErrOrderField_CombHedgeFlag = nullptr; }
		pErrOrderField->LimitPrice = pErrOrderField_LimitPrice;
		pErrOrderField->VolumeTotalOriginal = pErrOrderField_VolumeTotalOriginal;
		pErrOrderField->TimeCondition = pErrOrderField_TimeCondition;
		if(pErrOrderField_GTDDate != nullptr){ strcpy_s(pErrOrderField->GTDDate, pErrOrderField_GTDDate); pErrOrderField_GTDDate = nullptr; }
		pErrOrderField->VolumeCondition = pErrOrderField_VolumeCondition;
		pErrOrderField->MinVolume = pErrOrderField_MinVolume;
		pErrOrderField->ContingentCondition = pErrOrderField_ContingentCondition;
		pErrOrderField->StopPrice = pErrOrderField_StopPrice;
		pErrOrderField->ForceCloseReason = pErrOrderField_ForceCloseReason;
		pErrOrderField->IsAutoSuspend = pErrOrderField_IsAutoSuspend;
		if(pErrOrderField_BusinessUnit != nullptr){ strcpy_s(pErrOrderField->BusinessUnit, pErrOrderField_BusinessUnit); pErrOrderField_BusinessUnit = nullptr; }
		pErrOrderField->RequestID = pErrOrderField_RequestID;
		pErrOrderField->UserForceClose = pErrOrderField_UserForceClose;
		pErrOrderField->ErrorID = pErrOrderField_ErrorID;
		if(pErrOrderField_ErrorMsg != nullptr){ strcpy_s(pErrOrderField->ErrorMsg, pErrOrderField_ErrorMsg); pErrOrderField_ErrorMsg = nullptr; }
		pErrOrderField->IsSwapOrder = pErrOrderField_IsSwapOrder;
		if(pErrOrderField_ExchangeID != nullptr){ strcpy_s(pErrOrderField->ExchangeID, pErrOrderField_ExchangeID); pErrOrderField_ExchangeID = nullptr; }
		if(pErrOrderField_InvestUnitID != nullptr){ strcpy_s(pErrOrderField->InvestUnitID, pErrOrderField_InvestUnitID); pErrOrderField_InvestUnitID = nullptr; }
		if(pErrOrderField_AccountID != nullptr){ strcpy_s(pErrOrderField->AccountID, pErrOrderField_AccountID); pErrOrderField_AccountID = nullptr; }
		if(pErrOrderField_CurrencyID != nullptr){ strcpy_s(pErrOrderField->CurrencyID, pErrOrderField_CurrencyID); pErrOrderField_CurrencyID = nullptr; }
		if(pErrOrderField_ClientID != nullptr){ strcpy_s(pErrOrderField->ClientID, pErrOrderField_ClientID); pErrOrderField_ClientID = nullptr; }
		if(pErrOrderField_IPAddress != nullptr){ strcpy_s(pErrOrderField->IPAddress, pErrOrderField_IPAddress); pErrOrderField_IPAddress = nullptr; }
		if(pErrOrderField_MacAddress != nullptr){ strcpy_s(pErrOrderField->MacAddress, pErrOrderField_MacAddress); pErrOrderField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcErrOrderField *pErrOrderField)
{
	if(pErrOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:c,s:c,s:y,s:y,s:d,s:i,s:c,s:y,s:c,s:i,s:c,s:d,s:c,s:i,s:y,s:i,s:i,s:i,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pErrOrderField->BrokerID
		, "InvestorID", pErrOrderField->InvestorID
		, "InstrumentID", pErrOrderField->InstrumentID
		, "OrderRef", pErrOrderField->OrderRef
		, "UserID", pErrOrderField->UserID
		, "OrderPriceType", pErrOrderField->OrderPriceType
		, "Direction", pErrOrderField->Direction
		, "CombOffsetFlag", pErrOrderField->CombOffsetFlag
		, "CombHedgeFlag", pErrOrderField->CombHedgeFlag
		, "LimitPrice", pErrOrderField->LimitPrice
		, "VolumeTotalOriginal", pErrOrderField->VolumeTotalOriginal
		, "TimeCondition", pErrOrderField->TimeCondition
		, "GTDDate", pErrOrderField->GTDDate
		, "VolumeCondition", pErrOrderField->VolumeCondition
		, "MinVolume", pErrOrderField->MinVolume
		, "ContingentCondition", pErrOrderField->ContingentCondition
		, "StopPrice", pErrOrderField->StopPrice
		, "ForceCloseReason", pErrOrderField->ForceCloseReason
		, "IsAutoSuspend", pErrOrderField->IsAutoSuspend
		, "BusinessUnit", pErrOrderField->BusinessUnit
		, "RequestID", pErrOrderField->RequestID
		, "UserForceClose", pErrOrderField->UserForceClose
		, "ErrorID", pErrOrderField->ErrorID
		, "ErrorMsg", pErrOrderField->ErrorMsg
		, "IsSwapOrder", pErrOrderField->IsSwapOrder
		, "ExchangeID", pErrOrderField->ExchangeID
		, "InvestUnitID", pErrOrderField->InvestUnitID
		, "AccountID", pErrOrderField->AccountID
		, "CurrencyID", pErrOrderField->CurrencyID
		, "ClientID", pErrOrderField->ClientID
		, "IPAddress", pErrOrderField->IPAddress
		, "MacAddress", pErrOrderField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcErrorConditionalOrderField *pErrorConditionalOrderField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "OrderRef", "UserID", "OrderPriceType", "Direction", "CombOffsetFlag", "CombHedgeFlag", "LimitPrice", "VolumeTotalOriginal", "TimeCondition", "GTDDate", "VolumeCondition", "MinVolume", "ContingentCondition", "StopPrice", "ForceCloseReason", "IsAutoSuspend", "BusinessUnit", "RequestID", "OrderLocalID", "ExchangeID", "ParticipantID", "ClientID", "ExchangeInstID", "TraderID", "InstallID", "OrderSubmitStatus", "NotifySequence", "TradingDay", "SettlementID", "OrderSysID", "OrderSource", "OrderStatus", "OrderType", "VolumeTraded", "VolumeTotal", "InsertDate", "InsertTime", "ActiveTime", "SuspendTime", "UpdateTime", "CancelTime", "ActiveTraderID", "ClearingPartID", "SequenceNo", "FrontID", "SessionID", "UserProductInfo", "StatusMsg", "UserForceClose", "ActiveUserID", "BrokerOrderSeq", "RelativeOrderSysID", "ZCETotalTradedVolume", "ErrorID", "ErrorMsg", "IsSwapOrder", "BranchID", "InvestUnitID", "AccountID", "CurrencyID", "IPAddress", "MacAddress", nullptr};
	char *pErrorConditionalOrderField_BrokerID = nullptr;
	char *pErrorConditionalOrderField_InvestorID = nullptr;
	char *pErrorConditionalOrderField_InstrumentID = nullptr;
	char *pErrorConditionalOrderField_OrderRef = nullptr;
	char *pErrorConditionalOrderField_UserID = nullptr;
	char pErrorConditionalOrderField_OrderPriceType = 0;
	char pErrorConditionalOrderField_Direction = 0;
	char *pErrorConditionalOrderField_CombOffsetFlag = nullptr;
	char *pErrorConditionalOrderField_CombHedgeFlag = nullptr;
	double pErrorConditionalOrderField_LimitPrice = 0.0;
	int pErrorConditionalOrderField_VolumeTotalOriginal = 0;
	char pErrorConditionalOrderField_TimeCondition = 0;
	char *pErrorConditionalOrderField_GTDDate = nullptr;
	char pErrorConditionalOrderField_VolumeCondition = 0;
	int pErrorConditionalOrderField_MinVolume = 0;
	char pErrorConditionalOrderField_ContingentCondition = 0;
	double pErrorConditionalOrderField_StopPrice = 0.0;
	char pErrorConditionalOrderField_ForceCloseReason = 0;
	int pErrorConditionalOrderField_IsAutoSuspend = 0;
	char *pErrorConditionalOrderField_BusinessUnit = nullptr;
	int pErrorConditionalOrderField_RequestID = 0;
	char *pErrorConditionalOrderField_OrderLocalID = nullptr;
	char *pErrorConditionalOrderField_ExchangeID = nullptr;
	char *pErrorConditionalOrderField_ParticipantID = nullptr;
	char *pErrorConditionalOrderField_ClientID = nullptr;
	char *pErrorConditionalOrderField_ExchangeInstID = nullptr;
	char *pErrorConditionalOrderField_TraderID = nullptr;
	int pErrorConditionalOrderField_InstallID = 0;
	char pErrorConditionalOrderField_OrderSubmitStatus = 0;
	int pErrorConditionalOrderField_NotifySequence = 0;
	char *pErrorConditionalOrderField_TradingDay = nullptr;
	int pErrorConditionalOrderField_SettlementID = 0;
	char *pErrorConditionalOrderField_OrderSysID = nullptr;
	char pErrorConditionalOrderField_OrderSource = 0;
	char pErrorConditionalOrderField_OrderStatus = 0;
	char pErrorConditionalOrderField_OrderType = 0;
	int pErrorConditionalOrderField_VolumeTraded = 0;
	int pErrorConditionalOrderField_VolumeTotal = 0;
	char *pErrorConditionalOrderField_InsertDate = nullptr;
	char *pErrorConditionalOrderField_InsertTime = nullptr;
	char *pErrorConditionalOrderField_ActiveTime = nullptr;
	char *pErrorConditionalOrderField_SuspendTime = nullptr;
	char *pErrorConditionalOrderField_UpdateTime = nullptr;
	char *pErrorConditionalOrderField_CancelTime = nullptr;
	char *pErrorConditionalOrderField_ActiveTraderID = nullptr;
	char *pErrorConditionalOrderField_ClearingPartID = nullptr;
	int pErrorConditionalOrderField_SequenceNo = 0;
	int pErrorConditionalOrderField_FrontID = 0;
	int pErrorConditionalOrderField_SessionID = 0;
	char *pErrorConditionalOrderField_UserProductInfo = nullptr;
	char *pErrorConditionalOrderField_StatusMsg = nullptr;
	int pErrorConditionalOrderField_UserForceClose = 0;
	char *pErrorConditionalOrderField_ActiveUserID = nullptr;
	int pErrorConditionalOrderField_BrokerOrderSeq = 0;
	char *pErrorConditionalOrderField_RelativeOrderSysID = nullptr;
	int pErrorConditionalOrderField_ZCETotalTradedVolume = 0;
	int pErrorConditionalOrderField_ErrorID = 0;
	char *pErrorConditionalOrderField_ErrorMsg = nullptr;
	int pErrorConditionalOrderField_IsSwapOrder = 0;
	char *pErrorConditionalOrderField_BranchID = nullptr;
	char *pErrorConditionalOrderField_InvestUnitID = nullptr;
	char *pErrorConditionalOrderField_AccountID = nullptr;
	char *pErrorConditionalOrderField_CurrencyID = nullptr;
	char *pErrorConditionalOrderField_IPAddress = nullptr;
	char *pErrorConditionalOrderField_MacAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pErrorConditionalOrderField, "|yyyyyccyydicycicdciyiyyyyyyiciyiyccciiyyyyyyyyiiiyyiyiyiiyiyyyyyy")
		, &pErrorConditionalOrderField_BrokerID
		, &pErrorConditionalOrderField_InvestorID
		, &pErrorConditionalOrderField_InstrumentID
		, &pErrorConditionalOrderField_OrderRef
		, &pErrorConditionalOrderField_UserID
		, &pErrorConditionalOrderField_OrderPriceType
		, &pErrorConditionalOrderField_Direction
		, &pErrorConditionalOrderField_CombOffsetFlag
		, &pErrorConditionalOrderField_CombHedgeFlag
		, &pErrorConditionalOrderField_LimitPrice
		, &pErrorConditionalOrderField_VolumeTotalOriginal
		, &pErrorConditionalOrderField_TimeCondition
		, &pErrorConditionalOrderField_GTDDate
		, &pErrorConditionalOrderField_VolumeCondition
		, &pErrorConditionalOrderField_MinVolume
		, &pErrorConditionalOrderField_ContingentCondition
		, &pErrorConditionalOrderField_StopPrice
		, &pErrorConditionalOrderField_ForceCloseReason
		, &pErrorConditionalOrderField_IsAutoSuspend
		, &pErrorConditionalOrderField_BusinessUnit
		, &pErrorConditionalOrderField_RequestID
		, &pErrorConditionalOrderField_OrderLocalID
		, &pErrorConditionalOrderField_ExchangeID
		, &pErrorConditionalOrderField_ParticipantID
		, &pErrorConditionalOrderField_ClientID
		, &pErrorConditionalOrderField_ExchangeInstID
		, &pErrorConditionalOrderField_TraderID
		, &pErrorConditionalOrderField_InstallID
		, &pErrorConditionalOrderField_OrderSubmitStatus
		, &pErrorConditionalOrderField_NotifySequence
		, &pErrorConditionalOrderField_TradingDay
		, &pErrorConditionalOrderField_SettlementID
		, &pErrorConditionalOrderField_OrderSysID
		, &pErrorConditionalOrderField_OrderSource
		, &pErrorConditionalOrderField_OrderStatus
		, &pErrorConditionalOrderField_OrderType
		, &pErrorConditionalOrderField_VolumeTraded
		, &pErrorConditionalOrderField_VolumeTotal
		, &pErrorConditionalOrderField_InsertDate
		, &pErrorConditionalOrderField_InsertTime
		, &pErrorConditionalOrderField_ActiveTime
		, &pErrorConditionalOrderField_SuspendTime
		, &pErrorConditionalOrderField_UpdateTime
		, &pErrorConditionalOrderField_CancelTime
		, &pErrorConditionalOrderField_ActiveTraderID
		, &pErrorConditionalOrderField_ClearingPartID
		, &pErrorConditionalOrderField_SequenceNo
		, &pErrorConditionalOrderField_FrontID
		, &pErrorConditionalOrderField_SessionID
		, &pErrorConditionalOrderField_UserProductInfo
		, &pErrorConditionalOrderField_StatusMsg
		, &pErrorConditionalOrderField_UserForceClose
		, &pErrorConditionalOrderField_ActiveUserID
		, &pErrorConditionalOrderField_BrokerOrderSeq
		, &pErrorConditionalOrderField_RelativeOrderSysID
		, &pErrorConditionalOrderField_ZCETotalTradedVolume
		, &pErrorConditionalOrderField_ErrorID
		, &pErrorConditionalOrderField_ErrorMsg
		, &pErrorConditionalOrderField_IsSwapOrder
		, &pErrorConditionalOrderField_BranchID
		, &pErrorConditionalOrderField_InvestUnitID
		, &pErrorConditionalOrderField_AccountID
		, &pErrorConditionalOrderField_CurrencyID
		, &pErrorConditionalOrderField_IPAddress
		, &pErrorConditionalOrderField_MacAddress
	PyCTP_PyDict_FromStruct_END
		if(pErrorConditionalOrderField_BrokerID != nullptr){ strcpy_s(pErrorConditionalOrderField->BrokerID, pErrorConditionalOrderField_BrokerID); pErrorConditionalOrderField_BrokerID = nullptr; }
		if(pErrorConditionalOrderField_InvestorID != nullptr){ strcpy_s(pErrorConditionalOrderField->InvestorID, pErrorConditionalOrderField_InvestorID); pErrorConditionalOrderField_InvestorID = nullptr; }
		if(pErrorConditionalOrderField_InstrumentID != nullptr){ strcpy_s(pErrorConditionalOrderField->InstrumentID, pErrorConditionalOrderField_InstrumentID); pErrorConditionalOrderField_InstrumentID = nullptr; }
		if(pErrorConditionalOrderField_OrderRef != nullptr){ strcpy_s(pErrorConditionalOrderField->OrderRef, pErrorConditionalOrderField_OrderRef); pErrorConditionalOrderField_OrderRef = nullptr; }
		if(pErrorConditionalOrderField_UserID != nullptr){ strcpy_s(pErrorConditionalOrderField->UserID, pErrorConditionalOrderField_UserID); pErrorConditionalOrderField_UserID = nullptr; }
		pErrorConditionalOrderField->OrderPriceType = pErrorConditionalOrderField_OrderPriceType;
		pErrorConditionalOrderField->Direction = pErrorConditionalOrderField_Direction;
		if(pErrorConditionalOrderField_CombOffsetFlag != nullptr){ strcpy_s(pErrorConditionalOrderField->CombOffsetFlag, pErrorConditionalOrderField_CombOffsetFlag); pErrorConditionalOrderField_CombOffsetFlag = nullptr; }
		if(pErrorConditionalOrderField_CombHedgeFlag != nullptr){ strcpy_s(pErrorConditionalOrderField->CombHedgeFlag, pErrorConditionalOrderField_CombHedgeFlag); pErrorConditionalOrderField_CombHedgeFlag = nullptr; }
		pErrorConditionalOrderField->LimitPrice = pErrorConditionalOrderField_LimitPrice;
		pErrorConditionalOrderField->VolumeTotalOriginal = pErrorConditionalOrderField_VolumeTotalOriginal;
		pErrorConditionalOrderField->TimeCondition = pErrorConditionalOrderField_TimeCondition;
		if(pErrorConditionalOrderField_GTDDate != nullptr){ strcpy_s(pErrorConditionalOrderField->GTDDate, pErrorConditionalOrderField_GTDDate); pErrorConditionalOrderField_GTDDate = nullptr; }
		pErrorConditionalOrderField->VolumeCondition = pErrorConditionalOrderField_VolumeCondition;
		pErrorConditionalOrderField->MinVolume = pErrorConditionalOrderField_MinVolume;
		pErrorConditionalOrderField->ContingentCondition = pErrorConditionalOrderField_ContingentCondition;
		pErrorConditionalOrderField->StopPrice = pErrorConditionalOrderField_StopPrice;
		pErrorConditionalOrderField->ForceCloseReason = pErrorConditionalOrderField_ForceCloseReason;
		pErrorConditionalOrderField->IsAutoSuspend = pErrorConditionalOrderField_IsAutoSuspend;
		if(pErrorConditionalOrderField_BusinessUnit != nullptr){ strcpy_s(pErrorConditionalOrderField->BusinessUnit, pErrorConditionalOrderField_BusinessUnit); pErrorConditionalOrderField_BusinessUnit = nullptr; }
		pErrorConditionalOrderField->RequestID = pErrorConditionalOrderField_RequestID;
		if(pErrorConditionalOrderField_OrderLocalID != nullptr){ strcpy_s(pErrorConditionalOrderField->OrderLocalID, pErrorConditionalOrderField_OrderLocalID); pErrorConditionalOrderField_OrderLocalID = nullptr; }
		if(pErrorConditionalOrderField_ExchangeID != nullptr){ strcpy_s(pErrorConditionalOrderField->ExchangeID, pErrorConditionalOrderField_ExchangeID); pErrorConditionalOrderField_ExchangeID = nullptr; }
		if(pErrorConditionalOrderField_ParticipantID != nullptr){ strcpy_s(pErrorConditionalOrderField->ParticipantID, pErrorConditionalOrderField_ParticipantID); pErrorConditionalOrderField_ParticipantID = nullptr; }
		if(pErrorConditionalOrderField_ClientID != nullptr){ strcpy_s(pErrorConditionalOrderField->ClientID, pErrorConditionalOrderField_ClientID); pErrorConditionalOrderField_ClientID = nullptr; }
		if(pErrorConditionalOrderField_ExchangeInstID != nullptr){ strcpy_s(pErrorConditionalOrderField->ExchangeInstID, pErrorConditionalOrderField_ExchangeInstID); pErrorConditionalOrderField_ExchangeInstID = nullptr; }
		if(pErrorConditionalOrderField_TraderID != nullptr){ strcpy_s(pErrorConditionalOrderField->TraderID, pErrorConditionalOrderField_TraderID); pErrorConditionalOrderField_TraderID = nullptr; }
		pErrorConditionalOrderField->InstallID = pErrorConditionalOrderField_InstallID;
		pErrorConditionalOrderField->OrderSubmitStatus = pErrorConditionalOrderField_OrderSubmitStatus;
		pErrorConditionalOrderField->NotifySequence = pErrorConditionalOrderField_NotifySequence;
		if(pErrorConditionalOrderField_TradingDay != nullptr){ strcpy_s(pErrorConditionalOrderField->TradingDay, pErrorConditionalOrderField_TradingDay); pErrorConditionalOrderField_TradingDay = nullptr; }
		pErrorConditionalOrderField->SettlementID = pErrorConditionalOrderField_SettlementID;
		if(pErrorConditionalOrderField_OrderSysID != nullptr){ strcpy_s(pErrorConditionalOrderField->OrderSysID, pErrorConditionalOrderField_OrderSysID); pErrorConditionalOrderField_OrderSysID = nullptr; }
		pErrorConditionalOrderField->OrderSource = pErrorConditionalOrderField_OrderSource;
		pErrorConditionalOrderField->OrderStatus = pErrorConditionalOrderField_OrderStatus;
		pErrorConditionalOrderField->OrderType = pErrorConditionalOrderField_OrderType;
		pErrorConditionalOrderField->VolumeTraded = pErrorConditionalOrderField_VolumeTraded;
		pErrorConditionalOrderField->VolumeTotal = pErrorConditionalOrderField_VolumeTotal;
		if(pErrorConditionalOrderField_InsertDate != nullptr){ strcpy_s(pErrorConditionalOrderField->InsertDate, pErrorConditionalOrderField_InsertDate); pErrorConditionalOrderField_InsertDate = nullptr; }
		if(pErrorConditionalOrderField_InsertTime != nullptr){ strcpy_s(pErrorConditionalOrderField->InsertTime, pErrorConditionalOrderField_InsertTime); pErrorConditionalOrderField_InsertTime = nullptr; }
		if(pErrorConditionalOrderField_ActiveTime != nullptr){ strcpy_s(pErrorConditionalOrderField->ActiveTime, pErrorConditionalOrderField_ActiveTime); pErrorConditionalOrderField_ActiveTime = nullptr; }
		if(pErrorConditionalOrderField_SuspendTime != nullptr){ strcpy_s(pErrorConditionalOrderField->SuspendTime, pErrorConditionalOrderField_SuspendTime); pErrorConditionalOrderField_SuspendTime = nullptr; }
		if(pErrorConditionalOrderField_UpdateTime != nullptr){ strcpy_s(pErrorConditionalOrderField->UpdateTime, pErrorConditionalOrderField_UpdateTime); pErrorConditionalOrderField_UpdateTime = nullptr; }
		if(pErrorConditionalOrderField_CancelTime != nullptr){ strcpy_s(pErrorConditionalOrderField->CancelTime, pErrorConditionalOrderField_CancelTime); pErrorConditionalOrderField_CancelTime = nullptr; }
		if(pErrorConditionalOrderField_ActiveTraderID != nullptr){ strcpy_s(pErrorConditionalOrderField->ActiveTraderID, pErrorConditionalOrderField_ActiveTraderID); pErrorConditionalOrderField_ActiveTraderID = nullptr; }
		if(pErrorConditionalOrderField_ClearingPartID != nullptr){ strcpy_s(pErrorConditionalOrderField->ClearingPartID, pErrorConditionalOrderField_ClearingPartID); pErrorConditionalOrderField_ClearingPartID = nullptr; }
		pErrorConditionalOrderField->SequenceNo = pErrorConditionalOrderField_SequenceNo;
		pErrorConditionalOrderField->FrontID = pErrorConditionalOrderField_FrontID;
		pErrorConditionalOrderField->SessionID = pErrorConditionalOrderField_SessionID;
		if(pErrorConditionalOrderField_UserProductInfo != nullptr){ strcpy_s(pErrorConditionalOrderField->UserProductInfo, pErrorConditionalOrderField_UserProductInfo); pErrorConditionalOrderField_UserProductInfo = nullptr; }
		if(pErrorConditionalOrderField_StatusMsg != nullptr){ strcpy_s(pErrorConditionalOrderField->StatusMsg, pErrorConditionalOrderField_StatusMsg); pErrorConditionalOrderField_StatusMsg = nullptr; }
		pErrorConditionalOrderField->UserForceClose = pErrorConditionalOrderField_UserForceClose;
		if(pErrorConditionalOrderField_ActiveUserID != nullptr){ strcpy_s(pErrorConditionalOrderField->ActiveUserID, pErrorConditionalOrderField_ActiveUserID); pErrorConditionalOrderField_ActiveUserID = nullptr; }
		pErrorConditionalOrderField->BrokerOrderSeq = pErrorConditionalOrderField_BrokerOrderSeq;
		if(pErrorConditionalOrderField_RelativeOrderSysID != nullptr){ strcpy_s(pErrorConditionalOrderField->RelativeOrderSysID, pErrorConditionalOrderField_RelativeOrderSysID); pErrorConditionalOrderField_RelativeOrderSysID = nullptr; }
		pErrorConditionalOrderField->ZCETotalTradedVolume = pErrorConditionalOrderField_ZCETotalTradedVolume;
		pErrorConditionalOrderField->ErrorID = pErrorConditionalOrderField_ErrorID;
		if(pErrorConditionalOrderField_ErrorMsg != nullptr){ strcpy_s(pErrorConditionalOrderField->ErrorMsg, pErrorConditionalOrderField_ErrorMsg); pErrorConditionalOrderField_ErrorMsg = nullptr; }
		pErrorConditionalOrderField->IsSwapOrder = pErrorConditionalOrderField_IsSwapOrder;
		if(pErrorConditionalOrderField_BranchID != nullptr){ strcpy_s(pErrorConditionalOrderField->BranchID, pErrorConditionalOrderField_BranchID); pErrorConditionalOrderField_BranchID = nullptr; }
		if(pErrorConditionalOrderField_InvestUnitID != nullptr){ strcpy_s(pErrorConditionalOrderField->InvestUnitID, pErrorConditionalOrderField_InvestUnitID); pErrorConditionalOrderField_InvestUnitID = nullptr; }
		if(pErrorConditionalOrderField_AccountID != nullptr){ strcpy_s(pErrorConditionalOrderField->AccountID, pErrorConditionalOrderField_AccountID); pErrorConditionalOrderField_AccountID = nullptr; }
		if(pErrorConditionalOrderField_CurrencyID != nullptr){ strcpy_s(pErrorConditionalOrderField->CurrencyID, pErrorConditionalOrderField_CurrencyID); pErrorConditionalOrderField_CurrencyID = nullptr; }
		if(pErrorConditionalOrderField_IPAddress != nullptr){ strcpy_s(pErrorConditionalOrderField->IPAddress, pErrorConditionalOrderField_IPAddress); pErrorConditionalOrderField_IPAddress = nullptr; }
		if(pErrorConditionalOrderField_MacAddress != nullptr){ strcpy_s(pErrorConditionalOrderField->MacAddress, pErrorConditionalOrderField_MacAddress); pErrorConditionalOrderField_MacAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcErrorConditionalOrderField *pErrorConditionalOrderField)
{
	if(pErrorConditionalOrderField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:c,s:c,s:y,s:y,s:d,s:i,s:c,s:y,s:c,s:i,s:c,s:d,s:c,s:i,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:i,s:y,s:c,s:c,s:c,s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:i,s:i,s:y,s:y,s:i,s:y,s:i,s:y,s:i,s:i,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pErrorConditionalOrderField->BrokerID
		, "InvestorID", pErrorConditionalOrderField->InvestorID
		, "InstrumentID", pErrorConditionalOrderField->InstrumentID
		, "OrderRef", pErrorConditionalOrderField->OrderRef
		, "UserID", pErrorConditionalOrderField->UserID
		, "OrderPriceType", pErrorConditionalOrderField->OrderPriceType
		, "Direction", pErrorConditionalOrderField->Direction
		, "CombOffsetFlag", pErrorConditionalOrderField->CombOffsetFlag
		, "CombHedgeFlag", pErrorConditionalOrderField->CombHedgeFlag
		, "LimitPrice", pErrorConditionalOrderField->LimitPrice
		, "VolumeTotalOriginal", pErrorConditionalOrderField->VolumeTotalOriginal
		, "TimeCondition", pErrorConditionalOrderField->TimeCondition
		, "GTDDate", pErrorConditionalOrderField->GTDDate
		, "VolumeCondition", pErrorConditionalOrderField->VolumeCondition
		, "MinVolume", pErrorConditionalOrderField->MinVolume
		, "ContingentCondition", pErrorConditionalOrderField->ContingentCondition
		, "StopPrice", pErrorConditionalOrderField->StopPrice
		, "ForceCloseReason", pErrorConditionalOrderField->ForceCloseReason
		, "IsAutoSuspend", pErrorConditionalOrderField->IsAutoSuspend
		, "BusinessUnit", pErrorConditionalOrderField->BusinessUnit
		, "RequestID", pErrorConditionalOrderField->RequestID
		, "OrderLocalID", pErrorConditionalOrderField->OrderLocalID
		, "ExchangeID", pErrorConditionalOrderField->ExchangeID
		, "ParticipantID", pErrorConditionalOrderField->ParticipantID
		, "ClientID", pErrorConditionalOrderField->ClientID
		, "ExchangeInstID", pErrorConditionalOrderField->ExchangeInstID
		, "TraderID", pErrorConditionalOrderField->TraderID
		, "InstallID", pErrorConditionalOrderField->InstallID
		, "OrderSubmitStatus", pErrorConditionalOrderField->OrderSubmitStatus
		, "NotifySequence", pErrorConditionalOrderField->NotifySequence
		, "TradingDay", pErrorConditionalOrderField->TradingDay
		, "SettlementID", pErrorConditionalOrderField->SettlementID
		, "OrderSysID", pErrorConditionalOrderField->OrderSysID
		, "OrderSource", pErrorConditionalOrderField->OrderSource
		, "OrderStatus", pErrorConditionalOrderField->OrderStatus
		, "OrderType", pErrorConditionalOrderField->OrderType
		, "VolumeTraded", pErrorConditionalOrderField->VolumeTraded
		, "VolumeTotal", pErrorConditionalOrderField->VolumeTotal
		, "InsertDate", pErrorConditionalOrderField->InsertDate
		, "InsertTime", pErrorConditionalOrderField->InsertTime
		, "ActiveTime", pErrorConditionalOrderField->ActiveTime
		, "SuspendTime", pErrorConditionalOrderField->SuspendTime
		, "UpdateTime", pErrorConditionalOrderField->UpdateTime
		, "CancelTime", pErrorConditionalOrderField->CancelTime
		, "ActiveTraderID", pErrorConditionalOrderField->ActiveTraderID
		, "ClearingPartID", pErrorConditionalOrderField->ClearingPartID
		, "SequenceNo", pErrorConditionalOrderField->SequenceNo
		, "FrontID", pErrorConditionalOrderField->FrontID
		, "SessionID", pErrorConditionalOrderField->SessionID
		, "UserProductInfo", pErrorConditionalOrderField->UserProductInfo
		, "StatusMsg", pErrorConditionalOrderField->StatusMsg
		, "UserForceClose", pErrorConditionalOrderField->UserForceClose
		, "ActiveUserID", pErrorConditionalOrderField->ActiveUserID
		, "BrokerOrderSeq", pErrorConditionalOrderField->BrokerOrderSeq
		, "RelativeOrderSysID", pErrorConditionalOrderField->RelativeOrderSysID
		, "ZCETotalTradedVolume", pErrorConditionalOrderField->ZCETotalTradedVolume
		, "ErrorID", pErrorConditionalOrderField->ErrorID
		, "ErrorMsg", pErrorConditionalOrderField->ErrorMsg
		, "IsSwapOrder", pErrorConditionalOrderField->IsSwapOrder
		, "BranchID", pErrorConditionalOrderField->BranchID
		, "InvestUnitID", pErrorConditionalOrderField->InvestUnitID
		, "AccountID", pErrorConditionalOrderField->AccountID
		, "CurrencyID", pErrorConditionalOrderField->CurrencyID
		, "IPAddress", pErrorConditionalOrderField->IPAddress
		, "MacAddress", pErrorConditionalOrderField->MacAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryErrOrderActionField *pQryErrOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", nullptr};
	char *pQryErrOrderActionField_BrokerID = nullptr;
	char *pQryErrOrderActionField_InvestorID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryErrOrderActionField, "|yy")
		, &pQryErrOrderActionField_BrokerID
		, &pQryErrOrderActionField_InvestorID
	PyCTP_PyDict_FromStruct_END
		if(pQryErrOrderActionField_BrokerID != nullptr){ strcpy_s(pQryErrOrderActionField->BrokerID, pQryErrOrderActionField_BrokerID); pQryErrOrderActionField_BrokerID = nullptr; }
		if(pQryErrOrderActionField_InvestorID != nullptr){ strcpy_s(pQryErrOrderActionField->InvestorID, pQryErrOrderActionField_InvestorID); pQryErrOrderActionField_InvestorID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryErrOrderActionField *pQryErrOrderActionField)
{
	if(pQryErrOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQryErrOrderActionField->BrokerID
		, "InvestorID", pQryErrOrderActionField->InvestorID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcErrOrderActionField *pErrOrderActionField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "OrderActionRef", "OrderRef", "RequestID", "FrontID", "SessionID", "ExchangeID", "OrderSysID", "ActionFlag", "LimitPrice", "VolumeChange", "ActionDate", "ActionTime", "TraderID", "InstallID", "OrderLocalID", "ActionLocalID", "ParticipantID", "ClientID", "BusinessUnit", "OrderActionStatus", "UserID", "StatusMsg", "InstrumentID", "BranchID", "InvestUnitID", "IPAddress", "MacAddress", "ErrorID", "ErrorMsg", nullptr};
	char *pErrOrderActionField_BrokerID = nullptr;
	char *pErrOrderActionField_InvestorID = nullptr;
	int pErrOrderActionField_OrderActionRef = 0;
	char *pErrOrderActionField_OrderRef = nullptr;
	int pErrOrderActionField_RequestID = 0;
	int pErrOrderActionField_FrontID = 0;
	int pErrOrderActionField_SessionID = 0;
	char *pErrOrderActionField_ExchangeID = nullptr;
	char *pErrOrderActionField_OrderSysID = nullptr;
	char pErrOrderActionField_ActionFlag = 0;
	double pErrOrderActionField_LimitPrice = 0.0;
	int pErrOrderActionField_VolumeChange = 0;
	char *pErrOrderActionField_ActionDate = nullptr;
	char *pErrOrderActionField_ActionTime = nullptr;
	char *pErrOrderActionField_TraderID = nullptr;
	int pErrOrderActionField_InstallID = 0;
	char *pErrOrderActionField_OrderLocalID = nullptr;
	char *pErrOrderActionField_ActionLocalID = nullptr;
	char *pErrOrderActionField_ParticipantID = nullptr;
	char *pErrOrderActionField_ClientID = nullptr;
	char *pErrOrderActionField_BusinessUnit = nullptr;
	char pErrOrderActionField_OrderActionStatus = 0;
	char *pErrOrderActionField_UserID = nullptr;
	char *pErrOrderActionField_StatusMsg = nullptr;
	char *pErrOrderActionField_InstrumentID = nullptr;
	char *pErrOrderActionField_BranchID = nullptr;
	char *pErrOrderActionField_InvestUnitID = nullptr;
	char *pErrOrderActionField_IPAddress = nullptr;
	char *pErrOrderActionField_MacAddress = nullptr;
	int pErrOrderActionField_ErrorID = 0;
	char *pErrOrderActionField_ErrorMsg = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pErrOrderActionField, "|yyiyiiiyycdiyyyiyyyyycyyyyyyyiy")
		, &pErrOrderActionField_BrokerID
		, &pErrOrderActionField_InvestorID
		, &pErrOrderActionField_OrderActionRef
		, &pErrOrderActionField_OrderRef
		, &pErrOrderActionField_RequestID
		, &pErrOrderActionField_FrontID
		, &pErrOrderActionField_SessionID
		, &pErrOrderActionField_ExchangeID
		, &pErrOrderActionField_OrderSysID
		, &pErrOrderActionField_ActionFlag
		, &pErrOrderActionField_LimitPrice
		, &pErrOrderActionField_VolumeChange
		, &pErrOrderActionField_ActionDate
		, &pErrOrderActionField_ActionTime
		, &pErrOrderActionField_TraderID
		, &pErrOrderActionField_InstallID
		, &pErrOrderActionField_OrderLocalID
		, &pErrOrderActionField_ActionLocalID
		, &pErrOrderActionField_ParticipantID
		, &pErrOrderActionField_ClientID
		, &pErrOrderActionField_BusinessUnit
		, &pErrOrderActionField_OrderActionStatus
		, &pErrOrderActionField_UserID
		, &pErrOrderActionField_StatusMsg
		, &pErrOrderActionField_InstrumentID
		, &pErrOrderActionField_BranchID
		, &pErrOrderActionField_InvestUnitID
		, &pErrOrderActionField_IPAddress
		, &pErrOrderActionField_MacAddress
		, &pErrOrderActionField_ErrorID
		, &pErrOrderActionField_ErrorMsg
	PyCTP_PyDict_FromStruct_END
		if(pErrOrderActionField_BrokerID != nullptr){ strcpy_s(pErrOrderActionField->BrokerID, pErrOrderActionField_BrokerID); pErrOrderActionField_BrokerID = nullptr; }
		if(pErrOrderActionField_InvestorID != nullptr){ strcpy_s(pErrOrderActionField->InvestorID, pErrOrderActionField_InvestorID); pErrOrderActionField_InvestorID = nullptr; }
		pErrOrderActionField->OrderActionRef = pErrOrderActionField_OrderActionRef;
		if(pErrOrderActionField_OrderRef != nullptr){ strcpy_s(pErrOrderActionField->OrderRef, pErrOrderActionField_OrderRef); pErrOrderActionField_OrderRef = nullptr; }
		pErrOrderActionField->RequestID = pErrOrderActionField_RequestID;
		pErrOrderActionField->FrontID = pErrOrderActionField_FrontID;
		pErrOrderActionField->SessionID = pErrOrderActionField_SessionID;
		if(pErrOrderActionField_ExchangeID != nullptr){ strcpy_s(pErrOrderActionField->ExchangeID, pErrOrderActionField_ExchangeID); pErrOrderActionField_ExchangeID = nullptr; }
		if(pErrOrderActionField_OrderSysID != nullptr){ strcpy_s(pErrOrderActionField->OrderSysID, pErrOrderActionField_OrderSysID); pErrOrderActionField_OrderSysID = nullptr; }
		pErrOrderActionField->ActionFlag = pErrOrderActionField_ActionFlag;
		pErrOrderActionField->LimitPrice = pErrOrderActionField_LimitPrice;
		pErrOrderActionField->VolumeChange = pErrOrderActionField_VolumeChange;
		if(pErrOrderActionField_ActionDate != nullptr){ strcpy_s(pErrOrderActionField->ActionDate, pErrOrderActionField_ActionDate); pErrOrderActionField_ActionDate = nullptr; }
		if(pErrOrderActionField_ActionTime != nullptr){ strcpy_s(pErrOrderActionField->ActionTime, pErrOrderActionField_ActionTime); pErrOrderActionField_ActionTime = nullptr; }
		if(pErrOrderActionField_TraderID != nullptr){ strcpy_s(pErrOrderActionField->TraderID, pErrOrderActionField_TraderID); pErrOrderActionField_TraderID = nullptr; }
		pErrOrderActionField->InstallID = pErrOrderActionField_InstallID;
		if(pErrOrderActionField_OrderLocalID != nullptr){ strcpy_s(pErrOrderActionField->OrderLocalID, pErrOrderActionField_OrderLocalID); pErrOrderActionField_OrderLocalID = nullptr; }
		if(pErrOrderActionField_ActionLocalID != nullptr){ strcpy_s(pErrOrderActionField->ActionLocalID, pErrOrderActionField_ActionLocalID); pErrOrderActionField_ActionLocalID = nullptr; }
		if(pErrOrderActionField_ParticipantID != nullptr){ strcpy_s(pErrOrderActionField->ParticipantID, pErrOrderActionField_ParticipantID); pErrOrderActionField_ParticipantID = nullptr; }
		if(pErrOrderActionField_ClientID != nullptr){ strcpy_s(pErrOrderActionField->ClientID, pErrOrderActionField_ClientID); pErrOrderActionField_ClientID = nullptr; }
		if(pErrOrderActionField_BusinessUnit != nullptr){ strcpy_s(pErrOrderActionField->BusinessUnit, pErrOrderActionField_BusinessUnit); pErrOrderActionField_BusinessUnit = nullptr; }
		pErrOrderActionField->OrderActionStatus = pErrOrderActionField_OrderActionStatus;
		if(pErrOrderActionField_UserID != nullptr){ strcpy_s(pErrOrderActionField->UserID, pErrOrderActionField_UserID); pErrOrderActionField_UserID = nullptr; }
		if(pErrOrderActionField_StatusMsg != nullptr){ strcpy_s(pErrOrderActionField->StatusMsg, pErrOrderActionField_StatusMsg); pErrOrderActionField_StatusMsg = nullptr; }
		if(pErrOrderActionField_InstrumentID != nullptr){ strcpy_s(pErrOrderActionField->InstrumentID, pErrOrderActionField_InstrumentID); pErrOrderActionField_InstrumentID = nullptr; }
		if(pErrOrderActionField_BranchID != nullptr){ strcpy_s(pErrOrderActionField->BranchID, pErrOrderActionField_BranchID); pErrOrderActionField_BranchID = nullptr; }
		if(pErrOrderActionField_InvestUnitID != nullptr){ strcpy_s(pErrOrderActionField->InvestUnitID, pErrOrderActionField_InvestUnitID); pErrOrderActionField_InvestUnitID = nullptr; }
		if(pErrOrderActionField_IPAddress != nullptr){ strcpy_s(pErrOrderActionField->IPAddress, pErrOrderActionField_IPAddress); pErrOrderActionField_IPAddress = nullptr; }
		if(pErrOrderActionField_MacAddress != nullptr){ strcpy_s(pErrOrderActionField->MacAddress, pErrOrderActionField_MacAddress); pErrOrderActionField_MacAddress = nullptr; }
		pErrOrderActionField->ErrorID = pErrOrderActionField_ErrorID;
		if(pErrOrderActionField_ErrorMsg != nullptr){ strcpy_s(pErrOrderActionField->ErrorMsg, pErrOrderActionField_ErrorMsg); pErrOrderActionField_ErrorMsg = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcErrOrderActionField *pErrOrderActionField)
{
	if(pErrOrderActionField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i,s:y,s:i,s:i,s:i,s:y,s:y,s:c,s:d,s:i,s:y,s:y,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:y}"
		, "BrokerID", pErrOrderActionField->BrokerID
		, "InvestorID", pErrOrderActionField->InvestorID
		, "OrderActionRef", pErrOrderActionField->OrderActionRef
		, "OrderRef", pErrOrderActionField->OrderRef
		, "RequestID", pErrOrderActionField->RequestID
		, "FrontID", pErrOrderActionField->FrontID
		, "SessionID", pErrOrderActionField->SessionID
		, "ExchangeID", pErrOrderActionField->ExchangeID
		, "OrderSysID", pErrOrderActionField->OrderSysID
		, "ActionFlag", pErrOrderActionField->ActionFlag
		, "LimitPrice", pErrOrderActionField->LimitPrice
		, "VolumeChange", pErrOrderActionField->VolumeChange
		, "ActionDate", pErrOrderActionField->ActionDate
		, "ActionTime", pErrOrderActionField->ActionTime
		, "TraderID", pErrOrderActionField->TraderID
		, "InstallID", pErrOrderActionField->InstallID
		, "OrderLocalID", pErrOrderActionField->OrderLocalID
		, "ActionLocalID", pErrOrderActionField->ActionLocalID
		, "ParticipantID", pErrOrderActionField->ParticipantID
		, "ClientID", pErrOrderActionField->ClientID
		, "BusinessUnit", pErrOrderActionField->BusinessUnit
		, "OrderActionStatus", pErrOrderActionField->OrderActionStatus
		, "UserID", pErrOrderActionField->UserID
		, "StatusMsg", pErrOrderActionField->StatusMsg
		, "InstrumentID", pErrOrderActionField->InstrumentID
		, "BranchID", pErrOrderActionField->BranchID
		, "InvestUnitID", pErrOrderActionField->InvestUnitID
		, "IPAddress", pErrOrderActionField->IPAddress
		, "MacAddress", pErrOrderActionField->MacAddress
		, "ErrorID", pErrOrderActionField->ErrorID
		, "ErrorMsg", pErrOrderActionField->ErrorMsg
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryExchangeSequenceField *pQryExchangeSequenceField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", nullptr};
	char *pQryExchangeSequenceField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryExchangeSequenceField, "|y")
		, &pQryExchangeSequenceField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pQryExchangeSequenceField_ExchangeID != nullptr){ strcpy_s(pQryExchangeSequenceField->ExchangeID, pQryExchangeSequenceField_ExchangeID); pQryExchangeSequenceField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryExchangeSequenceField *pQryExchangeSequenceField)
{
	if(pQryExchangeSequenceField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y}"
		, "ExchangeID", pQryExchangeSequenceField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcExchangeSequenceField *pExchangeSequenceField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "SequenceNo", "MarketStatus", nullptr};
	char *pExchangeSequenceField_ExchangeID = nullptr;
	int pExchangeSequenceField_SequenceNo = 0;
	char pExchangeSequenceField_MarketStatus = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pExchangeSequenceField, "|yic")
		, &pExchangeSequenceField_ExchangeID
		, &pExchangeSequenceField_SequenceNo
		, &pExchangeSequenceField_MarketStatus
	PyCTP_PyDict_FromStruct_END
		if(pExchangeSequenceField_ExchangeID != nullptr){ strcpy_s(pExchangeSequenceField->ExchangeID, pExchangeSequenceField_ExchangeID); pExchangeSequenceField_ExchangeID = nullptr; }
		pExchangeSequenceField->SequenceNo = pExchangeSequenceField_SequenceNo;
		pExchangeSequenceField->MarketStatus = pExchangeSequenceField_MarketStatus;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcExchangeSequenceField *pExchangeSequenceField)
{
	if(pExchangeSequenceField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:i,s:c}"
		, "ExchangeID", pExchangeSequenceField->ExchangeID
		, "SequenceNo", pExchangeSequenceField->SequenceNo
		, "MarketStatus", pExchangeSequenceField->MarketStatus
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQueryMaxOrderVolumeWithPriceField *pQueryMaxOrderVolumeWithPriceField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InstrumentID", "Direction", "OffsetFlag", "HedgeFlag", "MaxVolume", "Price", "ExchangeID", "InvestUnitID", nullptr};
	char *pQueryMaxOrderVolumeWithPriceField_BrokerID = nullptr;
	char *pQueryMaxOrderVolumeWithPriceField_InvestorID = nullptr;
	char *pQueryMaxOrderVolumeWithPriceField_InstrumentID = nullptr;
	char pQueryMaxOrderVolumeWithPriceField_Direction = 0;
	char pQueryMaxOrderVolumeWithPriceField_OffsetFlag = 0;
	char pQueryMaxOrderVolumeWithPriceField_HedgeFlag = 0;
	int pQueryMaxOrderVolumeWithPriceField_MaxVolume = 0;
	double pQueryMaxOrderVolumeWithPriceField_Price = 0.0;
	char *pQueryMaxOrderVolumeWithPriceField_ExchangeID = nullptr;
	char *pQueryMaxOrderVolumeWithPriceField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQueryMaxOrderVolumeWithPriceField, "|yyycccidyy")
		, &pQueryMaxOrderVolumeWithPriceField_BrokerID
		, &pQueryMaxOrderVolumeWithPriceField_InvestorID
		, &pQueryMaxOrderVolumeWithPriceField_InstrumentID
		, &pQueryMaxOrderVolumeWithPriceField_Direction
		, &pQueryMaxOrderVolumeWithPriceField_OffsetFlag
		, &pQueryMaxOrderVolumeWithPriceField_HedgeFlag
		, &pQueryMaxOrderVolumeWithPriceField_MaxVolume
		, &pQueryMaxOrderVolumeWithPriceField_Price
		, &pQueryMaxOrderVolumeWithPriceField_ExchangeID
		, &pQueryMaxOrderVolumeWithPriceField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQueryMaxOrderVolumeWithPriceField_BrokerID != nullptr){ strcpy_s(pQueryMaxOrderVolumeWithPriceField->BrokerID, pQueryMaxOrderVolumeWithPriceField_BrokerID); pQueryMaxOrderVolumeWithPriceField_BrokerID = nullptr; }
		if(pQueryMaxOrderVolumeWithPriceField_InvestorID != nullptr){ strcpy_s(pQueryMaxOrderVolumeWithPriceField->InvestorID, pQueryMaxOrderVolumeWithPriceField_InvestorID); pQueryMaxOrderVolumeWithPriceField_InvestorID = nullptr; }
		if(pQueryMaxOrderVolumeWithPriceField_InstrumentID != nullptr){ strcpy_s(pQueryMaxOrderVolumeWithPriceField->InstrumentID, pQueryMaxOrderVolumeWithPriceField_InstrumentID); pQueryMaxOrderVolumeWithPriceField_InstrumentID = nullptr; }
		pQueryMaxOrderVolumeWithPriceField->Direction = pQueryMaxOrderVolumeWithPriceField_Direction;
		pQueryMaxOrderVolumeWithPriceField->OffsetFlag = pQueryMaxOrderVolumeWithPriceField_OffsetFlag;
		pQueryMaxOrderVolumeWithPriceField->HedgeFlag = pQueryMaxOrderVolumeWithPriceField_HedgeFlag;
		pQueryMaxOrderVolumeWithPriceField->MaxVolume = pQueryMaxOrderVolumeWithPriceField_MaxVolume;
		pQueryMaxOrderVolumeWithPriceField->Price = pQueryMaxOrderVolumeWithPriceField_Price;
		if(pQueryMaxOrderVolumeWithPriceField_ExchangeID != nullptr){ strcpy_s(pQueryMaxOrderVolumeWithPriceField->ExchangeID, pQueryMaxOrderVolumeWithPriceField_ExchangeID); pQueryMaxOrderVolumeWithPriceField_ExchangeID = nullptr; }
		if(pQueryMaxOrderVolumeWithPriceField_InvestUnitID != nullptr){ strcpy_s(pQueryMaxOrderVolumeWithPriceField->InvestUnitID, pQueryMaxOrderVolumeWithPriceField_InvestUnitID); pQueryMaxOrderVolumeWithPriceField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQueryMaxOrderVolumeWithPriceField *pQueryMaxOrderVolumeWithPriceField)
{
	if(pQueryMaxOrderVolumeWithPriceField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:c,s:c,s:c,s:i,s:d,s:y,s:y}"
		, "BrokerID", pQueryMaxOrderVolumeWithPriceField->BrokerID
		, "InvestorID", pQueryMaxOrderVolumeWithPriceField->InvestorID
		, "InstrumentID", pQueryMaxOrderVolumeWithPriceField->InstrumentID
		, "Direction", pQueryMaxOrderVolumeWithPriceField->Direction
		, "OffsetFlag", pQueryMaxOrderVolumeWithPriceField->OffsetFlag
		, "HedgeFlag", pQueryMaxOrderVolumeWithPriceField->HedgeFlag
		, "MaxVolume", pQueryMaxOrderVolumeWithPriceField->MaxVolume
		, "Price", pQueryMaxOrderVolumeWithPriceField->Price
		, "ExchangeID", pQueryMaxOrderVolumeWithPriceField->ExchangeID
		, "InvestUnitID", pQueryMaxOrderVolumeWithPriceField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryBrokerTradingParamsField *pQryBrokerTradingParamsField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "CurrencyID", "AccountID", nullptr};
	char *pQryBrokerTradingParamsField_BrokerID = nullptr;
	char *pQryBrokerTradingParamsField_InvestorID = nullptr;
	char *pQryBrokerTradingParamsField_CurrencyID = nullptr;
	char *pQryBrokerTradingParamsField_AccountID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryBrokerTradingParamsField, "|yyyy")
		, &pQryBrokerTradingParamsField_BrokerID
		, &pQryBrokerTradingParamsField_InvestorID
		, &pQryBrokerTradingParamsField_CurrencyID
		, &pQryBrokerTradingParamsField_AccountID
	PyCTP_PyDict_FromStruct_END
		if(pQryBrokerTradingParamsField_BrokerID != nullptr){ strcpy_s(pQryBrokerTradingParamsField->BrokerID, pQryBrokerTradingParamsField_BrokerID); pQryBrokerTradingParamsField_BrokerID = nullptr; }
		if(pQryBrokerTradingParamsField_InvestorID != nullptr){ strcpy_s(pQryBrokerTradingParamsField->InvestorID, pQryBrokerTradingParamsField_InvestorID); pQryBrokerTradingParamsField_InvestorID = nullptr; }
		if(pQryBrokerTradingParamsField_CurrencyID != nullptr){ strcpy_s(pQryBrokerTradingParamsField->CurrencyID, pQryBrokerTradingParamsField_CurrencyID); pQryBrokerTradingParamsField_CurrencyID = nullptr; }
		if(pQryBrokerTradingParamsField_AccountID != nullptr){ strcpy_s(pQryBrokerTradingParamsField->AccountID, pQryBrokerTradingParamsField_AccountID); pQryBrokerTradingParamsField_AccountID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryBrokerTradingParamsField *pQryBrokerTradingParamsField)
{
	if(pQryBrokerTradingParamsField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y}"
		, "BrokerID", pQryBrokerTradingParamsField->BrokerID
		, "InvestorID", pQryBrokerTradingParamsField->InvestorID
		, "CurrencyID", pQryBrokerTradingParamsField->CurrencyID
		, "AccountID", pQryBrokerTradingParamsField->AccountID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcBrokerTradingParamsField *pBrokerTradingParamsField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "MarginPriceType", "Algorithm", "AvailIncludeCloseProfit", "CurrencyID", "OptionRoyaltyPriceType", "AccountID", nullptr};
	char *pBrokerTradingParamsField_BrokerID = nullptr;
	char *pBrokerTradingParamsField_InvestorID = nullptr;
	char pBrokerTradingParamsField_MarginPriceType = 0;
	char pBrokerTradingParamsField_Algorithm = 0;
	char pBrokerTradingParamsField_AvailIncludeCloseProfit = 0;
	char *pBrokerTradingParamsField_CurrencyID = nullptr;
	char pBrokerTradingParamsField_OptionRoyaltyPriceType = 0;
	char *pBrokerTradingParamsField_AccountID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pBrokerTradingParamsField, "|yycccycy")
		, &pBrokerTradingParamsField_BrokerID
		, &pBrokerTradingParamsField_InvestorID
		, &pBrokerTradingParamsField_MarginPriceType
		, &pBrokerTradingParamsField_Algorithm
		, &pBrokerTradingParamsField_AvailIncludeCloseProfit
		, &pBrokerTradingParamsField_CurrencyID
		, &pBrokerTradingParamsField_OptionRoyaltyPriceType
		, &pBrokerTradingParamsField_AccountID
	PyCTP_PyDict_FromStruct_END
		if(pBrokerTradingParamsField_BrokerID != nullptr){ strcpy_s(pBrokerTradingParamsField->BrokerID, pBrokerTradingParamsField_BrokerID); pBrokerTradingParamsField_BrokerID = nullptr; }
		if(pBrokerTradingParamsField_InvestorID != nullptr){ strcpy_s(pBrokerTradingParamsField->InvestorID, pBrokerTradingParamsField_InvestorID); pBrokerTradingParamsField_InvestorID = nullptr; }
		pBrokerTradingParamsField->MarginPriceType = pBrokerTradingParamsField_MarginPriceType;
		pBrokerTradingParamsField->Algorithm = pBrokerTradingParamsField_Algorithm;
		pBrokerTradingParamsField->AvailIncludeCloseProfit = pBrokerTradingParamsField_AvailIncludeCloseProfit;
		if(pBrokerTradingParamsField_CurrencyID != nullptr){ strcpy_s(pBrokerTradingParamsField->CurrencyID, pBrokerTradingParamsField_CurrencyID); pBrokerTradingParamsField_CurrencyID = nullptr; }
		pBrokerTradingParamsField->OptionRoyaltyPriceType = pBrokerTradingParamsField_OptionRoyaltyPriceType;
		if(pBrokerTradingParamsField_AccountID != nullptr){ strcpy_s(pBrokerTradingParamsField->AccountID, pBrokerTradingParamsField_AccountID); pBrokerTradingParamsField_AccountID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcBrokerTradingParamsField *pBrokerTradingParamsField)
{
	if(pBrokerTradingParamsField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c,s:c,s:c,s:y,s:c,s:y}"
		, "BrokerID", pBrokerTradingParamsField->BrokerID
		, "InvestorID", pBrokerTradingParamsField->InvestorID
		, "MarginPriceType", pBrokerTradingParamsField->MarginPriceType
		, "Algorithm", pBrokerTradingParamsField->Algorithm
		, "AvailIncludeCloseProfit", pBrokerTradingParamsField->AvailIncludeCloseProfit
		, "CurrencyID", pBrokerTradingParamsField->CurrencyID
		, "OptionRoyaltyPriceType", pBrokerTradingParamsField->OptionRoyaltyPriceType
		, "AccountID", pBrokerTradingParamsField->AccountID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryBrokerTradingAlgosField *pQryBrokerTradingAlgosField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "ExchangeID", "InstrumentID", nullptr};
	char *pQryBrokerTradingAlgosField_BrokerID = nullptr;
	char *pQryBrokerTradingAlgosField_ExchangeID = nullptr;
	char *pQryBrokerTradingAlgosField_InstrumentID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryBrokerTradingAlgosField, "|yyy")
		, &pQryBrokerTradingAlgosField_BrokerID
		, &pQryBrokerTradingAlgosField_ExchangeID
		, &pQryBrokerTradingAlgosField_InstrumentID
	PyCTP_PyDict_FromStruct_END
		if(pQryBrokerTradingAlgosField_BrokerID != nullptr){ strcpy_s(pQryBrokerTradingAlgosField->BrokerID, pQryBrokerTradingAlgosField_BrokerID); pQryBrokerTradingAlgosField_BrokerID = nullptr; }
		if(pQryBrokerTradingAlgosField_ExchangeID != nullptr){ strcpy_s(pQryBrokerTradingAlgosField->ExchangeID, pQryBrokerTradingAlgosField_ExchangeID); pQryBrokerTradingAlgosField_ExchangeID = nullptr; }
		if(pQryBrokerTradingAlgosField_InstrumentID != nullptr){ strcpy_s(pQryBrokerTradingAlgosField->InstrumentID, pQryBrokerTradingAlgosField_InstrumentID); pQryBrokerTradingAlgosField_InstrumentID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryBrokerTradingAlgosField *pQryBrokerTradingAlgosField)
{
	if(pQryBrokerTradingAlgosField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pQryBrokerTradingAlgosField->BrokerID
		, "ExchangeID", pQryBrokerTradingAlgosField->ExchangeID
		, "InstrumentID", pQryBrokerTradingAlgosField->InstrumentID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcBrokerTradingAlgosField *pBrokerTradingAlgosField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "ExchangeID", "InstrumentID", "HandlePositionAlgoID", "FindMarginRateAlgoID", "HandleTradingAccountAlgoID", nullptr};
	char *pBrokerTradingAlgosField_BrokerID = nullptr;
	char *pBrokerTradingAlgosField_ExchangeID = nullptr;
	char *pBrokerTradingAlgosField_InstrumentID = nullptr;
	char pBrokerTradingAlgosField_HandlePositionAlgoID = 0;
	char pBrokerTradingAlgosField_FindMarginRateAlgoID = 0;
	char pBrokerTradingAlgosField_HandleTradingAccountAlgoID = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pBrokerTradingAlgosField, "|yyyccc")
		, &pBrokerTradingAlgosField_BrokerID
		, &pBrokerTradingAlgosField_ExchangeID
		, &pBrokerTradingAlgosField_InstrumentID
		, &pBrokerTradingAlgosField_HandlePositionAlgoID
		, &pBrokerTradingAlgosField_FindMarginRateAlgoID
		, &pBrokerTradingAlgosField_HandleTradingAccountAlgoID
	PyCTP_PyDict_FromStruct_END
		if(pBrokerTradingAlgosField_BrokerID != nullptr){ strcpy_s(pBrokerTradingAlgosField->BrokerID, pBrokerTradingAlgosField_BrokerID); pBrokerTradingAlgosField_BrokerID = nullptr; }
		if(pBrokerTradingAlgosField_ExchangeID != nullptr){ strcpy_s(pBrokerTradingAlgosField->ExchangeID, pBrokerTradingAlgosField_ExchangeID); pBrokerTradingAlgosField_ExchangeID = nullptr; }
		if(pBrokerTradingAlgosField_InstrumentID != nullptr){ strcpy_s(pBrokerTradingAlgosField->InstrumentID, pBrokerTradingAlgosField_InstrumentID); pBrokerTradingAlgosField_InstrumentID = nullptr; }
		pBrokerTradingAlgosField->HandlePositionAlgoID = pBrokerTradingAlgosField_HandlePositionAlgoID;
		pBrokerTradingAlgosField->FindMarginRateAlgoID = pBrokerTradingAlgosField_FindMarginRateAlgoID;
		pBrokerTradingAlgosField->HandleTradingAccountAlgoID = pBrokerTradingAlgosField_HandleTradingAccountAlgoID;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcBrokerTradingAlgosField *pBrokerTradingAlgosField)
{
	if(pBrokerTradingAlgosField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:c,s:c,s:c}"
		, "BrokerID", pBrokerTradingAlgosField->BrokerID
		, "ExchangeID", pBrokerTradingAlgosField->ExchangeID
		, "InstrumentID", pBrokerTradingAlgosField->InstrumentID
		, "HandlePositionAlgoID", pBrokerTradingAlgosField->HandlePositionAlgoID
		, "FindMarginRateAlgoID", pBrokerTradingAlgosField->FindMarginRateAlgoID
		, "HandleTradingAccountAlgoID", pBrokerTradingAlgosField->HandleTradingAccountAlgoID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQueryBrokerDepositField *pQueryBrokerDepositField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "ExchangeID", nullptr};
	char *pQueryBrokerDepositField_BrokerID = nullptr;
	char *pQueryBrokerDepositField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQueryBrokerDepositField, "|yy")
		, &pQueryBrokerDepositField_BrokerID
		, &pQueryBrokerDepositField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pQueryBrokerDepositField_BrokerID != nullptr){ strcpy_s(pQueryBrokerDepositField->BrokerID, pQueryBrokerDepositField_BrokerID); pQueryBrokerDepositField_BrokerID = nullptr; }
		if(pQueryBrokerDepositField_ExchangeID != nullptr){ strcpy_s(pQueryBrokerDepositField->ExchangeID, pQueryBrokerDepositField_ExchangeID); pQueryBrokerDepositField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQueryBrokerDepositField *pQueryBrokerDepositField)
{
	if(pQueryBrokerDepositField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQueryBrokerDepositField->BrokerID
		, "ExchangeID", pQueryBrokerDepositField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcBrokerDepositField *pBrokerDepositField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "BrokerID", "ParticipantID", "ExchangeID", "PreBalance", "CurrMargin", "CloseProfit", "Balance", "Deposit", "Withdraw", "Available", "Reserve", "FrozenMargin", nullptr};
	char *pBrokerDepositField_TradingDay = nullptr;
	char *pBrokerDepositField_BrokerID = nullptr;
	char *pBrokerDepositField_ParticipantID = nullptr;
	char *pBrokerDepositField_ExchangeID = nullptr;
	double pBrokerDepositField_PreBalance = 0.0;
	double pBrokerDepositField_CurrMargin = 0.0;
	double pBrokerDepositField_CloseProfit = 0.0;
	double pBrokerDepositField_Balance = 0.0;
	double pBrokerDepositField_Deposit = 0.0;
	double pBrokerDepositField_Withdraw = 0.0;
	double pBrokerDepositField_Available = 0.0;
	double pBrokerDepositField_Reserve = 0.0;
	double pBrokerDepositField_FrozenMargin = 0.0;
	PyCTP_PyDict_FromStruct_BEGIN(pBrokerDepositField, "|yyyyddddddddd")
		, &pBrokerDepositField_TradingDay
		, &pBrokerDepositField_BrokerID
		, &pBrokerDepositField_ParticipantID
		, &pBrokerDepositField_ExchangeID
		, &pBrokerDepositField_PreBalance
		, &pBrokerDepositField_CurrMargin
		, &pBrokerDepositField_CloseProfit
		, &pBrokerDepositField_Balance
		, &pBrokerDepositField_Deposit
		, &pBrokerDepositField_Withdraw
		, &pBrokerDepositField_Available
		, &pBrokerDepositField_Reserve
		, &pBrokerDepositField_FrozenMargin
	PyCTP_PyDict_FromStruct_END
		if(pBrokerDepositField_TradingDay != nullptr){ strcpy_s(pBrokerDepositField->TradingDay, pBrokerDepositField_TradingDay); pBrokerDepositField_TradingDay = nullptr; }
		if(pBrokerDepositField_BrokerID != nullptr){ strcpy_s(pBrokerDepositField->BrokerID, pBrokerDepositField_BrokerID); pBrokerDepositField_BrokerID = nullptr; }
		if(pBrokerDepositField_ParticipantID != nullptr){ strcpy_s(pBrokerDepositField->ParticipantID, pBrokerDepositField_ParticipantID); pBrokerDepositField_ParticipantID = nullptr; }
		if(pBrokerDepositField_ExchangeID != nullptr){ strcpy_s(pBrokerDepositField->ExchangeID, pBrokerDepositField_ExchangeID); pBrokerDepositField_ExchangeID = nullptr; }
		pBrokerDepositField->PreBalance = pBrokerDepositField_PreBalance;
		pBrokerDepositField->CurrMargin = pBrokerDepositField_CurrMargin;
		pBrokerDepositField->CloseProfit = pBrokerDepositField_CloseProfit;
		pBrokerDepositField->Balance = pBrokerDepositField_Balance;
		pBrokerDepositField->Deposit = pBrokerDepositField_Deposit;
		pBrokerDepositField->Withdraw = pBrokerDepositField_Withdraw;
		pBrokerDepositField->Available = pBrokerDepositField_Available;
		pBrokerDepositField->Reserve = pBrokerDepositField_Reserve;
		pBrokerDepositField->FrozenMargin = pBrokerDepositField_FrozenMargin;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcBrokerDepositField *pBrokerDepositField)
{
	if(pBrokerDepositField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d}"
		, "TradingDay", pBrokerDepositField->TradingDay
		, "BrokerID", pBrokerDepositField->BrokerID
		, "ParticipantID", pBrokerDepositField->ParticipantID
		, "ExchangeID", pBrokerDepositField->ExchangeID
		, "PreBalance", pBrokerDepositField->PreBalance
		, "CurrMargin", pBrokerDepositField->CurrMargin
		, "CloseProfit", pBrokerDepositField->CloseProfit
		, "Balance", pBrokerDepositField->Balance
		, "Deposit", pBrokerDepositField->Deposit
		, "Withdraw", pBrokerDepositField->Withdraw
		, "Available", pBrokerDepositField->Available
		, "Reserve", pBrokerDepositField->Reserve
		, "FrozenMargin", pBrokerDepositField->FrozenMargin
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryCFMMCBrokerKeyField *pQryCFMMCBrokerKeyField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", nullptr};
	char *pQryCFMMCBrokerKeyField_BrokerID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryCFMMCBrokerKeyField, "|y")
		, &pQryCFMMCBrokerKeyField_BrokerID
	PyCTP_PyDict_FromStruct_END
		if(pQryCFMMCBrokerKeyField_BrokerID != nullptr){ strcpy_s(pQryCFMMCBrokerKeyField->BrokerID, pQryCFMMCBrokerKeyField_BrokerID); pQryCFMMCBrokerKeyField_BrokerID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryCFMMCBrokerKeyField *pQryCFMMCBrokerKeyField)
{
	if(pQryCFMMCBrokerKeyField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y}"
		, "BrokerID", pQryCFMMCBrokerKeyField->BrokerID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcCFMMCBrokerKeyField *pCFMMCBrokerKeyField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "ParticipantID", "CreateDate", "CreateTime", "KeyID", "CurrentKey", "KeyKind", nullptr};
	char *pCFMMCBrokerKeyField_BrokerID = nullptr;
	char *pCFMMCBrokerKeyField_ParticipantID = nullptr;
	char *pCFMMCBrokerKeyField_CreateDate = nullptr;
	char *pCFMMCBrokerKeyField_CreateTime = nullptr;
	int pCFMMCBrokerKeyField_KeyID = 0;
	char *pCFMMCBrokerKeyField_CurrentKey = nullptr;
	char pCFMMCBrokerKeyField_KeyKind = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pCFMMCBrokerKeyField, "|yyyyiyc")
		, &pCFMMCBrokerKeyField_BrokerID
		, &pCFMMCBrokerKeyField_ParticipantID
		, &pCFMMCBrokerKeyField_CreateDate
		, &pCFMMCBrokerKeyField_CreateTime
		, &pCFMMCBrokerKeyField_KeyID
		, &pCFMMCBrokerKeyField_CurrentKey
		, &pCFMMCBrokerKeyField_KeyKind
	PyCTP_PyDict_FromStruct_END
		if(pCFMMCBrokerKeyField_BrokerID != nullptr){ strcpy_s(pCFMMCBrokerKeyField->BrokerID, pCFMMCBrokerKeyField_BrokerID); pCFMMCBrokerKeyField_BrokerID = nullptr; }
		if(pCFMMCBrokerKeyField_ParticipantID != nullptr){ strcpy_s(pCFMMCBrokerKeyField->ParticipantID, pCFMMCBrokerKeyField_ParticipantID); pCFMMCBrokerKeyField_ParticipantID = nullptr; }
		if(pCFMMCBrokerKeyField_CreateDate != nullptr){ strcpy_s(pCFMMCBrokerKeyField->CreateDate, pCFMMCBrokerKeyField_CreateDate); pCFMMCBrokerKeyField_CreateDate = nullptr; }
		if(pCFMMCBrokerKeyField_CreateTime != nullptr){ strcpy_s(pCFMMCBrokerKeyField->CreateTime, pCFMMCBrokerKeyField_CreateTime); pCFMMCBrokerKeyField_CreateTime = nullptr; }
		pCFMMCBrokerKeyField->KeyID = pCFMMCBrokerKeyField_KeyID;
		if(pCFMMCBrokerKeyField_CurrentKey != nullptr){ strcpy_s(pCFMMCBrokerKeyField->CurrentKey, pCFMMCBrokerKeyField_CurrentKey); pCFMMCBrokerKeyField_CurrentKey = nullptr; }
		pCFMMCBrokerKeyField->KeyKind = pCFMMCBrokerKeyField_KeyKind;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcCFMMCBrokerKeyField *pCFMMCBrokerKeyField)
{
	if(pCFMMCBrokerKeyField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:i,s:y,s:c}"
		, "BrokerID", pCFMMCBrokerKeyField->BrokerID
		, "ParticipantID", pCFMMCBrokerKeyField->ParticipantID
		, "CreateDate", pCFMMCBrokerKeyField->CreateDate
		, "CreateTime", pCFMMCBrokerKeyField->CreateTime
		, "KeyID", pCFMMCBrokerKeyField->KeyID
		, "CurrentKey", pCFMMCBrokerKeyField->CurrentKey
		, "KeyKind", pCFMMCBrokerKeyField->KeyKind
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcCFMMCTradingAccountKeyField *pCFMMCTradingAccountKeyField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "ParticipantID", "AccountID", "KeyID", "CurrentKey", nullptr};
	char *pCFMMCTradingAccountKeyField_BrokerID = nullptr;
	char *pCFMMCTradingAccountKeyField_ParticipantID = nullptr;
	char *pCFMMCTradingAccountKeyField_AccountID = nullptr;
	int pCFMMCTradingAccountKeyField_KeyID = 0;
	char *pCFMMCTradingAccountKeyField_CurrentKey = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pCFMMCTradingAccountKeyField, "|yyyiy")
		, &pCFMMCTradingAccountKeyField_BrokerID
		, &pCFMMCTradingAccountKeyField_ParticipantID
		, &pCFMMCTradingAccountKeyField_AccountID
		, &pCFMMCTradingAccountKeyField_KeyID
		, &pCFMMCTradingAccountKeyField_CurrentKey
	PyCTP_PyDict_FromStruct_END
		if(pCFMMCTradingAccountKeyField_BrokerID != nullptr){ strcpy_s(pCFMMCTradingAccountKeyField->BrokerID, pCFMMCTradingAccountKeyField_BrokerID); pCFMMCTradingAccountKeyField_BrokerID = nullptr; }
		if(pCFMMCTradingAccountKeyField_ParticipantID != nullptr){ strcpy_s(pCFMMCTradingAccountKeyField->ParticipantID, pCFMMCTradingAccountKeyField_ParticipantID); pCFMMCTradingAccountKeyField_ParticipantID = nullptr; }
		if(pCFMMCTradingAccountKeyField_AccountID != nullptr){ strcpy_s(pCFMMCTradingAccountKeyField->AccountID, pCFMMCTradingAccountKeyField_AccountID); pCFMMCTradingAccountKeyField_AccountID = nullptr; }
		pCFMMCTradingAccountKeyField->KeyID = pCFMMCTradingAccountKeyField_KeyID;
		if(pCFMMCTradingAccountKeyField_CurrentKey != nullptr){ strcpy_s(pCFMMCTradingAccountKeyField->CurrentKey, pCFMMCTradingAccountKeyField_CurrentKey); pCFMMCTradingAccountKeyField_CurrentKey = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcCFMMCTradingAccountKeyField *pCFMMCTradingAccountKeyField)
{
	if(pCFMMCTradingAccountKeyField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:i,s:y}"
		, "BrokerID", pCFMMCTradingAccountKeyField->BrokerID
		, "ParticipantID", pCFMMCTradingAccountKeyField->ParticipantID
		, "AccountID", pCFMMCTradingAccountKeyField->AccountID
		, "KeyID", pCFMMCTradingAccountKeyField->KeyID
		, "CurrentKey", pCFMMCTradingAccountKeyField->CurrentKey
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryCFMMCTradingAccountKeyField *pQryCFMMCTradingAccountKeyField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", nullptr};
	char *pQryCFMMCTradingAccountKeyField_BrokerID = nullptr;
	char *pQryCFMMCTradingAccountKeyField_InvestorID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryCFMMCTradingAccountKeyField, "|yy")
		, &pQryCFMMCTradingAccountKeyField_BrokerID
		, &pQryCFMMCTradingAccountKeyField_InvestorID
	PyCTP_PyDict_FromStruct_END
		if(pQryCFMMCTradingAccountKeyField_BrokerID != nullptr){ strcpy_s(pQryCFMMCTradingAccountKeyField->BrokerID, pQryCFMMCTradingAccountKeyField_BrokerID); pQryCFMMCTradingAccountKeyField_BrokerID = nullptr; }
		if(pQryCFMMCTradingAccountKeyField_InvestorID != nullptr){ strcpy_s(pQryCFMMCTradingAccountKeyField->InvestorID, pQryCFMMCTradingAccountKeyField_InvestorID); pQryCFMMCTradingAccountKeyField_InvestorID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryCFMMCTradingAccountKeyField *pQryCFMMCTradingAccountKeyField)
{
	if(pQryCFMMCTradingAccountKeyField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQryCFMMCTradingAccountKeyField->BrokerID
		, "InvestorID", pQryCFMMCTradingAccountKeyField->InvestorID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcBrokerUserOTPParamField *pBrokerUserOTPParamField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "OTPVendorsID", "SerialNumber", "AuthKey", "LastDrift", "LastSuccess", "OTPType", nullptr};
	char *pBrokerUserOTPParamField_BrokerID = nullptr;
	char *pBrokerUserOTPParamField_UserID = nullptr;
	char *pBrokerUserOTPParamField_OTPVendorsID = nullptr;
	char *pBrokerUserOTPParamField_SerialNumber = nullptr;
	char *pBrokerUserOTPParamField_AuthKey = nullptr;
	int pBrokerUserOTPParamField_LastDrift = 0;
	int pBrokerUserOTPParamField_LastSuccess = 0;
	char pBrokerUserOTPParamField_OTPType = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pBrokerUserOTPParamField, "|yyyyyiic")
		, &pBrokerUserOTPParamField_BrokerID
		, &pBrokerUserOTPParamField_UserID
		, &pBrokerUserOTPParamField_OTPVendorsID
		, &pBrokerUserOTPParamField_SerialNumber
		, &pBrokerUserOTPParamField_AuthKey
		, &pBrokerUserOTPParamField_LastDrift
		, &pBrokerUserOTPParamField_LastSuccess
		, &pBrokerUserOTPParamField_OTPType
	PyCTP_PyDict_FromStruct_END
		if(pBrokerUserOTPParamField_BrokerID != nullptr){ strcpy_s(pBrokerUserOTPParamField->BrokerID, pBrokerUserOTPParamField_BrokerID); pBrokerUserOTPParamField_BrokerID = nullptr; }
		if(pBrokerUserOTPParamField_UserID != nullptr){ strcpy_s(pBrokerUserOTPParamField->UserID, pBrokerUserOTPParamField_UserID); pBrokerUserOTPParamField_UserID = nullptr; }
		if(pBrokerUserOTPParamField_OTPVendorsID != nullptr){ strcpy_s(pBrokerUserOTPParamField->OTPVendorsID, pBrokerUserOTPParamField_OTPVendorsID); pBrokerUserOTPParamField_OTPVendorsID = nullptr; }
		if(pBrokerUserOTPParamField_SerialNumber != nullptr){ strcpy_s(pBrokerUserOTPParamField->SerialNumber, pBrokerUserOTPParamField_SerialNumber); pBrokerUserOTPParamField_SerialNumber = nullptr; }
		if(pBrokerUserOTPParamField_AuthKey != nullptr){ strcpy_s(pBrokerUserOTPParamField->AuthKey, pBrokerUserOTPParamField_AuthKey); pBrokerUserOTPParamField_AuthKey = nullptr; }
		pBrokerUserOTPParamField->LastDrift = pBrokerUserOTPParamField_LastDrift;
		pBrokerUserOTPParamField->LastSuccess = pBrokerUserOTPParamField_LastSuccess;
		pBrokerUserOTPParamField->OTPType = pBrokerUserOTPParamField_OTPType;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcBrokerUserOTPParamField *pBrokerUserOTPParamField)
{
	if(pBrokerUserOTPParamField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:i,s:i,s:c}"
		, "BrokerID", pBrokerUserOTPParamField->BrokerID
		, "UserID", pBrokerUserOTPParamField->UserID
		, "OTPVendorsID", pBrokerUserOTPParamField->OTPVendorsID
		, "SerialNumber", pBrokerUserOTPParamField->SerialNumber
		, "AuthKey", pBrokerUserOTPParamField->AuthKey
		, "LastDrift", pBrokerUserOTPParamField->LastDrift
		, "LastSuccess", pBrokerUserOTPParamField->LastSuccess
		, "OTPType", pBrokerUserOTPParamField->OTPType
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcManualSyncBrokerUserOTPField *pManualSyncBrokerUserOTPField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "OTPType", "FirstOTP", "SecondOTP", nullptr};
	char *pManualSyncBrokerUserOTPField_BrokerID = nullptr;
	char *pManualSyncBrokerUserOTPField_UserID = nullptr;
	char pManualSyncBrokerUserOTPField_OTPType = 0;
	char *pManualSyncBrokerUserOTPField_FirstOTP = nullptr;
	char *pManualSyncBrokerUserOTPField_SecondOTP = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pManualSyncBrokerUserOTPField, "|yycyy")
		, &pManualSyncBrokerUserOTPField_BrokerID
		, &pManualSyncBrokerUserOTPField_UserID
		, &pManualSyncBrokerUserOTPField_OTPType
		, &pManualSyncBrokerUserOTPField_FirstOTP
		, &pManualSyncBrokerUserOTPField_SecondOTP
	PyCTP_PyDict_FromStruct_END
		if(pManualSyncBrokerUserOTPField_BrokerID != nullptr){ strcpy_s(pManualSyncBrokerUserOTPField->BrokerID, pManualSyncBrokerUserOTPField_BrokerID); pManualSyncBrokerUserOTPField_BrokerID = nullptr; }
		if(pManualSyncBrokerUserOTPField_UserID != nullptr){ strcpy_s(pManualSyncBrokerUserOTPField->UserID, pManualSyncBrokerUserOTPField_UserID); pManualSyncBrokerUserOTPField_UserID = nullptr; }
		pManualSyncBrokerUserOTPField->OTPType = pManualSyncBrokerUserOTPField_OTPType;
		if(pManualSyncBrokerUserOTPField_FirstOTP != nullptr){ strcpy_s(pManualSyncBrokerUserOTPField->FirstOTP, pManualSyncBrokerUserOTPField_FirstOTP); pManualSyncBrokerUserOTPField_FirstOTP = nullptr; }
		if(pManualSyncBrokerUserOTPField_SecondOTP != nullptr){ strcpy_s(pManualSyncBrokerUserOTPField->SecondOTP, pManualSyncBrokerUserOTPField_SecondOTP); pManualSyncBrokerUserOTPField_SecondOTP = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcManualSyncBrokerUserOTPField *pManualSyncBrokerUserOTPField)
{
	if(pManualSyncBrokerUserOTPField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c,s:y,s:y}"
		, "BrokerID", pManualSyncBrokerUserOTPField->BrokerID
		, "UserID", pManualSyncBrokerUserOTPField->UserID
		, "OTPType", pManualSyncBrokerUserOTPField->OTPType
		, "FirstOTP", pManualSyncBrokerUserOTPField->FirstOTP
		, "SecondOTP", pManualSyncBrokerUserOTPField->SecondOTP
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcCommRateModelField *pCommRateModelField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "CommModelID", "CommModelName", nullptr};
	char *pCommRateModelField_BrokerID = nullptr;
	char *pCommRateModelField_CommModelID = nullptr;
	char *pCommRateModelField_CommModelName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pCommRateModelField, "|yyy")
		, &pCommRateModelField_BrokerID
		, &pCommRateModelField_CommModelID
		, &pCommRateModelField_CommModelName
	PyCTP_PyDict_FromStruct_END
		if(pCommRateModelField_BrokerID != nullptr){ strcpy_s(pCommRateModelField->BrokerID, pCommRateModelField_BrokerID); pCommRateModelField_BrokerID = nullptr; }
		if(pCommRateModelField_CommModelID != nullptr){ strcpy_s(pCommRateModelField->CommModelID, pCommRateModelField_CommModelID); pCommRateModelField_CommModelID = nullptr; }
		if(pCommRateModelField_CommModelName != nullptr){ strcpy_s(pCommRateModelField->CommModelName, pCommRateModelField_CommModelName); pCommRateModelField_CommModelName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcCommRateModelField *pCommRateModelField)
{
	if(pCommRateModelField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pCommRateModelField->BrokerID
		, "CommModelID", pCommRateModelField->CommModelID
		, "CommModelName", pCommRateModelField->CommModelName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryCommRateModelField *pQryCommRateModelField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "CommModelID", nullptr};
	char *pQryCommRateModelField_BrokerID = nullptr;
	char *pQryCommRateModelField_CommModelID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryCommRateModelField, "|yy")
		, &pQryCommRateModelField_BrokerID
		, &pQryCommRateModelField_CommModelID
	PyCTP_PyDict_FromStruct_END
		if(pQryCommRateModelField_BrokerID != nullptr){ strcpy_s(pQryCommRateModelField->BrokerID, pQryCommRateModelField_BrokerID); pQryCommRateModelField_BrokerID = nullptr; }
		if(pQryCommRateModelField_CommModelID != nullptr){ strcpy_s(pQryCommRateModelField->CommModelID, pQryCommRateModelField_CommModelID); pQryCommRateModelField_CommModelID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryCommRateModelField *pQryCommRateModelField)
{
	if(pQryCommRateModelField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQryCommRateModelField->BrokerID
		, "CommModelID", pQryCommRateModelField->CommModelID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcMarginModelField *pMarginModelField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "MarginModelID", "MarginModelName", nullptr};
	char *pMarginModelField_BrokerID = nullptr;
	char *pMarginModelField_MarginModelID = nullptr;
	char *pMarginModelField_MarginModelName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pMarginModelField, "|yyy")
		, &pMarginModelField_BrokerID
		, &pMarginModelField_MarginModelID
		, &pMarginModelField_MarginModelName
	PyCTP_PyDict_FromStruct_END
		if(pMarginModelField_BrokerID != nullptr){ strcpy_s(pMarginModelField->BrokerID, pMarginModelField_BrokerID); pMarginModelField_BrokerID = nullptr; }
		if(pMarginModelField_MarginModelID != nullptr){ strcpy_s(pMarginModelField->MarginModelID, pMarginModelField_MarginModelID); pMarginModelField_MarginModelID = nullptr; }
		if(pMarginModelField_MarginModelName != nullptr){ strcpy_s(pMarginModelField->MarginModelName, pMarginModelField_MarginModelName); pMarginModelField_MarginModelName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcMarginModelField *pMarginModelField)
{
	if(pMarginModelField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pMarginModelField->BrokerID
		, "MarginModelID", pMarginModelField->MarginModelID
		, "MarginModelName", pMarginModelField->MarginModelName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryMarginModelField *pQryMarginModelField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "MarginModelID", nullptr};
	char *pQryMarginModelField_BrokerID = nullptr;
	char *pQryMarginModelField_MarginModelID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryMarginModelField, "|yy")
		, &pQryMarginModelField_BrokerID
		, &pQryMarginModelField_MarginModelID
	PyCTP_PyDict_FromStruct_END
		if(pQryMarginModelField_BrokerID != nullptr){ strcpy_s(pQryMarginModelField->BrokerID, pQryMarginModelField_BrokerID); pQryMarginModelField_BrokerID = nullptr; }
		if(pQryMarginModelField_MarginModelID != nullptr){ strcpy_s(pQryMarginModelField->MarginModelID, pQryMarginModelField_MarginModelID); pQryMarginModelField_MarginModelID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryMarginModelField *pQryMarginModelField)
{
	if(pQryMarginModelField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQryMarginModelField->BrokerID
		, "MarginModelID", pQryMarginModelField->MarginModelID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcEWarrantOffsetField *pEWarrantOffsetField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "BrokerID", "InvestorID", "ExchangeID", "InstrumentID", "Direction", "HedgeFlag", "Volume", "InvestUnitID", nullptr};
	char *pEWarrantOffsetField_TradingDay = nullptr;
	char *pEWarrantOffsetField_BrokerID = nullptr;
	char *pEWarrantOffsetField_InvestorID = nullptr;
	char *pEWarrantOffsetField_ExchangeID = nullptr;
	char *pEWarrantOffsetField_InstrumentID = nullptr;
	char pEWarrantOffsetField_Direction = 0;
	char pEWarrantOffsetField_HedgeFlag = 0;
	int pEWarrantOffsetField_Volume = 0;
	char *pEWarrantOffsetField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pEWarrantOffsetField, "|yyyyycciy")
		, &pEWarrantOffsetField_TradingDay
		, &pEWarrantOffsetField_BrokerID
		, &pEWarrantOffsetField_InvestorID
		, &pEWarrantOffsetField_ExchangeID
		, &pEWarrantOffsetField_InstrumentID
		, &pEWarrantOffsetField_Direction
		, &pEWarrantOffsetField_HedgeFlag
		, &pEWarrantOffsetField_Volume
		, &pEWarrantOffsetField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pEWarrantOffsetField_TradingDay != nullptr){ strcpy_s(pEWarrantOffsetField->TradingDay, pEWarrantOffsetField_TradingDay); pEWarrantOffsetField_TradingDay = nullptr; }
		if(pEWarrantOffsetField_BrokerID != nullptr){ strcpy_s(pEWarrantOffsetField->BrokerID, pEWarrantOffsetField_BrokerID); pEWarrantOffsetField_BrokerID = nullptr; }
		if(pEWarrantOffsetField_InvestorID != nullptr){ strcpy_s(pEWarrantOffsetField->InvestorID, pEWarrantOffsetField_InvestorID); pEWarrantOffsetField_InvestorID = nullptr; }
		if(pEWarrantOffsetField_ExchangeID != nullptr){ strcpy_s(pEWarrantOffsetField->ExchangeID, pEWarrantOffsetField_ExchangeID); pEWarrantOffsetField_ExchangeID = nullptr; }
		if(pEWarrantOffsetField_InstrumentID != nullptr){ strcpy_s(pEWarrantOffsetField->InstrumentID, pEWarrantOffsetField_InstrumentID); pEWarrantOffsetField_InstrumentID = nullptr; }
		pEWarrantOffsetField->Direction = pEWarrantOffsetField_Direction;
		pEWarrantOffsetField->HedgeFlag = pEWarrantOffsetField_HedgeFlag;
		pEWarrantOffsetField->Volume = pEWarrantOffsetField_Volume;
		if(pEWarrantOffsetField_InvestUnitID != nullptr){ strcpy_s(pEWarrantOffsetField->InvestUnitID, pEWarrantOffsetField_InvestUnitID); pEWarrantOffsetField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcEWarrantOffsetField *pEWarrantOffsetField)
{
	if(pEWarrantOffsetField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:c,s:c,s:i,s:y}"
		, "TradingDay", pEWarrantOffsetField->TradingDay
		, "BrokerID", pEWarrantOffsetField->BrokerID
		, "InvestorID", pEWarrantOffsetField->InvestorID
		, "ExchangeID", pEWarrantOffsetField->ExchangeID
		, "InstrumentID", pEWarrantOffsetField->InstrumentID
		, "Direction", pEWarrantOffsetField->Direction
		, "HedgeFlag", pEWarrantOffsetField->HedgeFlag
		, "Volume", pEWarrantOffsetField->Volume
		, "InvestUnitID", pEWarrantOffsetField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryEWarrantOffsetField *pQryEWarrantOffsetField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "ExchangeID", "InstrumentID", "InvestUnitID", nullptr};
	char *pQryEWarrantOffsetField_BrokerID = nullptr;
	char *pQryEWarrantOffsetField_InvestorID = nullptr;
	char *pQryEWarrantOffsetField_ExchangeID = nullptr;
	char *pQryEWarrantOffsetField_InstrumentID = nullptr;
	char *pQryEWarrantOffsetField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryEWarrantOffsetField, "|yyyyy")
		, &pQryEWarrantOffsetField_BrokerID
		, &pQryEWarrantOffsetField_InvestorID
		, &pQryEWarrantOffsetField_ExchangeID
		, &pQryEWarrantOffsetField_InstrumentID
		, &pQryEWarrantOffsetField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryEWarrantOffsetField_BrokerID != nullptr){ strcpy_s(pQryEWarrantOffsetField->BrokerID, pQryEWarrantOffsetField_BrokerID); pQryEWarrantOffsetField_BrokerID = nullptr; }
		if(pQryEWarrantOffsetField_InvestorID != nullptr){ strcpy_s(pQryEWarrantOffsetField->InvestorID, pQryEWarrantOffsetField_InvestorID); pQryEWarrantOffsetField_InvestorID = nullptr; }
		if(pQryEWarrantOffsetField_ExchangeID != nullptr){ strcpy_s(pQryEWarrantOffsetField->ExchangeID, pQryEWarrantOffsetField_ExchangeID); pQryEWarrantOffsetField_ExchangeID = nullptr; }
		if(pQryEWarrantOffsetField_InstrumentID != nullptr){ strcpy_s(pQryEWarrantOffsetField->InstrumentID, pQryEWarrantOffsetField_InstrumentID); pQryEWarrantOffsetField_InstrumentID = nullptr; }
		if(pQryEWarrantOffsetField_InvestUnitID != nullptr){ strcpy_s(pQryEWarrantOffsetField->InvestUnitID, pQryEWarrantOffsetField_InvestUnitID); pQryEWarrantOffsetField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryEWarrantOffsetField *pQryEWarrantOffsetField)
{
	if(pQryEWarrantOffsetField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQryEWarrantOffsetField->BrokerID
		, "InvestorID", pQryEWarrantOffsetField->InvestorID
		, "ExchangeID", pQryEWarrantOffsetField->ExchangeID
		, "InstrumentID", pQryEWarrantOffsetField->InstrumentID
		, "InvestUnitID", pQryEWarrantOffsetField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryInvestorProductGroupMarginField *pQryInvestorProductGroupMarginField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "ProductGroupID", "HedgeFlag", "ExchangeID", "InvestUnitID", nullptr};
	char *pQryInvestorProductGroupMarginField_BrokerID = nullptr;
	char *pQryInvestorProductGroupMarginField_InvestorID = nullptr;
	char *pQryInvestorProductGroupMarginField_ProductGroupID = nullptr;
	char pQryInvestorProductGroupMarginField_HedgeFlag = 0;
	char *pQryInvestorProductGroupMarginField_ExchangeID = nullptr;
	char *pQryInvestorProductGroupMarginField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryInvestorProductGroupMarginField, "|yyycyy")
		, &pQryInvestorProductGroupMarginField_BrokerID
		, &pQryInvestorProductGroupMarginField_InvestorID
		, &pQryInvestorProductGroupMarginField_ProductGroupID
		, &pQryInvestorProductGroupMarginField_HedgeFlag
		, &pQryInvestorProductGroupMarginField_ExchangeID
		, &pQryInvestorProductGroupMarginField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQryInvestorProductGroupMarginField_BrokerID != nullptr){ strcpy_s(pQryInvestorProductGroupMarginField->BrokerID, pQryInvestorProductGroupMarginField_BrokerID); pQryInvestorProductGroupMarginField_BrokerID = nullptr; }
		if(pQryInvestorProductGroupMarginField_InvestorID != nullptr){ strcpy_s(pQryInvestorProductGroupMarginField->InvestorID, pQryInvestorProductGroupMarginField_InvestorID); pQryInvestorProductGroupMarginField_InvestorID = nullptr; }
		if(pQryInvestorProductGroupMarginField_ProductGroupID != nullptr){ strcpy_s(pQryInvestorProductGroupMarginField->ProductGroupID, pQryInvestorProductGroupMarginField_ProductGroupID); pQryInvestorProductGroupMarginField_ProductGroupID = nullptr; }
		pQryInvestorProductGroupMarginField->HedgeFlag = pQryInvestorProductGroupMarginField_HedgeFlag;
		if(pQryInvestorProductGroupMarginField_ExchangeID != nullptr){ strcpy_s(pQryInvestorProductGroupMarginField->ExchangeID, pQryInvestorProductGroupMarginField_ExchangeID); pQryInvestorProductGroupMarginField_ExchangeID = nullptr; }
		if(pQryInvestorProductGroupMarginField_InvestUnitID != nullptr){ strcpy_s(pQryInvestorProductGroupMarginField->InvestUnitID, pQryInvestorProductGroupMarginField_InvestUnitID); pQryInvestorProductGroupMarginField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryInvestorProductGroupMarginField *pQryInvestorProductGroupMarginField)
{
	if(pQryInvestorProductGroupMarginField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:c,s:y,s:y}"
		, "BrokerID", pQryInvestorProductGroupMarginField->BrokerID
		, "InvestorID", pQryInvestorProductGroupMarginField->InvestorID
		, "ProductGroupID", pQryInvestorProductGroupMarginField->ProductGroupID
		, "HedgeFlag", pQryInvestorProductGroupMarginField->HedgeFlag
		, "ExchangeID", pQryInvestorProductGroupMarginField->ExchangeID
		, "InvestUnitID", pQryInvestorProductGroupMarginField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcInvestorProductGroupMarginField *pInvestorProductGroupMarginField, PyObject *dict)
{
	static char *kwlist[] = {"ProductGroupID", "BrokerID", "InvestorID", "TradingDay", "SettlementID", "FrozenMargin", "LongFrozenMargin", "ShortFrozenMargin", "UseMargin", "LongUseMargin", "ShortUseMargin", "ExchMargin", "LongExchMargin", "ShortExchMargin", "CloseProfit", "FrozenCommission", "Commission", "FrozenCash", "CashIn", "PositionProfit", "OffsetAmount", "LongOffsetAmount", "ShortOffsetAmount", "ExchOffsetAmount", "LongExchOffsetAmount", "ShortExchOffsetAmount", "HedgeFlag", "ExchangeID", "InvestUnitID", nullptr};
	char *pInvestorProductGroupMarginField_ProductGroupID = nullptr;
	char *pInvestorProductGroupMarginField_BrokerID = nullptr;
	char *pInvestorProductGroupMarginField_InvestorID = nullptr;
	char *pInvestorProductGroupMarginField_TradingDay = nullptr;
	int pInvestorProductGroupMarginField_SettlementID = 0;
	double pInvestorProductGroupMarginField_FrozenMargin = 0.0;
	double pInvestorProductGroupMarginField_LongFrozenMargin = 0.0;
	double pInvestorProductGroupMarginField_ShortFrozenMargin = 0.0;
	double pInvestorProductGroupMarginField_UseMargin = 0.0;
	double pInvestorProductGroupMarginField_LongUseMargin = 0.0;
	double pInvestorProductGroupMarginField_ShortUseMargin = 0.0;
	double pInvestorProductGroupMarginField_ExchMargin = 0.0;
	double pInvestorProductGroupMarginField_LongExchMargin = 0.0;
	double pInvestorProductGroupMarginField_ShortExchMargin = 0.0;
	double pInvestorProductGroupMarginField_CloseProfit = 0.0;
	double pInvestorProductGroupMarginField_FrozenCommission = 0.0;
	double pInvestorProductGroupMarginField_Commission = 0.0;
	double pInvestorProductGroupMarginField_FrozenCash = 0.0;
	double pInvestorProductGroupMarginField_CashIn = 0.0;
	double pInvestorProductGroupMarginField_PositionProfit = 0.0;
	double pInvestorProductGroupMarginField_OffsetAmount = 0.0;
	double pInvestorProductGroupMarginField_LongOffsetAmount = 0.0;
	double pInvestorProductGroupMarginField_ShortOffsetAmount = 0.0;
	double pInvestorProductGroupMarginField_ExchOffsetAmount = 0.0;
	double pInvestorProductGroupMarginField_LongExchOffsetAmount = 0.0;
	double pInvestorProductGroupMarginField_ShortExchOffsetAmount = 0.0;
	char pInvestorProductGroupMarginField_HedgeFlag = 0;
	char *pInvestorProductGroupMarginField_ExchangeID = nullptr;
	char *pInvestorProductGroupMarginField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pInvestorProductGroupMarginField, "|yyyyidddddddddddddddddddddcyy")
		, &pInvestorProductGroupMarginField_ProductGroupID
		, &pInvestorProductGroupMarginField_BrokerID
		, &pInvestorProductGroupMarginField_InvestorID
		, &pInvestorProductGroupMarginField_TradingDay
		, &pInvestorProductGroupMarginField_SettlementID
		, &pInvestorProductGroupMarginField_FrozenMargin
		, &pInvestorProductGroupMarginField_LongFrozenMargin
		, &pInvestorProductGroupMarginField_ShortFrozenMargin
		, &pInvestorProductGroupMarginField_UseMargin
		, &pInvestorProductGroupMarginField_LongUseMargin
		, &pInvestorProductGroupMarginField_ShortUseMargin
		, &pInvestorProductGroupMarginField_ExchMargin
		, &pInvestorProductGroupMarginField_LongExchMargin
		, &pInvestorProductGroupMarginField_ShortExchMargin
		, &pInvestorProductGroupMarginField_CloseProfit
		, &pInvestorProductGroupMarginField_FrozenCommission
		, &pInvestorProductGroupMarginField_Commission
		, &pInvestorProductGroupMarginField_FrozenCash
		, &pInvestorProductGroupMarginField_CashIn
		, &pInvestorProductGroupMarginField_PositionProfit
		, &pInvestorProductGroupMarginField_OffsetAmount
		, &pInvestorProductGroupMarginField_LongOffsetAmount
		, &pInvestorProductGroupMarginField_ShortOffsetAmount
		, &pInvestorProductGroupMarginField_ExchOffsetAmount
		, &pInvestorProductGroupMarginField_LongExchOffsetAmount
		, &pInvestorProductGroupMarginField_ShortExchOffsetAmount
		, &pInvestorProductGroupMarginField_HedgeFlag
		, &pInvestorProductGroupMarginField_ExchangeID
		, &pInvestorProductGroupMarginField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pInvestorProductGroupMarginField_ProductGroupID != nullptr){ strcpy_s(pInvestorProductGroupMarginField->ProductGroupID, pInvestorProductGroupMarginField_ProductGroupID); pInvestorProductGroupMarginField_ProductGroupID = nullptr; }
		if(pInvestorProductGroupMarginField_BrokerID != nullptr){ strcpy_s(pInvestorProductGroupMarginField->BrokerID, pInvestorProductGroupMarginField_BrokerID); pInvestorProductGroupMarginField_BrokerID = nullptr; }
		if(pInvestorProductGroupMarginField_InvestorID != nullptr){ strcpy_s(pInvestorProductGroupMarginField->InvestorID, pInvestorProductGroupMarginField_InvestorID); pInvestorProductGroupMarginField_InvestorID = nullptr; }
		if(pInvestorProductGroupMarginField_TradingDay != nullptr){ strcpy_s(pInvestorProductGroupMarginField->TradingDay, pInvestorProductGroupMarginField_TradingDay); pInvestorProductGroupMarginField_TradingDay = nullptr; }
		pInvestorProductGroupMarginField->SettlementID = pInvestorProductGroupMarginField_SettlementID;
		pInvestorProductGroupMarginField->FrozenMargin = pInvestorProductGroupMarginField_FrozenMargin;
		pInvestorProductGroupMarginField->LongFrozenMargin = pInvestorProductGroupMarginField_LongFrozenMargin;
		pInvestorProductGroupMarginField->ShortFrozenMargin = pInvestorProductGroupMarginField_ShortFrozenMargin;
		pInvestorProductGroupMarginField->UseMargin = pInvestorProductGroupMarginField_UseMargin;
		pInvestorProductGroupMarginField->LongUseMargin = pInvestorProductGroupMarginField_LongUseMargin;
		pInvestorProductGroupMarginField->ShortUseMargin = pInvestorProductGroupMarginField_ShortUseMargin;
		pInvestorProductGroupMarginField->ExchMargin = pInvestorProductGroupMarginField_ExchMargin;
		pInvestorProductGroupMarginField->LongExchMargin = pInvestorProductGroupMarginField_LongExchMargin;
		pInvestorProductGroupMarginField->ShortExchMargin = pInvestorProductGroupMarginField_ShortExchMargin;
		pInvestorProductGroupMarginField->CloseProfit = pInvestorProductGroupMarginField_CloseProfit;
		pInvestorProductGroupMarginField->FrozenCommission = pInvestorProductGroupMarginField_FrozenCommission;
		pInvestorProductGroupMarginField->Commission = pInvestorProductGroupMarginField_Commission;
		pInvestorProductGroupMarginField->FrozenCash = pInvestorProductGroupMarginField_FrozenCash;
		pInvestorProductGroupMarginField->CashIn = pInvestorProductGroupMarginField_CashIn;
		pInvestorProductGroupMarginField->PositionProfit = pInvestorProductGroupMarginField_PositionProfit;
		pInvestorProductGroupMarginField->OffsetAmount = pInvestorProductGroupMarginField_OffsetAmount;
		pInvestorProductGroupMarginField->LongOffsetAmount = pInvestorProductGroupMarginField_LongOffsetAmount;
		pInvestorProductGroupMarginField->ShortOffsetAmount = pInvestorProductGroupMarginField_ShortOffsetAmount;
		pInvestorProductGroupMarginField->ExchOffsetAmount = pInvestorProductGroupMarginField_ExchOffsetAmount;
		pInvestorProductGroupMarginField->LongExchOffsetAmount = pInvestorProductGroupMarginField_LongExchOffsetAmount;
		pInvestorProductGroupMarginField->ShortExchOffsetAmount = pInvestorProductGroupMarginField_ShortExchOffsetAmount;
		pInvestorProductGroupMarginField->HedgeFlag = pInvestorProductGroupMarginField_HedgeFlag;
		if(pInvestorProductGroupMarginField_ExchangeID != nullptr){ strcpy_s(pInvestorProductGroupMarginField->ExchangeID, pInvestorProductGroupMarginField_ExchangeID); pInvestorProductGroupMarginField_ExchangeID = nullptr; }
		if(pInvestorProductGroupMarginField_InvestUnitID != nullptr){ strcpy_s(pInvestorProductGroupMarginField->InvestUnitID, pInvestorProductGroupMarginField_InvestUnitID); pInvestorProductGroupMarginField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcInvestorProductGroupMarginField *pInvestorProductGroupMarginField)
{
	if(pInvestorProductGroupMarginField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:i,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:d,s:c,s:y,s:y}"
		, "ProductGroupID", pInvestorProductGroupMarginField->ProductGroupID
		, "BrokerID", pInvestorProductGroupMarginField->BrokerID
		, "InvestorID", pInvestorProductGroupMarginField->InvestorID
		, "TradingDay", pInvestorProductGroupMarginField->TradingDay
		, "SettlementID", pInvestorProductGroupMarginField->SettlementID
		, "FrozenMargin", pInvestorProductGroupMarginField->FrozenMargin
		, "LongFrozenMargin", pInvestorProductGroupMarginField->LongFrozenMargin
		, "ShortFrozenMargin", pInvestorProductGroupMarginField->ShortFrozenMargin
		, "UseMargin", pInvestorProductGroupMarginField->UseMargin
		, "LongUseMargin", pInvestorProductGroupMarginField->LongUseMargin
		, "ShortUseMargin", pInvestorProductGroupMarginField->ShortUseMargin
		, "ExchMargin", pInvestorProductGroupMarginField->ExchMargin
		, "LongExchMargin", pInvestorProductGroupMarginField->LongExchMargin
		, "ShortExchMargin", pInvestorProductGroupMarginField->ShortExchMargin
		, "CloseProfit", pInvestorProductGroupMarginField->CloseProfit
		, "FrozenCommission", pInvestorProductGroupMarginField->FrozenCommission
		, "Commission", pInvestorProductGroupMarginField->Commission
		, "FrozenCash", pInvestorProductGroupMarginField->FrozenCash
		, "CashIn", pInvestorProductGroupMarginField->CashIn
		, "PositionProfit", pInvestorProductGroupMarginField->PositionProfit
		, "OffsetAmount", pInvestorProductGroupMarginField->OffsetAmount
		, "LongOffsetAmount", pInvestorProductGroupMarginField->LongOffsetAmount
		, "ShortOffsetAmount", pInvestorProductGroupMarginField->ShortOffsetAmount
		, "ExchOffsetAmount", pInvestorProductGroupMarginField->ExchOffsetAmount
		, "LongExchOffsetAmount", pInvestorProductGroupMarginField->LongExchOffsetAmount
		, "ShortExchOffsetAmount", pInvestorProductGroupMarginField->ShortExchOffsetAmount
		, "HedgeFlag", pInvestorProductGroupMarginField->HedgeFlag
		, "ExchangeID", pInvestorProductGroupMarginField->ExchangeID
		, "InvestUnitID", pInvestorProductGroupMarginField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQueryCFMMCTradingAccountTokenField *pQueryCFMMCTradingAccountTokenField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", "InvestUnitID", nullptr};
	char *pQueryCFMMCTradingAccountTokenField_BrokerID = nullptr;
	char *pQueryCFMMCTradingAccountTokenField_InvestorID = nullptr;
	char *pQueryCFMMCTradingAccountTokenField_InvestUnitID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQueryCFMMCTradingAccountTokenField, "|yyy")
		, &pQueryCFMMCTradingAccountTokenField_BrokerID
		, &pQueryCFMMCTradingAccountTokenField_InvestorID
		, &pQueryCFMMCTradingAccountTokenField_InvestUnitID
	PyCTP_PyDict_FromStruct_END
		if(pQueryCFMMCTradingAccountTokenField_BrokerID != nullptr){ strcpy_s(pQueryCFMMCTradingAccountTokenField->BrokerID, pQueryCFMMCTradingAccountTokenField_BrokerID); pQueryCFMMCTradingAccountTokenField_BrokerID = nullptr; }
		if(pQueryCFMMCTradingAccountTokenField_InvestorID != nullptr){ strcpy_s(pQueryCFMMCTradingAccountTokenField->InvestorID, pQueryCFMMCTradingAccountTokenField_InvestorID); pQueryCFMMCTradingAccountTokenField_InvestorID = nullptr; }
		if(pQueryCFMMCTradingAccountTokenField_InvestUnitID != nullptr){ strcpy_s(pQueryCFMMCTradingAccountTokenField->InvestUnitID, pQueryCFMMCTradingAccountTokenField_InvestUnitID); pQueryCFMMCTradingAccountTokenField_InvestUnitID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQueryCFMMCTradingAccountTokenField *pQueryCFMMCTradingAccountTokenField)
{
	if(pQueryCFMMCTradingAccountTokenField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pQueryCFMMCTradingAccountTokenField->BrokerID
		, "InvestorID", pQueryCFMMCTradingAccountTokenField->InvestorID
		, "InvestUnitID", pQueryCFMMCTradingAccountTokenField->InvestUnitID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcCFMMCTradingAccountTokenField *pCFMMCTradingAccountTokenField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "ParticipantID", "AccountID", "KeyID", "Token", nullptr};
	char *pCFMMCTradingAccountTokenField_BrokerID = nullptr;
	char *pCFMMCTradingAccountTokenField_ParticipantID = nullptr;
	char *pCFMMCTradingAccountTokenField_AccountID = nullptr;
	int pCFMMCTradingAccountTokenField_KeyID = 0;
	char *pCFMMCTradingAccountTokenField_Token = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pCFMMCTradingAccountTokenField, "|yyyiy")
		, &pCFMMCTradingAccountTokenField_BrokerID
		, &pCFMMCTradingAccountTokenField_ParticipantID
		, &pCFMMCTradingAccountTokenField_AccountID
		, &pCFMMCTradingAccountTokenField_KeyID
		, &pCFMMCTradingAccountTokenField_Token
	PyCTP_PyDict_FromStruct_END
		if(pCFMMCTradingAccountTokenField_BrokerID != nullptr){ strcpy_s(pCFMMCTradingAccountTokenField->BrokerID, pCFMMCTradingAccountTokenField_BrokerID); pCFMMCTradingAccountTokenField_BrokerID = nullptr; }
		if(pCFMMCTradingAccountTokenField_ParticipantID != nullptr){ strcpy_s(pCFMMCTradingAccountTokenField->ParticipantID, pCFMMCTradingAccountTokenField_ParticipantID); pCFMMCTradingAccountTokenField_ParticipantID = nullptr; }
		if(pCFMMCTradingAccountTokenField_AccountID != nullptr){ strcpy_s(pCFMMCTradingAccountTokenField->AccountID, pCFMMCTradingAccountTokenField_AccountID); pCFMMCTradingAccountTokenField_AccountID = nullptr; }
		pCFMMCTradingAccountTokenField->KeyID = pCFMMCTradingAccountTokenField_KeyID;
		if(pCFMMCTradingAccountTokenField_Token != nullptr){ strcpy_s(pCFMMCTradingAccountTokenField->Token, pCFMMCTradingAccountTokenField_Token); pCFMMCTradingAccountTokenField_Token = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcCFMMCTradingAccountTokenField *pCFMMCTradingAccountTokenField)
{
	if(pCFMMCTradingAccountTokenField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:i,s:y}"
		, "BrokerID", pCFMMCTradingAccountTokenField->BrokerID
		, "ParticipantID", pCFMMCTradingAccountTokenField->ParticipantID
		, "AccountID", pCFMMCTradingAccountTokenField->AccountID
		, "KeyID", pCFMMCTradingAccountTokenField->KeyID
		, "Token", pCFMMCTradingAccountTokenField->Token
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryProductGroupField *pQryProductGroupField, PyObject *dict)
{
	static char *kwlist[] = {"ProductID", "ExchangeID", nullptr};
	char *pQryProductGroupField_ProductID = nullptr;
	char *pQryProductGroupField_ExchangeID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryProductGroupField, "|yy")
		, &pQryProductGroupField_ProductID
		, &pQryProductGroupField_ExchangeID
	PyCTP_PyDict_FromStruct_END
		if(pQryProductGroupField_ProductID != nullptr){ strcpy_s(pQryProductGroupField->ProductID, pQryProductGroupField_ProductID); pQryProductGroupField_ProductID = nullptr; }
		if(pQryProductGroupField_ExchangeID != nullptr){ strcpy_s(pQryProductGroupField->ExchangeID, pQryProductGroupField_ExchangeID); pQryProductGroupField_ExchangeID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryProductGroupField *pQryProductGroupField)
{
	if(pQryProductGroupField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "ProductID", pQryProductGroupField->ProductID
		, "ExchangeID", pQryProductGroupField->ExchangeID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcProductGroupField *pProductGroupField, PyObject *dict)
{
	static char *kwlist[] = {"ProductID", "ExchangeID", "ProductGroupID", nullptr};
	char *pProductGroupField_ProductID = nullptr;
	char *pProductGroupField_ExchangeID = nullptr;
	char *pProductGroupField_ProductGroupID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pProductGroupField, "|yyy")
		, &pProductGroupField_ProductID
		, &pProductGroupField_ExchangeID
		, &pProductGroupField_ProductGroupID
	PyCTP_PyDict_FromStruct_END
		if(pProductGroupField_ProductID != nullptr){ strcpy_s(pProductGroupField->ProductID, pProductGroupField_ProductID); pProductGroupField_ProductID = nullptr; }
		if(pProductGroupField_ExchangeID != nullptr){ strcpy_s(pProductGroupField->ExchangeID, pProductGroupField_ExchangeID); pProductGroupField_ExchangeID = nullptr; }
		if(pProductGroupField_ProductGroupID != nullptr){ strcpy_s(pProductGroupField->ProductGroupID, pProductGroupField_ProductGroupID); pProductGroupField_ProductGroupID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcProductGroupField *pProductGroupField)
{
	if(pProductGroupField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "ProductID", pProductGroupField->ProductID
		, "ExchangeID", pProductGroupField->ExchangeID
		, "ProductGroupID", pProductGroupField->ProductGroupID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcBulletinField *pBulletinField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "TradingDay", "BulletinID", "SequenceNo", "NewsType", "NewsUrgency", "SendTime", "Abstract", "ComeFrom", "Content", "URLLink", "MarketID", nullptr};
	char *pBulletinField_ExchangeID = nullptr;
	char *pBulletinField_TradingDay = nullptr;
	int pBulletinField_BulletinID = 0;
	int pBulletinField_SequenceNo = 0;
	char *pBulletinField_NewsType = nullptr;
	char pBulletinField_NewsUrgency = 0;
	char *pBulletinField_SendTime = nullptr;
	char *pBulletinField_Abstract = nullptr;
	char *pBulletinField_ComeFrom = nullptr;
	char *pBulletinField_Content = nullptr;
	char *pBulletinField_URLLink = nullptr;
	char *pBulletinField_MarketID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pBulletinField, "|yyiiycyyyyyy")
		, &pBulletinField_ExchangeID
		, &pBulletinField_TradingDay
		, &pBulletinField_BulletinID
		, &pBulletinField_SequenceNo
		, &pBulletinField_NewsType
		, &pBulletinField_NewsUrgency
		, &pBulletinField_SendTime
		, &pBulletinField_Abstract
		, &pBulletinField_ComeFrom
		, &pBulletinField_Content
		, &pBulletinField_URLLink
		, &pBulletinField_MarketID
	PyCTP_PyDict_FromStruct_END
		if(pBulletinField_ExchangeID != nullptr){ strcpy_s(pBulletinField->ExchangeID, pBulletinField_ExchangeID); pBulletinField_ExchangeID = nullptr; }
		if(pBulletinField_TradingDay != nullptr){ strcpy_s(pBulletinField->TradingDay, pBulletinField_TradingDay); pBulletinField_TradingDay = nullptr; }
		pBulletinField->BulletinID = pBulletinField_BulletinID;
		pBulletinField->SequenceNo = pBulletinField_SequenceNo;
		if(pBulletinField_NewsType != nullptr){ strcpy_s(pBulletinField->NewsType, pBulletinField_NewsType); pBulletinField_NewsType = nullptr; }
		pBulletinField->NewsUrgency = pBulletinField_NewsUrgency;
		if(pBulletinField_SendTime != nullptr){ strcpy_s(pBulletinField->SendTime, pBulletinField_SendTime); pBulletinField_SendTime = nullptr; }
		if(pBulletinField_Abstract != nullptr){ strcpy_s(pBulletinField->Abstract, pBulletinField_Abstract); pBulletinField_Abstract = nullptr; }
		if(pBulletinField_ComeFrom != nullptr){ strcpy_s(pBulletinField->ComeFrom, pBulletinField_ComeFrom); pBulletinField_ComeFrom = nullptr; }
		if(pBulletinField_Content != nullptr){ strcpy_s(pBulletinField->Content, pBulletinField_Content); pBulletinField_Content = nullptr; }
		if(pBulletinField_URLLink != nullptr){ strcpy_s(pBulletinField->URLLink, pBulletinField_URLLink); pBulletinField_URLLink = nullptr; }
		if(pBulletinField_MarketID != nullptr){ strcpy_s(pBulletinField->MarketID, pBulletinField_MarketID); pBulletinField_MarketID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcBulletinField *pBulletinField)
{
	if(pBulletinField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i,s:i,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "ExchangeID", pBulletinField->ExchangeID
		, "TradingDay", pBulletinField->TradingDay
		, "BulletinID", pBulletinField->BulletinID
		, "SequenceNo", pBulletinField->SequenceNo
		, "NewsType", pBulletinField->NewsType
		, "NewsUrgency", pBulletinField->NewsUrgency
		, "SendTime", pBulletinField->SendTime
		, "Abstract", pBulletinField->Abstract
		, "ComeFrom", pBulletinField->ComeFrom
		, "Content", pBulletinField->Content
		, "URLLink", pBulletinField->URLLink
		, "MarketID", pBulletinField->MarketID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryBulletinField *pQryBulletinField, PyObject *dict)
{
	static char *kwlist[] = {"ExchangeID", "BulletinID", "SequenceNo", "NewsType", "NewsUrgency", nullptr};
	char *pQryBulletinField_ExchangeID = nullptr;
	int pQryBulletinField_BulletinID = 0;
	int pQryBulletinField_SequenceNo = 0;
	char *pQryBulletinField_NewsType = nullptr;
	char pQryBulletinField_NewsUrgency = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pQryBulletinField, "|yiiyc")
		, &pQryBulletinField_ExchangeID
		, &pQryBulletinField_BulletinID
		, &pQryBulletinField_SequenceNo
		, &pQryBulletinField_NewsType
		, &pQryBulletinField_NewsUrgency
	PyCTP_PyDict_FromStruct_END
		if(pQryBulletinField_ExchangeID != nullptr){ strcpy_s(pQryBulletinField->ExchangeID, pQryBulletinField_ExchangeID); pQryBulletinField_ExchangeID = nullptr; }
		pQryBulletinField->BulletinID = pQryBulletinField_BulletinID;
		pQryBulletinField->SequenceNo = pQryBulletinField_SequenceNo;
		if(pQryBulletinField_NewsType != nullptr){ strcpy_s(pQryBulletinField->NewsType, pQryBulletinField_NewsType); pQryBulletinField_NewsType = nullptr; }
		pQryBulletinField->NewsUrgency = pQryBulletinField_NewsUrgency;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryBulletinField *pQryBulletinField)
{
	if(pQryBulletinField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:i,s:i,s:y,s:c}"
		, "ExchangeID", pQryBulletinField->ExchangeID
		, "BulletinID", pQryBulletinField->BulletinID
		, "SequenceNo", pQryBulletinField->SequenceNo
		, "NewsType", pQryBulletinField->NewsType
		, "NewsUrgency", pQryBulletinField->NewsUrgency
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqOpenAccountField *pReqOpenAccountField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "CustomerName", "IdCardType", "IdentifiedCardNo", "Gender", "CountryCode", "CustType", "Address", "ZipCode", "Telephone", "MobilePhone", "Fax", "EMail", "MoneyAccountStatus", "BankAccount", "BankPassWord", "AccountID", "Password", "InstallID", "VerifyCertNoFlag", "CurrencyID", "CashExchangeCode", "Digest", "BankAccType", "DeviceID", "BankSecuAccType", "BrokerIDByBank", "BankSecuAcc", "BankPwdFlag", "SecuPwdFlag", "OperNo", "TID", "UserID", "LongCustomerName", nullptr};
	char *pReqOpenAccountField_TradeCode = nullptr;
	char *pReqOpenAccountField_BankID = nullptr;
	char *pReqOpenAccountField_BankBranchID = nullptr;
	char *pReqOpenAccountField_BrokerID = nullptr;
	char *pReqOpenAccountField_BrokerBranchID = nullptr;
	char *pReqOpenAccountField_TradeDate = nullptr;
	char *pReqOpenAccountField_TradeTime = nullptr;
	char *pReqOpenAccountField_BankSerial = nullptr;
	char *pReqOpenAccountField_TradingDay = nullptr;
	int pReqOpenAccountField_PlateSerial = 0;
	char pReqOpenAccountField_LastFragment = 0;
	int pReqOpenAccountField_SessionID = 0;
	char *pReqOpenAccountField_CustomerName = nullptr;
	char pReqOpenAccountField_IdCardType = 0;
	char *pReqOpenAccountField_IdentifiedCardNo = nullptr;
	char pReqOpenAccountField_Gender = 0;
	char *pReqOpenAccountField_CountryCode = nullptr;
	char pReqOpenAccountField_CustType = 0;
	char *pReqOpenAccountField_Address = nullptr;
	char *pReqOpenAccountField_ZipCode = nullptr;
	char *pReqOpenAccountField_Telephone = nullptr;
	char *pReqOpenAccountField_MobilePhone = nullptr;
	char *pReqOpenAccountField_Fax = nullptr;
	char *pReqOpenAccountField_EMail = nullptr;
	char pReqOpenAccountField_MoneyAccountStatus = 0;
	char *pReqOpenAccountField_BankAccount = nullptr;
	char *pReqOpenAccountField_BankPassWord = nullptr;
	char *pReqOpenAccountField_AccountID = nullptr;
	char *pReqOpenAccountField_Password = nullptr;
	int pReqOpenAccountField_InstallID = 0;
	char pReqOpenAccountField_VerifyCertNoFlag = 0;
	char *pReqOpenAccountField_CurrencyID = nullptr;
	char pReqOpenAccountField_CashExchangeCode = 0;
	char *pReqOpenAccountField_Digest = nullptr;
	char pReqOpenAccountField_BankAccType = 0;
	char *pReqOpenAccountField_DeviceID = nullptr;
	char pReqOpenAccountField_BankSecuAccType = 0;
	char *pReqOpenAccountField_BrokerIDByBank = nullptr;
	char *pReqOpenAccountField_BankSecuAcc = nullptr;
	char pReqOpenAccountField_BankPwdFlag = 0;
	char pReqOpenAccountField_SecuPwdFlag = 0;
	char *pReqOpenAccountField_OperNo = nullptr;
	int pReqOpenAccountField_TID = 0;
	char *pReqOpenAccountField_UserID = nullptr;
	char *pReqOpenAccountField_LongCustomerName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pReqOpenAccountField, "|yyyyyyyyyiciycycycyyyyyycyyyyicycycycyyccyiyy")
		, &pReqOpenAccountField_TradeCode
		, &pReqOpenAccountField_BankID
		, &pReqOpenAccountField_BankBranchID
		, &pReqOpenAccountField_BrokerID
		, &pReqOpenAccountField_BrokerBranchID
		, &pReqOpenAccountField_TradeDate
		, &pReqOpenAccountField_TradeTime
		, &pReqOpenAccountField_BankSerial
		, &pReqOpenAccountField_TradingDay
		, &pReqOpenAccountField_PlateSerial
		, &pReqOpenAccountField_LastFragment
		, &pReqOpenAccountField_SessionID
		, &pReqOpenAccountField_CustomerName
		, &pReqOpenAccountField_IdCardType
		, &pReqOpenAccountField_IdentifiedCardNo
		, &pReqOpenAccountField_Gender
		, &pReqOpenAccountField_CountryCode
		, &pReqOpenAccountField_CustType
		, &pReqOpenAccountField_Address
		, &pReqOpenAccountField_ZipCode
		, &pReqOpenAccountField_Telephone
		, &pReqOpenAccountField_MobilePhone
		, &pReqOpenAccountField_Fax
		, &pReqOpenAccountField_EMail
		, &pReqOpenAccountField_MoneyAccountStatus
		, &pReqOpenAccountField_BankAccount
		, &pReqOpenAccountField_BankPassWord
		, &pReqOpenAccountField_AccountID
		, &pReqOpenAccountField_Password
		, &pReqOpenAccountField_InstallID
		, &pReqOpenAccountField_VerifyCertNoFlag
		, &pReqOpenAccountField_CurrencyID
		, &pReqOpenAccountField_CashExchangeCode
		, &pReqOpenAccountField_Digest
		, &pReqOpenAccountField_BankAccType
		, &pReqOpenAccountField_DeviceID
		, &pReqOpenAccountField_BankSecuAccType
		, &pReqOpenAccountField_BrokerIDByBank
		, &pReqOpenAccountField_BankSecuAcc
		, &pReqOpenAccountField_BankPwdFlag
		, &pReqOpenAccountField_SecuPwdFlag
		, &pReqOpenAccountField_OperNo
		, &pReqOpenAccountField_TID
		, &pReqOpenAccountField_UserID
		, &pReqOpenAccountField_LongCustomerName
	PyCTP_PyDict_FromStruct_END
		if(pReqOpenAccountField_TradeCode != nullptr){ strcpy_s(pReqOpenAccountField->TradeCode, pReqOpenAccountField_TradeCode); pReqOpenAccountField_TradeCode = nullptr; }
		if(pReqOpenAccountField_BankID != nullptr){ strcpy_s(pReqOpenAccountField->BankID, pReqOpenAccountField_BankID); pReqOpenAccountField_BankID = nullptr; }
		if(pReqOpenAccountField_BankBranchID != nullptr){ strcpy_s(pReqOpenAccountField->BankBranchID, pReqOpenAccountField_BankBranchID); pReqOpenAccountField_BankBranchID = nullptr; }
		if(pReqOpenAccountField_BrokerID != nullptr){ strcpy_s(pReqOpenAccountField->BrokerID, pReqOpenAccountField_BrokerID); pReqOpenAccountField_BrokerID = nullptr; }
		if(pReqOpenAccountField_BrokerBranchID != nullptr){ strcpy_s(pReqOpenAccountField->BrokerBranchID, pReqOpenAccountField_BrokerBranchID); pReqOpenAccountField_BrokerBranchID = nullptr; }
		if(pReqOpenAccountField_TradeDate != nullptr){ strcpy_s(pReqOpenAccountField->TradeDate, pReqOpenAccountField_TradeDate); pReqOpenAccountField_TradeDate = nullptr; }
		if(pReqOpenAccountField_TradeTime != nullptr){ strcpy_s(pReqOpenAccountField->TradeTime, pReqOpenAccountField_TradeTime); pReqOpenAccountField_TradeTime = nullptr; }
		if(pReqOpenAccountField_BankSerial != nullptr){ strcpy_s(pReqOpenAccountField->BankSerial, pReqOpenAccountField_BankSerial); pReqOpenAccountField_BankSerial = nullptr; }
		if(pReqOpenAccountField_TradingDay != nullptr){ strcpy_s(pReqOpenAccountField->TradingDay, pReqOpenAccountField_TradingDay); pReqOpenAccountField_TradingDay = nullptr; }
		pReqOpenAccountField->PlateSerial = pReqOpenAccountField_PlateSerial;
		pReqOpenAccountField->LastFragment = pReqOpenAccountField_LastFragment;
		pReqOpenAccountField->SessionID = pReqOpenAccountField_SessionID;
		if(pReqOpenAccountField_CustomerName != nullptr){ strcpy_s(pReqOpenAccountField->CustomerName, pReqOpenAccountField_CustomerName); pReqOpenAccountField_CustomerName = nullptr; }
		pReqOpenAccountField->IdCardType = pReqOpenAccountField_IdCardType;
		if(pReqOpenAccountField_IdentifiedCardNo != nullptr){ strcpy_s(pReqOpenAccountField->IdentifiedCardNo, pReqOpenAccountField_IdentifiedCardNo); pReqOpenAccountField_IdentifiedCardNo = nullptr; }
		pReqOpenAccountField->Gender = pReqOpenAccountField_Gender;
		if(pReqOpenAccountField_CountryCode != nullptr){ strcpy_s(pReqOpenAccountField->CountryCode, pReqOpenAccountField_CountryCode); pReqOpenAccountField_CountryCode = nullptr; }
		pReqOpenAccountField->CustType = pReqOpenAccountField_CustType;
		if(pReqOpenAccountField_Address != nullptr){ strcpy_s(pReqOpenAccountField->Address, pReqOpenAccountField_Address); pReqOpenAccountField_Address = nullptr; }
		if(pReqOpenAccountField_ZipCode != nullptr){ strcpy_s(pReqOpenAccountField->ZipCode, pReqOpenAccountField_ZipCode); pReqOpenAccountField_ZipCode = nullptr; }
		if(pReqOpenAccountField_Telephone != nullptr){ strcpy_s(pReqOpenAccountField->Telephone, pReqOpenAccountField_Telephone); pReqOpenAccountField_Telephone = nullptr; }
		if(pReqOpenAccountField_MobilePhone != nullptr){ strcpy_s(pReqOpenAccountField->MobilePhone, pReqOpenAccountField_MobilePhone); pReqOpenAccountField_MobilePhone = nullptr; }
		if(pReqOpenAccountField_Fax != nullptr){ strcpy_s(pReqOpenAccountField->Fax, pReqOpenAccountField_Fax); pReqOpenAccountField_Fax = nullptr; }
		if(pReqOpenAccountField_EMail != nullptr){ strcpy_s(pReqOpenAccountField->EMail, pReqOpenAccountField_EMail); pReqOpenAccountField_EMail = nullptr; }
		pReqOpenAccountField->MoneyAccountStatus = pReqOpenAccountField_MoneyAccountStatus;
		if(pReqOpenAccountField_BankAccount != nullptr){ strcpy_s(pReqOpenAccountField->BankAccount, pReqOpenAccountField_BankAccount); pReqOpenAccountField_BankAccount = nullptr; }
		if(pReqOpenAccountField_BankPassWord != nullptr){ strcpy_s(pReqOpenAccountField->BankPassWord, pReqOpenAccountField_BankPassWord); pReqOpenAccountField_BankPassWord = nullptr; }
		if(pReqOpenAccountField_AccountID != nullptr){ strcpy_s(pReqOpenAccountField->AccountID, pReqOpenAccountField_AccountID); pReqOpenAccountField_AccountID = nullptr; }
		if(pReqOpenAccountField_Password != nullptr){ strcpy_s(pReqOpenAccountField->Password, pReqOpenAccountField_Password); pReqOpenAccountField_Password = nullptr; }
		pReqOpenAccountField->InstallID = pReqOpenAccountField_InstallID;
		pReqOpenAccountField->VerifyCertNoFlag = pReqOpenAccountField_VerifyCertNoFlag;
		if(pReqOpenAccountField_CurrencyID != nullptr){ strcpy_s(pReqOpenAccountField->CurrencyID, pReqOpenAccountField_CurrencyID); pReqOpenAccountField_CurrencyID = nullptr; }
		pReqOpenAccountField->CashExchangeCode = pReqOpenAccountField_CashExchangeCode;
		if(pReqOpenAccountField_Digest != nullptr){ strcpy_s(pReqOpenAccountField->Digest, pReqOpenAccountField_Digest); pReqOpenAccountField_Digest = nullptr; }
		pReqOpenAccountField->BankAccType = pReqOpenAccountField_BankAccType;
		if(pReqOpenAccountField_DeviceID != nullptr){ strcpy_s(pReqOpenAccountField->DeviceID, pReqOpenAccountField_DeviceID); pReqOpenAccountField_DeviceID = nullptr; }
		pReqOpenAccountField->BankSecuAccType = pReqOpenAccountField_BankSecuAccType;
		if(pReqOpenAccountField_BrokerIDByBank != nullptr){ strcpy_s(pReqOpenAccountField->BrokerIDByBank, pReqOpenAccountField_BrokerIDByBank); pReqOpenAccountField_BrokerIDByBank = nullptr; }
		if(pReqOpenAccountField_BankSecuAcc != nullptr){ strcpy_s(pReqOpenAccountField->BankSecuAcc, pReqOpenAccountField_BankSecuAcc); pReqOpenAccountField_BankSecuAcc = nullptr; }
		pReqOpenAccountField->BankPwdFlag = pReqOpenAccountField_BankPwdFlag;
		pReqOpenAccountField->SecuPwdFlag = pReqOpenAccountField_SecuPwdFlag;
		if(pReqOpenAccountField_OperNo != nullptr){ strcpy_s(pReqOpenAccountField->OperNo, pReqOpenAccountField_OperNo); pReqOpenAccountField_OperNo = nullptr; }
		pReqOpenAccountField->TID = pReqOpenAccountField_TID;
		if(pReqOpenAccountField_UserID != nullptr){ strcpy_s(pReqOpenAccountField->UserID, pReqOpenAccountField_UserID); pReqOpenAccountField_UserID = nullptr; }
		if(pReqOpenAccountField_LongCustomerName != nullptr){ strcpy_s(pReqOpenAccountField->LongCustomerName, pReqOpenAccountField_LongCustomerName); pReqOpenAccountField_LongCustomerName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqOpenAccountField *pReqOpenAccountField)
{
	if(pReqOpenAccountField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:c,s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:y,s:y,s:i,s:c,s:y,s:c,s:y,s:c,s:y,s:c,s:y,s:y,s:c,s:c,s:y,s:i,s:y,s:y}"
		, "TradeCode", pReqOpenAccountField->TradeCode
		, "BankID", pReqOpenAccountField->BankID
		, "BankBranchID", pReqOpenAccountField->BankBranchID
		, "BrokerID", pReqOpenAccountField->BrokerID
		, "BrokerBranchID", pReqOpenAccountField->BrokerBranchID
		, "TradeDate", pReqOpenAccountField->TradeDate
		, "TradeTime", pReqOpenAccountField->TradeTime
		, "BankSerial", pReqOpenAccountField->BankSerial
		, "TradingDay", pReqOpenAccountField->TradingDay
		, "PlateSerial", pReqOpenAccountField->PlateSerial
		, "LastFragment", pReqOpenAccountField->LastFragment
		, "SessionID", pReqOpenAccountField->SessionID
		, "CustomerName", pReqOpenAccountField->CustomerName
		, "IdCardType", pReqOpenAccountField->IdCardType
		, "IdentifiedCardNo", pReqOpenAccountField->IdentifiedCardNo
		, "Gender", pReqOpenAccountField->Gender
		, "CountryCode", pReqOpenAccountField->CountryCode
		, "CustType", pReqOpenAccountField->CustType
		, "Address", pReqOpenAccountField->Address
		, "ZipCode", pReqOpenAccountField->ZipCode
		, "Telephone", pReqOpenAccountField->Telephone
		, "MobilePhone", pReqOpenAccountField->MobilePhone
		, "Fax", pReqOpenAccountField->Fax
		, "EMail", pReqOpenAccountField->EMail
		, "MoneyAccountStatus", pReqOpenAccountField->MoneyAccountStatus
		, "BankAccount", pReqOpenAccountField->BankAccount
		, "BankPassWord", pReqOpenAccountField->BankPassWord
		, "AccountID", pReqOpenAccountField->AccountID
		, "Password", pReqOpenAccountField->Password
		, "InstallID", pReqOpenAccountField->InstallID
		, "VerifyCertNoFlag", pReqOpenAccountField->VerifyCertNoFlag
		, "CurrencyID", pReqOpenAccountField->CurrencyID
		, "CashExchangeCode", pReqOpenAccountField->CashExchangeCode
		, "Digest", pReqOpenAccountField->Digest
		, "BankAccType", pReqOpenAccountField->BankAccType
		, "DeviceID", pReqOpenAccountField->DeviceID
		, "BankSecuAccType", pReqOpenAccountField->BankSecuAccType
		, "BrokerIDByBank", pReqOpenAccountField->BrokerIDByBank
		, "BankSecuAcc", pReqOpenAccountField->BankSecuAcc
		, "BankPwdFlag", pReqOpenAccountField->BankPwdFlag
		, "SecuPwdFlag", pReqOpenAccountField->SecuPwdFlag
		, "OperNo", pReqOpenAccountField->OperNo
		, "TID", pReqOpenAccountField->TID
		, "UserID", pReqOpenAccountField->UserID
		, "LongCustomerName", pReqOpenAccountField->LongCustomerName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqCancelAccountField *pReqCancelAccountField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "CustomerName", "IdCardType", "IdentifiedCardNo", "Gender", "CountryCode", "CustType", "Address", "ZipCode", "Telephone", "MobilePhone", "Fax", "EMail", "MoneyAccountStatus", "BankAccount", "BankPassWord", "AccountID", "Password", "InstallID", "VerifyCertNoFlag", "CurrencyID", "CashExchangeCode", "Digest", "BankAccType", "DeviceID", "BankSecuAccType", "BrokerIDByBank", "BankSecuAcc", "BankPwdFlag", "SecuPwdFlag", "OperNo", "TID", "UserID", "LongCustomerName", nullptr};
	char *pReqCancelAccountField_TradeCode = nullptr;
	char *pReqCancelAccountField_BankID = nullptr;
	char *pReqCancelAccountField_BankBranchID = nullptr;
	char *pReqCancelAccountField_BrokerID = nullptr;
	char *pReqCancelAccountField_BrokerBranchID = nullptr;
	char *pReqCancelAccountField_TradeDate = nullptr;
	char *pReqCancelAccountField_TradeTime = nullptr;
	char *pReqCancelAccountField_BankSerial = nullptr;
	char *pReqCancelAccountField_TradingDay = nullptr;
	int pReqCancelAccountField_PlateSerial = 0;
	char pReqCancelAccountField_LastFragment = 0;
	int pReqCancelAccountField_SessionID = 0;
	char *pReqCancelAccountField_CustomerName = nullptr;
	char pReqCancelAccountField_IdCardType = 0;
	char *pReqCancelAccountField_IdentifiedCardNo = nullptr;
	char pReqCancelAccountField_Gender = 0;
	char *pReqCancelAccountField_CountryCode = nullptr;
	char pReqCancelAccountField_CustType = 0;
	char *pReqCancelAccountField_Address = nullptr;
	char *pReqCancelAccountField_ZipCode = nullptr;
	char *pReqCancelAccountField_Telephone = nullptr;
	char *pReqCancelAccountField_MobilePhone = nullptr;
	char *pReqCancelAccountField_Fax = nullptr;
	char *pReqCancelAccountField_EMail = nullptr;
	char pReqCancelAccountField_MoneyAccountStatus = 0;
	char *pReqCancelAccountField_BankAccount = nullptr;
	char *pReqCancelAccountField_BankPassWord = nullptr;
	char *pReqCancelAccountField_AccountID = nullptr;
	char *pReqCancelAccountField_Password = nullptr;
	int pReqCancelAccountField_InstallID = 0;
	char pReqCancelAccountField_VerifyCertNoFlag = 0;
	char *pReqCancelAccountField_CurrencyID = nullptr;
	char pReqCancelAccountField_CashExchangeCode = 0;
	char *pReqCancelAccountField_Digest = nullptr;
	char pReqCancelAccountField_BankAccType = 0;
	char *pReqCancelAccountField_DeviceID = nullptr;
	char pReqCancelAccountField_BankSecuAccType = 0;
	char *pReqCancelAccountField_BrokerIDByBank = nullptr;
	char *pReqCancelAccountField_BankSecuAcc = nullptr;
	char pReqCancelAccountField_BankPwdFlag = 0;
	char pReqCancelAccountField_SecuPwdFlag = 0;
	char *pReqCancelAccountField_OperNo = nullptr;
	int pReqCancelAccountField_TID = 0;
	char *pReqCancelAccountField_UserID = nullptr;
	char *pReqCancelAccountField_LongCustomerName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pReqCancelAccountField, "|yyyyyyyyyiciycycycyyyyyycyyyyicycycycyyccyiyy")
		, &pReqCancelAccountField_TradeCode
		, &pReqCancelAccountField_BankID
		, &pReqCancelAccountField_BankBranchID
		, &pReqCancelAccountField_BrokerID
		, &pReqCancelAccountField_BrokerBranchID
		, &pReqCancelAccountField_TradeDate
		, &pReqCancelAccountField_TradeTime
		, &pReqCancelAccountField_BankSerial
		, &pReqCancelAccountField_TradingDay
		, &pReqCancelAccountField_PlateSerial
		, &pReqCancelAccountField_LastFragment
		, &pReqCancelAccountField_SessionID
		, &pReqCancelAccountField_CustomerName
		, &pReqCancelAccountField_IdCardType
		, &pReqCancelAccountField_IdentifiedCardNo
		, &pReqCancelAccountField_Gender
		, &pReqCancelAccountField_CountryCode
		, &pReqCancelAccountField_CustType
		, &pReqCancelAccountField_Address
		, &pReqCancelAccountField_ZipCode
		, &pReqCancelAccountField_Telephone
		, &pReqCancelAccountField_MobilePhone
		, &pReqCancelAccountField_Fax
		, &pReqCancelAccountField_EMail
		, &pReqCancelAccountField_MoneyAccountStatus
		, &pReqCancelAccountField_BankAccount
		, &pReqCancelAccountField_BankPassWord
		, &pReqCancelAccountField_AccountID
		, &pReqCancelAccountField_Password
		, &pReqCancelAccountField_InstallID
		, &pReqCancelAccountField_VerifyCertNoFlag
		, &pReqCancelAccountField_CurrencyID
		, &pReqCancelAccountField_CashExchangeCode
		, &pReqCancelAccountField_Digest
		, &pReqCancelAccountField_BankAccType
		, &pReqCancelAccountField_DeviceID
		, &pReqCancelAccountField_BankSecuAccType
		, &pReqCancelAccountField_BrokerIDByBank
		, &pReqCancelAccountField_BankSecuAcc
		, &pReqCancelAccountField_BankPwdFlag
		, &pReqCancelAccountField_SecuPwdFlag
		, &pReqCancelAccountField_OperNo
		, &pReqCancelAccountField_TID
		, &pReqCancelAccountField_UserID
		, &pReqCancelAccountField_LongCustomerName
	PyCTP_PyDict_FromStruct_END
		if(pReqCancelAccountField_TradeCode != nullptr){ strcpy_s(pReqCancelAccountField->TradeCode, pReqCancelAccountField_TradeCode); pReqCancelAccountField_TradeCode = nullptr; }
		if(pReqCancelAccountField_BankID != nullptr){ strcpy_s(pReqCancelAccountField->BankID, pReqCancelAccountField_BankID); pReqCancelAccountField_BankID = nullptr; }
		if(pReqCancelAccountField_BankBranchID != nullptr){ strcpy_s(pReqCancelAccountField->BankBranchID, pReqCancelAccountField_BankBranchID); pReqCancelAccountField_BankBranchID = nullptr; }
		if(pReqCancelAccountField_BrokerID != nullptr){ strcpy_s(pReqCancelAccountField->BrokerID, pReqCancelAccountField_BrokerID); pReqCancelAccountField_BrokerID = nullptr; }
		if(pReqCancelAccountField_BrokerBranchID != nullptr){ strcpy_s(pReqCancelAccountField->BrokerBranchID, pReqCancelAccountField_BrokerBranchID); pReqCancelAccountField_BrokerBranchID = nullptr; }
		if(pReqCancelAccountField_TradeDate != nullptr){ strcpy_s(pReqCancelAccountField->TradeDate, pReqCancelAccountField_TradeDate); pReqCancelAccountField_TradeDate = nullptr; }
		if(pReqCancelAccountField_TradeTime != nullptr){ strcpy_s(pReqCancelAccountField->TradeTime, pReqCancelAccountField_TradeTime); pReqCancelAccountField_TradeTime = nullptr; }
		if(pReqCancelAccountField_BankSerial != nullptr){ strcpy_s(pReqCancelAccountField->BankSerial, pReqCancelAccountField_BankSerial); pReqCancelAccountField_BankSerial = nullptr; }
		if(pReqCancelAccountField_TradingDay != nullptr){ strcpy_s(pReqCancelAccountField->TradingDay, pReqCancelAccountField_TradingDay); pReqCancelAccountField_TradingDay = nullptr; }
		pReqCancelAccountField->PlateSerial = pReqCancelAccountField_PlateSerial;
		pReqCancelAccountField->LastFragment = pReqCancelAccountField_LastFragment;
		pReqCancelAccountField->SessionID = pReqCancelAccountField_SessionID;
		if(pReqCancelAccountField_CustomerName != nullptr){ strcpy_s(pReqCancelAccountField->CustomerName, pReqCancelAccountField_CustomerName); pReqCancelAccountField_CustomerName = nullptr; }
		pReqCancelAccountField->IdCardType = pReqCancelAccountField_IdCardType;
		if(pReqCancelAccountField_IdentifiedCardNo != nullptr){ strcpy_s(pReqCancelAccountField->IdentifiedCardNo, pReqCancelAccountField_IdentifiedCardNo); pReqCancelAccountField_IdentifiedCardNo = nullptr; }
		pReqCancelAccountField->Gender = pReqCancelAccountField_Gender;
		if(pReqCancelAccountField_CountryCode != nullptr){ strcpy_s(pReqCancelAccountField->CountryCode, pReqCancelAccountField_CountryCode); pReqCancelAccountField_CountryCode = nullptr; }
		pReqCancelAccountField->CustType = pReqCancelAccountField_CustType;
		if(pReqCancelAccountField_Address != nullptr){ strcpy_s(pReqCancelAccountField->Address, pReqCancelAccountField_Address); pReqCancelAccountField_Address = nullptr; }
		if(pReqCancelAccountField_ZipCode != nullptr){ strcpy_s(pReqCancelAccountField->ZipCode, pReqCancelAccountField_ZipCode); pReqCancelAccountField_ZipCode = nullptr; }
		if(pReqCancelAccountField_Telephone != nullptr){ strcpy_s(pReqCancelAccountField->Telephone, pReqCancelAccountField_Telephone); pReqCancelAccountField_Telephone = nullptr; }
		if(pReqCancelAccountField_MobilePhone != nullptr){ strcpy_s(pReqCancelAccountField->MobilePhone, pReqCancelAccountField_MobilePhone); pReqCancelAccountField_MobilePhone = nullptr; }
		if(pReqCancelAccountField_Fax != nullptr){ strcpy_s(pReqCancelAccountField->Fax, pReqCancelAccountField_Fax); pReqCancelAccountField_Fax = nullptr; }
		if(pReqCancelAccountField_EMail != nullptr){ strcpy_s(pReqCancelAccountField->EMail, pReqCancelAccountField_EMail); pReqCancelAccountField_EMail = nullptr; }
		pReqCancelAccountField->MoneyAccountStatus = pReqCancelAccountField_MoneyAccountStatus;
		if(pReqCancelAccountField_BankAccount != nullptr){ strcpy_s(pReqCancelAccountField->BankAccount, pReqCancelAccountField_BankAccount); pReqCancelAccountField_BankAccount = nullptr; }
		if(pReqCancelAccountField_BankPassWord != nullptr){ strcpy_s(pReqCancelAccountField->BankPassWord, pReqCancelAccountField_BankPassWord); pReqCancelAccountField_BankPassWord = nullptr; }
		if(pReqCancelAccountField_AccountID != nullptr){ strcpy_s(pReqCancelAccountField->AccountID, pReqCancelAccountField_AccountID); pReqCancelAccountField_AccountID = nullptr; }
		if(pReqCancelAccountField_Password != nullptr){ strcpy_s(pReqCancelAccountField->Password, pReqCancelAccountField_Password); pReqCancelAccountField_Password = nullptr; }
		pReqCancelAccountField->InstallID = pReqCancelAccountField_InstallID;
		pReqCancelAccountField->VerifyCertNoFlag = pReqCancelAccountField_VerifyCertNoFlag;
		if(pReqCancelAccountField_CurrencyID != nullptr){ strcpy_s(pReqCancelAccountField->CurrencyID, pReqCancelAccountField_CurrencyID); pReqCancelAccountField_CurrencyID = nullptr; }
		pReqCancelAccountField->CashExchangeCode = pReqCancelAccountField_CashExchangeCode;
		if(pReqCancelAccountField_Digest != nullptr){ strcpy_s(pReqCancelAccountField->Digest, pReqCancelAccountField_Digest); pReqCancelAccountField_Digest = nullptr; }
		pReqCancelAccountField->BankAccType = pReqCancelAccountField_BankAccType;
		if(pReqCancelAccountField_DeviceID != nullptr){ strcpy_s(pReqCancelAccountField->DeviceID, pReqCancelAccountField_DeviceID); pReqCancelAccountField_DeviceID = nullptr; }
		pReqCancelAccountField->BankSecuAccType = pReqCancelAccountField_BankSecuAccType;
		if(pReqCancelAccountField_BrokerIDByBank != nullptr){ strcpy_s(pReqCancelAccountField->BrokerIDByBank, pReqCancelAccountField_BrokerIDByBank); pReqCancelAccountField_BrokerIDByBank = nullptr; }
		if(pReqCancelAccountField_BankSecuAcc != nullptr){ strcpy_s(pReqCancelAccountField->BankSecuAcc, pReqCancelAccountField_BankSecuAcc); pReqCancelAccountField_BankSecuAcc = nullptr; }
		pReqCancelAccountField->BankPwdFlag = pReqCancelAccountField_BankPwdFlag;
		pReqCancelAccountField->SecuPwdFlag = pReqCancelAccountField_SecuPwdFlag;
		if(pReqCancelAccountField_OperNo != nullptr){ strcpy_s(pReqCancelAccountField->OperNo, pReqCancelAccountField_OperNo); pReqCancelAccountField_OperNo = nullptr; }
		pReqCancelAccountField->TID = pReqCancelAccountField_TID;
		if(pReqCancelAccountField_UserID != nullptr){ strcpy_s(pReqCancelAccountField->UserID, pReqCancelAccountField_UserID); pReqCancelAccountField_UserID = nullptr; }
		if(pReqCancelAccountField_LongCustomerName != nullptr){ strcpy_s(pReqCancelAccountField->LongCustomerName, pReqCancelAccountField_LongCustomerName); pReqCancelAccountField_LongCustomerName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqCancelAccountField *pReqCancelAccountField)
{
	if(pReqCancelAccountField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:c,s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:y,s:y,s:i,s:c,s:y,s:c,s:y,s:c,s:y,s:c,s:y,s:y,s:c,s:c,s:y,s:i,s:y,s:y}"
		, "TradeCode", pReqCancelAccountField->TradeCode
		, "BankID", pReqCancelAccountField->BankID
		, "BankBranchID", pReqCancelAccountField->BankBranchID
		, "BrokerID", pReqCancelAccountField->BrokerID
		, "BrokerBranchID", pReqCancelAccountField->BrokerBranchID
		, "TradeDate", pReqCancelAccountField->TradeDate
		, "TradeTime", pReqCancelAccountField->TradeTime
		, "BankSerial", pReqCancelAccountField->BankSerial
		, "TradingDay", pReqCancelAccountField->TradingDay
		, "PlateSerial", pReqCancelAccountField->PlateSerial
		, "LastFragment", pReqCancelAccountField->LastFragment
		, "SessionID", pReqCancelAccountField->SessionID
		, "CustomerName", pReqCancelAccountField->CustomerName
		, "IdCardType", pReqCancelAccountField->IdCardType
		, "IdentifiedCardNo", pReqCancelAccountField->IdentifiedCardNo
		, "Gender", pReqCancelAccountField->Gender
		, "CountryCode", pReqCancelAccountField->CountryCode
		, "CustType", pReqCancelAccountField->CustType
		, "Address", pReqCancelAccountField->Address
		, "ZipCode", pReqCancelAccountField->ZipCode
		, "Telephone", pReqCancelAccountField->Telephone
		, "MobilePhone", pReqCancelAccountField->MobilePhone
		, "Fax", pReqCancelAccountField->Fax
		, "EMail", pReqCancelAccountField->EMail
		, "MoneyAccountStatus", pReqCancelAccountField->MoneyAccountStatus
		, "BankAccount", pReqCancelAccountField->BankAccount
		, "BankPassWord", pReqCancelAccountField->BankPassWord
		, "AccountID", pReqCancelAccountField->AccountID
		, "Password", pReqCancelAccountField->Password
		, "InstallID", pReqCancelAccountField->InstallID
		, "VerifyCertNoFlag", pReqCancelAccountField->VerifyCertNoFlag
		, "CurrencyID", pReqCancelAccountField->CurrencyID
		, "CashExchangeCode", pReqCancelAccountField->CashExchangeCode
		, "Digest", pReqCancelAccountField->Digest
		, "BankAccType", pReqCancelAccountField->BankAccType
		, "DeviceID", pReqCancelAccountField->DeviceID
		, "BankSecuAccType", pReqCancelAccountField->BankSecuAccType
		, "BrokerIDByBank", pReqCancelAccountField->BrokerIDByBank
		, "BankSecuAcc", pReqCancelAccountField->BankSecuAcc
		, "BankPwdFlag", pReqCancelAccountField->BankPwdFlag
		, "SecuPwdFlag", pReqCancelAccountField->SecuPwdFlag
		, "OperNo", pReqCancelAccountField->OperNo
		, "TID", pReqCancelAccountField->TID
		, "UserID", pReqCancelAccountField->UserID
		, "LongCustomerName", pReqCancelAccountField->LongCustomerName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqChangeAccountField *pReqChangeAccountField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "CustomerName", "IdCardType", "IdentifiedCardNo", "Gender", "CountryCode", "CustType", "Address", "ZipCode", "Telephone", "MobilePhone", "Fax", "EMail", "MoneyAccountStatus", "BankAccount", "BankPassWord", "NewBankAccount", "NewBankPassWord", "AccountID", "Password", "BankAccType", "InstallID", "VerifyCertNoFlag", "CurrencyID", "BrokerIDByBank", "BankPwdFlag", "SecuPwdFlag", "TID", "Digest", "LongCustomerName", nullptr};
	char *pReqChangeAccountField_TradeCode = nullptr;
	char *pReqChangeAccountField_BankID = nullptr;
	char *pReqChangeAccountField_BankBranchID = nullptr;
	char *pReqChangeAccountField_BrokerID = nullptr;
	char *pReqChangeAccountField_BrokerBranchID = nullptr;
	char *pReqChangeAccountField_TradeDate = nullptr;
	char *pReqChangeAccountField_TradeTime = nullptr;
	char *pReqChangeAccountField_BankSerial = nullptr;
	char *pReqChangeAccountField_TradingDay = nullptr;
	int pReqChangeAccountField_PlateSerial = 0;
	char pReqChangeAccountField_LastFragment = 0;
	int pReqChangeAccountField_SessionID = 0;
	char *pReqChangeAccountField_CustomerName = nullptr;
	char pReqChangeAccountField_IdCardType = 0;
	char *pReqChangeAccountField_IdentifiedCardNo = nullptr;
	char pReqChangeAccountField_Gender = 0;
	char *pReqChangeAccountField_CountryCode = nullptr;
	char pReqChangeAccountField_CustType = 0;
	char *pReqChangeAccountField_Address = nullptr;
	char *pReqChangeAccountField_ZipCode = nullptr;
	char *pReqChangeAccountField_Telephone = nullptr;
	char *pReqChangeAccountField_MobilePhone = nullptr;
	char *pReqChangeAccountField_Fax = nullptr;
	char *pReqChangeAccountField_EMail = nullptr;
	char pReqChangeAccountField_MoneyAccountStatus = 0;
	char *pReqChangeAccountField_BankAccount = nullptr;
	char *pReqChangeAccountField_BankPassWord = nullptr;
	char *pReqChangeAccountField_NewBankAccount = nullptr;
	char *pReqChangeAccountField_NewBankPassWord = nullptr;
	char *pReqChangeAccountField_AccountID = nullptr;
	char *pReqChangeAccountField_Password = nullptr;
	char pReqChangeAccountField_BankAccType = 0;
	int pReqChangeAccountField_InstallID = 0;
	char pReqChangeAccountField_VerifyCertNoFlag = 0;
	char *pReqChangeAccountField_CurrencyID = nullptr;
	char *pReqChangeAccountField_BrokerIDByBank = nullptr;
	char pReqChangeAccountField_BankPwdFlag = 0;
	char pReqChangeAccountField_SecuPwdFlag = 0;
	int pReqChangeAccountField_TID = 0;
	char *pReqChangeAccountField_Digest = nullptr;
	char *pReqChangeAccountField_LongCustomerName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pReqChangeAccountField, "|yyyyyyyyyiciycycycyyyyyycyyyyyycicyycciyy")
		, &pReqChangeAccountField_TradeCode
		, &pReqChangeAccountField_BankID
		, &pReqChangeAccountField_BankBranchID
		, &pReqChangeAccountField_BrokerID
		, &pReqChangeAccountField_BrokerBranchID
		, &pReqChangeAccountField_TradeDate
		, &pReqChangeAccountField_TradeTime
		, &pReqChangeAccountField_BankSerial
		, &pReqChangeAccountField_TradingDay
		, &pReqChangeAccountField_PlateSerial
		, &pReqChangeAccountField_LastFragment
		, &pReqChangeAccountField_SessionID
		, &pReqChangeAccountField_CustomerName
		, &pReqChangeAccountField_IdCardType
		, &pReqChangeAccountField_IdentifiedCardNo
		, &pReqChangeAccountField_Gender
		, &pReqChangeAccountField_CountryCode
		, &pReqChangeAccountField_CustType
		, &pReqChangeAccountField_Address
		, &pReqChangeAccountField_ZipCode
		, &pReqChangeAccountField_Telephone
		, &pReqChangeAccountField_MobilePhone
		, &pReqChangeAccountField_Fax
		, &pReqChangeAccountField_EMail
		, &pReqChangeAccountField_MoneyAccountStatus
		, &pReqChangeAccountField_BankAccount
		, &pReqChangeAccountField_BankPassWord
		, &pReqChangeAccountField_NewBankAccount
		, &pReqChangeAccountField_NewBankPassWord
		, &pReqChangeAccountField_AccountID
		, &pReqChangeAccountField_Password
		, &pReqChangeAccountField_BankAccType
		, &pReqChangeAccountField_InstallID
		, &pReqChangeAccountField_VerifyCertNoFlag
		, &pReqChangeAccountField_CurrencyID
		, &pReqChangeAccountField_BrokerIDByBank
		, &pReqChangeAccountField_BankPwdFlag
		, &pReqChangeAccountField_SecuPwdFlag
		, &pReqChangeAccountField_TID
		, &pReqChangeAccountField_Digest
		, &pReqChangeAccountField_LongCustomerName
	PyCTP_PyDict_FromStruct_END
		if(pReqChangeAccountField_TradeCode != nullptr){ strcpy_s(pReqChangeAccountField->TradeCode, pReqChangeAccountField_TradeCode); pReqChangeAccountField_TradeCode = nullptr; }
		if(pReqChangeAccountField_BankID != nullptr){ strcpy_s(pReqChangeAccountField->BankID, pReqChangeAccountField_BankID); pReqChangeAccountField_BankID = nullptr; }
		if(pReqChangeAccountField_BankBranchID != nullptr){ strcpy_s(pReqChangeAccountField->BankBranchID, pReqChangeAccountField_BankBranchID); pReqChangeAccountField_BankBranchID = nullptr; }
		if(pReqChangeAccountField_BrokerID != nullptr){ strcpy_s(pReqChangeAccountField->BrokerID, pReqChangeAccountField_BrokerID); pReqChangeAccountField_BrokerID = nullptr; }
		if(pReqChangeAccountField_BrokerBranchID != nullptr){ strcpy_s(pReqChangeAccountField->BrokerBranchID, pReqChangeAccountField_BrokerBranchID); pReqChangeAccountField_BrokerBranchID = nullptr; }
		if(pReqChangeAccountField_TradeDate != nullptr){ strcpy_s(pReqChangeAccountField->TradeDate, pReqChangeAccountField_TradeDate); pReqChangeAccountField_TradeDate = nullptr; }
		if(pReqChangeAccountField_TradeTime != nullptr){ strcpy_s(pReqChangeAccountField->TradeTime, pReqChangeAccountField_TradeTime); pReqChangeAccountField_TradeTime = nullptr; }
		if(pReqChangeAccountField_BankSerial != nullptr){ strcpy_s(pReqChangeAccountField->BankSerial, pReqChangeAccountField_BankSerial); pReqChangeAccountField_BankSerial = nullptr; }
		if(pReqChangeAccountField_TradingDay != nullptr){ strcpy_s(pReqChangeAccountField->TradingDay, pReqChangeAccountField_TradingDay); pReqChangeAccountField_TradingDay = nullptr; }
		pReqChangeAccountField->PlateSerial = pReqChangeAccountField_PlateSerial;
		pReqChangeAccountField->LastFragment = pReqChangeAccountField_LastFragment;
		pReqChangeAccountField->SessionID = pReqChangeAccountField_SessionID;
		if(pReqChangeAccountField_CustomerName != nullptr){ strcpy_s(pReqChangeAccountField->CustomerName, pReqChangeAccountField_CustomerName); pReqChangeAccountField_CustomerName = nullptr; }
		pReqChangeAccountField->IdCardType = pReqChangeAccountField_IdCardType;
		if(pReqChangeAccountField_IdentifiedCardNo != nullptr){ strcpy_s(pReqChangeAccountField->IdentifiedCardNo, pReqChangeAccountField_IdentifiedCardNo); pReqChangeAccountField_IdentifiedCardNo = nullptr; }
		pReqChangeAccountField->Gender = pReqChangeAccountField_Gender;
		if(pReqChangeAccountField_CountryCode != nullptr){ strcpy_s(pReqChangeAccountField->CountryCode, pReqChangeAccountField_CountryCode); pReqChangeAccountField_CountryCode = nullptr; }
		pReqChangeAccountField->CustType = pReqChangeAccountField_CustType;
		if(pReqChangeAccountField_Address != nullptr){ strcpy_s(pReqChangeAccountField->Address, pReqChangeAccountField_Address); pReqChangeAccountField_Address = nullptr; }
		if(pReqChangeAccountField_ZipCode != nullptr){ strcpy_s(pReqChangeAccountField->ZipCode, pReqChangeAccountField_ZipCode); pReqChangeAccountField_ZipCode = nullptr; }
		if(pReqChangeAccountField_Telephone != nullptr){ strcpy_s(pReqChangeAccountField->Telephone, pReqChangeAccountField_Telephone); pReqChangeAccountField_Telephone = nullptr; }
		if(pReqChangeAccountField_MobilePhone != nullptr){ strcpy_s(pReqChangeAccountField->MobilePhone, pReqChangeAccountField_MobilePhone); pReqChangeAccountField_MobilePhone = nullptr; }
		if(pReqChangeAccountField_Fax != nullptr){ strcpy_s(pReqChangeAccountField->Fax, pReqChangeAccountField_Fax); pReqChangeAccountField_Fax = nullptr; }
		if(pReqChangeAccountField_EMail != nullptr){ strcpy_s(pReqChangeAccountField->EMail, pReqChangeAccountField_EMail); pReqChangeAccountField_EMail = nullptr; }
		pReqChangeAccountField->MoneyAccountStatus = pReqChangeAccountField_MoneyAccountStatus;
		if(pReqChangeAccountField_BankAccount != nullptr){ strcpy_s(pReqChangeAccountField->BankAccount, pReqChangeAccountField_BankAccount); pReqChangeAccountField_BankAccount = nullptr; }
		if(pReqChangeAccountField_BankPassWord != nullptr){ strcpy_s(pReqChangeAccountField->BankPassWord, pReqChangeAccountField_BankPassWord); pReqChangeAccountField_BankPassWord = nullptr; }
		if(pReqChangeAccountField_NewBankAccount != nullptr){ strcpy_s(pReqChangeAccountField->NewBankAccount, pReqChangeAccountField_NewBankAccount); pReqChangeAccountField_NewBankAccount = nullptr; }
		if(pReqChangeAccountField_NewBankPassWord != nullptr){ strcpy_s(pReqChangeAccountField->NewBankPassWord, pReqChangeAccountField_NewBankPassWord); pReqChangeAccountField_NewBankPassWord = nullptr; }
		if(pReqChangeAccountField_AccountID != nullptr){ strcpy_s(pReqChangeAccountField->AccountID, pReqChangeAccountField_AccountID); pReqChangeAccountField_AccountID = nullptr; }
		if(pReqChangeAccountField_Password != nullptr){ strcpy_s(pReqChangeAccountField->Password, pReqChangeAccountField_Password); pReqChangeAccountField_Password = nullptr; }
		pReqChangeAccountField->BankAccType = pReqChangeAccountField_BankAccType;
		pReqChangeAccountField->InstallID = pReqChangeAccountField_InstallID;
		pReqChangeAccountField->VerifyCertNoFlag = pReqChangeAccountField_VerifyCertNoFlag;
		if(pReqChangeAccountField_CurrencyID != nullptr){ strcpy_s(pReqChangeAccountField->CurrencyID, pReqChangeAccountField_CurrencyID); pReqChangeAccountField_CurrencyID = nullptr; }
		if(pReqChangeAccountField_BrokerIDByBank != nullptr){ strcpy_s(pReqChangeAccountField->BrokerIDByBank, pReqChangeAccountField_BrokerIDByBank); pReqChangeAccountField_BrokerIDByBank = nullptr; }
		pReqChangeAccountField->BankPwdFlag = pReqChangeAccountField_BankPwdFlag;
		pReqChangeAccountField->SecuPwdFlag = pReqChangeAccountField_SecuPwdFlag;
		pReqChangeAccountField->TID = pReqChangeAccountField_TID;
		if(pReqChangeAccountField_Digest != nullptr){ strcpy_s(pReqChangeAccountField->Digest, pReqChangeAccountField_Digest); pReqChangeAccountField_Digest = nullptr; }
		if(pReqChangeAccountField_LongCustomerName != nullptr){ strcpy_s(pReqChangeAccountField->LongCustomerName, pReqChangeAccountField_LongCustomerName); pReqChangeAccountField_LongCustomerName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqChangeAccountField *pReqChangeAccountField)
{
	if(pReqChangeAccountField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:c,s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:c,s:i,s:c,s:y,s:y,s:c,s:c,s:i,s:y,s:y}"
		, "TradeCode", pReqChangeAccountField->TradeCode
		, "BankID", pReqChangeAccountField->BankID
		, "BankBranchID", pReqChangeAccountField->BankBranchID
		, "BrokerID", pReqChangeAccountField->BrokerID
		, "BrokerBranchID", pReqChangeAccountField->BrokerBranchID
		, "TradeDate", pReqChangeAccountField->TradeDate
		, "TradeTime", pReqChangeAccountField->TradeTime
		, "BankSerial", pReqChangeAccountField->BankSerial
		, "TradingDay", pReqChangeAccountField->TradingDay
		, "PlateSerial", pReqChangeAccountField->PlateSerial
		, "LastFragment", pReqChangeAccountField->LastFragment
		, "SessionID", pReqChangeAccountField->SessionID
		, "CustomerName", pReqChangeAccountField->CustomerName
		, "IdCardType", pReqChangeAccountField->IdCardType
		, "IdentifiedCardNo", pReqChangeAccountField->IdentifiedCardNo
		, "Gender", pReqChangeAccountField->Gender
		, "CountryCode", pReqChangeAccountField->CountryCode
		, "CustType", pReqChangeAccountField->CustType
		, "Address", pReqChangeAccountField->Address
		, "ZipCode", pReqChangeAccountField->ZipCode
		, "Telephone", pReqChangeAccountField->Telephone
		, "MobilePhone", pReqChangeAccountField->MobilePhone
		, "Fax", pReqChangeAccountField->Fax
		, "EMail", pReqChangeAccountField->EMail
		, "MoneyAccountStatus", pReqChangeAccountField->MoneyAccountStatus
		, "BankAccount", pReqChangeAccountField->BankAccount
		, "BankPassWord", pReqChangeAccountField->BankPassWord
		, "NewBankAccount", pReqChangeAccountField->NewBankAccount
		, "NewBankPassWord", pReqChangeAccountField->NewBankPassWord
		, "AccountID", pReqChangeAccountField->AccountID
		, "Password", pReqChangeAccountField->Password
		, "BankAccType", pReqChangeAccountField->BankAccType
		, "InstallID", pReqChangeAccountField->InstallID
		, "VerifyCertNoFlag", pReqChangeAccountField->VerifyCertNoFlag
		, "CurrencyID", pReqChangeAccountField->CurrencyID
		, "BrokerIDByBank", pReqChangeAccountField->BrokerIDByBank
		, "BankPwdFlag", pReqChangeAccountField->BankPwdFlag
		, "SecuPwdFlag", pReqChangeAccountField->SecuPwdFlag
		, "TID", pReqChangeAccountField->TID
		, "Digest", pReqChangeAccountField->Digest
		, "LongCustomerName", pReqChangeAccountField->LongCustomerName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqTransferField *pReqTransferField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "CustomerName", "IdCardType", "IdentifiedCardNo", "CustType", "BankAccount", "BankPassWord", "AccountID", "Password", "InstallID", "FutureSerial", "UserID", "VerifyCertNoFlag", "CurrencyID", "TradeAmount", "FutureFetchAmount", "FeePayFlag", "CustFee", "BrokerFee", "Message", "Digest", "BankAccType", "DeviceID", "BankSecuAccType", "BrokerIDByBank", "BankSecuAcc", "BankPwdFlag", "SecuPwdFlag", "OperNo", "RequestID", "TID", "TransferStatus", "LongCustomerName", nullptr};
	char *pReqTransferField_TradeCode = nullptr;
	char *pReqTransferField_BankID = nullptr;
	char *pReqTransferField_BankBranchID = nullptr;
	char *pReqTransferField_BrokerID = nullptr;
	char *pReqTransferField_BrokerBranchID = nullptr;
	char *pReqTransferField_TradeDate = nullptr;
	char *pReqTransferField_TradeTime = nullptr;
	char *pReqTransferField_BankSerial = nullptr;
	char *pReqTransferField_TradingDay = nullptr;
	int pReqTransferField_PlateSerial = 0;
	char pReqTransferField_LastFragment = 0;
	int pReqTransferField_SessionID = 0;
	char *pReqTransferField_CustomerName = nullptr;
	char pReqTransferField_IdCardType = 0;
	char *pReqTransferField_IdentifiedCardNo = nullptr;
	char pReqTransferField_CustType = 0;
	char *pReqTransferField_BankAccount = nullptr;
	char *pReqTransferField_BankPassWord = nullptr;
	char *pReqTransferField_AccountID = nullptr;
	char *pReqTransferField_Password = nullptr;
	int pReqTransferField_InstallID = 0;
	int pReqTransferField_FutureSerial = 0;
	char *pReqTransferField_UserID = nullptr;
	char pReqTransferField_VerifyCertNoFlag = 0;
	char *pReqTransferField_CurrencyID = nullptr;
	double pReqTransferField_TradeAmount = 0.0;
	double pReqTransferField_FutureFetchAmount = 0.0;
	char pReqTransferField_FeePayFlag = 0;
	double pReqTransferField_CustFee = 0.0;
	double pReqTransferField_BrokerFee = 0.0;
	char *pReqTransferField_Message = nullptr;
	char *pReqTransferField_Digest = nullptr;
	char pReqTransferField_BankAccType = 0;
	char *pReqTransferField_DeviceID = nullptr;
	char pReqTransferField_BankSecuAccType = 0;
	char *pReqTransferField_BrokerIDByBank = nullptr;
	char *pReqTransferField_BankSecuAcc = nullptr;
	char pReqTransferField_BankPwdFlag = 0;
	char pReqTransferField_SecuPwdFlag = 0;
	char *pReqTransferField_OperNo = nullptr;
	int pReqTransferField_RequestID = 0;
	int pReqTransferField_TID = 0;
	char pReqTransferField_TransferStatus = 0;
	char *pReqTransferField_LongCustomerName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pReqTransferField, "|yyyyyyyyyiciycycyyyyiiycyddcddyycycyyccyiicy")
		, &pReqTransferField_TradeCode
		, &pReqTransferField_BankID
		, &pReqTransferField_BankBranchID
		, &pReqTransferField_BrokerID
		, &pReqTransferField_BrokerBranchID
		, &pReqTransferField_TradeDate
		, &pReqTransferField_TradeTime
		, &pReqTransferField_BankSerial
		, &pReqTransferField_TradingDay
		, &pReqTransferField_PlateSerial
		, &pReqTransferField_LastFragment
		, &pReqTransferField_SessionID
		, &pReqTransferField_CustomerName
		, &pReqTransferField_IdCardType
		, &pReqTransferField_IdentifiedCardNo
		, &pReqTransferField_CustType
		, &pReqTransferField_BankAccount
		, &pReqTransferField_BankPassWord
		, &pReqTransferField_AccountID
		, &pReqTransferField_Password
		, &pReqTransferField_InstallID
		, &pReqTransferField_FutureSerial
		, &pReqTransferField_UserID
		, &pReqTransferField_VerifyCertNoFlag
		, &pReqTransferField_CurrencyID
		, &pReqTransferField_TradeAmount
		, &pReqTransferField_FutureFetchAmount
		, &pReqTransferField_FeePayFlag
		, &pReqTransferField_CustFee
		, &pReqTransferField_BrokerFee
		, &pReqTransferField_Message
		, &pReqTransferField_Digest
		, &pReqTransferField_BankAccType
		, &pReqTransferField_DeviceID
		, &pReqTransferField_BankSecuAccType
		, &pReqTransferField_BrokerIDByBank
		, &pReqTransferField_BankSecuAcc
		, &pReqTransferField_BankPwdFlag
		, &pReqTransferField_SecuPwdFlag
		, &pReqTransferField_OperNo
		, &pReqTransferField_RequestID
		, &pReqTransferField_TID
		, &pReqTransferField_TransferStatus
		, &pReqTransferField_LongCustomerName
	PyCTP_PyDict_FromStruct_END
		if(pReqTransferField_TradeCode != nullptr){ strcpy_s(pReqTransferField->TradeCode, pReqTransferField_TradeCode); pReqTransferField_TradeCode = nullptr; }
		if(pReqTransferField_BankID != nullptr){ strcpy_s(pReqTransferField->BankID, pReqTransferField_BankID); pReqTransferField_BankID = nullptr; }
		if(pReqTransferField_BankBranchID != nullptr){ strcpy_s(pReqTransferField->BankBranchID, pReqTransferField_BankBranchID); pReqTransferField_BankBranchID = nullptr; }
		if(pReqTransferField_BrokerID != nullptr){ strcpy_s(pReqTransferField->BrokerID, pReqTransferField_BrokerID); pReqTransferField_BrokerID = nullptr; }
		if(pReqTransferField_BrokerBranchID != nullptr){ strcpy_s(pReqTransferField->BrokerBranchID, pReqTransferField_BrokerBranchID); pReqTransferField_BrokerBranchID = nullptr; }
		if(pReqTransferField_TradeDate != nullptr){ strcpy_s(pReqTransferField->TradeDate, pReqTransferField_TradeDate); pReqTransferField_TradeDate = nullptr; }
		if(pReqTransferField_TradeTime != nullptr){ strcpy_s(pReqTransferField->TradeTime, pReqTransferField_TradeTime); pReqTransferField_TradeTime = nullptr; }
		if(pReqTransferField_BankSerial != nullptr){ strcpy_s(pReqTransferField->BankSerial, pReqTransferField_BankSerial); pReqTransferField_BankSerial = nullptr; }
		if(pReqTransferField_TradingDay != nullptr){ strcpy_s(pReqTransferField->TradingDay, pReqTransferField_TradingDay); pReqTransferField_TradingDay = nullptr; }
		pReqTransferField->PlateSerial = pReqTransferField_PlateSerial;
		pReqTransferField->LastFragment = pReqTransferField_LastFragment;
		pReqTransferField->SessionID = pReqTransferField_SessionID;
		if(pReqTransferField_CustomerName != nullptr){ strcpy_s(pReqTransferField->CustomerName, pReqTransferField_CustomerName); pReqTransferField_CustomerName = nullptr; }
		pReqTransferField->IdCardType = pReqTransferField_IdCardType;
		if(pReqTransferField_IdentifiedCardNo != nullptr){ strcpy_s(pReqTransferField->IdentifiedCardNo, pReqTransferField_IdentifiedCardNo); pReqTransferField_IdentifiedCardNo = nullptr; }
		pReqTransferField->CustType = pReqTransferField_CustType;
		if(pReqTransferField_BankAccount != nullptr){ strcpy_s(pReqTransferField->BankAccount, pReqTransferField_BankAccount); pReqTransferField_BankAccount = nullptr; }
		if(pReqTransferField_BankPassWord != nullptr){ strcpy_s(pReqTransferField->BankPassWord, pReqTransferField_BankPassWord); pReqTransferField_BankPassWord = nullptr; }
		if(pReqTransferField_AccountID != nullptr){ strcpy_s(pReqTransferField->AccountID, pReqTransferField_AccountID); pReqTransferField_AccountID = nullptr; }
		if(pReqTransferField_Password != nullptr){ strcpy_s(pReqTransferField->Password, pReqTransferField_Password); pReqTransferField_Password = nullptr; }
		pReqTransferField->InstallID = pReqTransferField_InstallID;
		pReqTransferField->FutureSerial = pReqTransferField_FutureSerial;
		if(pReqTransferField_UserID != nullptr){ strcpy_s(pReqTransferField->UserID, pReqTransferField_UserID); pReqTransferField_UserID = nullptr; }
		pReqTransferField->VerifyCertNoFlag = pReqTransferField_VerifyCertNoFlag;
		if(pReqTransferField_CurrencyID != nullptr){ strcpy_s(pReqTransferField->CurrencyID, pReqTransferField_CurrencyID); pReqTransferField_CurrencyID = nullptr; }
		pReqTransferField->TradeAmount = pReqTransferField_TradeAmount;
		pReqTransferField->FutureFetchAmount = pReqTransferField_FutureFetchAmount;
		pReqTransferField->FeePayFlag = pReqTransferField_FeePayFlag;
		pReqTransferField->CustFee = pReqTransferField_CustFee;
		pReqTransferField->BrokerFee = pReqTransferField_BrokerFee;
		if(pReqTransferField_Message != nullptr){ strcpy_s(pReqTransferField->Message, pReqTransferField_Message); pReqTransferField_Message = nullptr; }
		if(pReqTransferField_Digest != nullptr){ strcpy_s(pReqTransferField->Digest, pReqTransferField_Digest); pReqTransferField_Digest = nullptr; }
		pReqTransferField->BankAccType = pReqTransferField_BankAccType;
		if(pReqTransferField_DeviceID != nullptr){ strcpy_s(pReqTransferField->DeviceID, pReqTransferField_DeviceID); pReqTransferField_DeviceID = nullptr; }
		pReqTransferField->BankSecuAccType = pReqTransferField_BankSecuAccType;
		if(pReqTransferField_BrokerIDByBank != nullptr){ strcpy_s(pReqTransferField->BrokerIDByBank, pReqTransferField_BrokerIDByBank); pReqTransferField_BrokerIDByBank = nullptr; }
		if(pReqTransferField_BankSecuAcc != nullptr){ strcpy_s(pReqTransferField->BankSecuAcc, pReqTransferField_BankSecuAcc); pReqTransferField_BankSecuAcc = nullptr; }
		pReqTransferField->BankPwdFlag = pReqTransferField_BankPwdFlag;
		pReqTransferField->SecuPwdFlag = pReqTransferField_SecuPwdFlag;
		if(pReqTransferField_OperNo != nullptr){ strcpy_s(pReqTransferField->OperNo, pReqTransferField_OperNo); pReqTransferField_OperNo = nullptr; }
		pReqTransferField->RequestID = pReqTransferField_RequestID;
		pReqTransferField->TID = pReqTransferField_TID;
		pReqTransferField->TransferStatus = pReqTransferField_TransferStatus;
		if(pReqTransferField_LongCustomerName != nullptr){ strcpy_s(pReqTransferField->LongCustomerName, pReqTransferField_LongCustomerName); pReqTransferField_LongCustomerName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqTransferField *pReqTransferField)
{
	if(pReqTransferField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y,s:i,s:i,s:y,s:c,s:y,s:d,s:d,s:c,s:d,s:d,s:y,s:y,s:c,s:y,s:c,s:y,s:y,s:c,s:c,s:y,s:i,s:i,s:c,s:y}"
		, "TradeCode", pReqTransferField->TradeCode
		, "BankID", pReqTransferField->BankID
		, "BankBranchID", pReqTransferField->BankBranchID
		, "BrokerID", pReqTransferField->BrokerID
		, "BrokerBranchID", pReqTransferField->BrokerBranchID
		, "TradeDate", pReqTransferField->TradeDate
		, "TradeTime", pReqTransferField->TradeTime
		, "BankSerial", pReqTransferField->BankSerial
		, "TradingDay", pReqTransferField->TradingDay
		, "PlateSerial", pReqTransferField->PlateSerial
		, "LastFragment", pReqTransferField->LastFragment
		, "SessionID", pReqTransferField->SessionID
		, "CustomerName", pReqTransferField->CustomerName
		, "IdCardType", pReqTransferField->IdCardType
		, "IdentifiedCardNo", pReqTransferField->IdentifiedCardNo
		, "CustType", pReqTransferField->CustType
		, "BankAccount", pReqTransferField->BankAccount
		, "BankPassWord", pReqTransferField->BankPassWord
		, "AccountID", pReqTransferField->AccountID
		, "Password", pReqTransferField->Password
		, "InstallID", pReqTransferField->InstallID
		, "FutureSerial", pReqTransferField->FutureSerial
		, "UserID", pReqTransferField->UserID
		, "VerifyCertNoFlag", pReqTransferField->VerifyCertNoFlag
		, "CurrencyID", pReqTransferField->CurrencyID
		, "TradeAmount", pReqTransferField->TradeAmount
		, "FutureFetchAmount", pReqTransferField->FutureFetchAmount
		, "FeePayFlag", pReqTransferField->FeePayFlag
		, "CustFee", pReqTransferField->CustFee
		, "BrokerFee", pReqTransferField->BrokerFee
		, "Message", pReqTransferField->Message
		, "Digest", pReqTransferField->Digest
		, "BankAccType", pReqTransferField->BankAccType
		, "DeviceID", pReqTransferField->DeviceID
		, "BankSecuAccType", pReqTransferField->BankSecuAccType
		, "BrokerIDByBank", pReqTransferField->BrokerIDByBank
		, "BankSecuAcc", pReqTransferField->BankSecuAcc
		, "BankPwdFlag", pReqTransferField->BankPwdFlag
		, "SecuPwdFlag", pReqTransferField->SecuPwdFlag
		, "OperNo", pReqTransferField->OperNo
		, "RequestID", pReqTransferField->RequestID
		, "TID", pReqTransferField->TID
		, "TransferStatus", pReqTransferField->TransferStatus
		, "LongCustomerName", pReqTransferField->LongCustomerName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcRspTransferField *pRspTransferField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "CustomerName", "IdCardType", "IdentifiedCardNo", "CustType", "BankAccount", "BankPassWord", "AccountID", "Password", "InstallID", "FutureSerial", "UserID", "VerifyCertNoFlag", "CurrencyID", "TradeAmount", "FutureFetchAmount", "FeePayFlag", "CustFee", "BrokerFee", "Message", "Digest", "BankAccType", "DeviceID", "BankSecuAccType", "BrokerIDByBank", "BankSecuAcc", "BankPwdFlag", "SecuPwdFlag", "OperNo", "RequestID", "TID", "TransferStatus", "ErrorID", "ErrorMsg", "LongCustomerName", nullptr};
	char *pRspTransferField_TradeCode = nullptr;
	char *pRspTransferField_BankID = nullptr;
	char *pRspTransferField_BankBranchID = nullptr;
	char *pRspTransferField_BrokerID = nullptr;
	char *pRspTransferField_BrokerBranchID = nullptr;
	char *pRspTransferField_TradeDate = nullptr;
	char *pRspTransferField_TradeTime = nullptr;
	char *pRspTransferField_BankSerial = nullptr;
	char *pRspTransferField_TradingDay = nullptr;
	int pRspTransferField_PlateSerial = 0;
	char pRspTransferField_LastFragment = 0;
	int pRspTransferField_SessionID = 0;
	char *pRspTransferField_CustomerName = nullptr;
	char pRspTransferField_IdCardType = 0;
	char *pRspTransferField_IdentifiedCardNo = nullptr;
	char pRspTransferField_CustType = 0;
	char *pRspTransferField_BankAccount = nullptr;
	char *pRspTransferField_BankPassWord = nullptr;
	char *pRspTransferField_AccountID = nullptr;
	char *pRspTransferField_Password = nullptr;
	int pRspTransferField_InstallID = 0;
	int pRspTransferField_FutureSerial = 0;
	char *pRspTransferField_UserID = nullptr;
	char pRspTransferField_VerifyCertNoFlag = 0;
	char *pRspTransferField_CurrencyID = nullptr;
	double pRspTransferField_TradeAmount = 0.0;
	double pRspTransferField_FutureFetchAmount = 0.0;
	char pRspTransferField_FeePayFlag = 0;
	double pRspTransferField_CustFee = 0.0;
	double pRspTransferField_BrokerFee = 0.0;
	char *pRspTransferField_Message = nullptr;
	char *pRspTransferField_Digest = nullptr;
	char pRspTransferField_BankAccType = 0;
	char *pRspTransferField_DeviceID = nullptr;
	char pRspTransferField_BankSecuAccType = 0;
	char *pRspTransferField_BrokerIDByBank = nullptr;
	char *pRspTransferField_BankSecuAcc = nullptr;
	char pRspTransferField_BankPwdFlag = 0;
	char pRspTransferField_SecuPwdFlag = 0;
	char *pRspTransferField_OperNo = nullptr;
	int pRspTransferField_RequestID = 0;
	int pRspTransferField_TID = 0;
	char pRspTransferField_TransferStatus = 0;
	int pRspTransferField_ErrorID = 0;
	char *pRspTransferField_ErrorMsg = nullptr;
	char *pRspTransferField_LongCustomerName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pRspTransferField, "|yyyyyyyyyiciycycyyyyiiycyddcddyycycyyccyiiciyy")
		, &pRspTransferField_TradeCode
		, &pRspTransferField_BankID
		, &pRspTransferField_BankBranchID
		, &pRspTransferField_BrokerID
		, &pRspTransferField_BrokerBranchID
		, &pRspTransferField_TradeDate
		, &pRspTransferField_TradeTime
		, &pRspTransferField_BankSerial
		, &pRspTransferField_TradingDay
		, &pRspTransferField_PlateSerial
		, &pRspTransferField_LastFragment
		, &pRspTransferField_SessionID
		, &pRspTransferField_CustomerName
		, &pRspTransferField_IdCardType
		, &pRspTransferField_IdentifiedCardNo
		, &pRspTransferField_CustType
		, &pRspTransferField_BankAccount
		, &pRspTransferField_BankPassWord
		, &pRspTransferField_AccountID
		, &pRspTransferField_Password
		, &pRspTransferField_InstallID
		, &pRspTransferField_FutureSerial
		, &pRspTransferField_UserID
		, &pRspTransferField_VerifyCertNoFlag
		, &pRspTransferField_CurrencyID
		, &pRspTransferField_TradeAmount
		, &pRspTransferField_FutureFetchAmount
		, &pRspTransferField_FeePayFlag
		, &pRspTransferField_CustFee
		, &pRspTransferField_BrokerFee
		, &pRspTransferField_Message
		, &pRspTransferField_Digest
		, &pRspTransferField_BankAccType
		, &pRspTransferField_DeviceID
		, &pRspTransferField_BankSecuAccType
		, &pRspTransferField_BrokerIDByBank
		, &pRspTransferField_BankSecuAcc
		, &pRspTransferField_BankPwdFlag
		, &pRspTransferField_SecuPwdFlag
		, &pRspTransferField_OperNo
		, &pRspTransferField_RequestID
		, &pRspTransferField_TID
		, &pRspTransferField_TransferStatus
		, &pRspTransferField_ErrorID
		, &pRspTransferField_ErrorMsg
		, &pRspTransferField_LongCustomerName
	PyCTP_PyDict_FromStruct_END
		if(pRspTransferField_TradeCode != nullptr){ strcpy_s(pRspTransferField->TradeCode, pRspTransferField_TradeCode); pRspTransferField_TradeCode = nullptr; }
		if(pRspTransferField_BankID != nullptr){ strcpy_s(pRspTransferField->BankID, pRspTransferField_BankID); pRspTransferField_BankID = nullptr; }
		if(pRspTransferField_BankBranchID != nullptr){ strcpy_s(pRspTransferField->BankBranchID, pRspTransferField_BankBranchID); pRspTransferField_BankBranchID = nullptr; }
		if(pRspTransferField_BrokerID != nullptr){ strcpy_s(pRspTransferField->BrokerID, pRspTransferField_BrokerID); pRspTransferField_BrokerID = nullptr; }
		if(pRspTransferField_BrokerBranchID != nullptr){ strcpy_s(pRspTransferField->BrokerBranchID, pRspTransferField_BrokerBranchID); pRspTransferField_BrokerBranchID = nullptr; }
		if(pRspTransferField_TradeDate != nullptr){ strcpy_s(pRspTransferField->TradeDate, pRspTransferField_TradeDate); pRspTransferField_TradeDate = nullptr; }
		if(pRspTransferField_TradeTime != nullptr){ strcpy_s(pRspTransferField->TradeTime, pRspTransferField_TradeTime); pRspTransferField_TradeTime = nullptr; }
		if(pRspTransferField_BankSerial != nullptr){ strcpy_s(pRspTransferField->BankSerial, pRspTransferField_BankSerial); pRspTransferField_BankSerial = nullptr; }
		if(pRspTransferField_TradingDay != nullptr){ strcpy_s(pRspTransferField->TradingDay, pRspTransferField_TradingDay); pRspTransferField_TradingDay = nullptr; }
		pRspTransferField->PlateSerial = pRspTransferField_PlateSerial;
		pRspTransferField->LastFragment = pRspTransferField_LastFragment;
		pRspTransferField->SessionID = pRspTransferField_SessionID;
		if(pRspTransferField_CustomerName != nullptr){ strcpy_s(pRspTransferField->CustomerName, pRspTransferField_CustomerName); pRspTransferField_CustomerName = nullptr; }
		pRspTransferField->IdCardType = pRspTransferField_IdCardType;
		if(pRspTransferField_IdentifiedCardNo != nullptr){ strcpy_s(pRspTransferField->IdentifiedCardNo, pRspTransferField_IdentifiedCardNo); pRspTransferField_IdentifiedCardNo = nullptr; }
		pRspTransferField->CustType = pRspTransferField_CustType;
		if(pRspTransferField_BankAccount != nullptr){ strcpy_s(pRspTransferField->BankAccount, pRspTransferField_BankAccount); pRspTransferField_BankAccount = nullptr; }
		if(pRspTransferField_BankPassWord != nullptr){ strcpy_s(pRspTransferField->BankPassWord, pRspTransferField_BankPassWord); pRspTransferField_BankPassWord = nullptr; }
		if(pRspTransferField_AccountID != nullptr){ strcpy_s(pRspTransferField->AccountID, pRspTransferField_AccountID); pRspTransferField_AccountID = nullptr; }
		if(pRspTransferField_Password != nullptr){ strcpy_s(pRspTransferField->Password, pRspTransferField_Password); pRspTransferField_Password = nullptr; }
		pRspTransferField->InstallID = pRspTransferField_InstallID;
		pRspTransferField->FutureSerial = pRspTransferField_FutureSerial;
		if(pRspTransferField_UserID != nullptr){ strcpy_s(pRspTransferField->UserID, pRspTransferField_UserID); pRspTransferField_UserID = nullptr; }
		pRspTransferField->VerifyCertNoFlag = pRspTransferField_VerifyCertNoFlag;
		if(pRspTransferField_CurrencyID != nullptr){ strcpy_s(pRspTransferField->CurrencyID, pRspTransferField_CurrencyID); pRspTransferField_CurrencyID = nullptr; }
		pRspTransferField->TradeAmount = pRspTransferField_TradeAmount;
		pRspTransferField->FutureFetchAmount = pRspTransferField_FutureFetchAmount;
		pRspTransferField->FeePayFlag = pRspTransferField_FeePayFlag;
		pRspTransferField->CustFee = pRspTransferField_CustFee;
		pRspTransferField->BrokerFee = pRspTransferField_BrokerFee;
		if(pRspTransferField_Message != nullptr){ strcpy_s(pRspTransferField->Message, pRspTransferField_Message); pRspTransferField_Message = nullptr; }
		if(pRspTransferField_Digest != nullptr){ strcpy_s(pRspTransferField->Digest, pRspTransferField_Digest); pRspTransferField_Digest = nullptr; }
		pRspTransferField->BankAccType = pRspTransferField_BankAccType;
		if(pRspTransferField_DeviceID != nullptr){ strcpy_s(pRspTransferField->DeviceID, pRspTransferField_DeviceID); pRspTransferField_DeviceID = nullptr; }
		pRspTransferField->BankSecuAccType = pRspTransferField_BankSecuAccType;
		if(pRspTransferField_BrokerIDByBank != nullptr){ strcpy_s(pRspTransferField->BrokerIDByBank, pRspTransferField_BrokerIDByBank); pRspTransferField_BrokerIDByBank = nullptr; }
		if(pRspTransferField_BankSecuAcc != nullptr){ strcpy_s(pRspTransferField->BankSecuAcc, pRspTransferField_BankSecuAcc); pRspTransferField_BankSecuAcc = nullptr; }
		pRspTransferField->BankPwdFlag = pRspTransferField_BankPwdFlag;
		pRspTransferField->SecuPwdFlag = pRspTransferField_SecuPwdFlag;
		if(pRspTransferField_OperNo != nullptr){ strcpy_s(pRspTransferField->OperNo, pRspTransferField_OperNo); pRspTransferField_OperNo = nullptr; }
		pRspTransferField->RequestID = pRspTransferField_RequestID;
		pRspTransferField->TID = pRspTransferField_TID;
		pRspTransferField->TransferStatus = pRspTransferField_TransferStatus;
		pRspTransferField->ErrorID = pRspTransferField_ErrorID;
		if(pRspTransferField_ErrorMsg != nullptr){ strcpy_s(pRspTransferField->ErrorMsg, pRspTransferField_ErrorMsg); pRspTransferField_ErrorMsg = nullptr; }
		if(pRspTransferField_LongCustomerName != nullptr){ strcpy_s(pRspTransferField->LongCustomerName, pRspTransferField_LongCustomerName); pRspTransferField_LongCustomerName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcRspTransferField *pRspTransferField)
{
	if(pRspTransferField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y,s:i,s:i,s:y,s:c,s:y,s:d,s:d,s:c,s:d,s:d,s:y,s:y,s:c,s:y,s:c,s:y,s:y,s:c,s:c,s:y,s:i,s:i,s:c,s:i,s:y,s:y}"
		, "TradeCode", pRspTransferField->TradeCode
		, "BankID", pRspTransferField->BankID
		, "BankBranchID", pRspTransferField->BankBranchID
		, "BrokerID", pRspTransferField->BrokerID
		, "BrokerBranchID", pRspTransferField->BrokerBranchID
		, "TradeDate", pRspTransferField->TradeDate
		, "TradeTime", pRspTransferField->TradeTime
		, "BankSerial", pRspTransferField->BankSerial
		, "TradingDay", pRspTransferField->TradingDay
		, "PlateSerial", pRspTransferField->PlateSerial
		, "LastFragment", pRspTransferField->LastFragment
		, "SessionID", pRspTransferField->SessionID
		, "CustomerName", pRspTransferField->CustomerName
		, "IdCardType", pRspTransferField->IdCardType
		, "IdentifiedCardNo", pRspTransferField->IdentifiedCardNo
		, "CustType", pRspTransferField->CustType
		, "BankAccount", pRspTransferField->BankAccount
		, "BankPassWord", pRspTransferField->BankPassWord
		, "AccountID", pRspTransferField->AccountID
		, "Password", pRspTransferField->Password
		, "InstallID", pRspTransferField->InstallID
		, "FutureSerial", pRspTransferField->FutureSerial
		, "UserID", pRspTransferField->UserID
		, "VerifyCertNoFlag", pRspTransferField->VerifyCertNoFlag
		, "CurrencyID", pRspTransferField->CurrencyID
		, "TradeAmount", pRspTransferField->TradeAmount
		, "FutureFetchAmount", pRspTransferField->FutureFetchAmount
		, "FeePayFlag", pRspTransferField->FeePayFlag
		, "CustFee", pRspTransferField->CustFee
		, "BrokerFee", pRspTransferField->BrokerFee
		, "Message", pRspTransferField->Message
		, "Digest", pRspTransferField->Digest
		, "BankAccType", pRspTransferField->BankAccType
		, "DeviceID", pRspTransferField->DeviceID
		, "BankSecuAccType", pRspTransferField->BankSecuAccType
		, "BrokerIDByBank", pRspTransferField->BrokerIDByBank
		, "BankSecuAcc", pRspTransferField->BankSecuAcc
		, "BankPwdFlag", pRspTransferField->BankPwdFlag
		, "SecuPwdFlag", pRspTransferField->SecuPwdFlag
		, "OperNo", pRspTransferField->OperNo
		, "RequestID", pRspTransferField->RequestID
		, "TID", pRspTransferField->TID
		, "TransferStatus", pRspTransferField->TransferStatus
		, "ErrorID", pRspTransferField->ErrorID
		, "ErrorMsg", pRspTransferField->ErrorMsg
		, "LongCustomerName", pRspTransferField->LongCustomerName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqRepealField *pReqRepealField, PyObject *dict)
{
	static char *kwlist[] = {"RepealTimeInterval", "RepealedTimes", "BankRepealFlag", "BrokerRepealFlag", "PlateRepealSerial", "BankRepealSerial", "FutureRepealSerial", "TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "CustomerName", "IdCardType", "IdentifiedCardNo", "CustType", "BankAccount", "BankPassWord", "AccountID", "Password", "InstallID", "FutureSerial", "UserID", "VerifyCertNoFlag", "CurrencyID", "TradeAmount", "FutureFetchAmount", "FeePayFlag", "CustFee", "BrokerFee", "Message", "Digest", "BankAccType", "DeviceID", "BankSecuAccType", "BrokerIDByBank", "BankSecuAcc", "BankPwdFlag", "SecuPwdFlag", "OperNo", "RequestID", "TID", "TransferStatus", "LongCustomerName", nullptr};
	int pReqRepealField_RepealTimeInterval = 0;
	int pReqRepealField_RepealedTimes = 0;
	char pReqRepealField_BankRepealFlag = 0;
	char pReqRepealField_BrokerRepealFlag = 0;
	int pReqRepealField_PlateRepealSerial = 0;
	char *pReqRepealField_BankRepealSerial = nullptr;
	int pReqRepealField_FutureRepealSerial = 0;
	char *pReqRepealField_TradeCode = nullptr;
	char *pReqRepealField_BankID = nullptr;
	char *pReqRepealField_BankBranchID = nullptr;
	char *pReqRepealField_BrokerID = nullptr;
	char *pReqRepealField_BrokerBranchID = nullptr;
	char *pReqRepealField_TradeDate = nullptr;
	char *pReqRepealField_TradeTime = nullptr;
	char *pReqRepealField_BankSerial = nullptr;
	char *pReqRepealField_TradingDay = nullptr;
	int pReqRepealField_PlateSerial = 0;
	char pReqRepealField_LastFragment = 0;
	int pReqRepealField_SessionID = 0;
	char *pReqRepealField_CustomerName = nullptr;
	char pReqRepealField_IdCardType = 0;
	char *pReqRepealField_IdentifiedCardNo = nullptr;
	char pReqRepealField_CustType = 0;
	char *pReqRepealField_BankAccount = nullptr;
	char *pReqRepealField_BankPassWord = nullptr;
	char *pReqRepealField_AccountID = nullptr;
	char *pReqRepealField_Password = nullptr;
	int pReqRepealField_InstallID = 0;
	int pReqRepealField_FutureSerial = 0;
	char *pReqRepealField_UserID = nullptr;
	char pReqRepealField_VerifyCertNoFlag = 0;
	char *pReqRepealField_CurrencyID = nullptr;
	double pReqRepealField_TradeAmount = 0.0;
	double pReqRepealField_FutureFetchAmount = 0.0;
	char pReqRepealField_FeePayFlag = 0;
	double pReqRepealField_CustFee = 0.0;
	double pReqRepealField_BrokerFee = 0.0;
	char *pReqRepealField_Message = nullptr;
	char *pReqRepealField_Digest = nullptr;
	char pReqRepealField_BankAccType = 0;
	char *pReqRepealField_DeviceID = nullptr;
	char pReqRepealField_BankSecuAccType = 0;
	char *pReqRepealField_BrokerIDByBank = nullptr;
	char *pReqRepealField_BankSecuAcc = nullptr;
	char pReqRepealField_BankPwdFlag = 0;
	char pReqRepealField_SecuPwdFlag = 0;
	char *pReqRepealField_OperNo = nullptr;
	int pReqRepealField_RequestID = 0;
	int pReqRepealField_TID = 0;
	char pReqRepealField_TransferStatus = 0;
	char *pReqRepealField_LongCustomerName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pReqRepealField, "|iicciyiyyyyyyyyyiciycycyyyyiiycyddcddyycycyyccyiicy")
		, &pReqRepealField_RepealTimeInterval
		, &pReqRepealField_RepealedTimes
		, &pReqRepealField_BankRepealFlag
		, &pReqRepealField_BrokerRepealFlag
		, &pReqRepealField_PlateRepealSerial
		, &pReqRepealField_BankRepealSerial
		, &pReqRepealField_FutureRepealSerial
		, &pReqRepealField_TradeCode
		, &pReqRepealField_BankID
		, &pReqRepealField_BankBranchID
		, &pReqRepealField_BrokerID
		, &pReqRepealField_BrokerBranchID
		, &pReqRepealField_TradeDate
		, &pReqRepealField_TradeTime
		, &pReqRepealField_BankSerial
		, &pReqRepealField_TradingDay
		, &pReqRepealField_PlateSerial
		, &pReqRepealField_LastFragment
		, &pReqRepealField_SessionID
		, &pReqRepealField_CustomerName
		, &pReqRepealField_IdCardType
		, &pReqRepealField_IdentifiedCardNo
		, &pReqRepealField_CustType
		, &pReqRepealField_BankAccount
		, &pReqRepealField_BankPassWord
		, &pReqRepealField_AccountID
		, &pReqRepealField_Password
		, &pReqRepealField_InstallID
		, &pReqRepealField_FutureSerial
		, &pReqRepealField_UserID
		, &pReqRepealField_VerifyCertNoFlag
		, &pReqRepealField_CurrencyID
		, &pReqRepealField_TradeAmount
		, &pReqRepealField_FutureFetchAmount
		, &pReqRepealField_FeePayFlag
		, &pReqRepealField_CustFee
		, &pReqRepealField_BrokerFee
		, &pReqRepealField_Message
		, &pReqRepealField_Digest
		, &pReqRepealField_BankAccType
		, &pReqRepealField_DeviceID
		, &pReqRepealField_BankSecuAccType
		, &pReqRepealField_BrokerIDByBank
		, &pReqRepealField_BankSecuAcc
		, &pReqRepealField_BankPwdFlag
		, &pReqRepealField_SecuPwdFlag
		, &pReqRepealField_OperNo
		, &pReqRepealField_RequestID
		, &pReqRepealField_TID
		, &pReqRepealField_TransferStatus
		, &pReqRepealField_LongCustomerName
	PyCTP_PyDict_FromStruct_END
		pReqRepealField->RepealTimeInterval = pReqRepealField_RepealTimeInterval;
		pReqRepealField->RepealedTimes = pReqRepealField_RepealedTimes;
		pReqRepealField->BankRepealFlag = pReqRepealField_BankRepealFlag;
		pReqRepealField->BrokerRepealFlag = pReqRepealField_BrokerRepealFlag;
		pReqRepealField->PlateRepealSerial = pReqRepealField_PlateRepealSerial;
		if(pReqRepealField_BankRepealSerial != nullptr){ strcpy_s(pReqRepealField->BankRepealSerial, pReqRepealField_BankRepealSerial); pReqRepealField_BankRepealSerial = nullptr; }
		pReqRepealField->FutureRepealSerial = pReqRepealField_FutureRepealSerial;
		if(pReqRepealField_TradeCode != nullptr){ strcpy_s(pReqRepealField->TradeCode, pReqRepealField_TradeCode); pReqRepealField_TradeCode = nullptr; }
		if(pReqRepealField_BankID != nullptr){ strcpy_s(pReqRepealField->BankID, pReqRepealField_BankID); pReqRepealField_BankID = nullptr; }
		if(pReqRepealField_BankBranchID != nullptr){ strcpy_s(pReqRepealField->BankBranchID, pReqRepealField_BankBranchID); pReqRepealField_BankBranchID = nullptr; }
		if(pReqRepealField_BrokerID != nullptr){ strcpy_s(pReqRepealField->BrokerID, pReqRepealField_BrokerID); pReqRepealField_BrokerID = nullptr; }
		if(pReqRepealField_BrokerBranchID != nullptr){ strcpy_s(pReqRepealField->BrokerBranchID, pReqRepealField_BrokerBranchID); pReqRepealField_BrokerBranchID = nullptr; }
		if(pReqRepealField_TradeDate != nullptr){ strcpy_s(pReqRepealField->TradeDate, pReqRepealField_TradeDate); pReqRepealField_TradeDate = nullptr; }
		if(pReqRepealField_TradeTime != nullptr){ strcpy_s(pReqRepealField->TradeTime, pReqRepealField_TradeTime); pReqRepealField_TradeTime = nullptr; }
		if(pReqRepealField_BankSerial != nullptr){ strcpy_s(pReqRepealField->BankSerial, pReqRepealField_BankSerial); pReqRepealField_BankSerial = nullptr; }
		if(pReqRepealField_TradingDay != nullptr){ strcpy_s(pReqRepealField->TradingDay, pReqRepealField_TradingDay); pReqRepealField_TradingDay = nullptr; }
		pReqRepealField->PlateSerial = pReqRepealField_PlateSerial;
		pReqRepealField->LastFragment = pReqRepealField_LastFragment;
		pReqRepealField->SessionID = pReqRepealField_SessionID;
		if(pReqRepealField_CustomerName != nullptr){ strcpy_s(pReqRepealField->CustomerName, pReqRepealField_CustomerName); pReqRepealField_CustomerName = nullptr; }
		pReqRepealField->IdCardType = pReqRepealField_IdCardType;
		if(pReqRepealField_IdentifiedCardNo != nullptr){ strcpy_s(pReqRepealField->IdentifiedCardNo, pReqRepealField_IdentifiedCardNo); pReqRepealField_IdentifiedCardNo = nullptr; }
		pReqRepealField->CustType = pReqRepealField_CustType;
		if(pReqRepealField_BankAccount != nullptr){ strcpy_s(pReqRepealField->BankAccount, pReqRepealField_BankAccount); pReqRepealField_BankAccount = nullptr; }
		if(pReqRepealField_BankPassWord != nullptr){ strcpy_s(pReqRepealField->BankPassWord, pReqRepealField_BankPassWord); pReqRepealField_BankPassWord = nullptr; }
		if(pReqRepealField_AccountID != nullptr){ strcpy_s(pReqRepealField->AccountID, pReqRepealField_AccountID); pReqRepealField_AccountID = nullptr; }
		if(pReqRepealField_Password != nullptr){ strcpy_s(pReqRepealField->Password, pReqRepealField_Password); pReqRepealField_Password = nullptr; }
		pReqRepealField->InstallID = pReqRepealField_InstallID;
		pReqRepealField->FutureSerial = pReqRepealField_FutureSerial;
		if(pReqRepealField_UserID != nullptr){ strcpy_s(pReqRepealField->UserID, pReqRepealField_UserID); pReqRepealField_UserID = nullptr; }
		pReqRepealField->VerifyCertNoFlag = pReqRepealField_VerifyCertNoFlag;
		if(pReqRepealField_CurrencyID != nullptr){ strcpy_s(pReqRepealField->CurrencyID, pReqRepealField_CurrencyID); pReqRepealField_CurrencyID = nullptr; }
		pReqRepealField->TradeAmount = pReqRepealField_TradeAmount;
		pReqRepealField->FutureFetchAmount = pReqRepealField_FutureFetchAmount;
		pReqRepealField->FeePayFlag = pReqRepealField_FeePayFlag;
		pReqRepealField->CustFee = pReqRepealField_CustFee;
		pReqRepealField->BrokerFee = pReqRepealField_BrokerFee;
		if(pReqRepealField_Message != nullptr){ strcpy_s(pReqRepealField->Message, pReqRepealField_Message); pReqRepealField_Message = nullptr; }
		if(pReqRepealField_Digest != nullptr){ strcpy_s(pReqRepealField->Digest, pReqRepealField_Digest); pReqRepealField_Digest = nullptr; }
		pReqRepealField->BankAccType = pReqRepealField_BankAccType;
		if(pReqRepealField_DeviceID != nullptr){ strcpy_s(pReqRepealField->DeviceID, pReqRepealField_DeviceID); pReqRepealField_DeviceID = nullptr; }
		pReqRepealField->BankSecuAccType = pReqRepealField_BankSecuAccType;
		if(pReqRepealField_BrokerIDByBank != nullptr){ strcpy_s(pReqRepealField->BrokerIDByBank, pReqRepealField_BrokerIDByBank); pReqRepealField_BrokerIDByBank = nullptr; }
		if(pReqRepealField_BankSecuAcc != nullptr){ strcpy_s(pReqRepealField->BankSecuAcc, pReqRepealField_BankSecuAcc); pReqRepealField_BankSecuAcc = nullptr; }
		pReqRepealField->BankPwdFlag = pReqRepealField_BankPwdFlag;
		pReqRepealField->SecuPwdFlag = pReqRepealField_SecuPwdFlag;
		if(pReqRepealField_OperNo != nullptr){ strcpy_s(pReqRepealField->OperNo, pReqRepealField_OperNo); pReqRepealField_OperNo = nullptr; }
		pReqRepealField->RequestID = pReqRepealField_RequestID;
		pReqRepealField->TID = pReqRepealField_TID;
		pReqRepealField->TransferStatus = pReqRepealField_TransferStatus;
		if(pReqRepealField_LongCustomerName != nullptr){ strcpy_s(pReqRepealField->LongCustomerName, pReqRepealField_LongCustomerName); pReqRepealField_LongCustomerName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqRepealField *pReqRepealField)
{
	if(pReqRepealField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i,s:i,s:c,s:c,s:i,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y,s:i,s:i,s:y,s:c,s:y,s:d,s:d,s:c,s:d,s:d,s:y,s:y,s:c,s:y,s:c,s:y,s:y,s:c,s:c,s:y,s:i,s:i,s:c,s:y}"
		, "RepealTimeInterval", pReqRepealField->RepealTimeInterval
		, "RepealedTimes", pReqRepealField->RepealedTimes
		, "BankRepealFlag", pReqRepealField->BankRepealFlag
		, "BrokerRepealFlag", pReqRepealField->BrokerRepealFlag
		, "PlateRepealSerial", pReqRepealField->PlateRepealSerial
		, "BankRepealSerial", pReqRepealField->BankRepealSerial
		, "FutureRepealSerial", pReqRepealField->FutureRepealSerial
		, "TradeCode", pReqRepealField->TradeCode
		, "BankID", pReqRepealField->BankID
		, "BankBranchID", pReqRepealField->BankBranchID
		, "BrokerID", pReqRepealField->BrokerID
		, "BrokerBranchID", pReqRepealField->BrokerBranchID
		, "TradeDate", pReqRepealField->TradeDate
		, "TradeTime", pReqRepealField->TradeTime
		, "BankSerial", pReqRepealField->BankSerial
		, "TradingDay", pReqRepealField->TradingDay
		, "PlateSerial", pReqRepealField->PlateSerial
		, "LastFragment", pReqRepealField->LastFragment
		, "SessionID", pReqRepealField->SessionID
		, "CustomerName", pReqRepealField->CustomerName
		, "IdCardType", pReqRepealField->IdCardType
		, "IdentifiedCardNo", pReqRepealField->IdentifiedCardNo
		, "CustType", pReqRepealField->CustType
		, "BankAccount", pReqRepealField->BankAccount
		, "BankPassWord", pReqRepealField->BankPassWord
		, "AccountID", pReqRepealField->AccountID
		, "Password", pReqRepealField->Password
		, "InstallID", pReqRepealField->InstallID
		, "FutureSerial", pReqRepealField->FutureSerial
		, "UserID", pReqRepealField->UserID
		, "VerifyCertNoFlag", pReqRepealField->VerifyCertNoFlag
		, "CurrencyID", pReqRepealField->CurrencyID
		, "TradeAmount", pReqRepealField->TradeAmount
		, "FutureFetchAmount", pReqRepealField->FutureFetchAmount
		, "FeePayFlag", pReqRepealField->FeePayFlag
		, "CustFee", pReqRepealField->CustFee
		, "BrokerFee", pReqRepealField->BrokerFee
		, "Message", pReqRepealField->Message
		, "Digest", pReqRepealField->Digest
		, "BankAccType", pReqRepealField->BankAccType
		, "DeviceID", pReqRepealField->DeviceID
		, "BankSecuAccType", pReqRepealField->BankSecuAccType
		, "BrokerIDByBank", pReqRepealField->BrokerIDByBank
		, "BankSecuAcc", pReqRepealField->BankSecuAcc
		, "BankPwdFlag", pReqRepealField->BankPwdFlag
		, "SecuPwdFlag", pReqRepealField->SecuPwdFlag
		, "OperNo", pReqRepealField->OperNo
		, "RequestID", pReqRepealField->RequestID
		, "TID", pReqRepealField->TID
		, "TransferStatus", pReqRepealField->TransferStatus
		, "LongCustomerName", pReqRepealField->LongCustomerName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcRspRepealField *pRspRepealField, PyObject *dict)
{
	static char *kwlist[] = {"RepealTimeInterval", "RepealedTimes", "BankRepealFlag", "BrokerRepealFlag", "PlateRepealSerial", "BankRepealSerial", "FutureRepealSerial", "TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "CustomerName", "IdCardType", "IdentifiedCardNo", "CustType", "BankAccount", "BankPassWord", "AccountID", "Password", "InstallID", "FutureSerial", "UserID", "VerifyCertNoFlag", "CurrencyID", "TradeAmount", "FutureFetchAmount", "FeePayFlag", "CustFee", "BrokerFee", "Message", "Digest", "BankAccType", "DeviceID", "BankSecuAccType", "BrokerIDByBank", "BankSecuAcc", "BankPwdFlag", "SecuPwdFlag", "OperNo", "RequestID", "TID", "TransferStatus", "ErrorID", "ErrorMsg", "LongCustomerName", nullptr};
	int pRspRepealField_RepealTimeInterval = 0;
	int pRspRepealField_RepealedTimes = 0;
	char pRspRepealField_BankRepealFlag = 0;
	char pRspRepealField_BrokerRepealFlag = 0;
	int pRspRepealField_PlateRepealSerial = 0;
	char *pRspRepealField_BankRepealSerial = nullptr;
	int pRspRepealField_FutureRepealSerial = 0;
	char *pRspRepealField_TradeCode = nullptr;
	char *pRspRepealField_BankID = nullptr;
	char *pRspRepealField_BankBranchID = nullptr;
	char *pRspRepealField_BrokerID = nullptr;
	char *pRspRepealField_BrokerBranchID = nullptr;
	char *pRspRepealField_TradeDate = nullptr;
	char *pRspRepealField_TradeTime = nullptr;
	char *pRspRepealField_BankSerial = nullptr;
	char *pRspRepealField_TradingDay = nullptr;
	int pRspRepealField_PlateSerial = 0;
	char pRspRepealField_LastFragment = 0;
	int pRspRepealField_SessionID = 0;
	char *pRspRepealField_CustomerName = nullptr;
	char pRspRepealField_IdCardType = 0;
	char *pRspRepealField_IdentifiedCardNo = nullptr;
	char pRspRepealField_CustType = 0;
	char *pRspRepealField_BankAccount = nullptr;
	char *pRspRepealField_BankPassWord = nullptr;
	char *pRspRepealField_AccountID = nullptr;
	char *pRspRepealField_Password = nullptr;
	int pRspRepealField_InstallID = 0;
	int pRspRepealField_FutureSerial = 0;
	char *pRspRepealField_UserID = nullptr;
	char pRspRepealField_VerifyCertNoFlag = 0;
	char *pRspRepealField_CurrencyID = nullptr;
	double pRspRepealField_TradeAmount = 0.0;
	double pRspRepealField_FutureFetchAmount = 0.0;
	char pRspRepealField_FeePayFlag = 0;
	double pRspRepealField_CustFee = 0.0;
	double pRspRepealField_BrokerFee = 0.0;
	char *pRspRepealField_Message = nullptr;
	char *pRspRepealField_Digest = nullptr;
	char pRspRepealField_BankAccType = 0;
	char *pRspRepealField_DeviceID = nullptr;
	char pRspRepealField_BankSecuAccType = 0;
	char *pRspRepealField_BrokerIDByBank = nullptr;
	char *pRspRepealField_BankSecuAcc = nullptr;
	char pRspRepealField_BankPwdFlag = 0;
	char pRspRepealField_SecuPwdFlag = 0;
	char *pRspRepealField_OperNo = nullptr;
	int pRspRepealField_RequestID = 0;
	int pRspRepealField_TID = 0;
	char pRspRepealField_TransferStatus = 0;
	int pRspRepealField_ErrorID = 0;
	char *pRspRepealField_ErrorMsg = nullptr;
	char *pRspRepealField_LongCustomerName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pRspRepealField, "|iicciyiyyyyyyyyyiciycycyyyyiiycyddcddyycycyyccyiiciyy")
		, &pRspRepealField_RepealTimeInterval
		, &pRspRepealField_RepealedTimes
		, &pRspRepealField_BankRepealFlag
		, &pRspRepealField_BrokerRepealFlag
		, &pRspRepealField_PlateRepealSerial
		, &pRspRepealField_BankRepealSerial
		, &pRspRepealField_FutureRepealSerial
		, &pRspRepealField_TradeCode
		, &pRspRepealField_BankID
		, &pRspRepealField_BankBranchID
		, &pRspRepealField_BrokerID
		, &pRspRepealField_BrokerBranchID
		, &pRspRepealField_TradeDate
		, &pRspRepealField_TradeTime
		, &pRspRepealField_BankSerial
		, &pRspRepealField_TradingDay
		, &pRspRepealField_PlateSerial
		, &pRspRepealField_LastFragment
		, &pRspRepealField_SessionID
		, &pRspRepealField_CustomerName
		, &pRspRepealField_IdCardType
		, &pRspRepealField_IdentifiedCardNo
		, &pRspRepealField_CustType
		, &pRspRepealField_BankAccount
		, &pRspRepealField_BankPassWord
		, &pRspRepealField_AccountID
		, &pRspRepealField_Password
		, &pRspRepealField_InstallID
		, &pRspRepealField_FutureSerial
		, &pRspRepealField_UserID
		, &pRspRepealField_VerifyCertNoFlag
		, &pRspRepealField_CurrencyID
		, &pRspRepealField_TradeAmount
		, &pRspRepealField_FutureFetchAmount
		, &pRspRepealField_FeePayFlag
		, &pRspRepealField_CustFee
		, &pRspRepealField_BrokerFee
		, &pRspRepealField_Message
		, &pRspRepealField_Digest
		, &pRspRepealField_BankAccType
		, &pRspRepealField_DeviceID
		, &pRspRepealField_BankSecuAccType
		, &pRspRepealField_BrokerIDByBank
		, &pRspRepealField_BankSecuAcc
		, &pRspRepealField_BankPwdFlag
		, &pRspRepealField_SecuPwdFlag
		, &pRspRepealField_OperNo
		, &pRspRepealField_RequestID
		, &pRspRepealField_TID
		, &pRspRepealField_TransferStatus
		, &pRspRepealField_ErrorID
		, &pRspRepealField_ErrorMsg
		, &pRspRepealField_LongCustomerName
	PyCTP_PyDict_FromStruct_END
		pRspRepealField->RepealTimeInterval = pRspRepealField_RepealTimeInterval;
		pRspRepealField->RepealedTimes = pRspRepealField_RepealedTimes;
		pRspRepealField->BankRepealFlag = pRspRepealField_BankRepealFlag;
		pRspRepealField->BrokerRepealFlag = pRspRepealField_BrokerRepealFlag;
		pRspRepealField->PlateRepealSerial = pRspRepealField_PlateRepealSerial;
		if(pRspRepealField_BankRepealSerial != nullptr){ strcpy_s(pRspRepealField->BankRepealSerial, pRspRepealField_BankRepealSerial); pRspRepealField_BankRepealSerial = nullptr; }
		pRspRepealField->FutureRepealSerial = pRspRepealField_FutureRepealSerial;
		if(pRspRepealField_TradeCode != nullptr){ strcpy_s(pRspRepealField->TradeCode, pRspRepealField_TradeCode); pRspRepealField_TradeCode = nullptr; }
		if(pRspRepealField_BankID != nullptr){ strcpy_s(pRspRepealField->BankID, pRspRepealField_BankID); pRspRepealField_BankID = nullptr; }
		if(pRspRepealField_BankBranchID != nullptr){ strcpy_s(pRspRepealField->BankBranchID, pRspRepealField_BankBranchID); pRspRepealField_BankBranchID = nullptr; }
		if(pRspRepealField_BrokerID != nullptr){ strcpy_s(pRspRepealField->BrokerID, pRspRepealField_BrokerID); pRspRepealField_BrokerID = nullptr; }
		if(pRspRepealField_BrokerBranchID != nullptr){ strcpy_s(pRspRepealField->BrokerBranchID, pRspRepealField_BrokerBranchID); pRspRepealField_BrokerBranchID = nullptr; }
		if(pRspRepealField_TradeDate != nullptr){ strcpy_s(pRspRepealField->TradeDate, pRspRepealField_TradeDate); pRspRepealField_TradeDate = nullptr; }
		if(pRspRepealField_TradeTime != nullptr){ strcpy_s(pRspRepealField->TradeTime, pRspRepealField_TradeTime); pRspRepealField_TradeTime = nullptr; }
		if(pRspRepealField_BankSerial != nullptr){ strcpy_s(pRspRepealField->BankSerial, pRspRepealField_BankSerial); pRspRepealField_BankSerial = nullptr; }
		if(pRspRepealField_TradingDay != nullptr){ strcpy_s(pRspRepealField->TradingDay, pRspRepealField_TradingDay); pRspRepealField_TradingDay = nullptr; }
		pRspRepealField->PlateSerial = pRspRepealField_PlateSerial;
		pRspRepealField->LastFragment = pRspRepealField_LastFragment;
		pRspRepealField->SessionID = pRspRepealField_SessionID;
		if(pRspRepealField_CustomerName != nullptr){ strcpy_s(pRspRepealField->CustomerName, pRspRepealField_CustomerName); pRspRepealField_CustomerName = nullptr; }
		pRspRepealField->IdCardType = pRspRepealField_IdCardType;
		if(pRspRepealField_IdentifiedCardNo != nullptr){ strcpy_s(pRspRepealField->IdentifiedCardNo, pRspRepealField_IdentifiedCardNo); pRspRepealField_IdentifiedCardNo = nullptr; }
		pRspRepealField->CustType = pRspRepealField_CustType;
		if(pRspRepealField_BankAccount != nullptr){ strcpy_s(pRspRepealField->BankAccount, pRspRepealField_BankAccount); pRspRepealField_BankAccount = nullptr; }
		if(pRspRepealField_BankPassWord != nullptr){ strcpy_s(pRspRepealField->BankPassWord, pRspRepealField_BankPassWord); pRspRepealField_BankPassWord = nullptr; }
		if(pRspRepealField_AccountID != nullptr){ strcpy_s(pRspRepealField->AccountID, pRspRepealField_AccountID); pRspRepealField_AccountID = nullptr; }
		if(pRspRepealField_Password != nullptr){ strcpy_s(pRspRepealField->Password, pRspRepealField_Password); pRspRepealField_Password = nullptr; }
		pRspRepealField->InstallID = pRspRepealField_InstallID;
		pRspRepealField->FutureSerial = pRspRepealField_FutureSerial;
		if(pRspRepealField_UserID != nullptr){ strcpy_s(pRspRepealField->UserID, pRspRepealField_UserID); pRspRepealField_UserID = nullptr; }
		pRspRepealField->VerifyCertNoFlag = pRspRepealField_VerifyCertNoFlag;
		if(pRspRepealField_CurrencyID != nullptr){ strcpy_s(pRspRepealField->CurrencyID, pRspRepealField_CurrencyID); pRspRepealField_CurrencyID = nullptr; }
		pRspRepealField->TradeAmount = pRspRepealField_TradeAmount;
		pRspRepealField->FutureFetchAmount = pRspRepealField_FutureFetchAmount;
		pRspRepealField->FeePayFlag = pRspRepealField_FeePayFlag;
		pRspRepealField->CustFee = pRspRepealField_CustFee;
		pRspRepealField->BrokerFee = pRspRepealField_BrokerFee;
		if(pRspRepealField_Message != nullptr){ strcpy_s(pRspRepealField->Message, pRspRepealField_Message); pRspRepealField_Message = nullptr; }
		if(pRspRepealField_Digest != nullptr){ strcpy_s(pRspRepealField->Digest, pRspRepealField_Digest); pRspRepealField_Digest = nullptr; }
		pRspRepealField->BankAccType = pRspRepealField_BankAccType;
		if(pRspRepealField_DeviceID != nullptr){ strcpy_s(pRspRepealField->DeviceID, pRspRepealField_DeviceID); pRspRepealField_DeviceID = nullptr; }
		pRspRepealField->BankSecuAccType = pRspRepealField_BankSecuAccType;
		if(pRspRepealField_BrokerIDByBank != nullptr){ strcpy_s(pRspRepealField->BrokerIDByBank, pRspRepealField_BrokerIDByBank); pRspRepealField_BrokerIDByBank = nullptr; }
		if(pRspRepealField_BankSecuAcc != nullptr){ strcpy_s(pRspRepealField->BankSecuAcc, pRspRepealField_BankSecuAcc); pRspRepealField_BankSecuAcc = nullptr; }
		pRspRepealField->BankPwdFlag = pRspRepealField_BankPwdFlag;
		pRspRepealField->SecuPwdFlag = pRspRepealField_SecuPwdFlag;
		if(pRspRepealField_OperNo != nullptr){ strcpy_s(pRspRepealField->OperNo, pRspRepealField_OperNo); pRspRepealField_OperNo = nullptr; }
		pRspRepealField->RequestID = pRspRepealField_RequestID;
		pRspRepealField->TID = pRspRepealField_TID;
		pRspRepealField->TransferStatus = pRspRepealField_TransferStatus;
		pRspRepealField->ErrorID = pRspRepealField_ErrorID;
		if(pRspRepealField_ErrorMsg != nullptr){ strcpy_s(pRspRepealField->ErrorMsg, pRspRepealField_ErrorMsg); pRspRepealField_ErrorMsg = nullptr; }
		if(pRspRepealField_LongCustomerName != nullptr){ strcpy_s(pRspRepealField->LongCustomerName, pRspRepealField_LongCustomerName); pRspRepealField_LongCustomerName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcRspRepealField *pRspRepealField)
{
	if(pRspRepealField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i,s:i,s:c,s:c,s:i,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y,s:i,s:i,s:y,s:c,s:y,s:d,s:d,s:c,s:d,s:d,s:y,s:y,s:c,s:y,s:c,s:y,s:y,s:c,s:c,s:y,s:i,s:i,s:c,s:i,s:y,s:y}"
		, "RepealTimeInterval", pRspRepealField->RepealTimeInterval
		, "RepealedTimes", pRspRepealField->RepealedTimes
		, "BankRepealFlag", pRspRepealField->BankRepealFlag
		, "BrokerRepealFlag", pRspRepealField->BrokerRepealFlag
		, "PlateRepealSerial", pRspRepealField->PlateRepealSerial
		, "BankRepealSerial", pRspRepealField->BankRepealSerial
		, "FutureRepealSerial", pRspRepealField->FutureRepealSerial
		, "TradeCode", pRspRepealField->TradeCode
		, "BankID", pRspRepealField->BankID
		, "BankBranchID", pRspRepealField->BankBranchID
		, "BrokerID", pRspRepealField->BrokerID
		, "BrokerBranchID", pRspRepealField->BrokerBranchID
		, "TradeDate", pRspRepealField->TradeDate
		, "TradeTime", pRspRepealField->TradeTime
		, "BankSerial", pRspRepealField->BankSerial
		, "TradingDay", pRspRepealField->TradingDay
		, "PlateSerial", pRspRepealField->PlateSerial
		, "LastFragment", pRspRepealField->LastFragment
		, "SessionID", pRspRepealField->SessionID
		, "CustomerName", pRspRepealField->CustomerName
		, "IdCardType", pRspRepealField->IdCardType
		, "IdentifiedCardNo", pRspRepealField->IdentifiedCardNo
		, "CustType", pRspRepealField->CustType
		, "BankAccount", pRspRepealField->BankAccount
		, "BankPassWord", pRspRepealField->BankPassWord
		, "AccountID", pRspRepealField->AccountID
		, "Password", pRspRepealField->Password
		, "InstallID", pRspRepealField->InstallID
		, "FutureSerial", pRspRepealField->FutureSerial
		, "UserID", pRspRepealField->UserID
		, "VerifyCertNoFlag", pRspRepealField->VerifyCertNoFlag
		, "CurrencyID", pRspRepealField->CurrencyID
		, "TradeAmount", pRspRepealField->TradeAmount
		, "FutureFetchAmount", pRspRepealField->FutureFetchAmount
		, "FeePayFlag", pRspRepealField->FeePayFlag
		, "CustFee", pRspRepealField->CustFee
		, "BrokerFee", pRspRepealField->BrokerFee
		, "Message", pRspRepealField->Message
		, "Digest", pRspRepealField->Digest
		, "BankAccType", pRspRepealField->BankAccType
		, "DeviceID", pRspRepealField->DeviceID
		, "BankSecuAccType", pRspRepealField->BankSecuAccType
		, "BrokerIDByBank", pRspRepealField->BrokerIDByBank
		, "BankSecuAcc", pRspRepealField->BankSecuAcc
		, "BankPwdFlag", pRspRepealField->BankPwdFlag
		, "SecuPwdFlag", pRspRepealField->SecuPwdFlag
		, "OperNo", pRspRepealField->OperNo
		, "RequestID", pRspRepealField->RequestID
		, "TID", pRspRepealField->TID
		, "TransferStatus", pRspRepealField->TransferStatus
		, "ErrorID", pRspRepealField->ErrorID
		, "ErrorMsg", pRspRepealField->ErrorMsg
		, "LongCustomerName", pRspRepealField->LongCustomerName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqQueryAccountField *pReqQueryAccountField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "CustomerName", "IdCardType", "IdentifiedCardNo", "CustType", "BankAccount", "BankPassWord", "AccountID", "Password", "FutureSerial", "InstallID", "UserID", "VerifyCertNoFlag", "CurrencyID", "Digest", "BankAccType", "DeviceID", "BankSecuAccType", "BrokerIDByBank", "BankSecuAcc", "BankPwdFlag", "SecuPwdFlag", "OperNo", "RequestID", "TID", "LongCustomerName", nullptr};
	char *pReqQueryAccountField_TradeCode = nullptr;
	char *pReqQueryAccountField_BankID = nullptr;
	char *pReqQueryAccountField_BankBranchID = nullptr;
	char *pReqQueryAccountField_BrokerID = nullptr;
	char *pReqQueryAccountField_BrokerBranchID = nullptr;
	char *pReqQueryAccountField_TradeDate = nullptr;
	char *pReqQueryAccountField_TradeTime = nullptr;
	char *pReqQueryAccountField_BankSerial = nullptr;
	char *pReqQueryAccountField_TradingDay = nullptr;
	int pReqQueryAccountField_PlateSerial = 0;
	char pReqQueryAccountField_LastFragment = 0;
	int pReqQueryAccountField_SessionID = 0;
	char *pReqQueryAccountField_CustomerName = nullptr;
	char pReqQueryAccountField_IdCardType = 0;
	char *pReqQueryAccountField_IdentifiedCardNo = nullptr;
	char pReqQueryAccountField_CustType = 0;
	char *pReqQueryAccountField_BankAccount = nullptr;
	char *pReqQueryAccountField_BankPassWord = nullptr;
	char *pReqQueryAccountField_AccountID = nullptr;
	char *pReqQueryAccountField_Password = nullptr;
	int pReqQueryAccountField_FutureSerial = 0;
	int pReqQueryAccountField_InstallID = 0;
	char *pReqQueryAccountField_UserID = nullptr;
	char pReqQueryAccountField_VerifyCertNoFlag = 0;
	char *pReqQueryAccountField_CurrencyID = nullptr;
	char *pReqQueryAccountField_Digest = nullptr;
	char pReqQueryAccountField_BankAccType = 0;
	char *pReqQueryAccountField_DeviceID = nullptr;
	char pReqQueryAccountField_BankSecuAccType = 0;
	char *pReqQueryAccountField_BrokerIDByBank = nullptr;
	char *pReqQueryAccountField_BankSecuAcc = nullptr;
	char pReqQueryAccountField_BankPwdFlag = 0;
	char pReqQueryAccountField_SecuPwdFlag = 0;
	char *pReqQueryAccountField_OperNo = nullptr;
	int pReqQueryAccountField_RequestID = 0;
	int pReqQueryAccountField_TID = 0;
	char *pReqQueryAccountField_LongCustomerName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pReqQueryAccountField, "|yyyyyyyyyiciycycyyyyiiycyycycyyccyiiy")
		, &pReqQueryAccountField_TradeCode
		, &pReqQueryAccountField_BankID
		, &pReqQueryAccountField_BankBranchID
		, &pReqQueryAccountField_BrokerID
		, &pReqQueryAccountField_BrokerBranchID
		, &pReqQueryAccountField_TradeDate
		, &pReqQueryAccountField_TradeTime
		, &pReqQueryAccountField_BankSerial
		, &pReqQueryAccountField_TradingDay
		, &pReqQueryAccountField_PlateSerial
		, &pReqQueryAccountField_LastFragment
		, &pReqQueryAccountField_SessionID
		, &pReqQueryAccountField_CustomerName
		, &pReqQueryAccountField_IdCardType
		, &pReqQueryAccountField_IdentifiedCardNo
		, &pReqQueryAccountField_CustType
		, &pReqQueryAccountField_BankAccount
		, &pReqQueryAccountField_BankPassWord
		, &pReqQueryAccountField_AccountID
		, &pReqQueryAccountField_Password
		, &pReqQueryAccountField_FutureSerial
		, &pReqQueryAccountField_InstallID
		, &pReqQueryAccountField_UserID
		, &pReqQueryAccountField_VerifyCertNoFlag
		, &pReqQueryAccountField_CurrencyID
		, &pReqQueryAccountField_Digest
		, &pReqQueryAccountField_BankAccType
		, &pReqQueryAccountField_DeviceID
		, &pReqQueryAccountField_BankSecuAccType
		, &pReqQueryAccountField_BrokerIDByBank
		, &pReqQueryAccountField_BankSecuAcc
		, &pReqQueryAccountField_BankPwdFlag
		, &pReqQueryAccountField_SecuPwdFlag
		, &pReqQueryAccountField_OperNo
		, &pReqQueryAccountField_RequestID
		, &pReqQueryAccountField_TID
		, &pReqQueryAccountField_LongCustomerName
	PyCTP_PyDict_FromStruct_END
		if(pReqQueryAccountField_TradeCode != nullptr){ strcpy_s(pReqQueryAccountField->TradeCode, pReqQueryAccountField_TradeCode); pReqQueryAccountField_TradeCode = nullptr; }
		if(pReqQueryAccountField_BankID != nullptr){ strcpy_s(pReqQueryAccountField->BankID, pReqQueryAccountField_BankID); pReqQueryAccountField_BankID = nullptr; }
		if(pReqQueryAccountField_BankBranchID != nullptr){ strcpy_s(pReqQueryAccountField->BankBranchID, pReqQueryAccountField_BankBranchID); pReqQueryAccountField_BankBranchID = nullptr; }
		if(pReqQueryAccountField_BrokerID != nullptr){ strcpy_s(pReqQueryAccountField->BrokerID, pReqQueryAccountField_BrokerID); pReqQueryAccountField_BrokerID = nullptr; }
		if(pReqQueryAccountField_BrokerBranchID != nullptr){ strcpy_s(pReqQueryAccountField->BrokerBranchID, pReqQueryAccountField_BrokerBranchID); pReqQueryAccountField_BrokerBranchID = nullptr; }
		if(pReqQueryAccountField_TradeDate != nullptr){ strcpy_s(pReqQueryAccountField->TradeDate, pReqQueryAccountField_TradeDate); pReqQueryAccountField_TradeDate = nullptr; }
		if(pReqQueryAccountField_TradeTime != nullptr){ strcpy_s(pReqQueryAccountField->TradeTime, pReqQueryAccountField_TradeTime); pReqQueryAccountField_TradeTime = nullptr; }
		if(pReqQueryAccountField_BankSerial != nullptr){ strcpy_s(pReqQueryAccountField->BankSerial, pReqQueryAccountField_BankSerial); pReqQueryAccountField_BankSerial = nullptr; }
		if(pReqQueryAccountField_TradingDay != nullptr){ strcpy_s(pReqQueryAccountField->TradingDay, pReqQueryAccountField_TradingDay); pReqQueryAccountField_TradingDay = nullptr; }
		pReqQueryAccountField->PlateSerial = pReqQueryAccountField_PlateSerial;
		pReqQueryAccountField->LastFragment = pReqQueryAccountField_LastFragment;
		pReqQueryAccountField->SessionID = pReqQueryAccountField_SessionID;
		if(pReqQueryAccountField_CustomerName != nullptr){ strcpy_s(pReqQueryAccountField->CustomerName, pReqQueryAccountField_CustomerName); pReqQueryAccountField_CustomerName = nullptr; }
		pReqQueryAccountField->IdCardType = pReqQueryAccountField_IdCardType;
		if(pReqQueryAccountField_IdentifiedCardNo != nullptr){ strcpy_s(pReqQueryAccountField->IdentifiedCardNo, pReqQueryAccountField_IdentifiedCardNo); pReqQueryAccountField_IdentifiedCardNo = nullptr; }
		pReqQueryAccountField->CustType = pReqQueryAccountField_CustType;
		if(pReqQueryAccountField_BankAccount != nullptr){ strcpy_s(pReqQueryAccountField->BankAccount, pReqQueryAccountField_BankAccount); pReqQueryAccountField_BankAccount = nullptr; }
		if(pReqQueryAccountField_BankPassWord != nullptr){ strcpy_s(pReqQueryAccountField->BankPassWord, pReqQueryAccountField_BankPassWord); pReqQueryAccountField_BankPassWord = nullptr; }
		if(pReqQueryAccountField_AccountID != nullptr){ strcpy_s(pReqQueryAccountField->AccountID, pReqQueryAccountField_AccountID); pReqQueryAccountField_AccountID = nullptr; }
		if(pReqQueryAccountField_Password != nullptr){ strcpy_s(pReqQueryAccountField->Password, pReqQueryAccountField_Password); pReqQueryAccountField_Password = nullptr; }
		pReqQueryAccountField->FutureSerial = pReqQueryAccountField_FutureSerial;
		pReqQueryAccountField->InstallID = pReqQueryAccountField_InstallID;
		if(pReqQueryAccountField_UserID != nullptr){ strcpy_s(pReqQueryAccountField->UserID, pReqQueryAccountField_UserID); pReqQueryAccountField_UserID = nullptr; }
		pReqQueryAccountField->VerifyCertNoFlag = pReqQueryAccountField_VerifyCertNoFlag;
		if(pReqQueryAccountField_CurrencyID != nullptr){ strcpy_s(pReqQueryAccountField->CurrencyID, pReqQueryAccountField_CurrencyID); pReqQueryAccountField_CurrencyID = nullptr; }
		if(pReqQueryAccountField_Digest != nullptr){ strcpy_s(pReqQueryAccountField->Digest, pReqQueryAccountField_Digest); pReqQueryAccountField_Digest = nullptr; }
		pReqQueryAccountField->BankAccType = pReqQueryAccountField_BankAccType;
		if(pReqQueryAccountField_DeviceID != nullptr){ strcpy_s(pReqQueryAccountField->DeviceID, pReqQueryAccountField_DeviceID); pReqQueryAccountField_DeviceID = nullptr; }
		pReqQueryAccountField->BankSecuAccType = pReqQueryAccountField_BankSecuAccType;
		if(pReqQueryAccountField_BrokerIDByBank != nullptr){ strcpy_s(pReqQueryAccountField->BrokerIDByBank, pReqQueryAccountField_BrokerIDByBank); pReqQueryAccountField_BrokerIDByBank = nullptr; }
		if(pReqQueryAccountField_BankSecuAcc != nullptr){ strcpy_s(pReqQueryAccountField->BankSecuAcc, pReqQueryAccountField_BankSecuAcc); pReqQueryAccountField_BankSecuAcc = nullptr; }
		pReqQueryAccountField->BankPwdFlag = pReqQueryAccountField_BankPwdFlag;
		pReqQueryAccountField->SecuPwdFlag = pReqQueryAccountField_SecuPwdFlag;
		if(pReqQueryAccountField_OperNo != nullptr){ strcpy_s(pReqQueryAccountField->OperNo, pReqQueryAccountField_OperNo); pReqQueryAccountField_OperNo = nullptr; }
		pReqQueryAccountField->RequestID = pReqQueryAccountField_RequestID;
		pReqQueryAccountField->TID = pReqQueryAccountField_TID;
		if(pReqQueryAccountField_LongCustomerName != nullptr){ strcpy_s(pReqQueryAccountField->LongCustomerName, pReqQueryAccountField_LongCustomerName); pReqQueryAccountField_LongCustomerName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqQueryAccountField *pReqQueryAccountField)
{
	if(pReqQueryAccountField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y,s:i,s:i,s:y,s:c,s:y,s:y,s:c,s:y,s:c,s:y,s:y,s:c,s:c,s:y,s:i,s:i,s:y}"
		, "TradeCode", pReqQueryAccountField->TradeCode
		, "BankID", pReqQueryAccountField->BankID
		, "BankBranchID", pReqQueryAccountField->BankBranchID
		, "BrokerID", pReqQueryAccountField->BrokerID
		, "BrokerBranchID", pReqQueryAccountField->BrokerBranchID
		, "TradeDate", pReqQueryAccountField->TradeDate
		, "TradeTime", pReqQueryAccountField->TradeTime
		, "BankSerial", pReqQueryAccountField->BankSerial
		, "TradingDay", pReqQueryAccountField->TradingDay
		, "PlateSerial", pReqQueryAccountField->PlateSerial
		, "LastFragment", pReqQueryAccountField->LastFragment
		, "SessionID", pReqQueryAccountField->SessionID
		, "CustomerName", pReqQueryAccountField->CustomerName
		, "IdCardType", pReqQueryAccountField->IdCardType
		, "IdentifiedCardNo", pReqQueryAccountField->IdentifiedCardNo
		, "CustType", pReqQueryAccountField->CustType
		, "BankAccount", pReqQueryAccountField->BankAccount
		, "BankPassWord", pReqQueryAccountField->BankPassWord
		, "AccountID", pReqQueryAccountField->AccountID
		, "Password", pReqQueryAccountField->Password
		, "FutureSerial", pReqQueryAccountField->FutureSerial
		, "InstallID", pReqQueryAccountField->InstallID
		, "UserID", pReqQueryAccountField->UserID
		, "VerifyCertNoFlag", pReqQueryAccountField->VerifyCertNoFlag
		, "CurrencyID", pReqQueryAccountField->CurrencyID
		, "Digest", pReqQueryAccountField->Digest
		, "BankAccType", pReqQueryAccountField->BankAccType
		, "DeviceID", pReqQueryAccountField->DeviceID
		, "BankSecuAccType", pReqQueryAccountField->BankSecuAccType
		, "BrokerIDByBank", pReqQueryAccountField->BrokerIDByBank
		, "BankSecuAcc", pReqQueryAccountField->BankSecuAcc
		, "BankPwdFlag", pReqQueryAccountField->BankPwdFlag
		, "SecuPwdFlag", pReqQueryAccountField->SecuPwdFlag
		, "OperNo", pReqQueryAccountField->OperNo
		, "RequestID", pReqQueryAccountField->RequestID
		, "TID", pReqQueryAccountField->TID
		, "LongCustomerName", pReqQueryAccountField->LongCustomerName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcRspQueryAccountField *pRspQueryAccountField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "CustomerName", "IdCardType", "IdentifiedCardNo", "CustType", "BankAccount", "BankPassWord", "AccountID", "Password", "FutureSerial", "InstallID", "UserID", "VerifyCertNoFlag", "CurrencyID", "Digest", "BankAccType", "DeviceID", "BankSecuAccType", "BrokerIDByBank", "BankSecuAcc", "BankPwdFlag", "SecuPwdFlag", "OperNo", "RequestID", "TID", "BankUseAmount", "BankFetchAmount", "LongCustomerName", nullptr};
	char *pRspQueryAccountField_TradeCode = nullptr;
	char *pRspQueryAccountField_BankID = nullptr;
	char *pRspQueryAccountField_BankBranchID = nullptr;
	char *pRspQueryAccountField_BrokerID = nullptr;
	char *pRspQueryAccountField_BrokerBranchID = nullptr;
	char *pRspQueryAccountField_TradeDate = nullptr;
	char *pRspQueryAccountField_TradeTime = nullptr;
	char *pRspQueryAccountField_BankSerial = nullptr;
	char *pRspQueryAccountField_TradingDay = nullptr;
	int pRspQueryAccountField_PlateSerial = 0;
	char pRspQueryAccountField_LastFragment = 0;
	int pRspQueryAccountField_SessionID = 0;
	char *pRspQueryAccountField_CustomerName = nullptr;
	char pRspQueryAccountField_IdCardType = 0;
	char *pRspQueryAccountField_IdentifiedCardNo = nullptr;
	char pRspQueryAccountField_CustType = 0;
	char *pRspQueryAccountField_BankAccount = nullptr;
	char *pRspQueryAccountField_BankPassWord = nullptr;
	char *pRspQueryAccountField_AccountID = nullptr;
	char *pRspQueryAccountField_Password = nullptr;
	int pRspQueryAccountField_FutureSerial = 0;
	int pRspQueryAccountField_InstallID = 0;
	char *pRspQueryAccountField_UserID = nullptr;
	char pRspQueryAccountField_VerifyCertNoFlag = 0;
	char *pRspQueryAccountField_CurrencyID = nullptr;
	char *pRspQueryAccountField_Digest = nullptr;
	char pRspQueryAccountField_BankAccType = 0;
	char *pRspQueryAccountField_DeviceID = nullptr;
	char pRspQueryAccountField_BankSecuAccType = 0;
	char *pRspQueryAccountField_BrokerIDByBank = nullptr;
	char *pRspQueryAccountField_BankSecuAcc = nullptr;
	char pRspQueryAccountField_BankPwdFlag = 0;
	char pRspQueryAccountField_SecuPwdFlag = 0;
	char *pRspQueryAccountField_OperNo = nullptr;
	int pRspQueryAccountField_RequestID = 0;
	int pRspQueryAccountField_TID = 0;
	double pRspQueryAccountField_BankUseAmount = 0.0;
	double pRspQueryAccountField_BankFetchAmount = 0.0;
	char *pRspQueryAccountField_LongCustomerName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pRspQueryAccountField, "|yyyyyyyyyiciycycyyyyiiycyycycyyccyiiddy")
		, &pRspQueryAccountField_TradeCode
		, &pRspQueryAccountField_BankID
		, &pRspQueryAccountField_BankBranchID
		, &pRspQueryAccountField_BrokerID
		, &pRspQueryAccountField_BrokerBranchID
		, &pRspQueryAccountField_TradeDate
		, &pRspQueryAccountField_TradeTime
		, &pRspQueryAccountField_BankSerial
		, &pRspQueryAccountField_TradingDay
		, &pRspQueryAccountField_PlateSerial
		, &pRspQueryAccountField_LastFragment
		, &pRspQueryAccountField_SessionID
		, &pRspQueryAccountField_CustomerName
		, &pRspQueryAccountField_IdCardType
		, &pRspQueryAccountField_IdentifiedCardNo
		, &pRspQueryAccountField_CustType
		, &pRspQueryAccountField_BankAccount
		, &pRspQueryAccountField_BankPassWord
		, &pRspQueryAccountField_AccountID
		, &pRspQueryAccountField_Password
		, &pRspQueryAccountField_FutureSerial
		, &pRspQueryAccountField_InstallID
		, &pRspQueryAccountField_UserID
		, &pRspQueryAccountField_VerifyCertNoFlag
		, &pRspQueryAccountField_CurrencyID
		, &pRspQueryAccountField_Digest
		, &pRspQueryAccountField_BankAccType
		, &pRspQueryAccountField_DeviceID
		, &pRspQueryAccountField_BankSecuAccType
		, &pRspQueryAccountField_BrokerIDByBank
		, &pRspQueryAccountField_BankSecuAcc
		, &pRspQueryAccountField_BankPwdFlag
		, &pRspQueryAccountField_SecuPwdFlag
		, &pRspQueryAccountField_OperNo
		, &pRspQueryAccountField_RequestID
		, &pRspQueryAccountField_TID
		, &pRspQueryAccountField_BankUseAmount
		, &pRspQueryAccountField_BankFetchAmount
		, &pRspQueryAccountField_LongCustomerName
	PyCTP_PyDict_FromStruct_END
		if(pRspQueryAccountField_TradeCode != nullptr){ strcpy_s(pRspQueryAccountField->TradeCode, pRspQueryAccountField_TradeCode); pRspQueryAccountField_TradeCode = nullptr; }
		if(pRspQueryAccountField_BankID != nullptr){ strcpy_s(pRspQueryAccountField->BankID, pRspQueryAccountField_BankID); pRspQueryAccountField_BankID = nullptr; }
		if(pRspQueryAccountField_BankBranchID != nullptr){ strcpy_s(pRspQueryAccountField->BankBranchID, pRspQueryAccountField_BankBranchID); pRspQueryAccountField_BankBranchID = nullptr; }
		if(pRspQueryAccountField_BrokerID != nullptr){ strcpy_s(pRspQueryAccountField->BrokerID, pRspQueryAccountField_BrokerID); pRspQueryAccountField_BrokerID = nullptr; }
		if(pRspQueryAccountField_BrokerBranchID != nullptr){ strcpy_s(pRspQueryAccountField->BrokerBranchID, pRspQueryAccountField_BrokerBranchID); pRspQueryAccountField_BrokerBranchID = nullptr; }
		if(pRspQueryAccountField_TradeDate != nullptr){ strcpy_s(pRspQueryAccountField->TradeDate, pRspQueryAccountField_TradeDate); pRspQueryAccountField_TradeDate = nullptr; }
		if(pRspQueryAccountField_TradeTime != nullptr){ strcpy_s(pRspQueryAccountField->TradeTime, pRspQueryAccountField_TradeTime); pRspQueryAccountField_TradeTime = nullptr; }
		if(pRspQueryAccountField_BankSerial != nullptr){ strcpy_s(pRspQueryAccountField->BankSerial, pRspQueryAccountField_BankSerial); pRspQueryAccountField_BankSerial = nullptr; }
		if(pRspQueryAccountField_TradingDay != nullptr){ strcpy_s(pRspQueryAccountField->TradingDay, pRspQueryAccountField_TradingDay); pRspQueryAccountField_TradingDay = nullptr; }
		pRspQueryAccountField->PlateSerial = pRspQueryAccountField_PlateSerial;
		pRspQueryAccountField->LastFragment = pRspQueryAccountField_LastFragment;
		pRspQueryAccountField->SessionID = pRspQueryAccountField_SessionID;
		if(pRspQueryAccountField_CustomerName != nullptr){ strcpy_s(pRspQueryAccountField->CustomerName, pRspQueryAccountField_CustomerName); pRspQueryAccountField_CustomerName = nullptr; }
		pRspQueryAccountField->IdCardType = pRspQueryAccountField_IdCardType;
		if(pRspQueryAccountField_IdentifiedCardNo != nullptr){ strcpy_s(pRspQueryAccountField->IdentifiedCardNo, pRspQueryAccountField_IdentifiedCardNo); pRspQueryAccountField_IdentifiedCardNo = nullptr; }
		pRspQueryAccountField->CustType = pRspQueryAccountField_CustType;
		if(pRspQueryAccountField_BankAccount != nullptr){ strcpy_s(pRspQueryAccountField->BankAccount, pRspQueryAccountField_BankAccount); pRspQueryAccountField_BankAccount = nullptr; }
		if(pRspQueryAccountField_BankPassWord != nullptr){ strcpy_s(pRspQueryAccountField->BankPassWord, pRspQueryAccountField_BankPassWord); pRspQueryAccountField_BankPassWord = nullptr; }
		if(pRspQueryAccountField_AccountID != nullptr){ strcpy_s(pRspQueryAccountField->AccountID, pRspQueryAccountField_AccountID); pRspQueryAccountField_AccountID = nullptr; }
		if(pRspQueryAccountField_Password != nullptr){ strcpy_s(pRspQueryAccountField->Password, pRspQueryAccountField_Password); pRspQueryAccountField_Password = nullptr; }
		pRspQueryAccountField->FutureSerial = pRspQueryAccountField_FutureSerial;
		pRspQueryAccountField->InstallID = pRspQueryAccountField_InstallID;
		if(pRspQueryAccountField_UserID != nullptr){ strcpy_s(pRspQueryAccountField->UserID, pRspQueryAccountField_UserID); pRspQueryAccountField_UserID = nullptr; }
		pRspQueryAccountField->VerifyCertNoFlag = pRspQueryAccountField_VerifyCertNoFlag;
		if(pRspQueryAccountField_CurrencyID != nullptr){ strcpy_s(pRspQueryAccountField->CurrencyID, pRspQueryAccountField_CurrencyID); pRspQueryAccountField_CurrencyID = nullptr; }
		if(pRspQueryAccountField_Digest != nullptr){ strcpy_s(pRspQueryAccountField->Digest, pRspQueryAccountField_Digest); pRspQueryAccountField_Digest = nullptr; }
		pRspQueryAccountField->BankAccType = pRspQueryAccountField_BankAccType;
		if(pRspQueryAccountField_DeviceID != nullptr){ strcpy_s(pRspQueryAccountField->DeviceID, pRspQueryAccountField_DeviceID); pRspQueryAccountField_DeviceID = nullptr; }
		pRspQueryAccountField->BankSecuAccType = pRspQueryAccountField_BankSecuAccType;
		if(pRspQueryAccountField_BrokerIDByBank != nullptr){ strcpy_s(pRspQueryAccountField->BrokerIDByBank, pRspQueryAccountField_BrokerIDByBank); pRspQueryAccountField_BrokerIDByBank = nullptr; }
		if(pRspQueryAccountField_BankSecuAcc != nullptr){ strcpy_s(pRspQueryAccountField->BankSecuAcc, pRspQueryAccountField_BankSecuAcc); pRspQueryAccountField_BankSecuAcc = nullptr; }
		pRspQueryAccountField->BankPwdFlag = pRspQueryAccountField_BankPwdFlag;
		pRspQueryAccountField->SecuPwdFlag = pRspQueryAccountField_SecuPwdFlag;
		if(pRspQueryAccountField_OperNo != nullptr){ strcpy_s(pRspQueryAccountField->OperNo, pRspQueryAccountField_OperNo); pRspQueryAccountField_OperNo = nullptr; }
		pRspQueryAccountField->RequestID = pRspQueryAccountField_RequestID;
		pRspQueryAccountField->TID = pRspQueryAccountField_TID;
		pRspQueryAccountField->BankUseAmount = pRspQueryAccountField_BankUseAmount;
		pRspQueryAccountField->BankFetchAmount = pRspQueryAccountField_BankFetchAmount;
		if(pRspQueryAccountField_LongCustomerName != nullptr){ strcpy_s(pRspQueryAccountField->LongCustomerName, pRspQueryAccountField_LongCustomerName); pRspQueryAccountField_LongCustomerName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcRspQueryAccountField *pRspQueryAccountField)
{
	if(pRspQueryAccountField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y,s:i,s:i,s:y,s:c,s:y,s:y,s:c,s:y,s:c,s:y,s:y,s:c,s:c,s:y,s:i,s:i,s:d,s:d,s:y}"
		, "TradeCode", pRspQueryAccountField->TradeCode
		, "BankID", pRspQueryAccountField->BankID
		, "BankBranchID", pRspQueryAccountField->BankBranchID
		, "BrokerID", pRspQueryAccountField->BrokerID
		, "BrokerBranchID", pRspQueryAccountField->BrokerBranchID
		, "TradeDate", pRspQueryAccountField->TradeDate
		, "TradeTime", pRspQueryAccountField->TradeTime
		, "BankSerial", pRspQueryAccountField->BankSerial
		, "TradingDay", pRspQueryAccountField->TradingDay
		, "PlateSerial", pRspQueryAccountField->PlateSerial
		, "LastFragment", pRspQueryAccountField->LastFragment
		, "SessionID", pRspQueryAccountField->SessionID
		, "CustomerName", pRspQueryAccountField->CustomerName
		, "IdCardType", pRspQueryAccountField->IdCardType
		, "IdentifiedCardNo", pRspQueryAccountField->IdentifiedCardNo
		, "CustType", pRspQueryAccountField->CustType
		, "BankAccount", pRspQueryAccountField->BankAccount
		, "BankPassWord", pRspQueryAccountField->BankPassWord
		, "AccountID", pRspQueryAccountField->AccountID
		, "Password", pRspQueryAccountField->Password
		, "FutureSerial", pRspQueryAccountField->FutureSerial
		, "InstallID", pRspQueryAccountField->InstallID
		, "UserID", pRspQueryAccountField->UserID
		, "VerifyCertNoFlag", pRspQueryAccountField->VerifyCertNoFlag
		, "CurrencyID", pRspQueryAccountField->CurrencyID
		, "Digest", pRspQueryAccountField->Digest
		, "BankAccType", pRspQueryAccountField->BankAccType
		, "DeviceID", pRspQueryAccountField->DeviceID
		, "BankSecuAccType", pRspQueryAccountField->BankSecuAccType
		, "BrokerIDByBank", pRspQueryAccountField->BrokerIDByBank
		, "BankSecuAcc", pRspQueryAccountField->BankSecuAcc
		, "BankPwdFlag", pRspQueryAccountField->BankPwdFlag
		, "SecuPwdFlag", pRspQueryAccountField->SecuPwdFlag
		, "OperNo", pRspQueryAccountField->OperNo
		, "RequestID", pRspQueryAccountField->RequestID
		, "TID", pRspQueryAccountField->TID
		, "BankUseAmount", pRspQueryAccountField->BankUseAmount
		, "BankFetchAmount", pRspQueryAccountField->BankFetchAmount
		, "LongCustomerName", pRspQueryAccountField->LongCustomerName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcFutureSignIOField *pFutureSignIOField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "InstallID", "UserID", "Digest", "CurrencyID", "DeviceID", "BrokerIDByBank", "OperNo", "RequestID", "TID", nullptr};
	char *pFutureSignIOField_TradeCode = nullptr;
	char *pFutureSignIOField_BankID = nullptr;
	char *pFutureSignIOField_BankBranchID = nullptr;
	char *pFutureSignIOField_BrokerID = nullptr;
	char *pFutureSignIOField_BrokerBranchID = nullptr;
	char *pFutureSignIOField_TradeDate = nullptr;
	char *pFutureSignIOField_TradeTime = nullptr;
	char *pFutureSignIOField_BankSerial = nullptr;
	char *pFutureSignIOField_TradingDay = nullptr;
	int pFutureSignIOField_PlateSerial = 0;
	char pFutureSignIOField_LastFragment = 0;
	int pFutureSignIOField_SessionID = 0;
	int pFutureSignIOField_InstallID = 0;
	char *pFutureSignIOField_UserID = nullptr;
	char *pFutureSignIOField_Digest = nullptr;
	char *pFutureSignIOField_CurrencyID = nullptr;
	char *pFutureSignIOField_DeviceID = nullptr;
	char *pFutureSignIOField_BrokerIDByBank = nullptr;
	char *pFutureSignIOField_OperNo = nullptr;
	int pFutureSignIOField_RequestID = 0;
	int pFutureSignIOField_TID = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pFutureSignIOField, "|yyyyyyyyyiciiyyyyyyii")
		, &pFutureSignIOField_TradeCode
		, &pFutureSignIOField_BankID
		, &pFutureSignIOField_BankBranchID
		, &pFutureSignIOField_BrokerID
		, &pFutureSignIOField_BrokerBranchID
		, &pFutureSignIOField_TradeDate
		, &pFutureSignIOField_TradeTime
		, &pFutureSignIOField_BankSerial
		, &pFutureSignIOField_TradingDay
		, &pFutureSignIOField_PlateSerial
		, &pFutureSignIOField_LastFragment
		, &pFutureSignIOField_SessionID
		, &pFutureSignIOField_InstallID
		, &pFutureSignIOField_UserID
		, &pFutureSignIOField_Digest
		, &pFutureSignIOField_CurrencyID
		, &pFutureSignIOField_DeviceID
		, &pFutureSignIOField_BrokerIDByBank
		, &pFutureSignIOField_OperNo
		, &pFutureSignIOField_RequestID
		, &pFutureSignIOField_TID
	PyCTP_PyDict_FromStruct_END
		if(pFutureSignIOField_TradeCode != nullptr){ strcpy_s(pFutureSignIOField->TradeCode, pFutureSignIOField_TradeCode); pFutureSignIOField_TradeCode = nullptr; }
		if(pFutureSignIOField_BankID != nullptr){ strcpy_s(pFutureSignIOField->BankID, pFutureSignIOField_BankID); pFutureSignIOField_BankID = nullptr; }
		if(pFutureSignIOField_BankBranchID != nullptr){ strcpy_s(pFutureSignIOField->BankBranchID, pFutureSignIOField_BankBranchID); pFutureSignIOField_BankBranchID = nullptr; }
		if(pFutureSignIOField_BrokerID != nullptr){ strcpy_s(pFutureSignIOField->BrokerID, pFutureSignIOField_BrokerID); pFutureSignIOField_BrokerID = nullptr; }
		if(pFutureSignIOField_BrokerBranchID != nullptr){ strcpy_s(pFutureSignIOField->BrokerBranchID, pFutureSignIOField_BrokerBranchID); pFutureSignIOField_BrokerBranchID = nullptr; }
		if(pFutureSignIOField_TradeDate != nullptr){ strcpy_s(pFutureSignIOField->TradeDate, pFutureSignIOField_TradeDate); pFutureSignIOField_TradeDate = nullptr; }
		if(pFutureSignIOField_TradeTime != nullptr){ strcpy_s(pFutureSignIOField->TradeTime, pFutureSignIOField_TradeTime); pFutureSignIOField_TradeTime = nullptr; }
		if(pFutureSignIOField_BankSerial != nullptr){ strcpy_s(pFutureSignIOField->BankSerial, pFutureSignIOField_BankSerial); pFutureSignIOField_BankSerial = nullptr; }
		if(pFutureSignIOField_TradingDay != nullptr){ strcpy_s(pFutureSignIOField->TradingDay, pFutureSignIOField_TradingDay); pFutureSignIOField_TradingDay = nullptr; }
		pFutureSignIOField->PlateSerial = pFutureSignIOField_PlateSerial;
		pFutureSignIOField->LastFragment = pFutureSignIOField_LastFragment;
		pFutureSignIOField->SessionID = pFutureSignIOField_SessionID;
		pFutureSignIOField->InstallID = pFutureSignIOField_InstallID;
		if(pFutureSignIOField_UserID != nullptr){ strcpy_s(pFutureSignIOField->UserID, pFutureSignIOField_UserID); pFutureSignIOField_UserID = nullptr; }
		if(pFutureSignIOField_Digest != nullptr){ strcpy_s(pFutureSignIOField->Digest, pFutureSignIOField_Digest); pFutureSignIOField_Digest = nullptr; }
		if(pFutureSignIOField_CurrencyID != nullptr){ strcpy_s(pFutureSignIOField->CurrencyID, pFutureSignIOField_CurrencyID); pFutureSignIOField_CurrencyID = nullptr; }
		if(pFutureSignIOField_DeviceID != nullptr){ strcpy_s(pFutureSignIOField->DeviceID, pFutureSignIOField_DeviceID); pFutureSignIOField_DeviceID = nullptr; }
		if(pFutureSignIOField_BrokerIDByBank != nullptr){ strcpy_s(pFutureSignIOField->BrokerIDByBank, pFutureSignIOField_BrokerIDByBank); pFutureSignIOField_BrokerIDByBank = nullptr; }
		if(pFutureSignIOField_OperNo != nullptr){ strcpy_s(pFutureSignIOField->OperNo, pFutureSignIOField_OperNo); pFutureSignIOField_OperNo = nullptr; }
		pFutureSignIOField->RequestID = pFutureSignIOField_RequestID;
		pFutureSignIOField->TID = pFutureSignIOField_TID;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcFutureSignIOField *pFutureSignIOField)
{
	if(pFutureSignIOField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:i}"
		, "TradeCode", pFutureSignIOField->TradeCode
		, "BankID", pFutureSignIOField->BankID
		, "BankBranchID", pFutureSignIOField->BankBranchID
		, "BrokerID", pFutureSignIOField->BrokerID
		, "BrokerBranchID", pFutureSignIOField->BrokerBranchID
		, "TradeDate", pFutureSignIOField->TradeDate
		, "TradeTime", pFutureSignIOField->TradeTime
		, "BankSerial", pFutureSignIOField->BankSerial
		, "TradingDay", pFutureSignIOField->TradingDay
		, "PlateSerial", pFutureSignIOField->PlateSerial
		, "LastFragment", pFutureSignIOField->LastFragment
		, "SessionID", pFutureSignIOField->SessionID
		, "InstallID", pFutureSignIOField->InstallID
		, "UserID", pFutureSignIOField->UserID
		, "Digest", pFutureSignIOField->Digest
		, "CurrencyID", pFutureSignIOField->CurrencyID
		, "DeviceID", pFutureSignIOField->DeviceID
		, "BrokerIDByBank", pFutureSignIOField->BrokerIDByBank
		, "OperNo", pFutureSignIOField->OperNo
		, "RequestID", pFutureSignIOField->RequestID
		, "TID", pFutureSignIOField->TID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcRspFutureSignInField *pRspFutureSignInField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "InstallID", "UserID", "Digest", "CurrencyID", "DeviceID", "BrokerIDByBank", "OperNo", "RequestID", "TID", "ErrorID", "ErrorMsg", "PinKey", "MacKey", nullptr};
	char *pRspFutureSignInField_TradeCode = nullptr;
	char *pRspFutureSignInField_BankID = nullptr;
	char *pRspFutureSignInField_BankBranchID = nullptr;
	char *pRspFutureSignInField_BrokerID = nullptr;
	char *pRspFutureSignInField_BrokerBranchID = nullptr;
	char *pRspFutureSignInField_TradeDate = nullptr;
	char *pRspFutureSignInField_TradeTime = nullptr;
	char *pRspFutureSignInField_BankSerial = nullptr;
	char *pRspFutureSignInField_TradingDay = nullptr;
	int pRspFutureSignInField_PlateSerial = 0;
	char pRspFutureSignInField_LastFragment = 0;
	int pRspFutureSignInField_SessionID = 0;
	int pRspFutureSignInField_InstallID = 0;
	char *pRspFutureSignInField_UserID = nullptr;
	char *pRspFutureSignInField_Digest = nullptr;
	char *pRspFutureSignInField_CurrencyID = nullptr;
	char *pRspFutureSignInField_DeviceID = nullptr;
	char *pRspFutureSignInField_BrokerIDByBank = nullptr;
	char *pRspFutureSignInField_OperNo = nullptr;
	int pRspFutureSignInField_RequestID = 0;
	int pRspFutureSignInField_TID = 0;
	int pRspFutureSignInField_ErrorID = 0;
	char *pRspFutureSignInField_ErrorMsg = nullptr;
	char *pRspFutureSignInField_PinKey = nullptr;
	char *pRspFutureSignInField_MacKey = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pRspFutureSignInField, "|yyyyyyyyyiciiyyyyyyiiiyyy")
		, &pRspFutureSignInField_TradeCode
		, &pRspFutureSignInField_BankID
		, &pRspFutureSignInField_BankBranchID
		, &pRspFutureSignInField_BrokerID
		, &pRspFutureSignInField_BrokerBranchID
		, &pRspFutureSignInField_TradeDate
		, &pRspFutureSignInField_TradeTime
		, &pRspFutureSignInField_BankSerial
		, &pRspFutureSignInField_TradingDay
		, &pRspFutureSignInField_PlateSerial
		, &pRspFutureSignInField_LastFragment
		, &pRspFutureSignInField_SessionID
		, &pRspFutureSignInField_InstallID
		, &pRspFutureSignInField_UserID
		, &pRspFutureSignInField_Digest
		, &pRspFutureSignInField_CurrencyID
		, &pRspFutureSignInField_DeviceID
		, &pRspFutureSignInField_BrokerIDByBank
		, &pRspFutureSignInField_OperNo
		, &pRspFutureSignInField_RequestID
		, &pRspFutureSignInField_TID
		, &pRspFutureSignInField_ErrorID
		, &pRspFutureSignInField_ErrorMsg
		, &pRspFutureSignInField_PinKey
		, &pRspFutureSignInField_MacKey
	PyCTP_PyDict_FromStruct_END
		if(pRspFutureSignInField_TradeCode != nullptr){ strcpy_s(pRspFutureSignInField->TradeCode, pRspFutureSignInField_TradeCode); pRspFutureSignInField_TradeCode = nullptr; }
		if(pRspFutureSignInField_BankID != nullptr){ strcpy_s(pRspFutureSignInField->BankID, pRspFutureSignInField_BankID); pRspFutureSignInField_BankID = nullptr; }
		if(pRspFutureSignInField_BankBranchID != nullptr){ strcpy_s(pRspFutureSignInField->BankBranchID, pRspFutureSignInField_BankBranchID); pRspFutureSignInField_BankBranchID = nullptr; }
		if(pRspFutureSignInField_BrokerID != nullptr){ strcpy_s(pRspFutureSignInField->BrokerID, pRspFutureSignInField_BrokerID); pRspFutureSignInField_BrokerID = nullptr; }
		if(pRspFutureSignInField_BrokerBranchID != nullptr){ strcpy_s(pRspFutureSignInField->BrokerBranchID, pRspFutureSignInField_BrokerBranchID); pRspFutureSignInField_BrokerBranchID = nullptr; }
		if(pRspFutureSignInField_TradeDate != nullptr){ strcpy_s(pRspFutureSignInField->TradeDate, pRspFutureSignInField_TradeDate); pRspFutureSignInField_TradeDate = nullptr; }
		if(pRspFutureSignInField_TradeTime != nullptr){ strcpy_s(pRspFutureSignInField->TradeTime, pRspFutureSignInField_TradeTime); pRspFutureSignInField_TradeTime = nullptr; }
		if(pRspFutureSignInField_BankSerial != nullptr){ strcpy_s(pRspFutureSignInField->BankSerial, pRspFutureSignInField_BankSerial); pRspFutureSignInField_BankSerial = nullptr; }
		if(pRspFutureSignInField_TradingDay != nullptr){ strcpy_s(pRspFutureSignInField->TradingDay, pRspFutureSignInField_TradingDay); pRspFutureSignInField_TradingDay = nullptr; }
		pRspFutureSignInField->PlateSerial = pRspFutureSignInField_PlateSerial;
		pRspFutureSignInField->LastFragment = pRspFutureSignInField_LastFragment;
		pRspFutureSignInField->SessionID = pRspFutureSignInField_SessionID;
		pRspFutureSignInField->InstallID = pRspFutureSignInField_InstallID;
		if(pRspFutureSignInField_UserID != nullptr){ strcpy_s(pRspFutureSignInField->UserID, pRspFutureSignInField_UserID); pRspFutureSignInField_UserID = nullptr; }
		if(pRspFutureSignInField_Digest != nullptr){ strcpy_s(pRspFutureSignInField->Digest, pRspFutureSignInField_Digest); pRspFutureSignInField_Digest = nullptr; }
		if(pRspFutureSignInField_CurrencyID != nullptr){ strcpy_s(pRspFutureSignInField->CurrencyID, pRspFutureSignInField_CurrencyID); pRspFutureSignInField_CurrencyID = nullptr; }
		if(pRspFutureSignInField_DeviceID != nullptr){ strcpy_s(pRspFutureSignInField->DeviceID, pRspFutureSignInField_DeviceID); pRspFutureSignInField_DeviceID = nullptr; }
		if(pRspFutureSignInField_BrokerIDByBank != nullptr){ strcpy_s(pRspFutureSignInField->BrokerIDByBank, pRspFutureSignInField_BrokerIDByBank); pRspFutureSignInField_BrokerIDByBank = nullptr; }
		if(pRspFutureSignInField_OperNo != nullptr){ strcpy_s(pRspFutureSignInField->OperNo, pRspFutureSignInField_OperNo); pRspFutureSignInField_OperNo = nullptr; }
		pRspFutureSignInField->RequestID = pRspFutureSignInField_RequestID;
		pRspFutureSignInField->TID = pRspFutureSignInField_TID;
		pRspFutureSignInField->ErrorID = pRspFutureSignInField_ErrorID;
		if(pRspFutureSignInField_ErrorMsg != nullptr){ strcpy_s(pRspFutureSignInField->ErrorMsg, pRspFutureSignInField_ErrorMsg); pRspFutureSignInField_ErrorMsg = nullptr; }
		if(pRspFutureSignInField_PinKey != nullptr){ strcpy_s(pRspFutureSignInField->PinKey, pRspFutureSignInField_PinKey); pRspFutureSignInField_PinKey = nullptr; }
		if(pRspFutureSignInField_MacKey != nullptr){ strcpy_s(pRspFutureSignInField->MacKey, pRspFutureSignInField_MacKey); pRspFutureSignInField_MacKey = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcRspFutureSignInField *pRspFutureSignInField)
{
	if(pRspFutureSignInField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:i,s:i,s:y,s:y,s:y}"
		, "TradeCode", pRspFutureSignInField->TradeCode
		, "BankID", pRspFutureSignInField->BankID
		, "BankBranchID", pRspFutureSignInField->BankBranchID
		, "BrokerID", pRspFutureSignInField->BrokerID
		, "BrokerBranchID", pRspFutureSignInField->BrokerBranchID
		, "TradeDate", pRspFutureSignInField->TradeDate
		, "TradeTime", pRspFutureSignInField->TradeTime
		, "BankSerial", pRspFutureSignInField->BankSerial
		, "TradingDay", pRspFutureSignInField->TradingDay
		, "PlateSerial", pRspFutureSignInField->PlateSerial
		, "LastFragment", pRspFutureSignInField->LastFragment
		, "SessionID", pRspFutureSignInField->SessionID
		, "InstallID", pRspFutureSignInField->InstallID
		, "UserID", pRspFutureSignInField->UserID
		, "Digest", pRspFutureSignInField->Digest
		, "CurrencyID", pRspFutureSignInField->CurrencyID
		, "DeviceID", pRspFutureSignInField->DeviceID
		, "BrokerIDByBank", pRspFutureSignInField->BrokerIDByBank
		, "OperNo", pRspFutureSignInField->OperNo
		, "RequestID", pRspFutureSignInField->RequestID
		, "TID", pRspFutureSignInField->TID
		, "ErrorID", pRspFutureSignInField->ErrorID
		, "ErrorMsg", pRspFutureSignInField->ErrorMsg
		, "PinKey", pRspFutureSignInField->PinKey
		, "MacKey", pRspFutureSignInField->MacKey
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqFutureSignOutField *pReqFutureSignOutField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "InstallID", "UserID", "Digest", "CurrencyID", "DeviceID", "BrokerIDByBank", "OperNo", "RequestID", "TID", nullptr};
	char *pReqFutureSignOutField_TradeCode = nullptr;
	char *pReqFutureSignOutField_BankID = nullptr;
	char *pReqFutureSignOutField_BankBranchID = nullptr;
	char *pReqFutureSignOutField_BrokerID = nullptr;
	char *pReqFutureSignOutField_BrokerBranchID = nullptr;
	char *pReqFutureSignOutField_TradeDate = nullptr;
	char *pReqFutureSignOutField_TradeTime = nullptr;
	char *pReqFutureSignOutField_BankSerial = nullptr;
	char *pReqFutureSignOutField_TradingDay = nullptr;
	int pReqFutureSignOutField_PlateSerial = 0;
	char pReqFutureSignOutField_LastFragment = 0;
	int pReqFutureSignOutField_SessionID = 0;
	int pReqFutureSignOutField_InstallID = 0;
	char *pReqFutureSignOutField_UserID = nullptr;
	char *pReqFutureSignOutField_Digest = nullptr;
	char *pReqFutureSignOutField_CurrencyID = nullptr;
	char *pReqFutureSignOutField_DeviceID = nullptr;
	char *pReqFutureSignOutField_BrokerIDByBank = nullptr;
	char *pReqFutureSignOutField_OperNo = nullptr;
	int pReqFutureSignOutField_RequestID = 0;
	int pReqFutureSignOutField_TID = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pReqFutureSignOutField, "|yyyyyyyyyiciiyyyyyyii")
		, &pReqFutureSignOutField_TradeCode
		, &pReqFutureSignOutField_BankID
		, &pReqFutureSignOutField_BankBranchID
		, &pReqFutureSignOutField_BrokerID
		, &pReqFutureSignOutField_BrokerBranchID
		, &pReqFutureSignOutField_TradeDate
		, &pReqFutureSignOutField_TradeTime
		, &pReqFutureSignOutField_BankSerial
		, &pReqFutureSignOutField_TradingDay
		, &pReqFutureSignOutField_PlateSerial
		, &pReqFutureSignOutField_LastFragment
		, &pReqFutureSignOutField_SessionID
		, &pReqFutureSignOutField_InstallID
		, &pReqFutureSignOutField_UserID
		, &pReqFutureSignOutField_Digest
		, &pReqFutureSignOutField_CurrencyID
		, &pReqFutureSignOutField_DeviceID
		, &pReqFutureSignOutField_BrokerIDByBank
		, &pReqFutureSignOutField_OperNo
		, &pReqFutureSignOutField_RequestID
		, &pReqFutureSignOutField_TID
	PyCTP_PyDict_FromStruct_END
		if(pReqFutureSignOutField_TradeCode != nullptr){ strcpy_s(pReqFutureSignOutField->TradeCode, pReqFutureSignOutField_TradeCode); pReqFutureSignOutField_TradeCode = nullptr; }
		if(pReqFutureSignOutField_BankID != nullptr){ strcpy_s(pReqFutureSignOutField->BankID, pReqFutureSignOutField_BankID); pReqFutureSignOutField_BankID = nullptr; }
		if(pReqFutureSignOutField_BankBranchID != nullptr){ strcpy_s(pReqFutureSignOutField->BankBranchID, pReqFutureSignOutField_BankBranchID); pReqFutureSignOutField_BankBranchID = nullptr; }
		if(pReqFutureSignOutField_BrokerID != nullptr){ strcpy_s(pReqFutureSignOutField->BrokerID, pReqFutureSignOutField_BrokerID); pReqFutureSignOutField_BrokerID = nullptr; }
		if(pReqFutureSignOutField_BrokerBranchID != nullptr){ strcpy_s(pReqFutureSignOutField->BrokerBranchID, pReqFutureSignOutField_BrokerBranchID); pReqFutureSignOutField_BrokerBranchID = nullptr; }
		if(pReqFutureSignOutField_TradeDate != nullptr){ strcpy_s(pReqFutureSignOutField->TradeDate, pReqFutureSignOutField_TradeDate); pReqFutureSignOutField_TradeDate = nullptr; }
		if(pReqFutureSignOutField_TradeTime != nullptr){ strcpy_s(pReqFutureSignOutField->TradeTime, pReqFutureSignOutField_TradeTime); pReqFutureSignOutField_TradeTime = nullptr; }
		if(pReqFutureSignOutField_BankSerial != nullptr){ strcpy_s(pReqFutureSignOutField->BankSerial, pReqFutureSignOutField_BankSerial); pReqFutureSignOutField_BankSerial = nullptr; }
		if(pReqFutureSignOutField_TradingDay != nullptr){ strcpy_s(pReqFutureSignOutField->TradingDay, pReqFutureSignOutField_TradingDay); pReqFutureSignOutField_TradingDay = nullptr; }
		pReqFutureSignOutField->PlateSerial = pReqFutureSignOutField_PlateSerial;
		pReqFutureSignOutField->LastFragment = pReqFutureSignOutField_LastFragment;
		pReqFutureSignOutField->SessionID = pReqFutureSignOutField_SessionID;
		pReqFutureSignOutField->InstallID = pReqFutureSignOutField_InstallID;
		if(pReqFutureSignOutField_UserID != nullptr){ strcpy_s(pReqFutureSignOutField->UserID, pReqFutureSignOutField_UserID); pReqFutureSignOutField_UserID = nullptr; }
		if(pReqFutureSignOutField_Digest != nullptr){ strcpy_s(pReqFutureSignOutField->Digest, pReqFutureSignOutField_Digest); pReqFutureSignOutField_Digest = nullptr; }
		if(pReqFutureSignOutField_CurrencyID != nullptr){ strcpy_s(pReqFutureSignOutField->CurrencyID, pReqFutureSignOutField_CurrencyID); pReqFutureSignOutField_CurrencyID = nullptr; }
		if(pReqFutureSignOutField_DeviceID != nullptr){ strcpy_s(pReqFutureSignOutField->DeviceID, pReqFutureSignOutField_DeviceID); pReqFutureSignOutField_DeviceID = nullptr; }
		if(pReqFutureSignOutField_BrokerIDByBank != nullptr){ strcpy_s(pReqFutureSignOutField->BrokerIDByBank, pReqFutureSignOutField_BrokerIDByBank); pReqFutureSignOutField_BrokerIDByBank = nullptr; }
		if(pReqFutureSignOutField_OperNo != nullptr){ strcpy_s(pReqFutureSignOutField->OperNo, pReqFutureSignOutField_OperNo); pReqFutureSignOutField_OperNo = nullptr; }
		pReqFutureSignOutField->RequestID = pReqFutureSignOutField_RequestID;
		pReqFutureSignOutField->TID = pReqFutureSignOutField_TID;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqFutureSignOutField *pReqFutureSignOutField)
{
	if(pReqFutureSignOutField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:i}"
		, "TradeCode", pReqFutureSignOutField->TradeCode
		, "BankID", pReqFutureSignOutField->BankID
		, "BankBranchID", pReqFutureSignOutField->BankBranchID
		, "BrokerID", pReqFutureSignOutField->BrokerID
		, "BrokerBranchID", pReqFutureSignOutField->BrokerBranchID
		, "TradeDate", pReqFutureSignOutField->TradeDate
		, "TradeTime", pReqFutureSignOutField->TradeTime
		, "BankSerial", pReqFutureSignOutField->BankSerial
		, "TradingDay", pReqFutureSignOutField->TradingDay
		, "PlateSerial", pReqFutureSignOutField->PlateSerial
		, "LastFragment", pReqFutureSignOutField->LastFragment
		, "SessionID", pReqFutureSignOutField->SessionID
		, "InstallID", pReqFutureSignOutField->InstallID
		, "UserID", pReqFutureSignOutField->UserID
		, "Digest", pReqFutureSignOutField->Digest
		, "CurrencyID", pReqFutureSignOutField->CurrencyID
		, "DeviceID", pReqFutureSignOutField->DeviceID
		, "BrokerIDByBank", pReqFutureSignOutField->BrokerIDByBank
		, "OperNo", pReqFutureSignOutField->OperNo
		, "RequestID", pReqFutureSignOutField->RequestID
		, "TID", pReqFutureSignOutField->TID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcRspFutureSignOutField *pRspFutureSignOutField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "InstallID", "UserID", "Digest", "CurrencyID", "DeviceID", "BrokerIDByBank", "OperNo", "RequestID", "TID", "ErrorID", "ErrorMsg", nullptr};
	char *pRspFutureSignOutField_TradeCode = nullptr;
	char *pRspFutureSignOutField_BankID = nullptr;
	char *pRspFutureSignOutField_BankBranchID = nullptr;
	char *pRspFutureSignOutField_BrokerID = nullptr;
	char *pRspFutureSignOutField_BrokerBranchID = nullptr;
	char *pRspFutureSignOutField_TradeDate = nullptr;
	char *pRspFutureSignOutField_TradeTime = nullptr;
	char *pRspFutureSignOutField_BankSerial = nullptr;
	char *pRspFutureSignOutField_TradingDay = nullptr;
	int pRspFutureSignOutField_PlateSerial = 0;
	char pRspFutureSignOutField_LastFragment = 0;
	int pRspFutureSignOutField_SessionID = 0;
	int pRspFutureSignOutField_InstallID = 0;
	char *pRspFutureSignOutField_UserID = nullptr;
	char *pRspFutureSignOutField_Digest = nullptr;
	char *pRspFutureSignOutField_CurrencyID = nullptr;
	char *pRspFutureSignOutField_DeviceID = nullptr;
	char *pRspFutureSignOutField_BrokerIDByBank = nullptr;
	char *pRspFutureSignOutField_OperNo = nullptr;
	int pRspFutureSignOutField_RequestID = 0;
	int pRspFutureSignOutField_TID = 0;
	int pRspFutureSignOutField_ErrorID = 0;
	char *pRspFutureSignOutField_ErrorMsg = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pRspFutureSignOutField, "|yyyyyyyyyiciiyyyyyyiiiy")
		, &pRspFutureSignOutField_TradeCode
		, &pRspFutureSignOutField_BankID
		, &pRspFutureSignOutField_BankBranchID
		, &pRspFutureSignOutField_BrokerID
		, &pRspFutureSignOutField_BrokerBranchID
		, &pRspFutureSignOutField_TradeDate
		, &pRspFutureSignOutField_TradeTime
		, &pRspFutureSignOutField_BankSerial
		, &pRspFutureSignOutField_TradingDay
		, &pRspFutureSignOutField_PlateSerial
		, &pRspFutureSignOutField_LastFragment
		, &pRspFutureSignOutField_SessionID
		, &pRspFutureSignOutField_InstallID
		, &pRspFutureSignOutField_UserID
		, &pRspFutureSignOutField_Digest
		, &pRspFutureSignOutField_CurrencyID
		, &pRspFutureSignOutField_DeviceID
		, &pRspFutureSignOutField_BrokerIDByBank
		, &pRspFutureSignOutField_OperNo
		, &pRspFutureSignOutField_RequestID
		, &pRspFutureSignOutField_TID
		, &pRspFutureSignOutField_ErrorID
		, &pRspFutureSignOutField_ErrorMsg
	PyCTP_PyDict_FromStruct_END
		if(pRspFutureSignOutField_TradeCode != nullptr){ strcpy_s(pRspFutureSignOutField->TradeCode, pRspFutureSignOutField_TradeCode); pRspFutureSignOutField_TradeCode = nullptr; }
		if(pRspFutureSignOutField_BankID != nullptr){ strcpy_s(pRspFutureSignOutField->BankID, pRspFutureSignOutField_BankID); pRspFutureSignOutField_BankID = nullptr; }
		if(pRspFutureSignOutField_BankBranchID != nullptr){ strcpy_s(pRspFutureSignOutField->BankBranchID, pRspFutureSignOutField_BankBranchID); pRspFutureSignOutField_BankBranchID = nullptr; }
		if(pRspFutureSignOutField_BrokerID != nullptr){ strcpy_s(pRspFutureSignOutField->BrokerID, pRspFutureSignOutField_BrokerID); pRspFutureSignOutField_BrokerID = nullptr; }
		if(pRspFutureSignOutField_BrokerBranchID != nullptr){ strcpy_s(pRspFutureSignOutField->BrokerBranchID, pRspFutureSignOutField_BrokerBranchID); pRspFutureSignOutField_BrokerBranchID = nullptr; }
		if(pRspFutureSignOutField_TradeDate != nullptr){ strcpy_s(pRspFutureSignOutField->TradeDate, pRspFutureSignOutField_TradeDate); pRspFutureSignOutField_TradeDate = nullptr; }
		if(pRspFutureSignOutField_TradeTime != nullptr){ strcpy_s(pRspFutureSignOutField->TradeTime, pRspFutureSignOutField_TradeTime); pRspFutureSignOutField_TradeTime = nullptr; }
		if(pRspFutureSignOutField_BankSerial != nullptr){ strcpy_s(pRspFutureSignOutField->BankSerial, pRspFutureSignOutField_BankSerial); pRspFutureSignOutField_BankSerial = nullptr; }
		if(pRspFutureSignOutField_TradingDay != nullptr){ strcpy_s(pRspFutureSignOutField->TradingDay, pRspFutureSignOutField_TradingDay); pRspFutureSignOutField_TradingDay = nullptr; }
		pRspFutureSignOutField->PlateSerial = pRspFutureSignOutField_PlateSerial;
		pRspFutureSignOutField->LastFragment = pRspFutureSignOutField_LastFragment;
		pRspFutureSignOutField->SessionID = pRspFutureSignOutField_SessionID;
		pRspFutureSignOutField->InstallID = pRspFutureSignOutField_InstallID;
		if(pRspFutureSignOutField_UserID != nullptr){ strcpy_s(pRspFutureSignOutField->UserID, pRspFutureSignOutField_UserID); pRspFutureSignOutField_UserID = nullptr; }
		if(pRspFutureSignOutField_Digest != nullptr){ strcpy_s(pRspFutureSignOutField->Digest, pRspFutureSignOutField_Digest); pRspFutureSignOutField_Digest = nullptr; }
		if(pRspFutureSignOutField_CurrencyID != nullptr){ strcpy_s(pRspFutureSignOutField->CurrencyID, pRspFutureSignOutField_CurrencyID); pRspFutureSignOutField_CurrencyID = nullptr; }
		if(pRspFutureSignOutField_DeviceID != nullptr){ strcpy_s(pRspFutureSignOutField->DeviceID, pRspFutureSignOutField_DeviceID); pRspFutureSignOutField_DeviceID = nullptr; }
		if(pRspFutureSignOutField_BrokerIDByBank != nullptr){ strcpy_s(pRspFutureSignOutField->BrokerIDByBank, pRspFutureSignOutField_BrokerIDByBank); pRspFutureSignOutField_BrokerIDByBank = nullptr; }
		if(pRspFutureSignOutField_OperNo != nullptr){ strcpy_s(pRspFutureSignOutField->OperNo, pRspFutureSignOutField_OperNo); pRspFutureSignOutField_OperNo = nullptr; }
		pRspFutureSignOutField->RequestID = pRspFutureSignOutField_RequestID;
		pRspFutureSignOutField->TID = pRspFutureSignOutField_TID;
		pRspFutureSignOutField->ErrorID = pRspFutureSignOutField_ErrorID;
		if(pRspFutureSignOutField_ErrorMsg != nullptr){ strcpy_s(pRspFutureSignOutField->ErrorMsg, pRspFutureSignOutField_ErrorMsg); pRspFutureSignOutField_ErrorMsg = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcRspFutureSignOutField *pRspFutureSignOutField)
{
	if(pRspFutureSignOutField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:i,s:i,s:y}"
		, "TradeCode", pRspFutureSignOutField->TradeCode
		, "BankID", pRspFutureSignOutField->BankID
		, "BankBranchID", pRspFutureSignOutField->BankBranchID
		, "BrokerID", pRspFutureSignOutField->BrokerID
		, "BrokerBranchID", pRspFutureSignOutField->BrokerBranchID
		, "TradeDate", pRspFutureSignOutField->TradeDate
		, "TradeTime", pRspFutureSignOutField->TradeTime
		, "BankSerial", pRspFutureSignOutField->BankSerial
		, "TradingDay", pRspFutureSignOutField->TradingDay
		, "PlateSerial", pRspFutureSignOutField->PlateSerial
		, "LastFragment", pRspFutureSignOutField->LastFragment
		, "SessionID", pRspFutureSignOutField->SessionID
		, "InstallID", pRspFutureSignOutField->InstallID
		, "UserID", pRspFutureSignOutField->UserID
		, "Digest", pRspFutureSignOutField->Digest
		, "CurrencyID", pRspFutureSignOutField->CurrencyID
		, "DeviceID", pRspFutureSignOutField->DeviceID
		, "BrokerIDByBank", pRspFutureSignOutField->BrokerIDByBank
		, "OperNo", pRspFutureSignOutField->OperNo
		, "RequestID", pRspFutureSignOutField->RequestID
		, "TID", pRspFutureSignOutField->TID
		, "ErrorID", pRspFutureSignOutField->ErrorID
		, "ErrorMsg", pRspFutureSignOutField->ErrorMsg
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqQueryTradeResultBySerialField *pReqQueryTradeResultBySerialField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "Reference", "RefrenceIssureType", "RefrenceIssure", "CustomerName", "IdCardType", "IdentifiedCardNo", "CustType", "BankAccount", "BankPassWord", "AccountID", "Password", "CurrencyID", "TradeAmount", "Digest", "LongCustomerName", nullptr};
	char *pReqQueryTradeResultBySerialField_TradeCode = nullptr;
	char *pReqQueryTradeResultBySerialField_BankID = nullptr;
	char *pReqQueryTradeResultBySerialField_BankBranchID = nullptr;
	char *pReqQueryTradeResultBySerialField_BrokerID = nullptr;
	char *pReqQueryTradeResultBySerialField_BrokerBranchID = nullptr;
	char *pReqQueryTradeResultBySerialField_TradeDate = nullptr;
	char *pReqQueryTradeResultBySerialField_TradeTime = nullptr;
	char *pReqQueryTradeResultBySerialField_BankSerial = nullptr;
	char *pReqQueryTradeResultBySerialField_TradingDay = nullptr;
	int pReqQueryTradeResultBySerialField_PlateSerial = 0;
	char pReqQueryTradeResultBySerialField_LastFragment = 0;
	int pReqQueryTradeResultBySerialField_SessionID = 0;
	int pReqQueryTradeResultBySerialField_Reference = 0;
	char pReqQueryTradeResultBySerialField_RefrenceIssureType = 0;
	char *pReqQueryTradeResultBySerialField_RefrenceIssure = nullptr;
	char *pReqQueryTradeResultBySerialField_CustomerName = nullptr;
	char pReqQueryTradeResultBySerialField_IdCardType = 0;
	char *pReqQueryTradeResultBySerialField_IdentifiedCardNo = nullptr;
	char pReqQueryTradeResultBySerialField_CustType = 0;
	char *pReqQueryTradeResultBySerialField_BankAccount = nullptr;
	char *pReqQueryTradeResultBySerialField_BankPassWord = nullptr;
	char *pReqQueryTradeResultBySerialField_AccountID = nullptr;
	char *pReqQueryTradeResultBySerialField_Password = nullptr;
	char *pReqQueryTradeResultBySerialField_CurrencyID = nullptr;
	double pReqQueryTradeResultBySerialField_TradeAmount = 0.0;
	char *pReqQueryTradeResultBySerialField_Digest = nullptr;
	char *pReqQueryTradeResultBySerialField_LongCustomerName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pReqQueryTradeResultBySerialField, "|yyyyyyyyyiciicyycycyyyyydyy")
		, &pReqQueryTradeResultBySerialField_TradeCode
		, &pReqQueryTradeResultBySerialField_BankID
		, &pReqQueryTradeResultBySerialField_BankBranchID
		, &pReqQueryTradeResultBySerialField_BrokerID
		, &pReqQueryTradeResultBySerialField_BrokerBranchID
		, &pReqQueryTradeResultBySerialField_TradeDate
		, &pReqQueryTradeResultBySerialField_TradeTime
		, &pReqQueryTradeResultBySerialField_BankSerial
		, &pReqQueryTradeResultBySerialField_TradingDay
		, &pReqQueryTradeResultBySerialField_PlateSerial
		, &pReqQueryTradeResultBySerialField_LastFragment
		, &pReqQueryTradeResultBySerialField_SessionID
		, &pReqQueryTradeResultBySerialField_Reference
		, &pReqQueryTradeResultBySerialField_RefrenceIssureType
		, &pReqQueryTradeResultBySerialField_RefrenceIssure
		, &pReqQueryTradeResultBySerialField_CustomerName
		, &pReqQueryTradeResultBySerialField_IdCardType
		, &pReqQueryTradeResultBySerialField_IdentifiedCardNo
		, &pReqQueryTradeResultBySerialField_CustType
		, &pReqQueryTradeResultBySerialField_BankAccount
		, &pReqQueryTradeResultBySerialField_BankPassWord
		, &pReqQueryTradeResultBySerialField_AccountID
		, &pReqQueryTradeResultBySerialField_Password
		, &pReqQueryTradeResultBySerialField_CurrencyID
		, &pReqQueryTradeResultBySerialField_TradeAmount
		, &pReqQueryTradeResultBySerialField_Digest
		, &pReqQueryTradeResultBySerialField_LongCustomerName
	PyCTP_PyDict_FromStruct_END
		if(pReqQueryTradeResultBySerialField_TradeCode != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->TradeCode, pReqQueryTradeResultBySerialField_TradeCode); pReqQueryTradeResultBySerialField_TradeCode = nullptr; }
		if(pReqQueryTradeResultBySerialField_BankID != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->BankID, pReqQueryTradeResultBySerialField_BankID); pReqQueryTradeResultBySerialField_BankID = nullptr; }
		if(pReqQueryTradeResultBySerialField_BankBranchID != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->BankBranchID, pReqQueryTradeResultBySerialField_BankBranchID); pReqQueryTradeResultBySerialField_BankBranchID = nullptr; }
		if(pReqQueryTradeResultBySerialField_BrokerID != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->BrokerID, pReqQueryTradeResultBySerialField_BrokerID); pReqQueryTradeResultBySerialField_BrokerID = nullptr; }
		if(pReqQueryTradeResultBySerialField_BrokerBranchID != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->BrokerBranchID, pReqQueryTradeResultBySerialField_BrokerBranchID); pReqQueryTradeResultBySerialField_BrokerBranchID = nullptr; }
		if(pReqQueryTradeResultBySerialField_TradeDate != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->TradeDate, pReqQueryTradeResultBySerialField_TradeDate); pReqQueryTradeResultBySerialField_TradeDate = nullptr; }
		if(pReqQueryTradeResultBySerialField_TradeTime != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->TradeTime, pReqQueryTradeResultBySerialField_TradeTime); pReqQueryTradeResultBySerialField_TradeTime = nullptr; }
		if(pReqQueryTradeResultBySerialField_BankSerial != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->BankSerial, pReqQueryTradeResultBySerialField_BankSerial); pReqQueryTradeResultBySerialField_BankSerial = nullptr; }
		if(pReqQueryTradeResultBySerialField_TradingDay != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->TradingDay, pReqQueryTradeResultBySerialField_TradingDay); pReqQueryTradeResultBySerialField_TradingDay = nullptr; }
		pReqQueryTradeResultBySerialField->PlateSerial = pReqQueryTradeResultBySerialField_PlateSerial;
		pReqQueryTradeResultBySerialField->LastFragment = pReqQueryTradeResultBySerialField_LastFragment;
		pReqQueryTradeResultBySerialField->SessionID = pReqQueryTradeResultBySerialField_SessionID;
		pReqQueryTradeResultBySerialField->Reference = pReqQueryTradeResultBySerialField_Reference;
		pReqQueryTradeResultBySerialField->RefrenceIssureType = pReqQueryTradeResultBySerialField_RefrenceIssureType;
		if(pReqQueryTradeResultBySerialField_RefrenceIssure != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->RefrenceIssure, pReqQueryTradeResultBySerialField_RefrenceIssure); pReqQueryTradeResultBySerialField_RefrenceIssure = nullptr; }
		if(pReqQueryTradeResultBySerialField_CustomerName != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->CustomerName, pReqQueryTradeResultBySerialField_CustomerName); pReqQueryTradeResultBySerialField_CustomerName = nullptr; }
		pReqQueryTradeResultBySerialField->IdCardType = pReqQueryTradeResultBySerialField_IdCardType;
		if(pReqQueryTradeResultBySerialField_IdentifiedCardNo != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->IdentifiedCardNo, pReqQueryTradeResultBySerialField_IdentifiedCardNo); pReqQueryTradeResultBySerialField_IdentifiedCardNo = nullptr; }
		pReqQueryTradeResultBySerialField->CustType = pReqQueryTradeResultBySerialField_CustType;
		if(pReqQueryTradeResultBySerialField_BankAccount != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->BankAccount, pReqQueryTradeResultBySerialField_BankAccount); pReqQueryTradeResultBySerialField_BankAccount = nullptr; }
		if(pReqQueryTradeResultBySerialField_BankPassWord != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->BankPassWord, pReqQueryTradeResultBySerialField_BankPassWord); pReqQueryTradeResultBySerialField_BankPassWord = nullptr; }
		if(pReqQueryTradeResultBySerialField_AccountID != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->AccountID, pReqQueryTradeResultBySerialField_AccountID); pReqQueryTradeResultBySerialField_AccountID = nullptr; }
		if(pReqQueryTradeResultBySerialField_Password != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->Password, pReqQueryTradeResultBySerialField_Password); pReqQueryTradeResultBySerialField_Password = nullptr; }
		if(pReqQueryTradeResultBySerialField_CurrencyID != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->CurrencyID, pReqQueryTradeResultBySerialField_CurrencyID); pReqQueryTradeResultBySerialField_CurrencyID = nullptr; }
		pReqQueryTradeResultBySerialField->TradeAmount = pReqQueryTradeResultBySerialField_TradeAmount;
		if(pReqQueryTradeResultBySerialField_Digest != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->Digest, pReqQueryTradeResultBySerialField_Digest); pReqQueryTradeResultBySerialField_Digest = nullptr; }
		if(pReqQueryTradeResultBySerialField_LongCustomerName != nullptr){ strcpy_s(pReqQueryTradeResultBySerialField->LongCustomerName, pReqQueryTradeResultBySerialField_LongCustomerName); pReqQueryTradeResultBySerialField_LongCustomerName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqQueryTradeResultBySerialField *pReqQueryTradeResultBySerialField)
{
	if(pReqQueryTradeResultBySerialField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:i,s:c,s:y,s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:d,s:y,s:y}"
		, "TradeCode", pReqQueryTradeResultBySerialField->TradeCode
		, "BankID", pReqQueryTradeResultBySerialField->BankID
		, "BankBranchID", pReqQueryTradeResultBySerialField->BankBranchID
		, "BrokerID", pReqQueryTradeResultBySerialField->BrokerID
		, "BrokerBranchID", pReqQueryTradeResultBySerialField->BrokerBranchID
		, "TradeDate", pReqQueryTradeResultBySerialField->TradeDate
		, "TradeTime", pReqQueryTradeResultBySerialField->TradeTime
		, "BankSerial", pReqQueryTradeResultBySerialField->BankSerial
		, "TradingDay", pReqQueryTradeResultBySerialField->TradingDay
		, "PlateSerial", pReqQueryTradeResultBySerialField->PlateSerial
		, "LastFragment", pReqQueryTradeResultBySerialField->LastFragment
		, "SessionID", pReqQueryTradeResultBySerialField->SessionID
		, "Reference", pReqQueryTradeResultBySerialField->Reference
		, "RefrenceIssureType", pReqQueryTradeResultBySerialField->RefrenceIssureType
		, "RefrenceIssure", pReqQueryTradeResultBySerialField->RefrenceIssure
		, "CustomerName", pReqQueryTradeResultBySerialField->CustomerName
		, "IdCardType", pReqQueryTradeResultBySerialField->IdCardType
		, "IdentifiedCardNo", pReqQueryTradeResultBySerialField->IdentifiedCardNo
		, "CustType", pReqQueryTradeResultBySerialField->CustType
		, "BankAccount", pReqQueryTradeResultBySerialField->BankAccount
		, "BankPassWord", pReqQueryTradeResultBySerialField->BankPassWord
		, "AccountID", pReqQueryTradeResultBySerialField->AccountID
		, "Password", pReqQueryTradeResultBySerialField->Password
		, "CurrencyID", pReqQueryTradeResultBySerialField->CurrencyID
		, "TradeAmount", pReqQueryTradeResultBySerialField->TradeAmount
		, "Digest", pReqQueryTradeResultBySerialField->Digest
		, "LongCustomerName", pReqQueryTradeResultBySerialField->LongCustomerName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcRspQueryTradeResultBySerialField *pRspQueryTradeResultBySerialField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "ErrorID", "ErrorMsg", "Reference", "RefrenceIssureType", "RefrenceIssure", "OriginReturnCode", "OriginDescrInfoForReturnCode", "BankAccount", "BankPassWord", "AccountID", "Password", "CurrencyID", "TradeAmount", "Digest", nullptr};
	char *pRspQueryTradeResultBySerialField_TradeCode = nullptr;
	char *pRspQueryTradeResultBySerialField_BankID = nullptr;
	char *pRspQueryTradeResultBySerialField_BankBranchID = nullptr;
	char *pRspQueryTradeResultBySerialField_BrokerID = nullptr;
	char *pRspQueryTradeResultBySerialField_BrokerBranchID = nullptr;
	char *pRspQueryTradeResultBySerialField_TradeDate = nullptr;
	char *pRspQueryTradeResultBySerialField_TradeTime = nullptr;
	char *pRspQueryTradeResultBySerialField_BankSerial = nullptr;
	char *pRspQueryTradeResultBySerialField_TradingDay = nullptr;
	int pRspQueryTradeResultBySerialField_PlateSerial = 0;
	char pRspQueryTradeResultBySerialField_LastFragment = 0;
	int pRspQueryTradeResultBySerialField_SessionID = 0;
	int pRspQueryTradeResultBySerialField_ErrorID = 0;
	char *pRspQueryTradeResultBySerialField_ErrorMsg = nullptr;
	int pRspQueryTradeResultBySerialField_Reference = 0;
	char pRspQueryTradeResultBySerialField_RefrenceIssureType = 0;
	char *pRspQueryTradeResultBySerialField_RefrenceIssure = nullptr;
	char *pRspQueryTradeResultBySerialField_OriginReturnCode = nullptr;
	char *pRspQueryTradeResultBySerialField_OriginDescrInfoForReturnCode = nullptr;
	char *pRspQueryTradeResultBySerialField_BankAccount = nullptr;
	char *pRspQueryTradeResultBySerialField_BankPassWord = nullptr;
	char *pRspQueryTradeResultBySerialField_AccountID = nullptr;
	char *pRspQueryTradeResultBySerialField_Password = nullptr;
	char *pRspQueryTradeResultBySerialField_CurrencyID = nullptr;
	double pRspQueryTradeResultBySerialField_TradeAmount = 0.0;
	char *pRspQueryTradeResultBySerialField_Digest = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pRspQueryTradeResultBySerialField, "|yyyyyyyyyiciiyicyyyyyyyydy")
		, &pRspQueryTradeResultBySerialField_TradeCode
		, &pRspQueryTradeResultBySerialField_BankID
		, &pRspQueryTradeResultBySerialField_BankBranchID
		, &pRspQueryTradeResultBySerialField_BrokerID
		, &pRspQueryTradeResultBySerialField_BrokerBranchID
		, &pRspQueryTradeResultBySerialField_TradeDate
		, &pRspQueryTradeResultBySerialField_TradeTime
		, &pRspQueryTradeResultBySerialField_BankSerial
		, &pRspQueryTradeResultBySerialField_TradingDay
		, &pRspQueryTradeResultBySerialField_PlateSerial
		, &pRspQueryTradeResultBySerialField_LastFragment
		, &pRspQueryTradeResultBySerialField_SessionID
		, &pRspQueryTradeResultBySerialField_ErrorID
		, &pRspQueryTradeResultBySerialField_ErrorMsg
		, &pRspQueryTradeResultBySerialField_Reference
		, &pRspQueryTradeResultBySerialField_RefrenceIssureType
		, &pRspQueryTradeResultBySerialField_RefrenceIssure
		, &pRspQueryTradeResultBySerialField_OriginReturnCode
		, &pRspQueryTradeResultBySerialField_OriginDescrInfoForReturnCode
		, &pRspQueryTradeResultBySerialField_BankAccount
		, &pRspQueryTradeResultBySerialField_BankPassWord
		, &pRspQueryTradeResultBySerialField_AccountID
		, &pRspQueryTradeResultBySerialField_Password
		, &pRspQueryTradeResultBySerialField_CurrencyID
		, &pRspQueryTradeResultBySerialField_TradeAmount
		, &pRspQueryTradeResultBySerialField_Digest
	PyCTP_PyDict_FromStruct_END
		if(pRspQueryTradeResultBySerialField_TradeCode != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->TradeCode, pRspQueryTradeResultBySerialField_TradeCode); pRspQueryTradeResultBySerialField_TradeCode = nullptr; }
		if(pRspQueryTradeResultBySerialField_BankID != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->BankID, pRspQueryTradeResultBySerialField_BankID); pRspQueryTradeResultBySerialField_BankID = nullptr; }
		if(pRspQueryTradeResultBySerialField_BankBranchID != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->BankBranchID, pRspQueryTradeResultBySerialField_BankBranchID); pRspQueryTradeResultBySerialField_BankBranchID = nullptr; }
		if(pRspQueryTradeResultBySerialField_BrokerID != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->BrokerID, pRspQueryTradeResultBySerialField_BrokerID); pRspQueryTradeResultBySerialField_BrokerID = nullptr; }
		if(pRspQueryTradeResultBySerialField_BrokerBranchID != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->BrokerBranchID, pRspQueryTradeResultBySerialField_BrokerBranchID); pRspQueryTradeResultBySerialField_BrokerBranchID = nullptr; }
		if(pRspQueryTradeResultBySerialField_TradeDate != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->TradeDate, pRspQueryTradeResultBySerialField_TradeDate); pRspQueryTradeResultBySerialField_TradeDate = nullptr; }
		if(pRspQueryTradeResultBySerialField_TradeTime != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->TradeTime, pRspQueryTradeResultBySerialField_TradeTime); pRspQueryTradeResultBySerialField_TradeTime = nullptr; }
		if(pRspQueryTradeResultBySerialField_BankSerial != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->BankSerial, pRspQueryTradeResultBySerialField_BankSerial); pRspQueryTradeResultBySerialField_BankSerial = nullptr; }
		if(pRspQueryTradeResultBySerialField_TradingDay != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->TradingDay, pRspQueryTradeResultBySerialField_TradingDay); pRspQueryTradeResultBySerialField_TradingDay = nullptr; }
		pRspQueryTradeResultBySerialField->PlateSerial = pRspQueryTradeResultBySerialField_PlateSerial;
		pRspQueryTradeResultBySerialField->LastFragment = pRspQueryTradeResultBySerialField_LastFragment;
		pRspQueryTradeResultBySerialField->SessionID = pRspQueryTradeResultBySerialField_SessionID;
		pRspQueryTradeResultBySerialField->ErrorID = pRspQueryTradeResultBySerialField_ErrorID;
		if(pRspQueryTradeResultBySerialField_ErrorMsg != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->ErrorMsg, pRspQueryTradeResultBySerialField_ErrorMsg); pRspQueryTradeResultBySerialField_ErrorMsg = nullptr; }
		pRspQueryTradeResultBySerialField->Reference = pRspQueryTradeResultBySerialField_Reference;
		pRspQueryTradeResultBySerialField->RefrenceIssureType = pRspQueryTradeResultBySerialField_RefrenceIssureType;
		if(pRspQueryTradeResultBySerialField_RefrenceIssure != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->RefrenceIssure, pRspQueryTradeResultBySerialField_RefrenceIssure); pRspQueryTradeResultBySerialField_RefrenceIssure = nullptr; }
		if(pRspQueryTradeResultBySerialField_OriginReturnCode != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->OriginReturnCode, pRspQueryTradeResultBySerialField_OriginReturnCode); pRspQueryTradeResultBySerialField_OriginReturnCode = nullptr; }
		if(pRspQueryTradeResultBySerialField_OriginDescrInfoForReturnCode != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->OriginDescrInfoForReturnCode, pRspQueryTradeResultBySerialField_OriginDescrInfoForReturnCode); pRspQueryTradeResultBySerialField_OriginDescrInfoForReturnCode = nullptr; }
		if(pRspQueryTradeResultBySerialField_BankAccount != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->BankAccount, pRspQueryTradeResultBySerialField_BankAccount); pRspQueryTradeResultBySerialField_BankAccount = nullptr; }
		if(pRspQueryTradeResultBySerialField_BankPassWord != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->BankPassWord, pRspQueryTradeResultBySerialField_BankPassWord); pRspQueryTradeResultBySerialField_BankPassWord = nullptr; }
		if(pRspQueryTradeResultBySerialField_AccountID != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->AccountID, pRspQueryTradeResultBySerialField_AccountID); pRspQueryTradeResultBySerialField_AccountID = nullptr; }
		if(pRspQueryTradeResultBySerialField_Password != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->Password, pRspQueryTradeResultBySerialField_Password); pRspQueryTradeResultBySerialField_Password = nullptr; }
		if(pRspQueryTradeResultBySerialField_CurrencyID != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->CurrencyID, pRspQueryTradeResultBySerialField_CurrencyID); pRspQueryTradeResultBySerialField_CurrencyID = nullptr; }
		pRspQueryTradeResultBySerialField->TradeAmount = pRspQueryTradeResultBySerialField_TradeAmount;
		if(pRspQueryTradeResultBySerialField_Digest != nullptr){ strcpy_s(pRspQueryTradeResultBySerialField->Digest, pRspQueryTradeResultBySerialField_Digest); pRspQueryTradeResultBySerialField_Digest = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcRspQueryTradeResultBySerialField *pRspQueryTradeResultBySerialField)
{
	if(pRspQueryTradeResultBySerialField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:i,s:y,s:i,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:d,s:y}"
		, "TradeCode", pRspQueryTradeResultBySerialField->TradeCode
		, "BankID", pRspQueryTradeResultBySerialField->BankID
		, "BankBranchID", pRspQueryTradeResultBySerialField->BankBranchID
		, "BrokerID", pRspQueryTradeResultBySerialField->BrokerID
		, "BrokerBranchID", pRspQueryTradeResultBySerialField->BrokerBranchID
		, "TradeDate", pRspQueryTradeResultBySerialField->TradeDate
		, "TradeTime", pRspQueryTradeResultBySerialField->TradeTime
		, "BankSerial", pRspQueryTradeResultBySerialField->BankSerial
		, "TradingDay", pRspQueryTradeResultBySerialField->TradingDay
		, "PlateSerial", pRspQueryTradeResultBySerialField->PlateSerial
		, "LastFragment", pRspQueryTradeResultBySerialField->LastFragment
		, "SessionID", pRspQueryTradeResultBySerialField->SessionID
		, "ErrorID", pRspQueryTradeResultBySerialField->ErrorID
		, "ErrorMsg", pRspQueryTradeResultBySerialField->ErrorMsg
		, "Reference", pRspQueryTradeResultBySerialField->Reference
		, "RefrenceIssureType", pRspQueryTradeResultBySerialField->RefrenceIssureType
		, "RefrenceIssure", pRspQueryTradeResultBySerialField->RefrenceIssure
		, "OriginReturnCode", pRspQueryTradeResultBySerialField->OriginReturnCode
		, "OriginDescrInfoForReturnCode", pRspQueryTradeResultBySerialField->OriginDescrInfoForReturnCode
		, "BankAccount", pRspQueryTradeResultBySerialField->BankAccount
		, "BankPassWord", pRspQueryTradeResultBySerialField->BankPassWord
		, "AccountID", pRspQueryTradeResultBySerialField->AccountID
		, "Password", pRspQueryTradeResultBySerialField->Password
		, "CurrencyID", pRspQueryTradeResultBySerialField->CurrencyID
		, "TradeAmount", pRspQueryTradeResultBySerialField->TradeAmount
		, "Digest", pRspQueryTradeResultBySerialField->Digest
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqDayEndFileReadyField *pReqDayEndFileReadyField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "FileBusinessCode", "Digest", nullptr};
	char *pReqDayEndFileReadyField_TradeCode = nullptr;
	char *pReqDayEndFileReadyField_BankID = nullptr;
	char *pReqDayEndFileReadyField_BankBranchID = nullptr;
	char *pReqDayEndFileReadyField_BrokerID = nullptr;
	char *pReqDayEndFileReadyField_BrokerBranchID = nullptr;
	char *pReqDayEndFileReadyField_TradeDate = nullptr;
	char *pReqDayEndFileReadyField_TradeTime = nullptr;
	char *pReqDayEndFileReadyField_BankSerial = nullptr;
	char *pReqDayEndFileReadyField_TradingDay = nullptr;
	int pReqDayEndFileReadyField_PlateSerial = 0;
	char pReqDayEndFileReadyField_LastFragment = 0;
	int pReqDayEndFileReadyField_SessionID = 0;
	char pReqDayEndFileReadyField_FileBusinessCode = 0;
	char *pReqDayEndFileReadyField_Digest = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pReqDayEndFileReadyField, "|yyyyyyyyyicicy")
		, &pReqDayEndFileReadyField_TradeCode
		, &pReqDayEndFileReadyField_BankID
		, &pReqDayEndFileReadyField_BankBranchID
		, &pReqDayEndFileReadyField_BrokerID
		, &pReqDayEndFileReadyField_BrokerBranchID
		, &pReqDayEndFileReadyField_TradeDate
		, &pReqDayEndFileReadyField_TradeTime
		, &pReqDayEndFileReadyField_BankSerial
		, &pReqDayEndFileReadyField_TradingDay
		, &pReqDayEndFileReadyField_PlateSerial
		, &pReqDayEndFileReadyField_LastFragment
		, &pReqDayEndFileReadyField_SessionID
		, &pReqDayEndFileReadyField_FileBusinessCode
		, &pReqDayEndFileReadyField_Digest
	PyCTP_PyDict_FromStruct_END
		if(pReqDayEndFileReadyField_TradeCode != nullptr){ strcpy_s(pReqDayEndFileReadyField->TradeCode, pReqDayEndFileReadyField_TradeCode); pReqDayEndFileReadyField_TradeCode = nullptr; }
		if(pReqDayEndFileReadyField_BankID != nullptr){ strcpy_s(pReqDayEndFileReadyField->BankID, pReqDayEndFileReadyField_BankID); pReqDayEndFileReadyField_BankID = nullptr; }
		if(pReqDayEndFileReadyField_BankBranchID != nullptr){ strcpy_s(pReqDayEndFileReadyField->BankBranchID, pReqDayEndFileReadyField_BankBranchID); pReqDayEndFileReadyField_BankBranchID = nullptr; }
		if(pReqDayEndFileReadyField_BrokerID != nullptr){ strcpy_s(pReqDayEndFileReadyField->BrokerID, pReqDayEndFileReadyField_BrokerID); pReqDayEndFileReadyField_BrokerID = nullptr; }
		if(pReqDayEndFileReadyField_BrokerBranchID != nullptr){ strcpy_s(pReqDayEndFileReadyField->BrokerBranchID, pReqDayEndFileReadyField_BrokerBranchID); pReqDayEndFileReadyField_BrokerBranchID = nullptr; }
		if(pReqDayEndFileReadyField_TradeDate != nullptr){ strcpy_s(pReqDayEndFileReadyField->TradeDate, pReqDayEndFileReadyField_TradeDate); pReqDayEndFileReadyField_TradeDate = nullptr; }
		if(pReqDayEndFileReadyField_TradeTime != nullptr){ strcpy_s(pReqDayEndFileReadyField->TradeTime, pReqDayEndFileReadyField_TradeTime); pReqDayEndFileReadyField_TradeTime = nullptr; }
		if(pReqDayEndFileReadyField_BankSerial != nullptr){ strcpy_s(pReqDayEndFileReadyField->BankSerial, pReqDayEndFileReadyField_BankSerial); pReqDayEndFileReadyField_BankSerial = nullptr; }
		if(pReqDayEndFileReadyField_TradingDay != nullptr){ strcpy_s(pReqDayEndFileReadyField->TradingDay, pReqDayEndFileReadyField_TradingDay); pReqDayEndFileReadyField_TradingDay = nullptr; }
		pReqDayEndFileReadyField->PlateSerial = pReqDayEndFileReadyField_PlateSerial;
		pReqDayEndFileReadyField->LastFragment = pReqDayEndFileReadyField_LastFragment;
		pReqDayEndFileReadyField->SessionID = pReqDayEndFileReadyField_SessionID;
		pReqDayEndFileReadyField->FileBusinessCode = pReqDayEndFileReadyField_FileBusinessCode;
		if(pReqDayEndFileReadyField_Digest != nullptr){ strcpy_s(pReqDayEndFileReadyField->Digest, pReqDayEndFileReadyField_Digest); pReqDayEndFileReadyField_Digest = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqDayEndFileReadyField *pReqDayEndFileReadyField)
{
	if(pReqDayEndFileReadyField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:c,s:y}"
		, "TradeCode", pReqDayEndFileReadyField->TradeCode
		, "BankID", pReqDayEndFileReadyField->BankID
		, "BankBranchID", pReqDayEndFileReadyField->BankBranchID
		, "BrokerID", pReqDayEndFileReadyField->BrokerID
		, "BrokerBranchID", pReqDayEndFileReadyField->BrokerBranchID
		, "TradeDate", pReqDayEndFileReadyField->TradeDate
		, "TradeTime", pReqDayEndFileReadyField->TradeTime
		, "BankSerial", pReqDayEndFileReadyField->BankSerial
		, "TradingDay", pReqDayEndFileReadyField->TradingDay
		, "PlateSerial", pReqDayEndFileReadyField->PlateSerial
		, "LastFragment", pReqDayEndFileReadyField->LastFragment
		, "SessionID", pReqDayEndFileReadyField->SessionID
		, "FileBusinessCode", pReqDayEndFileReadyField->FileBusinessCode
		, "Digest", pReqDayEndFileReadyField->Digest
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReturnResultField *pReturnResultField, PyObject *dict)
{
	static char *kwlist[] = {"ReturnCode", "DescrInfoForReturnCode", nullptr};
	char *pReturnResultField_ReturnCode = nullptr;
	char *pReturnResultField_DescrInfoForReturnCode = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pReturnResultField, "|yy")
		, &pReturnResultField_ReturnCode
		, &pReturnResultField_DescrInfoForReturnCode
	PyCTP_PyDict_FromStruct_END
		if(pReturnResultField_ReturnCode != nullptr){ strcpy_s(pReturnResultField->ReturnCode, pReturnResultField_ReturnCode); pReturnResultField_ReturnCode = nullptr; }
		if(pReturnResultField_DescrInfoForReturnCode != nullptr){ strcpy_s(pReturnResultField->DescrInfoForReturnCode, pReturnResultField_DescrInfoForReturnCode); pReturnResultField_DescrInfoForReturnCode = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReturnResultField *pReturnResultField)
{
	if(pReturnResultField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "ReturnCode", pReturnResultField->ReturnCode
		, "DescrInfoForReturnCode", pReturnResultField->DescrInfoForReturnCode
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcVerifyFuturePasswordField *pVerifyFuturePasswordField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "AccountID", "Password", "BankAccount", "BankPassWord", "InstallID", "TID", "CurrencyID", nullptr};
	char *pVerifyFuturePasswordField_TradeCode = nullptr;
	char *pVerifyFuturePasswordField_BankID = nullptr;
	char *pVerifyFuturePasswordField_BankBranchID = nullptr;
	char *pVerifyFuturePasswordField_BrokerID = nullptr;
	char *pVerifyFuturePasswordField_BrokerBranchID = nullptr;
	char *pVerifyFuturePasswordField_TradeDate = nullptr;
	char *pVerifyFuturePasswordField_TradeTime = nullptr;
	char *pVerifyFuturePasswordField_BankSerial = nullptr;
	char *pVerifyFuturePasswordField_TradingDay = nullptr;
	int pVerifyFuturePasswordField_PlateSerial = 0;
	char pVerifyFuturePasswordField_LastFragment = 0;
	int pVerifyFuturePasswordField_SessionID = 0;
	char *pVerifyFuturePasswordField_AccountID = nullptr;
	char *pVerifyFuturePasswordField_Password = nullptr;
	char *pVerifyFuturePasswordField_BankAccount = nullptr;
	char *pVerifyFuturePasswordField_BankPassWord = nullptr;
	int pVerifyFuturePasswordField_InstallID = 0;
	int pVerifyFuturePasswordField_TID = 0;
	char *pVerifyFuturePasswordField_CurrencyID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pVerifyFuturePasswordField, "|yyyyyyyyyiciyyyyiiy")
		, &pVerifyFuturePasswordField_TradeCode
		, &pVerifyFuturePasswordField_BankID
		, &pVerifyFuturePasswordField_BankBranchID
		, &pVerifyFuturePasswordField_BrokerID
		, &pVerifyFuturePasswordField_BrokerBranchID
		, &pVerifyFuturePasswordField_TradeDate
		, &pVerifyFuturePasswordField_TradeTime
		, &pVerifyFuturePasswordField_BankSerial
		, &pVerifyFuturePasswordField_TradingDay
		, &pVerifyFuturePasswordField_PlateSerial
		, &pVerifyFuturePasswordField_LastFragment
		, &pVerifyFuturePasswordField_SessionID
		, &pVerifyFuturePasswordField_AccountID
		, &pVerifyFuturePasswordField_Password
		, &pVerifyFuturePasswordField_BankAccount
		, &pVerifyFuturePasswordField_BankPassWord
		, &pVerifyFuturePasswordField_InstallID
		, &pVerifyFuturePasswordField_TID
		, &pVerifyFuturePasswordField_CurrencyID
	PyCTP_PyDict_FromStruct_END
		if(pVerifyFuturePasswordField_TradeCode != nullptr){ strcpy_s(pVerifyFuturePasswordField->TradeCode, pVerifyFuturePasswordField_TradeCode); pVerifyFuturePasswordField_TradeCode = nullptr; }
		if(pVerifyFuturePasswordField_BankID != nullptr){ strcpy_s(pVerifyFuturePasswordField->BankID, pVerifyFuturePasswordField_BankID); pVerifyFuturePasswordField_BankID = nullptr; }
		if(pVerifyFuturePasswordField_BankBranchID != nullptr){ strcpy_s(pVerifyFuturePasswordField->BankBranchID, pVerifyFuturePasswordField_BankBranchID); pVerifyFuturePasswordField_BankBranchID = nullptr; }
		if(pVerifyFuturePasswordField_BrokerID != nullptr){ strcpy_s(pVerifyFuturePasswordField->BrokerID, pVerifyFuturePasswordField_BrokerID); pVerifyFuturePasswordField_BrokerID = nullptr; }
		if(pVerifyFuturePasswordField_BrokerBranchID != nullptr){ strcpy_s(pVerifyFuturePasswordField->BrokerBranchID, pVerifyFuturePasswordField_BrokerBranchID); pVerifyFuturePasswordField_BrokerBranchID = nullptr; }
		if(pVerifyFuturePasswordField_TradeDate != nullptr){ strcpy_s(pVerifyFuturePasswordField->TradeDate, pVerifyFuturePasswordField_TradeDate); pVerifyFuturePasswordField_TradeDate = nullptr; }
		if(pVerifyFuturePasswordField_TradeTime != nullptr){ strcpy_s(pVerifyFuturePasswordField->TradeTime, pVerifyFuturePasswordField_TradeTime); pVerifyFuturePasswordField_TradeTime = nullptr; }
		if(pVerifyFuturePasswordField_BankSerial != nullptr){ strcpy_s(pVerifyFuturePasswordField->BankSerial, pVerifyFuturePasswordField_BankSerial); pVerifyFuturePasswordField_BankSerial = nullptr; }
		if(pVerifyFuturePasswordField_TradingDay != nullptr){ strcpy_s(pVerifyFuturePasswordField->TradingDay, pVerifyFuturePasswordField_TradingDay); pVerifyFuturePasswordField_TradingDay = nullptr; }
		pVerifyFuturePasswordField->PlateSerial = pVerifyFuturePasswordField_PlateSerial;
		pVerifyFuturePasswordField->LastFragment = pVerifyFuturePasswordField_LastFragment;
		pVerifyFuturePasswordField->SessionID = pVerifyFuturePasswordField_SessionID;
		if(pVerifyFuturePasswordField_AccountID != nullptr){ strcpy_s(pVerifyFuturePasswordField->AccountID, pVerifyFuturePasswordField_AccountID); pVerifyFuturePasswordField_AccountID = nullptr; }
		if(pVerifyFuturePasswordField_Password != nullptr){ strcpy_s(pVerifyFuturePasswordField->Password, pVerifyFuturePasswordField_Password); pVerifyFuturePasswordField_Password = nullptr; }
		if(pVerifyFuturePasswordField_BankAccount != nullptr){ strcpy_s(pVerifyFuturePasswordField->BankAccount, pVerifyFuturePasswordField_BankAccount); pVerifyFuturePasswordField_BankAccount = nullptr; }
		if(pVerifyFuturePasswordField_BankPassWord != nullptr){ strcpy_s(pVerifyFuturePasswordField->BankPassWord, pVerifyFuturePasswordField_BankPassWord); pVerifyFuturePasswordField_BankPassWord = nullptr; }
		pVerifyFuturePasswordField->InstallID = pVerifyFuturePasswordField_InstallID;
		pVerifyFuturePasswordField->TID = pVerifyFuturePasswordField_TID;
		if(pVerifyFuturePasswordField_CurrencyID != nullptr){ strcpy_s(pVerifyFuturePasswordField->CurrencyID, pVerifyFuturePasswordField_CurrencyID); pVerifyFuturePasswordField_CurrencyID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcVerifyFuturePasswordField *pVerifyFuturePasswordField)
{
	if(pVerifyFuturePasswordField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:y,s:y,s:y,s:i,s:i,s:y}"
		, "TradeCode", pVerifyFuturePasswordField->TradeCode
		, "BankID", pVerifyFuturePasswordField->BankID
		, "BankBranchID", pVerifyFuturePasswordField->BankBranchID
		, "BrokerID", pVerifyFuturePasswordField->BrokerID
		, "BrokerBranchID", pVerifyFuturePasswordField->BrokerBranchID
		, "TradeDate", pVerifyFuturePasswordField->TradeDate
		, "TradeTime", pVerifyFuturePasswordField->TradeTime
		, "BankSerial", pVerifyFuturePasswordField->BankSerial
		, "TradingDay", pVerifyFuturePasswordField->TradingDay
		, "PlateSerial", pVerifyFuturePasswordField->PlateSerial
		, "LastFragment", pVerifyFuturePasswordField->LastFragment
		, "SessionID", pVerifyFuturePasswordField->SessionID
		, "AccountID", pVerifyFuturePasswordField->AccountID
		, "Password", pVerifyFuturePasswordField->Password
		, "BankAccount", pVerifyFuturePasswordField->BankAccount
		, "BankPassWord", pVerifyFuturePasswordField->BankPassWord
		, "InstallID", pVerifyFuturePasswordField->InstallID
		, "TID", pVerifyFuturePasswordField->TID
		, "CurrencyID", pVerifyFuturePasswordField->CurrencyID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcVerifyCustInfoField *pVerifyCustInfoField, PyObject *dict)
{
	static char *kwlist[] = {"CustomerName", "IdCardType", "IdentifiedCardNo", "CustType", "LongCustomerName", nullptr};
	char *pVerifyCustInfoField_CustomerName = nullptr;
	char pVerifyCustInfoField_IdCardType = 0;
	char *pVerifyCustInfoField_IdentifiedCardNo = nullptr;
	char pVerifyCustInfoField_CustType = 0;
	char *pVerifyCustInfoField_LongCustomerName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pVerifyCustInfoField, "|ycycy")
		, &pVerifyCustInfoField_CustomerName
		, &pVerifyCustInfoField_IdCardType
		, &pVerifyCustInfoField_IdentifiedCardNo
		, &pVerifyCustInfoField_CustType
		, &pVerifyCustInfoField_LongCustomerName
	PyCTP_PyDict_FromStruct_END
		if(pVerifyCustInfoField_CustomerName != nullptr){ strcpy_s(pVerifyCustInfoField->CustomerName, pVerifyCustInfoField_CustomerName); pVerifyCustInfoField_CustomerName = nullptr; }
		pVerifyCustInfoField->IdCardType = pVerifyCustInfoField_IdCardType;
		if(pVerifyCustInfoField_IdentifiedCardNo != nullptr){ strcpy_s(pVerifyCustInfoField->IdentifiedCardNo, pVerifyCustInfoField_IdentifiedCardNo); pVerifyCustInfoField_IdentifiedCardNo = nullptr; }
		pVerifyCustInfoField->CustType = pVerifyCustInfoField_CustType;
		if(pVerifyCustInfoField_LongCustomerName != nullptr){ strcpy_s(pVerifyCustInfoField->LongCustomerName, pVerifyCustInfoField_LongCustomerName); pVerifyCustInfoField_LongCustomerName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcVerifyCustInfoField *pVerifyCustInfoField)
{
	if(pVerifyCustInfoField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:c,s:y}"
		, "CustomerName", pVerifyCustInfoField->CustomerName
		, "IdCardType", pVerifyCustInfoField->IdCardType
		, "IdentifiedCardNo", pVerifyCustInfoField->IdentifiedCardNo
		, "CustType", pVerifyCustInfoField->CustType
		, "LongCustomerName", pVerifyCustInfoField->LongCustomerName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcVerifyFuturePasswordAndCustInfoField *pVerifyFuturePasswordAndCustInfoField, PyObject *dict)
{
	static char *kwlist[] = {"CustomerName", "IdCardType", "IdentifiedCardNo", "CustType", "AccountID", "Password", "CurrencyID", "LongCustomerName", nullptr};
	char *pVerifyFuturePasswordAndCustInfoField_CustomerName = nullptr;
	char pVerifyFuturePasswordAndCustInfoField_IdCardType = 0;
	char *pVerifyFuturePasswordAndCustInfoField_IdentifiedCardNo = nullptr;
	char pVerifyFuturePasswordAndCustInfoField_CustType = 0;
	char *pVerifyFuturePasswordAndCustInfoField_AccountID = nullptr;
	char *pVerifyFuturePasswordAndCustInfoField_Password = nullptr;
	char *pVerifyFuturePasswordAndCustInfoField_CurrencyID = nullptr;
	char *pVerifyFuturePasswordAndCustInfoField_LongCustomerName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pVerifyFuturePasswordAndCustInfoField, "|ycycyyyy")
		, &pVerifyFuturePasswordAndCustInfoField_CustomerName
		, &pVerifyFuturePasswordAndCustInfoField_IdCardType
		, &pVerifyFuturePasswordAndCustInfoField_IdentifiedCardNo
		, &pVerifyFuturePasswordAndCustInfoField_CustType
		, &pVerifyFuturePasswordAndCustInfoField_AccountID
		, &pVerifyFuturePasswordAndCustInfoField_Password
		, &pVerifyFuturePasswordAndCustInfoField_CurrencyID
		, &pVerifyFuturePasswordAndCustInfoField_LongCustomerName
	PyCTP_PyDict_FromStruct_END
		if(pVerifyFuturePasswordAndCustInfoField_CustomerName != nullptr){ strcpy_s(pVerifyFuturePasswordAndCustInfoField->CustomerName, pVerifyFuturePasswordAndCustInfoField_CustomerName); pVerifyFuturePasswordAndCustInfoField_CustomerName = nullptr; }
		pVerifyFuturePasswordAndCustInfoField->IdCardType = pVerifyFuturePasswordAndCustInfoField_IdCardType;
		if(pVerifyFuturePasswordAndCustInfoField_IdentifiedCardNo != nullptr){ strcpy_s(pVerifyFuturePasswordAndCustInfoField->IdentifiedCardNo, pVerifyFuturePasswordAndCustInfoField_IdentifiedCardNo); pVerifyFuturePasswordAndCustInfoField_IdentifiedCardNo = nullptr; }
		pVerifyFuturePasswordAndCustInfoField->CustType = pVerifyFuturePasswordAndCustInfoField_CustType;
		if(pVerifyFuturePasswordAndCustInfoField_AccountID != nullptr){ strcpy_s(pVerifyFuturePasswordAndCustInfoField->AccountID, pVerifyFuturePasswordAndCustInfoField_AccountID); pVerifyFuturePasswordAndCustInfoField_AccountID = nullptr; }
		if(pVerifyFuturePasswordAndCustInfoField_Password != nullptr){ strcpy_s(pVerifyFuturePasswordAndCustInfoField->Password, pVerifyFuturePasswordAndCustInfoField_Password); pVerifyFuturePasswordAndCustInfoField_Password = nullptr; }
		if(pVerifyFuturePasswordAndCustInfoField_CurrencyID != nullptr){ strcpy_s(pVerifyFuturePasswordAndCustInfoField->CurrencyID, pVerifyFuturePasswordAndCustInfoField_CurrencyID); pVerifyFuturePasswordAndCustInfoField_CurrencyID = nullptr; }
		if(pVerifyFuturePasswordAndCustInfoField_LongCustomerName != nullptr){ strcpy_s(pVerifyFuturePasswordAndCustInfoField->LongCustomerName, pVerifyFuturePasswordAndCustInfoField_LongCustomerName); pVerifyFuturePasswordAndCustInfoField_LongCustomerName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcVerifyFuturePasswordAndCustInfoField *pVerifyFuturePasswordAndCustInfoField)
{
	if(pVerifyFuturePasswordAndCustInfoField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y}"
		, "CustomerName", pVerifyFuturePasswordAndCustInfoField->CustomerName
		, "IdCardType", pVerifyFuturePasswordAndCustInfoField->IdCardType
		, "IdentifiedCardNo", pVerifyFuturePasswordAndCustInfoField->IdentifiedCardNo
		, "CustType", pVerifyFuturePasswordAndCustInfoField->CustType
		, "AccountID", pVerifyFuturePasswordAndCustInfoField->AccountID
		, "Password", pVerifyFuturePasswordAndCustInfoField->Password
		, "CurrencyID", pVerifyFuturePasswordAndCustInfoField->CurrencyID
		, "LongCustomerName", pVerifyFuturePasswordAndCustInfoField->LongCustomerName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcDepositResultInformField *pDepositResultInformField, PyObject *dict)
{
	static char *kwlist[] = {"DepositSeqNo", "BrokerID", "InvestorID", "Deposit", "RequestID", "ReturnCode", "DescrInfoForReturnCode", nullptr};
	char *pDepositResultInformField_DepositSeqNo = nullptr;
	char *pDepositResultInformField_BrokerID = nullptr;
	char *pDepositResultInformField_InvestorID = nullptr;
	double pDepositResultInformField_Deposit = 0.0;
	int pDepositResultInformField_RequestID = 0;
	char *pDepositResultInformField_ReturnCode = nullptr;
	char *pDepositResultInformField_DescrInfoForReturnCode = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pDepositResultInformField, "|yyydiyy")
		, &pDepositResultInformField_DepositSeqNo
		, &pDepositResultInformField_BrokerID
		, &pDepositResultInformField_InvestorID
		, &pDepositResultInformField_Deposit
		, &pDepositResultInformField_RequestID
		, &pDepositResultInformField_ReturnCode
		, &pDepositResultInformField_DescrInfoForReturnCode
	PyCTP_PyDict_FromStruct_END
		if(pDepositResultInformField_DepositSeqNo != nullptr){ strcpy_s(pDepositResultInformField->DepositSeqNo, pDepositResultInformField_DepositSeqNo); pDepositResultInformField_DepositSeqNo = nullptr; }
		if(pDepositResultInformField_BrokerID != nullptr){ strcpy_s(pDepositResultInformField->BrokerID, pDepositResultInformField_BrokerID); pDepositResultInformField_BrokerID = nullptr; }
		if(pDepositResultInformField_InvestorID != nullptr){ strcpy_s(pDepositResultInformField->InvestorID, pDepositResultInformField_InvestorID); pDepositResultInformField_InvestorID = nullptr; }
		pDepositResultInformField->Deposit = pDepositResultInformField_Deposit;
		pDepositResultInformField->RequestID = pDepositResultInformField_RequestID;
		if(pDepositResultInformField_ReturnCode != nullptr){ strcpy_s(pDepositResultInformField->ReturnCode, pDepositResultInformField_ReturnCode); pDepositResultInformField_ReturnCode = nullptr; }
		if(pDepositResultInformField_DescrInfoForReturnCode != nullptr){ strcpy_s(pDepositResultInformField->DescrInfoForReturnCode, pDepositResultInformField_DescrInfoForReturnCode); pDepositResultInformField_DescrInfoForReturnCode = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcDepositResultInformField *pDepositResultInformField)
{
	if(pDepositResultInformField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:d,s:i,s:y,s:y}"
		, "DepositSeqNo", pDepositResultInformField->DepositSeqNo
		, "BrokerID", pDepositResultInformField->BrokerID
		, "InvestorID", pDepositResultInformField->InvestorID
		, "Deposit", pDepositResultInformField->Deposit
		, "RequestID", pDepositResultInformField->RequestID
		, "ReturnCode", pDepositResultInformField->ReturnCode
		, "DescrInfoForReturnCode", pDepositResultInformField->DescrInfoForReturnCode
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqSyncKeyField *pReqSyncKeyField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "InstallID", "UserID", "Message", "DeviceID", "BrokerIDByBank", "OperNo", "RequestID", "TID", nullptr};
	char *pReqSyncKeyField_TradeCode = nullptr;
	char *pReqSyncKeyField_BankID = nullptr;
	char *pReqSyncKeyField_BankBranchID = nullptr;
	char *pReqSyncKeyField_BrokerID = nullptr;
	char *pReqSyncKeyField_BrokerBranchID = nullptr;
	char *pReqSyncKeyField_TradeDate = nullptr;
	char *pReqSyncKeyField_TradeTime = nullptr;
	char *pReqSyncKeyField_BankSerial = nullptr;
	char *pReqSyncKeyField_TradingDay = nullptr;
	int pReqSyncKeyField_PlateSerial = 0;
	char pReqSyncKeyField_LastFragment = 0;
	int pReqSyncKeyField_SessionID = 0;
	int pReqSyncKeyField_InstallID = 0;
	char *pReqSyncKeyField_UserID = nullptr;
	char *pReqSyncKeyField_Message = nullptr;
	char *pReqSyncKeyField_DeviceID = nullptr;
	char *pReqSyncKeyField_BrokerIDByBank = nullptr;
	char *pReqSyncKeyField_OperNo = nullptr;
	int pReqSyncKeyField_RequestID = 0;
	int pReqSyncKeyField_TID = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pReqSyncKeyField, "|yyyyyyyyyiciiyyyyyii")
		, &pReqSyncKeyField_TradeCode
		, &pReqSyncKeyField_BankID
		, &pReqSyncKeyField_BankBranchID
		, &pReqSyncKeyField_BrokerID
		, &pReqSyncKeyField_BrokerBranchID
		, &pReqSyncKeyField_TradeDate
		, &pReqSyncKeyField_TradeTime
		, &pReqSyncKeyField_BankSerial
		, &pReqSyncKeyField_TradingDay
		, &pReqSyncKeyField_PlateSerial
		, &pReqSyncKeyField_LastFragment
		, &pReqSyncKeyField_SessionID
		, &pReqSyncKeyField_InstallID
		, &pReqSyncKeyField_UserID
		, &pReqSyncKeyField_Message
		, &pReqSyncKeyField_DeviceID
		, &pReqSyncKeyField_BrokerIDByBank
		, &pReqSyncKeyField_OperNo
		, &pReqSyncKeyField_RequestID
		, &pReqSyncKeyField_TID
	PyCTP_PyDict_FromStruct_END
		if(pReqSyncKeyField_TradeCode != nullptr){ strcpy_s(pReqSyncKeyField->TradeCode, pReqSyncKeyField_TradeCode); pReqSyncKeyField_TradeCode = nullptr; }
		if(pReqSyncKeyField_BankID != nullptr){ strcpy_s(pReqSyncKeyField->BankID, pReqSyncKeyField_BankID); pReqSyncKeyField_BankID = nullptr; }
		if(pReqSyncKeyField_BankBranchID != nullptr){ strcpy_s(pReqSyncKeyField->BankBranchID, pReqSyncKeyField_BankBranchID); pReqSyncKeyField_BankBranchID = nullptr; }
		if(pReqSyncKeyField_BrokerID != nullptr){ strcpy_s(pReqSyncKeyField->BrokerID, pReqSyncKeyField_BrokerID); pReqSyncKeyField_BrokerID = nullptr; }
		if(pReqSyncKeyField_BrokerBranchID != nullptr){ strcpy_s(pReqSyncKeyField->BrokerBranchID, pReqSyncKeyField_BrokerBranchID); pReqSyncKeyField_BrokerBranchID = nullptr; }
		if(pReqSyncKeyField_TradeDate != nullptr){ strcpy_s(pReqSyncKeyField->TradeDate, pReqSyncKeyField_TradeDate); pReqSyncKeyField_TradeDate = nullptr; }
		if(pReqSyncKeyField_TradeTime != nullptr){ strcpy_s(pReqSyncKeyField->TradeTime, pReqSyncKeyField_TradeTime); pReqSyncKeyField_TradeTime = nullptr; }
		if(pReqSyncKeyField_BankSerial != nullptr){ strcpy_s(pReqSyncKeyField->BankSerial, pReqSyncKeyField_BankSerial); pReqSyncKeyField_BankSerial = nullptr; }
		if(pReqSyncKeyField_TradingDay != nullptr){ strcpy_s(pReqSyncKeyField->TradingDay, pReqSyncKeyField_TradingDay); pReqSyncKeyField_TradingDay = nullptr; }
		pReqSyncKeyField->PlateSerial = pReqSyncKeyField_PlateSerial;
		pReqSyncKeyField->LastFragment = pReqSyncKeyField_LastFragment;
		pReqSyncKeyField->SessionID = pReqSyncKeyField_SessionID;
		pReqSyncKeyField->InstallID = pReqSyncKeyField_InstallID;
		if(pReqSyncKeyField_UserID != nullptr){ strcpy_s(pReqSyncKeyField->UserID, pReqSyncKeyField_UserID); pReqSyncKeyField_UserID = nullptr; }
		if(pReqSyncKeyField_Message != nullptr){ strcpy_s(pReqSyncKeyField->Message, pReqSyncKeyField_Message); pReqSyncKeyField_Message = nullptr; }
		if(pReqSyncKeyField_DeviceID != nullptr){ strcpy_s(pReqSyncKeyField->DeviceID, pReqSyncKeyField_DeviceID); pReqSyncKeyField_DeviceID = nullptr; }
		if(pReqSyncKeyField_BrokerIDByBank != nullptr){ strcpy_s(pReqSyncKeyField->BrokerIDByBank, pReqSyncKeyField_BrokerIDByBank); pReqSyncKeyField_BrokerIDByBank = nullptr; }
		if(pReqSyncKeyField_OperNo != nullptr){ strcpy_s(pReqSyncKeyField->OperNo, pReqSyncKeyField_OperNo); pReqSyncKeyField_OperNo = nullptr; }
		pReqSyncKeyField->RequestID = pReqSyncKeyField_RequestID;
		pReqSyncKeyField->TID = pReqSyncKeyField_TID;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqSyncKeyField *pReqSyncKeyField)
{
	if(pReqSyncKeyField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:i,s:i}"
		, "TradeCode", pReqSyncKeyField->TradeCode
		, "BankID", pReqSyncKeyField->BankID
		, "BankBranchID", pReqSyncKeyField->BankBranchID
		, "BrokerID", pReqSyncKeyField->BrokerID
		, "BrokerBranchID", pReqSyncKeyField->BrokerBranchID
		, "TradeDate", pReqSyncKeyField->TradeDate
		, "TradeTime", pReqSyncKeyField->TradeTime
		, "BankSerial", pReqSyncKeyField->BankSerial
		, "TradingDay", pReqSyncKeyField->TradingDay
		, "PlateSerial", pReqSyncKeyField->PlateSerial
		, "LastFragment", pReqSyncKeyField->LastFragment
		, "SessionID", pReqSyncKeyField->SessionID
		, "InstallID", pReqSyncKeyField->InstallID
		, "UserID", pReqSyncKeyField->UserID
		, "Message", pReqSyncKeyField->Message
		, "DeviceID", pReqSyncKeyField->DeviceID
		, "BrokerIDByBank", pReqSyncKeyField->BrokerIDByBank
		, "OperNo", pReqSyncKeyField->OperNo
		, "RequestID", pReqSyncKeyField->RequestID
		, "TID", pReqSyncKeyField->TID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcRspSyncKeyField *pRspSyncKeyField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "InstallID", "UserID", "Message", "DeviceID", "BrokerIDByBank", "OperNo", "RequestID", "TID", "ErrorID", "ErrorMsg", nullptr};
	char *pRspSyncKeyField_TradeCode = nullptr;
	char *pRspSyncKeyField_BankID = nullptr;
	char *pRspSyncKeyField_BankBranchID = nullptr;
	char *pRspSyncKeyField_BrokerID = nullptr;
	char *pRspSyncKeyField_BrokerBranchID = nullptr;
	char *pRspSyncKeyField_TradeDate = nullptr;
	char *pRspSyncKeyField_TradeTime = nullptr;
	char *pRspSyncKeyField_BankSerial = nullptr;
	char *pRspSyncKeyField_TradingDay = nullptr;
	int pRspSyncKeyField_PlateSerial = 0;
	char pRspSyncKeyField_LastFragment = 0;
	int pRspSyncKeyField_SessionID = 0;
	int pRspSyncKeyField_InstallID = 0;
	char *pRspSyncKeyField_UserID = nullptr;
	char *pRspSyncKeyField_Message = nullptr;
	char *pRspSyncKeyField_DeviceID = nullptr;
	char *pRspSyncKeyField_BrokerIDByBank = nullptr;
	char *pRspSyncKeyField_OperNo = nullptr;
	int pRspSyncKeyField_RequestID = 0;
	int pRspSyncKeyField_TID = 0;
	int pRspSyncKeyField_ErrorID = 0;
	char *pRspSyncKeyField_ErrorMsg = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pRspSyncKeyField, "|yyyyyyyyyiciiyyyyyiiiy")
		, &pRspSyncKeyField_TradeCode
		, &pRspSyncKeyField_BankID
		, &pRspSyncKeyField_BankBranchID
		, &pRspSyncKeyField_BrokerID
		, &pRspSyncKeyField_BrokerBranchID
		, &pRspSyncKeyField_TradeDate
		, &pRspSyncKeyField_TradeTime
		, &pRspSyncKeyField_BankSerial
		, &pRspSyncKeyField_TradingDay
		, &pRspSyncKeyField_PlateSerial
		, &pRspSyncKeyField_LastFragment
		, &pRspSyncKeyField_SessionID
		, &pRspSyncKeyField_InstallID
		, &pRspSyncKeyField_UserID
		, &pRspSyncKeyField_Message
		, &pRspSyncKeyField_DeviceID
		, &pRspSyncKeyField_BrokerIDByBank
		, &pRspSyncKeyField_OperNo
		, &pRspSyncKeyField_RequestID
		, &pRspSyncKeyField_TID
		, &pRspSyncKeyField_ErrorID
		, &pRspSyncKeyField_ErrorMsg
	PyCTP_PyDict_FromStruct_END
		if(pRspSyncKeyField_TradeCode != nullptr){ strcpy_s(pRspSyncKeyField->TradeCode, pRspSyncKeyField_TradeCode); pRspSyncKeyField_TradeCode = nullptr; }
		if(pRspSyncKeyField_BankID != nullptr){ strcpy_s(pRspSyncKeyField->BankID, pRspSyncKeyField_BankID); pRspSyncKeyField_BankID = nullptr; }
		if(pRspSyncKeyField_BankBranchID != nullptr){ strcpy_s(pRspSyncKeyField->BankBranchID, pRspSyncKeyField_BankBranchID); pRspSyncKeyField_BankBranchID = nullptr; }
		if(pRspSyncKeyField_BrokerID != nullptr){ strcpy_s(pRspSyncKeyField->BrokerID, pRspSyncKeyField_BrokerID); pRspSyncKeyField_BrokerID = nullptr; }
		if(pRspSyncKeyField_BrokerBranchID != nullptr){ strcpy_s(pRspSyncKeyField->BrokerBranchID, pRspSyncKeyField_BrokerBranchID); pRspSyncKeyField_BrokerBranchID = nullptr; }
		if(pRspSyncKeyField_TradeDate != nullptr){ strcpy_s(pRspSyncKeyField->TradeDate, pRspSyncKeyField_TradeDate); pRspSyncKeyField_TradeDate = nullptr; }
		if(pRspSyncKeyField_TradeTime != nullptr){ strcpy_s(pRspSyncKeyField->TradeTime, pRspSyncKeyField_TradeTime); pRspSyncKeyField_TradeTime = nullptr; }
		if(pRspSyncKeyField_BankSerial != nullptr){ strcpy_s(pRspSyncKeyField->BankSerial, pRspSyncKeyField_BankSerial); pRspSyncKeyField_BankSerial = nullptr; }
		if(pRspSyncKeyField_TradingDay != nullptr){ strcpy_s(pRspSyncKeyField->TradingDay, pRspSyncKeyField_TradingDay); pRspSyncKeyField_TradingDay = nullptr; }
		pRspSyncKeyField->PlateSerial = pRspSyncKeyField_PlateSerial;
		pRspSyncKeyField->LastFragment = pRspSyncKeyField_LastFragment;
		pRspSyncKeyField->SessionID = pRspSyncKeyField_SessionID;
		pRspSyncKeyField->InstallID = pRspSyncKeyField_InstallID;
		if(pRspSyncKeyField_UserID != nullptr){ strcpy_s(pRspSyncKeyField->UserID, pRspSyncKeyField_UserID); pRspSyncKeyField_UserID = nullptr; }
		if(pRspSyncKeyField_Message != nullptr){ strcpy_s(pRspSyncKeyField->Message, pRspSyncKeyField_Message); pRspSyncKeyField_Message = nullptr; }
		if(pRspSyncKeyField_DeviceID != nullptr){ strcpy_s(pRspSyncKeyField->DeviceID, pRspSyncKeyField_DeviceID); pRspSyncKeyField_DeviceID = nullptr; }
		if(pRspSyncKeyField_BrokerIDByBank != nullptr){ strcpy_s(pRspSyncKeyField->BrokerIDByBank, pRspSyncKeyField_BrokerIDByBank); pRspSyncKeyField_BrokerIDByBank = nullptr; }
		if(pRspSyncKeyField_OperNo != nullptr){ strcpy_s(pRspSyncKeyField->OperNo, pRspSyncKeyField_OperNo); pRspSyncKeyField_OperNo = nullptr; }
		pRspSyncKeyField->RequestID = pRspSyncKeyField_RequestID;
		pRspSyncKeyField->TID = pRspSyncKeyField_TID;
		pRspSyncKeyField->ErrorID = pRspSyncKeyField_ErrorID;
		if(pRspSyncKeyField_ErrorMsg != nullptr){ strcpy_s(pRspSyncKeyField->ErrorMsg, pRspSyncKeyField_ErrorMsg); pRspSyncKeyField_ErrorMsg = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcRspSyncKeyField *pRspSyncKeyField)
{
	if(pRspSyncKeyField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:i,s:i,s:i,s:y}"
		, "TradeCode", pRspSyncKeyField->TradeCode
		, "BankID", pRspSyncKeyField->BankID
		, "BankBranchID", pRspSyncKeyField->BankBranchID
		, "BrokerID", pRspSyncKeyField->BrokerID
		, "BrokerBranchID", pRspSyncKeyField->BrokerBranchID
		, "TradeDate", pRspSyncKeyField->TradeDate
		, "TradeTime", pRspSyncKeyField->TradeTime
		, "BankSerial", pRspSyncKeyField->BankSerial
		, "TradingDay", pRspSyncKeyField->TradingDay
		, "PlateSerial", pRspSyncKeyField->PlateSerial
		, "LastFragment", pRspSyncKeyField->LastFragment
		, "SessionID", pRspSyncKeyField->SessionID
		, "InstallID", pRspSyncKeyField->InstallID
		, "UserID", pRspSyncKeyField->UserID
		, "Message", pRspSyncKeyField->Message
		, "DeviceID", pRspSyncKeyField->DeviceID
		, "BrokerIDByBank", pRspSyncKeyField->BrokerIDByBank
		, "OperNo", pRspSyncKeyField->OperNo
		, "RequestID", pRspSyncKeyField->RequestID
		, "TID", pRspSyncKeyField->TID
		, "ErrorID", pRspSyncKeyField->ErrorID
		, "ErrorMsg", pRspSyncKeyField->ErrorMsg
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcNotifyQueryAccountField *pNotifyQueryAccountField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "CustomerName", "IdCardType", "IdentifiedCardNo", "CustType", "BankAccount", "BankPassWord", "AccountID", "Password", "FutureSerial", "InstallID", "UserID", "VerifyCertNoFlag", "CurrencyID", "Digest", "BankAccType", "DeviceID", "BankSecuAccType", "BrokerIDByBank", "BankSecuAcc", "BankPwdFlag", "SecuPwdFlag", "OperNo", "RequestID", "TID", "BankUseAmount", "BankFetchAmount", "ErrorID", "ErrorMsg", "LongCustomerName", nullptr};
	char *pNotifyQueryAccountField_TradeCode = nullptr;
	char *pNotifyQueryAccountField_BankID = nullptr;
	char *pNotifyQueryAccountField_BankBranchID = nullptr;
	char *pNotifyQueryAccountField_BrokerID = nullptr;
	char *pNotifyQueryAccountField_BrokerBranchID = nullptr;
	char *pNotifyQueryAccountField_TradeDate = nullptr;
	char *pNotifyQueryAccountField_TradeTime = nullptr;
	char *pNotifyQueryAccountField_BankSerial = nullptr;
	char *pNotifyQueryAccountField_TradingDay = nullptr;
	int pNotifyQueryAccountField_PlateSerial = 0;
	char pNotifyQueryAccountField_LastFragment = 0;
	int pNotifyQueryAccountField_SessionID = 0;
	char *pNotifyQueryAccountField_CustomerName = nullptr;
	char pNotifyQueryAccountField_IdCardType = 0;
	char *pNotifyQueryAccountField_IdentifiedCardNo = nullptr;
	char pNotifyQueryAccountField_CustType = 0;
	char *pNotifyQueryAccountField_BankAccount = nullptr;
	char *pNotifyQueryAccountField_BankPassWord = nullptr;
	char *pNotifyQueryAccountField_AccountID = nullptr;
	char *pNotifyQueryAccountField_Password = nullptr;
	int pNotifyQueryAccountField_FutureSerial = 0;
	int pNotifyQueryAccountField_InstallID = 0;
	char *pNotifyQueryAccountField_UserID = nullptr;
	char pNotifyQueryAccountField_VerifyCertNoFlag = 0;
	char *pNotifyQueryAccountField_CurrencyID = nullptr;
	char *pNotifyQueryAccountField_Digest = nullptr;
	char pNotifyQueryAccountField_BankAccType = 0;
	char *pNotifyQueryAccountField_DeviceID = nullptr;
	char pNotifyQueryAccountField_BankSecuAccType = 0;
	char *pNotifyQueryAccountField_BrokerIDByBank = nullptr;
	char *pNotifyQueryAccountField_BankSecuAcc = nullptr;
	char pNotifyQueryAccountField_BankPwdFlag = 0;
	char pNotifyQueryAccountField_SecuPwdFlag = 0;
	char *pNotifyQueryAccountField_OperNo = nullptr;
	int pNotifyQueryAccountField_RequestID = 0;
	int pNotifyQueryAccountField_TID = 0;
	double pNotifyQueryAccountField_BankUseAmount = 0.0;
	double pNotifyQueryAccountField_BankFetchAmount = 0.0;
	int pNotifyQueryAccountField_ErrorID = 0;
	char *pNotifyQueryAccountField_ErrorMsg = nullptr;
	char *pNotifyQueryAccountField_LongCustomerName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pNotifyQueryAccountField, "|yyyyyyyyyiciycycyyyyiiycyycycyyccyiiddiyy")
		, &pNotifyQueryAccountField_TradeCode
		, &pNotifyQueryAccountField_BankID
		, &pNotifyQueryAccountField_BankBranchID
		, &pNotifyQueryAccountField_BrokerID
		, &pNotifyQueryAccountField_BrokerBranchID
		, &pNotifyQueryAccountField_TradeDate
		, &pNotifyQueryAccountField_TradeTime
		, &pNotifyQueryAccountField_BankSerial
		, &pNotifyQueryAccountField_TradingDay
		, &pNotifyQueryAccountField_PlateSerial
		, &pNotifyQueryAccountField_LastFragment
		, &pNotifyQueryAccountField_SessionID
		, &pNotifyQueryAccountField_CustomerName
		, &pNotifyQueryAccountField_IdCardType
		, &pNotifyQueryAccountField_IdentifiedCardNo
		, &pNotifyQueryAccountField_CustType
		, &pNotifyQueryAccountField_BankAccount
		, &pNotifyQueryAccountField_BankPassWord
		, &pNotifyQueryAccountField_AccountID
		, &pNotifyQueryAccountField_Password
		, &pNotifyQueryAccountField_FutureSerial
		, &pNotifyQueryAccountField_InstallID
		, &pNotifyQueryAccountField_UserID
		, &pNotifyQueryAccountField_VerifyCertNoFlag
		, &pNotifyQueryAccountField_CurrencyID
		, &pNotifyQueryAccountField_Digest
		, &pNotifyQueryAccountField_BankAccType
		, &pNotifyQueryAccountField_DeviceID
		, &pNotifyQueryAccountField_BankSecuAccType
		, &pNotifyQueryAccountField_BrokerIDByBank
		, &pNotifyQueryAccountField_BankSecuAcc
		, &pNotifyQueryAccountField_BankPwdFlag
		, &pNotifyQueryAccountField_SecuPwdFlag
		, &pNotifyQueryAccountField_OperNo
		, &pNotifyQueryAccountField_RequestID
		, &pNotifyQueryAccountField_TID
		, &pNotifyQueryAccountField_BankUseAmount
		, &pNotifyQueryAccountField_BankFetchAmount
		, &pNotifyQueryAccountField_ErrorID
		, &pNotifyQueryAccountField_ErrorMsg
		, &pNotifyQueryAccountField_LongCustomerName
	PyCTP_PyDict_FromStruct_END
		if(pNotifyQueryAccountField_TradeCode != nullptr){ strcpy_s(pNotifyQueryAccountField->TradeCode, pNotifyQueryAccountField_TradeCode); pNotifyQueryAccountField_TradeCode = nullptr; }
		if(pNotifyQueryAccountField_BankID != nullptr){ strcpy_s(pNotifyQueryAccountField->BankID, pNotifyQueryAccountField_BankID); pNotifyQueryAccountField_BankID = nullptr; }
		if(pNotifyQueryAccountField_BankBranchID != nullptr){ strcpy_s(pNotifyQueryAccountField->BankBranchID, pNotifyQueryAccountField_BankBranchID); pNotifyQueryAccountField_BankBranchID = nullptr; }
		if(pNotifyQueryAccountField_BrokerID != nullptr){ strcpy_s(pNotifyQueryAccountField->BrokerID, pNotifyQueryAccountField_BrokerID); pNotifyQueryAccountField_BrokerID = nullptr; }
		if(pNotifyQueryAccountField_BrokerBranchID != nullptr){ strcpy_s(pNotifyQueryAccountField->BrokerBranchID, pNotifyQueryAccountField_BrokerBranchID); pNotifyQueryAccountField_BrokerBranchID = nullptr; }
		if(pNotifyQueryAccountField_TradeDate != nullptr){ strcpy_s(pNotifyQueryAccountField->TradeDate, pNotifyQueryAccountField_TradeDate); pNotifyQueryAccountField_TradeDate = nullptr; }
		if(pNotifyQueryAccountField_TradeTime != nullptr){ strcpy_s(pNotifyQueryAccountField->TradeTime, pNotifyQueryAccountField_TradeTime); pNotifyQueryAccountField_TradeTime = nullptr; }
		if(pNotifyQueryAccountField_BankSerial != nullptr){ strcpy_s(pNotifyQueryAccountField->BankSerial, pNotifyQueryAccountField_BankSerial); pNotifyQueryAccountField_BankSerial = nullptr; }
		if(pNotifyQueryAccountField_TradingDay != nullptr){ strcpy_s(pNotifyQueryAccountField->TradingDay, pNotifyQueryAccountField_TradingDay); pNotifyQueryAccountField_TradingDay = nullptr; }
		pNotifyQueryAccountField->PlateSerial = pNotifyQueryAccountField_PlateSerial;
		pNotifyQueryAccountField->LastFragment = pNotifyQueryAccountField_LastFragment;
		pNotifyQueryAccountField->SessionID = pNotifyQueryAccountField_SessionID;
		if(pNotifyQueryAccountField_CustomerName != nullptr){ strcpy_s(pNotifyQueryAccountField->CustomerName, pNotifyQueryAccountField_CustomerName); pNotifyQueryAccountField_CustomerName = nullptr; }
		pNotifyQueryAccountField->IdCardType = pNotifyQueryAccountField_IdCardType;
		if(pNotifyQueryAccountField_IdentifiedCardNo != nullptr){ strcpy_s(pNotifyQueryAccountField->IdentifiedCardNo, pNotifyQueryAccountField_IdentifiedCardNo); pNotifyQueryAccountField_IdentifiedCardNo = nullptr; }
		pNotifyQueryAccountField->CustType = pNotifyQueryAccountField_CustType;
		if(pNotifyQueryAccountField_BankAccount != nullptr){ strcpy_s(pNotifyQueryAccountField->BankAccount, pNotifyQueryAccountField_BankAccount); pNotifyQueryAccountField_BankAccount = nullptr; }
		if(pNotifyQueryAccountField_BankPassWord != nullptr){ strcpy_s(pNotifyQueryAccountField->BankPassWord, pNotifyQueryAccountField_BankPassWord); pNotifyQueryAccountField_BankPassWord = nullptr; }
		if(pNotifyQueryAccountField_AccountID != nullptr){ strcpy_s(pNotifyQueryAccountField->AccountID, pNotifyQueryAccountField_AccountID); pNotifyQueryAccountField_AccountID = nullptr; }
		if(pNotifyQueryAccountField_Password != nullptr){ strcpy_s(pNotifyQueryAccountField->Password, pNotifyQueryAccountField_Password); pNotifyQueryAccountField_Password = nullptr; }
		pNotifyQueryAccountField->FutureSerial = pNotifyQueryAccountField_FutureSerial;
		pNotifyQueryAccountField->InstallID = pNotifyQueryAccountField_InstallID;
		if(pNotifyQueryAccountField_UserID != nullptr){ strcpy_s(pNotifyQueryAccountField->UserID, pNotifyQueryAccountField_UserID); pNotifyQueryAccountField_UserID = nullptr; }
		pNotifyQueryAccountField->VerifyCertNoFlag = pNotifyQueryAccountField_VerifyCertNoFlag;
		if(pNotifyQueryAccountField_CurrencyID != nullptr){ strcpy_s(pNotifyQueryAccountField->CurrencyID, pNotifyQueryAccountField_CurrencyID); pNotifyQueryAccountField_CurrencyID = nullptr; }
		if(pNotifyQueryAccountField_Digest != nullptr){ strcpy_s(pNotifyQueryAccountField->Digest, pNotifyQueryAccountField_Digest); pNotifyQueryAccountField_Digest = nullptr; }
		pNotifyQueryAccountField->BankAccType = pNotifyQueryAccountField_BankAccType;
		if(pNotifyQueryAccountField_DeviceID != nullptr){ strcpy_s(pNotifyQueryAccountField->DeviceID, pNotifyQueryAccountField_DeviceID); pNotifyQueryAccountField_DeviceID = nullptr; }
		pNotifyQueryAccountField->BankSecuAccType = pNotifyQueryAccountField_BankSecuAccType;
		if(pNotifyQueryAccountField_BrokerIDByBank != nullptr){ strcpy_s(pNotifyQueryAccountField->BrokerIDByBank, pNotifyQueryAccountField_BrokerIDByBank); pNotifyQueryAccountField_BrokerIDByBank = nullptr; }
		if(pNotifyQueryAccountField_BankSecuAcc != nullptr){ strcpy_s(pNotifyQueryAccountField->BankSecuAcc, pNotifyQueryAccountField_BankSecuAcc); pNotifyQueryAccountField_BankSecuAcc = nullptr; }
		pNotifyQueryAccountField->BankPwdFlag = pNotifyQueryAccountField_BankPwdFlag;
		pNotifyQueryAccountField->SecuPwdFlag = pNotifyQueryAccountField_SecuPwdFlag;
		if(pNotifyQueryAccountField_OperNo != nullptr){ strcpy_s(pNotifyQueryAccountField->OperNo, pNotifyQueryAccountField_OperNo); pNotifyQueryAccountField_OperNo = nullptr; }
		pNotifyQueryAccountField->RequestID = pNotifyQueryAccountField_RequestID;
		pNotifyQueryAccountField->TID = pNotifyQueryAccountField_TID;
		pNotifyQueryAccountField->BankUseAmount = pNotifyQueryAccountField_BankUseAmount;
		pNotifyQueryAccountField->BankFetchAmount = pNotifyQueryAccountField_BankFetchAmount;
		pNotifyQueryAccountField->ErrorID = pNotifyQueryAccountField_ErrorID;
		if(pNotifyQueryAccountField_ErrorMsg != nullptr){ strcpy_s(pNotifyQueryAccountField->ErrorMsg, pNotifyQueryAccountField_ErrorMsg); pNotifyQueryAccountField_ErrorMsg = nullptr; }
		if(pNotifyQueryAccountField_LongCustomerName != nullptr){ strcpy_s(pNotifyQueryAccountField->LongCustomerName, pNotifyQueryAccountField_LongCustomerName); pNotifyQueryAccountField_LongCustomerName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcNotifyQueryAccountField *pNotifyQueryAccountField)
{
	if(pNotifyQueryAccountField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y,s:i,s:i,s:y,s:c,s:y,s:y,s:c,s:y,s:c,s:y,s:y,s:c,s:c,s:y,s:i,s:i,s:d,s:d,s:i,s:y,s:y}"
		, "TradeCode", pNotifyQueryAccountField->TradeCode
		, "BankID", pNotifyQueryAccountField->BankID
		, "BankBranchID", pNotifyQueryAccountField->BankBranchID
		, "BrokerID", pNotifyQueryAccountField->BrokerID
		, "BrokerBranchID", pNotifyQueryAccountField->BrokerBranchID
		, "TradeDate", pNotifyQueryAccountField->TradeDate
		, "TradeTime", pNotifyQueryAccountField->TradeTime
		, "BankSerial", pNotifyQueryAccountField->BankSerial
		, "TradingDay", pNotifyQueryAccountField->TradingDay
		, "PlateSerial", pNotifyQueryAccountField->PlateSerial
		, "LastFragment", pNotifyQueryAccountField->LastFragment
		, "SessionID", pNotifyQueryAccountField->SessionID
		, "CustomerName", pNotifyQueryAccountField->CustomerName
		, "IdCardType", pNotifyQueryAccountField->IdCardType
		, "IdentifiedCardNo", pNotifyQueryAccountField->IdentifiedCardNo
		, "CustType", pNotifyQueryAccountField->CustType
		, "BankAccount", pNotifyQueryAccountField->BankAccount
		, "BankPassWord", pNotifyQueryAccountField->BankPassWord
		, "AccountID", pNotifyQueryAccountField->AccountID
		, "Password", pNotifyQueryAccountField->Password
		, "FutureSerial", pNotifyQueryAccountField->FutureSerial
		, "InstallID", pNotifyQueryAccountField->InstallID
		, "UserID", pNotifyQueryAccountField->UserID
		, "VerifyCertNoFlag", pNotifyQueryAccountField->VerifyCertNoFlag
		, "CurrencyID", pNotifyQueryAccountField->CurrencyID
		, "Digest", pNotifyQueryAccountField->Digest
		, "BankAccType", pNotifyQueryAccountField->BankAccType
		, "DeviceID", pNotifyQueryAccountField->DeviceID
		, "BankSecuAccType", pNotifyQueryAccountField->BankSecuAccType
		, "BrokerIDByBank", pNotifyQueryAccountField->BrokerIDByBank
		, "BankSecuAcc", pNotifyQueryAccountField->BankSecuAcc
		, "BankPwdFlag", pNotifyQueryAccountField->BankPwdFlag
		, "SecuPwdFlag", pNotifyQueryAccountField->SecuPwdFlag
		, "OperNo", pNotifyQueryAccountField->OperNo
		, "RequestID", pNotifyQueryAccountField->RequestID
		, "TID", pNotifyQueryAccountField->TID
		, "BankUseAmount", pNotifyQueryAccountField->BankUseAmount
		, "BankFetchAmount", pNotifyQueryAccountField->BankFetchAmount
		, "ErrorID", pNotifyQueryAccountField->ErrorID
		, "ErrorMsg", pNotifyQueryAccountField->ErrorMsg
		, "LongCustomerName", pNotifyQueryAccountField->LongCustomerName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTransferSerialField *pTransferSerialField, PyObject *dict)
{
	static char *kwlist[] = {"PlateSerial", "TradeDate", "TradingDay", "TradeTime", "TradeCode", "SessionID", "BankID", "BankBranchID", "BankAccType", "BankAccount", "BankSerial", "BrokerID", "BrokerBranchID", "FutureAccType", "AccountID", "InvestorID", "FutureSerial", "IdCardType", "IdentifiedCardNo", "CurrencyID", "TradeAmount", "CustFee", "BrokerFee", "AvailabilityFlag", "OperatorCode", "BankNewAccount", "ErrorID", "ErrorMsg", nullptr};
	int pTransferSerialField_PlateSerial = 0;
	char *pTransferSerialField_TradeDate = nullptr;
	char *pTransferSerialField_TradingDay = nullptr;
	char *pTransferSerialField_TradeTime = nullptr;
	char *pTransferSerialField_TradeCode = nullptr;
	int pTransferSerialField_SessionID = 0;
	char *pTransferSerialField_BankID = nullptr;
	char *pTransferSerialField_BankBranchID = nullptr;
	char pTransferSerialField_BankAccType = 0;
	char *pTransferSerialField_BankAccount = nullptr;
	char *pTransferSerialField_BankSerial = nullptr;
	char *pTransferSerialField_BrokerID = nullptr;
	char *pTransferSerialField_BrokerBranchID = nullptr;
	char pTransferSerialField_FutureAccType = 0;
	char *pTransferSerialField_AccountID = nullptr;
	char *pTransferSerialField_InvestorID = nullptr;
	int pTransferSerialField_FutureSerial = 0;
	char pTransferSerialField_IdCardType = 0;
	char *pTransferSerialField_IdentifiedCardNo = nullptr;
	char *pTransferSerialField_CurrencyID = nullptr;
	double pTransferSerialField_TradeAmount = 0.0;
	double pTransferSerialField_CustFee = 0.0;
	double pTransferSerialField_BrokerFee = 0.0;
	char pTransferSerialField_AvailabilityFlag = 0;
	char *pTransferSerialField_OperatorCode = nullptr;
	char *pTransferSerialField_BankNewAccount = nullptr;
	int pTransferSerialField_ErrorID = 0;
	char *pTransferSerialField_ErrorMsg = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTransferSerialField, "|iyyyyiyycyyyycyyicyydddcyyiy")
		, &pTransferSerialField_PlateSerial
		, &pTransferSerialField_TradeDate
		, &pTransferSerialField_TradingDay
		, &pTransferSerialField_TradeTime
		, &pTransferSerialField_TradeCode
		, &pTransferSerialField_SessionID
		, &pTransferSerialField_BankID
		, &pTransferSerialField_BankBranchID
		, &pTransferSerialField_BankAccType
		, &pTransferSerialField_BankAccount
		, &pTransferSerialField_BankSerial
		, &pTransferSerialField_BrokerID
		, &pTransferSerialField_BrokerBranchID
		, &pTransferSerialField_FutureAccType
		, &pTransferSerialField_AccountID
		, &pTransferSerialField_InvestorID
		, &pTransferSerialField_FutureSerial
		, &pTransferSerialField_IdCardType
		, &pTransferSerialField_IdentifiedCardNo
		, &pTransferSerialField_CurrencyID
		, &pTransferSerialField_TradeAmount
		, &pTransferSerialField_CustFee
		, &pTransferSerialField_BrokerFee
		, &pTransferSerialField_AvailabilityFlag
		, &pTransferSerialField_OperatorCode
		, &pTransferSerialField_BankNewAccount
		, &pTransferSerialField_ErrorID
		, &pTransferSerialField_ErrorMsg
	PyCTP_PyDict_FromStruct_END
		pTransferSerialField->PlateSerial = pTransferSerialField_PlateSerial;
		if(pTransferSerialField_TradeDate != nullptr){ strcpy_s(pTransferSerialField->TradeDate, pTransferSerialField_TradeDate); pTransferSerialField_TradeDate = nullptr; }
		if(pTransferSerialField_TradingDay != nullptr){ strcpy_s(pTransferSerialField->TradingDay, pTransferSerialField_TradingDay); pTransferSerialField_TradingDay = nullptr; }
		if(pTransferSerialField_TradeTime != nullptr){ strcpy_s(pTransferSerialField->TradeTime, pTransferSerialField_TradeTime); pTransferSerialField_TradeTime = nullptr; }
		if(pTransferSerialField_TradeCode != nullptr){ strcpy_s(pTransferSerialField->TradeCode, pTransferSerialField_TradeCode); pTransferSerialField_TradeCode = nullptr; }
		pTransferSerialField->SessionID = pTransferSerialField_SessionID;
		if(pTransferSerialField_BankID != nullptr){ strcpy_s(pTransferSerialField->BankID, pTransferSerialField_BankID); pTransferSerialField_BankID = nullptr; }
		if(pTransferSerialField_BankBranchID != nullptr){ strcpy_s(pTransferSerialField->BankBranchID, pTransferSerialField_BankBranchID); pTransferSerialField_BankBranchID = nullptr; }
		pTransferSerialField->BankAccType = pTransferSerialField_BankAccType;
		if(pTransferSerialField_BankAccount != nullptr){ strcpy_s(pTransferSerialField->BankAccount, pTransferSerialField_BankAccount); pTransferSerialField_BankAccount = nullptr; }
		if(pTransferSerialField_BankSerial != nullptr){ strcpy_s(pTransferSerialField->BankSerial, pTransferSerialField_BankSerial); pTransferSerialField_BankSerial = nullptr; }
		if(pTransferSerialField_BrokerID != nullptr){ strcpy_s(pTransferSerialField->BrokerID, pTransferSerialField_BrokerID); pTransferSerialField_BrokerID = nullptr; }
		if(pTransferSerialField_BrokerBranchID != nullptr){ strcpy_s(pTransferSerialField->BrokerBranchID, pTransferSerialField_BrokerBranchID); pTransferSerialField_BrokerBranchID = nullptr; }
		pTransferSerialField->FutureAccType = pTransferSerialField_FutureAccType;
		if(pTransferSerialField_AccountID != nullptr){ strcpy_s(pTransferSerialField->AccountID, pTransferSerialField_AccountID); pTransferSerialField_AccountID = nullptr; }
		if(pTransferSerialField_InvestorID != nullptr){ strcpy_s(pTransferSerialField->InvestorID, pTransferSerialField_InvestorID); pTransferSerialField_InvestorID = nullptr; }
		pTransferSerialField->FutureSerial = pTransferSerialField_FutureSerial;
		pTransferSerialField->IdCardType = pTransferSerialField_IdCardType;
		if(pTransferSerialField_IdentifiedCardNo != nullptr){ strcpy_s(pTransferSerialField->IdentifiedCardNo, pTransferSerialField_IdentifiedCardNo); pTransferSerialField_IdentifiedCardNo = nullptr; }
		if(pTransferSerialField_CurrencyID != nullptr){ strcpy_s(pTransferSerialField->CurrencyID, pTransferSerialField_CurrencyID); pTransferSerialField_CurrencyID = nullptr; }
		pTransferSerialField->TradeAmount = pTransferSerialField_TradeAmount;
		pTransferSerialField->CustFee = pTransferSerialField_CustFee;
		pTransferSerialField->BrokerFee = pTransferSerialField_BrokerFee;
		pTransferSerialField->AvailabilityFlag = pTransferSerialField_AvailabilityFlag;
		if(pTransferSerialField_OperatorCode != nullptr){ strcpy_s(pTransferSerialField->OperatorCode, pTransferSerialField_OperatorCode); pTransferSerialField_OperatorCode = nullptr; }
		if(pTransferSerialField_BankNewAccount != nullptr){ strcpy_s(pTransferSerialField->BankNewAccount, pTransferSerialField_BankNewAccount); pTransferSerialField_BankNewAccount = nullptr; }
		pTransferSerialField->ErrorID = pTransferSerialField_ErrorID;
		if(pTransferSerialField_ErrorMsg != nullptr){ strcpy_s(pTransferSerialField->ErrorMsg, pTransferSerialField_ErrorMsg); pTransferSerialField_ErrorMsg = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTransferSerialField *pTransferSerialField)
{
	if(pTransferSerialField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i,s:y,s:y,s:y,s:y,s:i,s:y,s:y,s:c,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:i,s:c,s:y,s:y,s:d,s:d,s:d,s:c,s:y,s:y,s:i,s:y}"
		, "PlateSerial", pTransferSerialField->PlateSerial
		, "TradeDate", pTransferSerialField->TradeDate
		, "TradingDay", pTransferSerialField->TradingDay
		, "TradeTime", pTransferSerialField->TradeTime
		, "TradeCode", pTransferSerialField->TradeCode
		, "SessionID", pTransferSerialField->SessionID
		, "BankID", pTransferSerialField->BankID
		, "BankBranchID", pTransferSerialField->BankBranchID
		, "BankAccType", pTransferSerialField->BankAccType
		, "BankAccount", pTransferSerialField->BankAccount
		, "BankSerial", pTransferSerialField->BankSerial
		, "BrokerID", pTransferSerialField->BrokerID
		, "BrokerBranchID", pTransferSerialField->BrokerBranchID
		, "FutureAccType", pTransferSerialField->FutureAccType
		, "AccountID", pTransferSerialField->AccountID
		, "InvestorID", pTransferSerialField->InvestorID
		, "FutureSerial", pTransferSerialField->FutureSerial
		, "IdCardType", pTransferSerialField->IdCardType
		, "IdentifiedCardNo", pTransferSerialField->IdentifiedCardNo
		, "CurrencyID", pTransferSerialField->CurrencyID
		, "TradeAmount", pTransferSerialField->TradeAmount
		, "CustFee", pTransferSerialField->CustFee
		, "BrokerFee", pTransferSerialField->BrokerFee
		, "AvailabilityFlag", pTransferSerialField->AvailabilityFlag
		, "OperatorCode", pTransferSerialField->OperatorCode
		, "BankNewAccount", pTransferSerialField->BankNewAccount
		, "ErrorID", pTransferSerialField->ErrorID
		, "ErrorMsg", pTransferSerialField->ErrorMsg
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryTransferSerialField *pQryTransferSerialField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "AccountID", "BankID", "CurrencyID", nullptr};
	char *pQryTransferSerialField_BrokerID = nullptr;
	char *pQryTransferSerialField_AccountID = nullptr;
	char *pQryTransferSerialField_BankID = nullptr;
	char *pQryTransferSerialField_CurrencyID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryTransferSerialField, "|yyyy")
		, &pQryTransferSerialField_BrokerID
		, &pQryTransferSerialField_AccountID
		, &pQryTransferSerialField_BankID
		, &pQryTransferSerialField_CurrencyID
	PyCTP_PyDict_FromStruct_END
		if(pQryTransferSerialField_BrokerID != nullptr){ strcpy_s(pQryTransferSerialField->BrokerID, pQryTransferSerialField_BrokerID); pQryTransferSerialField_BrokerID = nullptr; }
		if(pQryTransferSerialField_AccountID != nullptr){ strcpy_s(pQryTransferSerialField->AccountID, pQryTransferSerialField_AccountID); pQryTransferSerialField_AccountID = nullptr; }
		if(pQryTransferSerialField_BankID != nullptr){ strcpy_s(pQryTransferSerialField->BankID, pQryTransferSerialField_BankID); pQryTransferSerialField_BankID = nullptr; }
		if(pQryTransferSerialField_CurrencyID != nullptr){ strcpy_s(pQryTransferSerialField->CurrencyID, pQryTransferSerialField_CurrencyID); pQryTransferSerialField_CurrencyID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryTransferSerialField *pQryTransferSerialField)
{
	if(pQryTransferSerialField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y}"
		, "BrokerID", pQryTransferSerialField->BrokerID
		, "AccountID", pQryTransferSerialField->AccountID
		, "BankID", pQryTransferSerialField->BankID
		, "CurrencyID", pQryTransferSerialField->CurrencyID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcNotifyFutureSignInField *pNotifyFutureSignInField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "InstallID", "UserID", "Digest", "CurrencyID", "DeviceID", "BrokerIDByBank", "OperNo", "RequestID", "TID", "ErrorID", "ErrorMsg", "PinKey", "MacKey", nullptr};
	char *pNotifyFutureSignInField_TradeCode = nullptr;
	char *pNotifyFutureSignInField_BankID = nullptr;
	char *pNotifyFutureSignInField_BankBranchID = nullptr;
	char *pNotifyFutureSignInField_BrokerID = nullptr;
	char *pNotifyFutureSignInField_BrokerBranchID = nullptr;
	char *pNotifyFutureSignInField_TradeDate = nullptr;
	char *pNotifyFutureSignInField_TradeTime = nullptr;
	char *pNotifyFutureSignInField_BankSerial = nullptr;
	char *pNotifyFutureSignInField_TradingDay = nullptr;
	int pNotifyFutureSignInField_PlateSerial = 0;
	char pNotifyFutureSignInField_LastFragment = 0;
	int pNotifyFutureSignInField_SessionID = 0;
	int pNotifyFutureSignInField_InstallID = 0;
	char *pNotifyFutureSignInField_UserID = nullptr;
	char *pNotifyFutureSignInField_Digest = nullptr;
	char *pNotifyFutureSignInField_CurrencyID = nullptr;
	char *pNotifyFutureSignInField_DeviceID = nullptr;
	char *pNotifyFutureSignInField_BrokerIDByBank = nullptr;
	char *pNotifyFutureSignInField_OperNo = nullptr;
	int pNotifyFutureSignInField_RequestID = 0;
	int pNotifyFutureSignInField_TID = 0;
	int pNotifyFutureSignInField_ErrorID = 0;
	char *pNotifyFutureSignInField_ErrorMsg = nullptr;
	char *pNotifyFutureSignInField_PinKey = nullptr;
	char *pNotifyFutureSignInField_MacKey = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pNotifyFutureSignInField, "|yyyyyyyyyiciiyyyyyyiiiyyy")
		, &pNotifyFutureSignInField_TradeCode
		, &pNotifyFutureSignInField_BankID
		, &pNotifyFutureSignInField_BankBranchID
		, &pNotifyFutureSignInField_BrokerID
		, &pNotifyFutureSignInField_BrokerBranchID
		, &pNotifyFutureSignInField_TradeDate
		, &pNotifyFutureSignInField_TradeTime
		, &pNotifyFutureSignInField_BankSerial
		, &pNotifyFutureSignInField_TradingDay
		, &pNotifyFutureSignInField_PlateSerial
		, &pNotifyFutureSignInField_LastFragment
		, &pNotifyFutureSignInField_SessionID
		, &pNotifyFutureSignInField_InstallID
		, &pNotifyFutureSignInField_UserID
		, &pNotifyFutureSignInField_Digest
		, &pNotifyFutureSignInField_CurrencyID
		, &pNotifyFutureSignInField_DeviceID
		, &pNotifyFutureSignInField_BrokerIDByBank
		, &pNotifyFutureSignInField_OperNo
		, &pNotifyFutureSignInField_RequestID
		, &pNotifyFutureSignInField_TID
		, &pNotifyFutureSignInField_ErrorID
		, &pNotifyFutureSignInField_ErrorMsg
		, &pNotifyFutureSignInField_PinKey
		, &pNotifyFutureSignInField_MacKey
	PyCTP_PyDict_FromStruct_END
		if(pNotifyFutureSignInField_TradeCode != nullptr){ strcpy_s(pNotifyFutureSignInField->TradeCode, pNotifyFutureSignInField_TradeCode); pNotifyFutureSignInField_TradeCode = nullptr; }
		if(pNotifyFutureSignInField_BankID != nullptr){ strcpy_s(pNotifyFutureSignInField->BankID, pNotifyFutureSignInField_BankID); pNotifyFutureSignInField_BankID = nullptr; }
		if(pNotifyFutureSignInField_BankBranchID != nullptr){ strcpy_s(pNotifyFutureSignInField->BankBranchID, pNotifyFutureSignInField_BankBranchID); pNotifyFutureSignInField_BankBranchID = nullptr; }
		if(pNotifyFutureSignInField_BrokerID != nullptr){ strcpy_s(pNotifyFutureSignInField->BrokerID, pNotifyFutureSignInField_BrokerID); pNotifyFutureSignInField_BrokerID = nullptr; }
		if(pNotifyFutureSignInField_BrokerBranchID != nullptr){ strcpy_s(pNotifyFutureSignInField->BrokerBranchID, pNotifyFutureSignInField_BrokerBranchID); pNotifyFutureSignInField_BrokerBranchID = nullptr; }
		if(pNotifyFutureSignInField_TradeDate != nullptr){ strcpy_s(pNotifyFutureSignInField->TradeDate, pNotifyFutureSignInField_TradeDate); pNotifyFutureSignInField_TradeDate = nullptr; }
		if(pNotifyFutureSignInField_TradeTime != nullptr){ strcpy_s(pNotifyFutureSignInField->TradeTime, pNotifyFutureSignInField_TradeTime); pNotifyFutureSignInField_TradeTime = nullptr; }
		if(pNotifyFutureSignInField_BankSerial != nullptr){ strcpy_s(pNotifyFutureSignInField->BankSerial, pNotifyFutureSignInField_BankSerial); pNotifyFutureSignInField_BankSerial = nullptr; }
		if(pNotifyFutureSignInField_TradingDay != nullptr){ strcpy_s(pNotifyFutureSignInField->TradingDay, pNotifyFutureSignInField_TradingDay); pNotifyFutureSignInField_TradingDay = nullptr; }
		pNotifyFutureSignInField->PlateSerial = pNotifyFutureSignInField_PlateSerial;
		pNotifyFutureSignInField->LastFragment = pNotifyFutureSignInField_LastFragment;
		pNotifyFutureSignInField->SessionID = pNotifyFutureSignInField_SessionID;
		pNotifyFutureSignInField->InstallID = pNotifyFutureSignInField_InstallID;
		if(pNotifyFutureSignInField_UserID != nullptr){ strcpy_s(pNotifyFutureSignInField->UserID, pNotifyFutureSignInField_UserID); pNotifyFutureSignInField_UserID = nullptr; }
		if(pNotifyFutureSignInField_Digest != nullptr){ strcpy_s(pNotifyFutureSignInField->Digest, pNotifyFutureSignInField_Digest); pNotifyFutureSignInField_Digest = nullptr; }
		if(pNotifyFutureSignInField_CurrencyID != nullptr){ strcpy_s(pNotifyFutureSignInField->CurrencyID, pNotifyFutureSignInField_CurrencyID); pNotifyFutureSignInField_CurrencyID = nullptr; }
		if(pNotifyFutureSignInField_DeviceID != nullptr){ strcpy_s(pNotifyFutureSignInField->DeviceID, pNotifyFutureSignInField_DeviceID); pNotifyFutureSignInField_DeviceID = nullptr; }
		if(pNotifyFutureSignInField_BrokerIDByBank != nullptr){ strcpy_s(pNotifyFutureSignInField->BrokerIDByBank, pNotifyFutureSignInField_BrokerIDByBank); pNotifyFutureSignInField_BrokerIDByBank = nullptr; }
		if(pNotifyFutureSignInField_OperNo != nullptr){ strcpy_s(pNotifyFutureSignInField->OperNo, pNotifyFutureSignInField_OperNo); pNotifyFutureSignInField_OperNo = nullptr; }
		pNotifyFutureSignInField->RequestID = pNotifyFutureSignInField_RequestID;
		pNotifyFutureSignInField->TID = pNotifyFutureSignInField_TID;
		pNotifyFutureSignInField->ErrorID = pNotifyFutureSignInField_ErrorID;
		if(pNotifyFutureSignInField_ErrorMsg != nullptr){ strcpy_s(pNotifyFutureSignInField->ErrorMsg, pNotifyFutureSignInField_ErrorMsg); pNotifyFutureSignInField_ErrorMsg = nullptr; }
		if(pNotifyFutureSignInField_PinKey != nullptr){ strcpy_s(pNotifyFutureSignInField->PinKey, pNotifyFutureSignInField_PinKey); pNotifyFutureSignInField_PinKey = nullptr; }
		if(pNotifyFutureSignInField_MacKey != nullptr){ strcpy_s(pNotifyFutureSignInField->MacKey, pNotifyFutureSignInField_MacKey); pNotifyFutureSignInField_MacKey = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcNotifyFutureSignInField *pNotifyFutureSignInField)
{
	if(pNotifyFutureSignInField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:i,s:i,s:y,s:y,s:y}"
		, "TradeCode", pNotifyFutureSignInField->TradeCode
		, "BankID", pNotifyFutureSignInField->BankID
		, "BankBranchID", pNotifyFutureSignInField->BankBranchID
		, "BrokerID", pNotifyFutureSignInField->BrokerID
		, "BrokerBranchID", pNotifyFutureSignInField->BrokerBranchID
		, "TradeDate", pNotifyFutureSignInField->TradeDate
		, "TradeTime", pNotifyFutureSignInField->TradeTime
		, "BankSerial", pNotifyFutureSignInField->BankSerial
		, "TradingDay", pNotifyFutureSignInField->TradingDay
		, "PlateSerial", pNotifyFutureSignInField->PlateSerial
		, "LastFragment", pNotifyFutureSignInField->LastFragment
		, "SessionID", pNotifyFutureSignInField->SessionID
		, "InstallID", pNotifyFutureSignInField->InstallID
		, "UserID", pNotifyFutureSignInField->UserID
		, "Digest", pNotifyFutureSignInField->Digest
		, "CurrencyID", pNotifyFutureSignInField->CurrencyID
		, "DeviceID", pNotifyFutureSignInField->DeviceID
		, "BrokerIDByBank", pNotifyFutureSignInField->BrokerIDByBank
		, "OperNo", pNotifyFutureSignInField->OperNo
		, "RequestID", pNotifyFutureSignInField->RequestID
		, "TID", pNotifyFutureSignInField->TID
		, "ErrorID", pNotifyFutureSignInField->ErrorID
		, "ErrorMsg", pNotifyFutureSignInField->ErrorMsg
		, "PinKey", pNotifyFutureSignInField->PinKey
		, "MacKey", pNotifyFutureSignInField->MacKey
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcNotifyFutureSignOutField *pNotifyFutureSignOutField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "InstallID", "UserID", "Digest", "CurrencyID", "DeviceID", "BrokerIDByBank", "OperNo", "RequestID", "TID", "ErrorID", "ErrorMsg", nullptr};
	char *pNotifyFutureSignOutField_TradeCode = nullptr;
	char *pNotifyFutureSignOutField_BankID = nullptr;
	char *pNotifyFutureSignOutField_BankBranchID = nullptr;
	char *pNotifyFutureSignOutField_BrokerID = nullptr;
	char *pNotifyFutureSignOutField_BrokerBranchID = nullptr;
	char *pNotifyFutureSignOutField_TradeDate = nullptr;
	char *pNotifyFutureSignOutField_TradeTime = nullptr;
	char *pNotifyFutureSignOutField_BankSerial = nullptr;
	char *pNotifyFutureSignOutField_TradingDay = nullptr;
	int pNotifyFutureSignOutField_PlateSerial = 0;
	char pNotifyFutureSignOutField_LastFragment = 0;
	int pNotifyFutureSignOutField_SessionID = 0;
	int pNotifyFutureSignOutField_InstallID = 0;
	char *pNotifyFutureSignOutField_UserID = nullptr;
	char *pNotifyFutureSignOutField_Digest = nullptr;
	char *pNotifyFutureSignOutField_CurrencyID = nullptr;
	char *pNotifyFutureSignOutField_DeviceID = nullptr;
	char *pNotifyFutureSignOutField_BrokerIDByBank = nullptr;
	char *pNotifyFutureSignOutField_OperNo = nullptr;
	int pNotifyFutureSignOutField_RequestID = 0;
	int pNotifyFutureSignOutField_TID = 0;
	int pNotifyFutureSignOutField_ErrorID = 0;
	char *pNotifyFutureSignOutField_ErrorMsg = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pNotifyFutureSignOutField, "|yyyyyyyyyiciiyyyyyyiiiy")
		, &pNotifyFutureSignOutField_TradeCode
		, &pNotifyFutureSignOutField_BankID
		, &pNotifyFutureSignOutField_BankBranchID
		, &pNotifyFutureSignOutField_BrokerID
		, &pNotifyFutureSignOutField_BrokerBranchID
		, &pNotifyFutureSignOutField_TradeDate
		, &pNotifyFutureSignOutField_TradeTime
		, &pNotifyFutureSignOutField_BankSerial
		, &pNotifyFutureSignOutField_TradingDay
		, &pNotifyFutureSignOutField_PlateSerial
		, &pNotifyFutureSignOutField_LastFragment
		, &pNotifyFutureSignOutField_SessionID
		, &pNotifyFutureSignOutField_InstallID
		, &pNotifyFutureSignOutField_UserID
		, &pNotifyFutureSignOutField_Digest
		, &pNotifyFutureSignOutField_CurrencyID
		, &pNotifyFutureSignOutField_DeviceID
		, &pNotifyFutureSignOutField_BrokerIDByBank
		, &pNotifyFutureSignOutField_OperNo
		, &pNotifyFutureSignOutField_RequestID
		, &pNotifyFutureSignOutField_TID
		, &pNotifyFutureSignOutField_ErrorID
		, &pNotifyFutureSignOutField_ErrorMsg
	PyCTP_PyDict_FromStruct_END
		if(pNotifyFutureSignOutField_TradeCode != nullptr){ strcpy_s(pNotifyFutureSignOutField->TradeCode, pNotifyFutureSignOutField_TradeCode); pNotifyFutureSignOutField_TradeCode = nullptr; }
		if(pNotifyFutureSignOutField_BankID != nullptr){ strcpy_s(pNotifyFutureSignOutField->BankID, pNotifyFutureSignOutField_BankID); pNotifyFutureSignOutField_BankID = nullptr; }
		if(pNotifyFutureSignOutField_BankBranchID != nullptr){ strcpy_s(pNotifyFutureSignOutField->BankBranchID, pNotifyFutureSignOutField_BankBranchID); pNotifyFutureSignOutField_BankBranchID = nullptr; }
		if(pNotifyFutureSignOutField_BrokerID != nullptr){ strcpy_s(pNotifyFutureSignOutField->BrokerID, pNotifyFutureSignOutField_BrokerID); pNotifyFutureSignOutField_BrokerID = nullptr; }
		if(pNotifyFutureSignOutField_BrokerBranchID != nullptr){ strcpy_s(pNotifyFutureSignOutField->BrokerBranchID, pNotifyFutureSignOutField_BrokerBranchID); pNotifyFutureSignOutField_BrokerBranchID = nullptr; }
		if(pNotifyFutureSignOutField_TradeDate != nullptr){ strcpy_s(pNotifyFutureSignOutField->TradeDate, pNotifyFutureSignOutField_TradeDate); pNotifyFutureSignOutField_TradeDate = nullptr; }
		if(pNotifyFutureSignOutField_TradeTime != nullptr){ strcpy_s(pNotifyFutureSignOutField->TradeTime, pNotifyFutureSignOutField_TradeTime); pNotifyFutureSignOutField_TradeTime = nullptr; }
		if(pNotifyFutureSignOutField_BankSerial != nullptr){ strcpy_s(pNotifyFutureSignOutField->BankSerial, pNotifyFutureSignOutField_BankSerial); pNotifyFutureSignOutField_BankSerial = nullptr; }
		if(pNotifyFutureSignOutField_TradingDay != nullptr){ strcpy_s(pNotifyFutureSignOutField->TradingDay, pNotifyFutureSignOutField_TradingDay); pNotifyFutureSignOutField_TradingDay = nullptr; }
		pNotifyFutureSignOutField->PlateSerial = pNotifyFutureSignOutField_PlateSerial;
		pNotifyFutureSignOutField->LastFragment = pNotifyFutureSignOutField_LastFragment;
		pNotifyFutureSignOutField->SessionID = pNotifyFutureSignOutField_SessionID;
		pNotifyFutureSignOutField->InstallID = pNotifyFutureSignOutField_InstallID;
		if(pNotifyFutureSignOutField_UserID != nullptr){ strcpy_s(pNotifyFutureSignOutField->UserID, pNotifyFutureSignOutField_UserID); pNotifyFutureSignOutField_UserID = nullptr; }
		if(pNotifyFutureSignOutField_Digest != nullptr){ strcpy_s(pNotifyFutureSignOutField->Digest, pNotifyFutureSignOutField_Digest); pNotifyFutureSignOutField_Digest = nullptr; }
		if(pNotifyFutureSignOutField_CurrencyID != nullptr){ strcpy_s(pNotifyFutureSignOutField->CurrencyID, pNotifyFutureSignOutField_CurrencyID); pNotifyFutureSignOutField_CurrencyID = nullptr; }
		if(pNotifyFutureSignOutField_DeviceID != nullptr){ strcpy_s(pNotifyFutureSignOutField->DeviceID, pNotifyFutureSignOutField_DeviceID); pNotifyFutureSignOutField_DeviceID = nullptr; }
		if(pNotifyFutureSignOutField_BrokerIDByBank != nullptr){ strcpy_s(pNotifyFutureSignOutField->BrokerIDByBank, pNotifyFutureSignOutField_BrokerIDByBank); pNotifyFutureSignOutField_BrokerIDByBank = nullptr; }
		if(pNotifyFutureSignOutField_OperNo != nullptr){ strcpy_s(pNotifyFutureSignOutField->OperNo, pNotifyFutureSignOutField_OperNo); pNotifyFutureSignOutField_OperNo = nullptr; }
		pNotifyFutureSignOutField->RequestID = pNotifyFutureSignOutField_RequestID;
		pNotifyFutureSignOutField->TID = pNotifyFutureSignOutField_TID;
		pNotifyFutureSignOutField->ErrorID = pNotifyFutureSignOutField_ErrorID;
		if(pNotifyFutureSignOutField_ErrorMsg != nullptr){ strcpy_s(pNotifyFutureSignOutField->ErrorMsg, pNotifyFutureSignOutField_ErrorMsg); pNotifyFutureSignOutField_ErrorMsg = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcNotifyFutureSignOutField *pNotifyFutureSignOutField)
{
	if(pNotifyFutureSignOutField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:i,s:i,s:y}"
		, "TradeCode", pNotifyFutureSignOutField->TradeCode
		, "BankID", pNotifyFutureSignOutField->BankID
		, "BankBranchID", pNotifyFutureSignOutField->BankBranchID
		, "BrokerID", pNotifyFutureSignOutField->BrokerID
		, "BrokerBranchID", pNotifyFutureSignOutField->BrokerBranchID
		, "TradeDate", pNotifyFutureSignOutField->TradeDate
		, "TradeTime", pNotifyFutureSignOutField->TradeTime
		, "BankSerial", pNotifyFutureSignOutField->BankSerial
		, "TradingDay", pNotifyFutureSignOutField->TradingDay
		, "PlateSerial", pNotifyFutureSignOutField->PlateSerial
		, "LastFragment", pNotifyFutureSignOutField->LastFragment
		, "SessionID", pNotifyFutureSignOutField->SessionID
		, "InstallID", pNotifyFutureSignOutField->InstallID
		, "UserID", pNotifyFutureSignOutField->UserID
		, "Digest", pNotifyFutureSignOutField->Digest
		, "CurrencyID", pNotifyFutureSignOutField->CurrencyID
		, "DeviceID", pNotifyFutureSignOutField->DeviceID
		, "BrokerIDByBank", pNotifyFutureSignOutField->BrokerIDByBank
		, "OperNo", pNotifyFutureSignOutField->OperNo
		, "RequestID", pNotifyFutureSignOutField->RequestID
		, "TID", pNotifyFutureSignOutField->TID
		, "ErrorID", pNotifyFutureSignOutField->ErrorID
		, "ErrorMsg", pNotifyFutureSignOutField->ErrorMsg
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcNotifySyncKeyField *pNotifySyncKeyField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "InstallID", "UserID", "Message", "DeviceID", "BrokerIDByBank", "OperNo", "RequestID", "TID", "ErrorID", "ErrorMsg", nullptr};
	char *pNotifySyncKeyField_TradeCode = nullptr;
	char *pNotifySyncKeyField_BankID = nullptr;
	char *pNotifySyncKeyField_BankBranchID = nullptr;
	char *pNotifySyncKeyField_BrokerID = nullptr;
	char *pNotifySyncKeyField_BrokerBranchID = nullptr;
	char *pNotifySyncKeyField_TradeDate = nullptr;
	char *pNotifySyncKeyField_TradeTime = nullptr;
	char *pNotifySyncKeyField_BankSerial = nullptr;
	char *pNotifySyncKeyField_TradingDay = nullptr;
	int pNotifySyncKeyField_PlateSerial = 0;
	char pNotifySyncKeyField_LastFragment = 0;
	int pNotifySyncKeyField_SessionID = 0;
	int pNotifySyncKeyField_InstallID = 0;
	char *pNotifySyncKeyField_UserID = nullptr;
	char *pNotifySyncKeyField_Message = nullptr;
	char *pNotifySyncKeyField_DeviceID = nullptr;
	char *pNotifySyncKeyField_BrokerIDByBank = nullptr;
	char *pNotifySyncKeyField_OperNo = nullptr;
	int pNotifySyncKeyField_RequestID = 0;
	int pNotifySyncKeyField_TID = 0;
	int pNotifySyncKeyField_ErrorID = 0;
	char *pNotifySyncKeyField_ErrorMsg = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pNotifySyncKeyField, "|yyyyyyyyyiciiyyyyyiiiy")
		, &pNotifySyncKeyField_TradeCode
		, &pNotifySyncKeyField_BankID
		, &pNotifySyncKeyField_BankBranchID
		, &pNotifySyncKeyField_BrokerID
		, &pNotifySyncKeyField_BrokerBranchID
		, &pNotifySyncKeyField_TradeDate
		, &pNotifySyncKeyField_TradeTime
		, &pNotifySyncKeyField_BankSerial
		, &pNotifySyncKeyField_TradingDay
		, &pNotifySyncKeyField_PlateSerial
		, &pNotifySyncKeyField_LastFragment
		, &pNotifySyncKeyField_SessionID
		, &pNotifySyncKeyField_InstallID
		, &pNotifySyncKeyField_UserID
		, &pNotifySyncKeyField_Message
		, &pNotifySyncKeyField_DeviceID
		, &pNotifySyncKeyField_BrokerIDByBank
		, &pNotifySyncKeyField_OperNo
		, &pNotifySyncKeyField_RequestID
		, &pNotifySyncKeyField_TID
		, &pNotifySyncKeyField_ErrorID
		, &pNotifySyncKeyField_ErrorMsg
	PyCTP_PyDict_FromStruct_END
		if(pNotifySyncKeyField_TradeCode != nullptr){ strcpy_s(pNotifySyncKeyField->TradeCode, pNotifySyncKeyField_TradeCode); pNotifySyncKeyField_TradeCode = nullptr; }
		if(pNotifySyncKeyField_BankID != nullptr){ strcpy_s(pNotifySyncKeyField->BankID, pNotifySyncKeyField_BankID); pNotifySyncKeyField_BankID = nullptr; }
		if(pNotifySyncKeyField_BankBranchID != nullptr){ strcpy_s(pNotifySyncKeyField->BankBranchID, pNotifySyncKeyField_BankBranchID); pNotifySyncKeyField_BankBranchID = nullptr; }
		if(pNotifySyncKeyField_BrokerID != nullptr){ strcpy_s(pNotifySyncKeyField->BrokerID, pNotifySyncKeyField_BrokerID); pNotifySyncKeyField_BrokerID = nullptr; }
		if(pNotifySyncKeyField_BrokerBranchID != nullptr){ strcpy_s(pNotifySyncKeyField->BrokerBranchID, pNotifySyncKeyField_BrokerBranchID); pNotifySyncKeyField_BrokerBranchID = nullptr; }
		if(pNotifySyncKeyField_TradeDate != nullptr){ strcpy_s(pNotifySyncKeyField->TradeDate, pNotifySyncKeyField_TradeDate); pNotifySyncKeyField_TradeDate = nullptr; }
		if(pNotifySyncKeyField_TradeTime != nullptr){ strcpy_s(pNotifySyncKeyField->TradeTime, pNotifySyncKeyField_TradeTime); pNotifySyncKeyField_TradeTime = nullptr; }
		if(pNotifySyncKeyField_BankSerial != nullptr){ strcpy_s(pNotifySyncKeyField->BankSerial, pNotifySyncKeyField_BankSerial); pNotifySyncKeyField_BankSerial = nullptr; }
		if(pNotifySyncKeyField_TradingDay != nullptr){ strcpy_s(pNotifySyncKeyField->TradingDay, pNotifySyncKeyField_TradingDay); pNotifySyncKeyField_TradingDay = nullptr; }
		pNotifySyncKeyField->PlateSerial = pNotifySyncKeyField_PlateSerial;
		pNotifySyncKeyField->LastFragment = pNotifySyncKeyField_LastFragment;
		pNotifySyncKeyField->SessionID = pNotifySyncKeyField_SessionID;
		pNotifySyncKeyField->InstallID = pNotifySyncKeyField_InstallID;
		if(pNotifySyncKeyField_UserID != nullptr){ strcpy_s(pNotifySyncKeyField->UserID, pNotifySyncKeyField_UserID); pNotifySyncKeyField_UserID = nullptr; }
		if(pNotifySyncKeyField_Message != nullptr){ strcpy_s(pNotifySyncKeyField->Message, pNotifySyncKeyField_Message); pNotifySyncKeyField_Message = nullptr; }
		if(pNotifySyncKeyField_DeviceID != nullptr){ strcpy_s(pNotifySyncKeyField->DeviceID, pNotifySyncKeyField_DeviceID); pNotifySyncKeyField_DeviceID = nullptr; }
		if(pNotifySyncKeyField_BrokerIDByBank != nullptr){ strcpy_s(pNotifySyncKeyField->BrokerIDByBank, pNotifySyncKeyField_BrokerIDByBank); pNotifySyncKeyField_BrokerIDByBank = nullptr; }
		if(pNotifySyncKeyField_OperNo != nullptr){ strcpy_s(pNotifySyncKeyField->OperNo, pNotifySyncKeyField_OperNo); pNotifySyncKeyField_OperNo = nullptr; }
		pNotifySyncKeyField->RequestID = pNotifySyncKeyField_RequestID;
		pNotifySyncKeyField->TID = pNotifySyncKeyField_TID;
		pNotifySyncKeyField->ErrorID = pNotifySyncKeyField_ErrorID;
		if(pNotifySyncKeyField_ErrorMsg != nullptr){ strcpy_s(pNotifySyncKeyField->ErrorMsg, pNotifySyncKeyField_ErrorMsg); pNotifySyncKeyField_ErrorMsg = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcNotifySyncKeyField *pNotifySyncKeyField)
{
	if(pNotifySyncKeyField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:i,s:y,s:y,s:y,s:y,s:y,s:i,s:i,s:i,s:y}"
		, "TradeCode", pNotifySyncKeyField->TradeCode
		, "BankID", pNotifySyncKeyField->BankID
		, "BankBranchID", pNotifySyncKeyField->BankBranchID
		, "BrokerID", pNotifySyncKeyField->BrokerID
		, "BrokerBranchID", pNotifySyncKeyField->BrokerBranchID
		, "TradeDate", pNotifySyncKeyField->TradeDate
		, "TradeTime", pNotifySyncKeyField->TradeTime
		, "BankSerial", pNotifySyncKeyField->BankSerial
		, "TradingDay", pNotifySyncKeyField->TradingDay
		, "PlateSerial", pNotifySyncKeyField->PlateSerial
		, "LastFragment", pNotifySyncKeyField->LastFragment
		, "SessionID", pNotifySyncKeyField->SessionID
		, "InstallID", pNotifySyncKeyField->InstallID
		, "UserID", pNotifySyncKeyField->UserID
		, "Message", pNotifySyncKeyField->Message
		, "DeviceID", pNotifySyncKeyField->DeviceID
		, "BrokerIDByBank", pNotifySyncKeyField->BrokerIDByBank
		, "OperNo", pNotifySyncKeyField->OperNo
		, "RequestID", pNotifySyncKeyField->RequestID
		, "TID", pNotifySyncKeyField->TID
		, "ErrorID", pNotifySyncKeyField->ErrorID
		, "ErrorMsg", pNotifySyncKeyField->ErrorMsg
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryAccountregisterField *pQryAccountregisterField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "AccountID", "BankID", "BankBranchID", "CurrencyID", nullptr};
	char *pQryAccountregisterField_BrokerID = nullptr;
	char *pQryAccountregisterField_AccountID = nullptr;
	char *pQryAccountregisterField_BankID = nullptr;
	char *pQryAccountregisterField_BankBranchID = nullptr;
	char *pQryAccountregisterField_CurrencyID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryAccountregisterField, "|yyyyy")
		, &pQryAccountregisterField_BrokerID
		, &pQryAccountregisterField_AccountID
		, &pQryAccountregisterField_BankID
		, &pQryAccountregisterField_BankBranchID
		, &pQryAccountregisterField_CurrencyID
	PyCTP_PyDict_FromStruct_END
		if(pQryAccountregisterField_BrokerID != nullptr){ strcpy_s(pQryAccountregisterField->BrokerID, pQryAccountregisterField_BrokerID); pQryAccountregisterField_BrokerID = nullptr; }
		if(pQryAccountregisterField_AccountID != nullptr){ strcpy_s(pQryAccountregisterField->AccountID, pQryAccountregisterField_AccountID); pQryAccountregisterField_AccountID = nullptr; }
		if(pQryAccountregisterField_BankID != nullptr){ strcpy_s(pQryAccountregisterField->BankID, pQryAccountregisterField_BankID); pQryAccountregisterField_BankID = nullptr; }
		if(pQryAccountregisterField_BankBranchID != nullptr){ strcpy_s(pQryAccountregisterField->BankBranchID, pQryAccountregisterField_BankBranchID); pQryAccountregisterField_BankBranchID = nullptr; }
		if(pQryAccountregisterField_CurrencyID != nullptr){ strcpy_s(pQryAccountregisterField->CurrencyID, pQryAccountregisterField_CurrencyID); pQryAccountregisterField_CurrencyID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryAccountregisterField *pQryAccountregisterField)
{
	if(pQryAccountregisterField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pQryAccountregisterField->BrokerID
		, "AccountID", pQryAccountregisterField->AccountID
		, "BankID", pQryAccountregisterField->BankID
		, "BankBranchID", pQryAccountregisterField->BankBranchID
		, "CurrencyID", pQryAccountregisterField->CurrencyID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcAccountregisterField *pAccountregisterField, PyObject *dict)
{
	static char *kwlist[] = {"TradeDay", "BankID", "BankBranchID", "BankAccount", "BrokerID", "BrokerBranchID", "AccountID", "IdCardType", "IdentifiedCardNo", "CustomerName", "CurrencyID", "OpenOrDestroy", "RegDate", "OutDate", "TID", "CustType", "BankAccType", "LongCustomerName", nullptr};
	char *pAccountregisterField_TradeDay = nullptr;
	char *pAccountregisterField_BankID = nullptr;
	char *pAccountregisterField_BankBranchID = nullptr;
	char *pAccountregisterField_BankAccount = nullptr;
	char *pAccountregisterField_BrokerID = nullptr;
	char *pAccountregisterField_BrokerBranchID = nullptr;
	char *pAccountregisterField_AccountID = nullptr;
	char pAccountregisterField_IdCardType = 0;
	char *pAccountregisterField_IdentifiedCardNo = nullptr;
	char *pAccountregisterField_CustomerName = nullptr;
	char *pAccountregisterField_CurrencyID = nullptr;
	char pAccountregisterField_OpenOrDestroy = 0;
	char *pAccountregisterField_RegDate = nullptr;
	char *pAccountregisterField_OutDate = nullptr;
	int pAccountregisterField_TID = 0;
	char pAccountregisterField_CustType = 0;
	char pAccountregisterField_BankAccType = 0;
	char *pAccountregisterField_LongCustomerName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pAccountregisterField, "|yyyyyyycyyycyyiccy")
		, &pAccountregisterField_TradeDay
		, &pAccountregisterField_BankID
		, &pAccountregisterField_BankBranchID
		, &pAccountregisterField_BankAccount
		, &pAccountregisterField_BrokerID
		, &pAccountregisterField_BrokerBranchID
		, &pAccountregisterField_AccountID
		, &pAccountregisterField_IdCardType
		, &pAccountregisterField_IdentifiedCardNo
		, &pAccountregisterField_CustomerName
		, &pAccountregisterField_CurrencyID
		, &pAccountregisterField_OpenOrDestroy
		, &pAccountregisterField_RegDate
		, &pAccountregisterField_OutDate
		, &pAccountregisterField_TID
		, &pAccountregisterField_CustType
		, &pAccountregisterField_BankAccType
		, &pAccountregisterField_LongCustomerName
	PyCTP_PyDict_FromStruct_END
		if(pAccountregisterField_TradeDay != nullptr){ strcpy_s(pAccountregisterField->TradeDay, pAccountregisterField_TradeDay); pAccountregisterField_TradeDay = nullptr; }
		if(pAccountregisterField_BankID != nullptr){ strcpy_s(pAccountregisterField->BankID, pAccountregisterField_BankID); pAccountregisterField_BankID = nullptr; }
		if(pAccountregisterField_BankBranchID != nullptr){ strcpy_s(pAccountregisterField->BankBranchID, pAccountregisterField_BankBranchID); pAccountregisterField_BankBranchID = nullptr; }
		if(pAccountregisterField_BankAccount != nullptr){ strcpy_s(pAccountregisterField->BankAccount, pAccountregisterField_BankAccount); pAccountregisterField_BankAccount = nullptr; }
		if(pAccountregisterField_BrokerID != nullptr){ strcpy_s(pAccountregisterField->BrokerID, pAccountregisterField_BrokerID); pAccountregisterField_BrokerID = nullptr; }
		if(pAccountregisterField_BrokerBranchID != nullptr){ strcpy_s(pAccountregisterField->BrokerBranchID, pAccountregisterField_BrokerBranchID); pAccountregisterField_BrokerBranchID = nullptr; }
		if(pAccountregisterField_AccountID != nullptr){ strcpy_s(pAccountregisterField->AccountID, pAccountregisterField_AccountID); pAccountregisterField_AccountID = nullptr; }
		pAccountregisterField->IdCardType = pAccountregisterField_IdCardType;
		if(pAccountregisterField_IdentifiedCardNo != nullptr){ strcpy_s(pAccountregisterField->IdentifiedCardNo, pAccountregisterField_IdentifiedCardNo); pAccountregisterField_IdentifiedCardNo = nullptr; }
		if(pAccountregisterField_CustomerName != nullptr){ strcpy_s(pAccountregisterField->CustomerName, pAccountregisterField_CustomerName); pAccountregisterField_CustomerName = nullptr; }
		if(pAccountregisterField_CurrencyID != nullptr){ strcpy_s(pAccountregisterField->CurrencyID, pAccountregisterField_CurrencyID); pAccountregisterField_CurrencyID = nullptr; }
		pAccountregisterField->OpenOrDestroy = pAccountregisterField_OpenOrDestroy;
		if(pAccountregisterField_RegDate != nullptr){ strcpy_s(pAccountregisterField->RegDate, pAccountregisterField_RegDate); pAccountregisterField_RegDate = nullptr; }
		if(pAccountregisterField_OutDate != nullptr){ strcpy_s(pAccountregisterField->OutDate, pAccountregisterField_OutDate); pAccountregisterField_OutDate = nullptr; }
		pAccountregisterField->TID = pAccountregisterField_TID;
		pAccountregisterField->CustType = pAccountregisterField_CustType;
		pAccountregisterField->BankAccType = pAccountregisterField_BankAccType;
		if(pAccountregisterField_LongCustomerName != nullptr){ strcpy_s(pAccountregisterField->LongCustomerName, pAccountregisterField_LongCustomerName); pAccountregisterField_LongCustomerName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcAccountregisterField *pAccountregisterField)
{
	if(pAccountregisterField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:y,s:c,s:y,s:y,s:i,s:c,s:c,s:y}"
		, "TradeDay", pAccountregisterField->TradeDay
		, "BankID", pAccountregisterField->BankID
		, "BankBranchID", pAccountregisterField->BankBranchID
		, "BankAccount", pAccountregisterField->BankAccount
		, "BrokerID", pAccountregisterField->BrokerID
		, "BrokerBranchID", pAccountregisterField->BrokerBranchID
		, "AccountID", pAccountregisterField->AccountID
		, "IdCardType", pAccountregisterField->IdCardType
		, "IdentifiedCardNo", pAccountregisterField->IdentifiedCardNo
		, "CustomerName", pAccountregisterField->CustomerName
		, "CurrencyID", pAccountregisterField->CurrencyID
		, "OpenOrDestroy", pAccountregisterField->OpenOrDestroy
		, "RegDate", pAccountregisterField->RegDate
		, "OutDate", pAccountregisterField->OutDate
		, "TID", pAccountregisterField->TID
		, "CustType", pAccountregisterField->CustType
		, "BankAccType", pAccountregisterField->BankAccType
		, "LongCustomerName", pAccountregisterField->LongCustomerName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcOpenAccountField *pOpenAccountField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "CustomerName", "IdCardType", "IdentifiedCardNo", "Gender", "CountryCode", "CustType", "Address", "ZipCode", "Telephone", "MobilePhone", "Fax", "EMail", "MoneyAccountStatus", "BankAccount", "BankPassWord", "AccountID", "Password", "InstallID", "VerifyCertNoFlag", "CurrencyID", "CashExchangeCode", "Digest", "BankAccType", "DeviceID", "BankSecuAccType", "BrokerIDByBank", "BankSecuAcc", "BankPwdFlag", "SecuPwdFlag", "OperNo", "TID", "UserID", "ErrorID", "ErrorMsg", "LongCustomerName", nullptr};
	char *pOpenAccountField_TradeCode = nullptr;
	char *pOpenAccountField_BankID = nullptr;
	char *pOpenAccountField_BankBranchID = nullptr;
	char *pOpenAccountField_BrokerID = nullptr;
	char *pOpenAccountField_BrokerBranchID = nullptr;
	char *pOpenAccountField_TradeDate = nullptr;
	char *pOpenAccountField_TradeTime = nullptr;
	char *pOpenAccountField_BankSerial = nullptr;
	char *pOpenAccountField_TradingDay = nullptr;
	int pOpenAccountField_PlateSerial = 0;
	char pOpenAccountField_LastFragment = 0;
	int pOpenAccountField_SessionID = 0;
	char *pOpenAccountField_CustomerName = nullptr;
	char pOpenAccountField_IdCardType = 0;
	char *pOpenAccountField_IdentifiedCardNo = nullptr;
	char pOpenAccountField_Gender = 0;
	char *pOpenAccountField_CountryCode = nullptr;
	char pOpenAccountField_CustType = 0;
	char *pOpenAccountField_Address = nullptr;
	char *pOpenAccountField_ZipCode = nullptr;
	char *pOpenAccountField_Telephone = nullptr;
	char *pOpenAccountField_MobilePhone = nullptr;
	char *pOpenAccountField_Fax = nullptr;
	char *pOpenAccountField_EMail = nullptr;
	char pOpenAccountField_MoneyAccountStatus = 0;
	char *pOpenAccountField_BankAccount = nullptr;
	char *pOpenAccountField_BankPassWord = nullptr;
	char *pOpenAccountField_AccountID = nullptr;
	char *pOpenAccountField_Password = nullptr;
	int pOpenAccountField_InstallID = 0;
	char pOpenAccountField_VerifyCertNoFlag = 0;
	char *pOpenAccountField_CurrencyID = nullptr;
	char pOpenAccountField_CashExchangeCode = 0;
	char *pOpenAccountField_Digest = nullptr;
	char pOpenAccountField_BankAccType = 0;
	char *pOpenAccountField_DeviceID = nullptr;
	char pOpenAccountField_BankSecuAccType = 0;
	char *pOpenAccountField_BrokerIDByBank = nullptr;
	char *pOpenAccountField_BankSecuAcc = nullptr;
	char pOpenAccountField_BankPwdFlag = 0;
	char pOpenAccountField_SecuPwdFlag = 0;
	char *pOpenAccountField_OperNo = nullptr;
	int pOpenAccountField_TID = 0;
	char *pOpenAccountField_UserID = nullptr;
	int pOpenAccountField_ErrorID = 0;
	char *pOpenAccountField_ErrorMsg = nullptr;
	char *pOpenAccountField_LongCustomerName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pOpenAccountField, "|yyyyyyyyyiciycycycyyyyyycyyyyicycycycyyccyiyiyy")
		, &pOpenAccountField_TradeCode
		, &pOpenAccountField_BankID
		, &pOpenAccountField_BankBranchID
		, &pOpenAccountField_BrokerID
		, &pOpenAccountField_BrokerBranchID
		, &pOpenAccountField_TradeDate
		, &pOpenAccountField_TradeTime
		, &pOpenAccountField_BankSerial
		, &pOpenAccountField_TradingDay
		, &pOpenAccountField_PlateSerial
		, &pOpenAccountField_LastFragment
		, &pOpenAccountField_SessionID
		, &pOpenAccountField_CustomerName
		, &pOpenAccountField_IdCardType
		, &pOpenAccountField_IdentifiedCardNo
		, &pOpenAccountField_Gender
		, &pOpenAccountField_CountryCode
		, &pOpenAccountField_CustType
		, &pOpenAccountField_Address
		, &pOpenAccountField_ZipCode
		, &pOpenAccountField_Telephone
		, &pOpenAccountField_MobilePhone
		, &pOpenAccountField_Fax
		, &pOpenAccountField_EMail
		, &pOpenAccountField_MoneyAccountStatus
		, &pOpenAccountField_BankAccount
		, &pOpenAccountField_BankPassWord
		, &pOpenAccountField_AccountID
		, &pOpenAccountField_Password
		, &pOpenAccountField_InstallID
		, &pOpenAccountField_VerifyCertNoFlag
		, &pOpenAccountField_CurrencyID
		, &pOpenAccountField_CashExchangeCode
		, &pOpenAccountField_Digest
		, &pOpenAccountField_BankAccType
		, &pOpenAccountField_DeviceID
		, &pOpenAccountField_BankSecuAccType
		, &pOpenAccountField_BrokerIDByBank
		, &pOpenAccountField_BankSecuAcc
		, &pOpenAccountField_BankPwdFlag
		, &pOpenAccountField_SecuPwdFlag
		, &pOpenAccountField_OperNo
		, &pOpenAccountField_TID
		, &pOpenAccountField_UserID
		, &pOpenAccountField_ErrorID
		, &pOpenAccountField_ErrorMsg
		, &pOpenAccountField_LongCustomerName
	PyCTP_PyDict_FromStruct_END
		if(pOpenAccountField_TradeCode != nullptr){ strcpy_s(pOpenAccountField->TradeCode, pOpenAccountField_TradeCode); pOpenAccountField_TradeCode = nullptr; }
		if(pOpenAccountField_BankID != nullptr){ strcpy_s(pOpenAccountField->BankID, pOpenAccountField_BankID); pOpenAccountField_BankID = nullptr; }
		if(pOpenAccountField_BankBranchID != nullptr){ strcpy_s(pOpenAccountField->BankBranchID, pOpenAccountField_BankBranchID); pOpenAccountField_BankBranchID = nullptr; }
		if(pOpenAccountField_BrokerID != nullptr){ strcpy_s(pOpenAccountField->BrokerID, pOpenAccountField_BrokerID); pOpenAccountField_BrokerID = nullptr; }
		if(pOpenAccountField_BrokerBranchID != nullptr){ strcpy_s(pOpenAccountField->BrokerBranchID, pOpenAccountField_BrokerBranchID); pOpenAccountField_BrokerBranchID = nullptr; }
		if(pOpenAccountField_TradeDate != nullptr){ strcpy_s(pOpenAccountField->TradeDate, pOpenAccountField_TradeDate); pOpenAccountField_TradeDate = nullptr; }
		if(pOpenAccountField_TradeTime != nullptr){ strcpy_s(pOpenAccountField->TradeTime, pOpenAccountField_TradeTime); pOpenAccountField_TradeTime = nullptr; }
		if(pOpenAccountField_BankSerial != nullptr){ strcpy_s(pOpenAccountField->BankSerial, pOpenAccountField_BankSerial); pOpenAccountField_BankSerial = nullptr; }
		if(pOpenAccountField_TradingDay != nullptr){ strcpy_s(pOpenAccountField->TradingDay, pOpenAccountField_TradingDay); pOpenAccountField_TradingDay = nullptr; }
		pOpenAccountField->PlateSerial = pOpenAccountField_PlateSerial;
		pOpenAccountField->LastFragment = pOpenAccountField_LastFragment;
		pOpenAccountField->SessionID = pOpenAccountField_SessionID;
		if(pOpenAccountField_CustomerName != nullptr){ strcpy_s(pOpenAccountField->CustomerName, pOpenAccountField_CustomerName); pOpenAccountField_CustomerName = nullptr; }
		pOpenAccountField->IdCardType = pOpenAccountField_IdCardType;
		if(pOpenAccountField_IdentifiedCardNo != nullptr){ strcpy_s(pOpenAccountField->IdentifiedCardNo, pOpenAccountField_IdentifiedCardNo); pOpenAccountField_IdentifiedCardNo = nullptr; }
		pOpenAccountField->Gender = pOpenAccountField_Gender;
		if(pOpenAccountField_CountryCode != nullptr){ strcpy_s(pOpenAccountField->CountryCode, pOpenAccountField_CountryCode); pOpenAccountField_CountryCode = nullptr; }
		pOpenAccountField->CustType = pOpenAccountField_CustType;
		if(pOpenAccountField_Address != nullptr){ strcpy_s(pOpenAccountField->Address, pOpenAccountField_Address); pOpenAccountField_Address = nullptr; }
		if(pOpenAccountField_ZipCode != nullptr){ strcpy_s(pOpenAccountField->ZipCode, pOpenAccountField_ZipCode); pOpenAccountField_ZipCode = nullptr; }
		if(pOpenAccountField_Telephone != nullptr){ strcpy_s(pOpenAccountField->Telephone, pOpenAccountField_Telephone); pOpenAccountField_Telephone = nullptr; }
		if(pOpenAccountField_MobilePhone != nullptr){ strcpy_s(pOpenAccountField->MobilePhone, pOpenAccountField_MobilePhone); pOpenAccountField_MobilePhone = nullptr; }
		if(pOpenAccountField_Fax != nullptr){ strcpy_s(pOpenAccountField->Fax, pOpenAccountField_Fax); pOpenAccountField_Fax = nullptr; }
		if(pOpenAccountField_EMail != nullptr){ strcpy_s(pOpenAccountField->EMail, pOpenAccountField_EMail); pOpenAccountField_EMail = nullptr; }
		pOpenAccountField->MoneyAccountStatus = pOpenAccountField_MoneyAccountStatus;
		if(pOpenAccountField_BankAccount != nullptr){ strcpy_s(pOpenAccountField->BankAccount, pOpenAccountField_BankAccount); pOpenAccountField_BankAccount = nullptr; }
		if(pOpenAccountField_BankPassWord != nullptr){ strcpy_s(pOpenAccountField->BankPassWord, pOpenAccountField_BankPassWord); pOpenAccountField_BankPassWord = nullptr; }
		if(pOpenAccountField_AccountID != nullptr){ strcpy_s(pOpenAccountField->AccountID, pOpenAccountField_AccountID); pOpenAccountField_AccountID = nullptr; }
		if(pOpenAccountField_Password != nullptr){ strcpy_s(pOpenAccountField->Password, pOpenAccountField_Password); pOpenAccountField_Password = nullptr; }
		pOpenAccountField->InstallID = pOpenAccountField_InstallID;
		pOpenAccountField->VerifyCertNoFlag = pOpenAccountField_VerifyCertNoFlag;
		if(pOpenAccountField_CurrencyID != nullptr){ strcpy_s(pOpenAccountField->CurrencyID, pOpenAccountField_CurrencyID); pOpenAccountField_CurrencyID = nullptr; }
		pOpenAccountField->CashExchangeCode = pOpenAccountField_CashExchangeCode;
		if(pOpenAccountField_Digest != nullptr){ strcpy_s(pOpenAccountField->Digest, pOpenAccountField_Digest); pOpenAccountField_Digest = nullptr; }
		pOpenAccountField->BankAccType = pOpenAccountField_BankAccType;
		if(pOpenAccountField_DeviceID != nullptr){ strcpy_s(pOpenAccountField->DeviceID, pOpenAccountField_DeviceID); pOpenAccountField_DeviceID = nullptr; }
		pOpenAccountField->BankSecuAccType = pOpenAccountField_BankSecuAccType;
		if(pOpenAccountField_BrokerIDByBank != nullptr){ strcpy_s(pOpenAccountField->BrokerIDByBank, pOpenAccountField_BrokerIDByBank); pOpenAccountField_BrokerIDByBank = nullptr; }
		if(pOpenAccountField_BankSecuAcc != nullptr){ strcpy_s(pOpenAccountField->BankSecuAcc, pOpenAccountField_BankSecuAcc); pOpenAccountField_BankSecuAcc = nullptr; }
		pOpenAccountField->BankPwdFlag = pOpenAccountField_BankPwdFlag;
		pOpenAccountField->SecuPwdFlag = pOpenAccountField_SecuPwdFlag;
		if(pOpenAccountField_OperNo != nullptr){ strcpy_s(pOpenAccountField->OperNo, pOpenAccountField_OperNo); pOpenAccountField_OperNo = nullptr; }
		pOpenAccountField->TID = pOpenAccountField_TID;
		if(pOpenAccountField_UserID != nullptr){ strcpy_s(pOpenAccountField->UserID, pOpenAccountField_UserID); pOpenAccountField_UserID = nullptr; }
		pOpenAccountField->ErrorID = pOpenAccountField_ErrorID;
		if(pOpenAccountField_ErrorMsg != nullptr){ strcpy_s(pOpenAccountField->ErrorMsg, pOpenAccountField_ErrorMsg); pOpenAccountField_ErrorMsg = nullptr; }
		if(pOpenAccountField_LongCustomerName != nullptr){ strcpy_s(pOpenAccountField->LongCustomerName, pOpenAccountField_LongCustomerName); pOpenAccountField_LongCustomerName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcOpenAccountField *pOpenAccountField)
{
	if(pOpenAccountField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:c,s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:y,s:y,s:i,s:c,s:y,s:c,s:y,s:c,s:y,s:c,s:y,s:y,s:c,s:c,s:y,s:i,s:y,s:i,s:y,s:y}"
		, "TradeCode", pOpenAccountField->TradeCode
		, "BankID", pOpenAccountField->BankID
		, "BankBranchID", pOpenAccountField->BankBranchID
		, "BrokerID", pOpenAccountField->BrokerID
		, "BrokerBranchID", pOpenAccountField->BrokerBranchID
		, "TradeDate", pOpenAccountField->TradeDate
		, "TradeTime", pOpenAccountField->TradeTime
		, "BankSerial", pOpenAccountField->BankSerial
		, "TradingDay", pOpenAccountField->TradingDay
		, "PlateSerial", pOpenAccountField->PlateSerial
		, "LastFragment", pOpenAccountField->LastFragment
		, "SessionID", pOpenAccountField->SessionID
		, "CustomerName", pOpenAccountField->CustomerName
		, "IdCardType", pOpenAccountField->IdCardType
		, "IdentifiedCardNo", pOpenAccountField->IdentifiedCardNo
		, "Gender", pOpenAccountField->Gender
		, "CountryCode", pOpenAccountField->CountryCode
		, "CustType", pOpenAccountField->CustType
		, "Address", pOpenAccountField->Address
		, "ZipCode", pOpenAccountField->ZipCode
		, "Telephone", pOpenAccountField->Telephone
		, "MobilePhone", pOpenAccountField->MobilePhone
		, "Fax", pOpenAccountField->Fax
		, "EMail", pOpenAccountField->EMail
		, "MoneyAccountStatus", pOpenAccountField->MoneyAccountStatus
		, "BankAccount", pOpenAccountField->BankAccount
		, "BankPassWord", pOpenAccountField->BankPassWord
		, "AccountID", pOpenAccountField->AccountID
		, "Password", pOpenAccountField->Password
		, "InstallID", pOpenAccountField->InstallID
		, "VerifyCertNoFlag", pOpenAccountField->VerifyCertNoFlag
		, "CurrencyID", pOpenAccountField->CurrencyID
		, "CashExchangeCode", pOpenAccountField->CashExchangeCode
		, "Digest", pOpenAccountField->Digest
		, "BankAccType", pOpenAccountField->BankAccType
		, "DeviceID", pOpenAccountField->DeviceID
		, "BankSecuAccType", pOpenAccountField->BankSecuAccType
		, "BrokerIDByBank", pOpenAccountField->BrokerIDByBank
		, "BankSecuAcc", pOpenAccountField->BankSecuAcc
		, "BankPwdFlag", pOpenAccountField->BankPwdFlag
		, "SecuPwdFlag", pOpenAccountField->SecuPwdFlag
		, "OperNo", pOpenAccountField->OperNo
		, "TID", pOpenAccountField->TID
		, "UserID", pOpenAccountField->UserID
		, "ErrorID", pOpenAccountField->ErrorID
		, "ErrorMsg", pOpenAccountField->ErrorMsg
		, "LongCustomerName", pOpenAccountField->LongCustomerName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcCancelAccountField *pCancelAccountField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "CustomerName", "IdCardType", "IdentifiedCardNo", "Gender", "CountryCode", "CustType", "Address", "ZipCode", "Telephone", "MobilePhone", "Fax", "EMail", "MoneyAccountStatus", "BankAccount", "BankPassWord", "AccountID", "Password", "InstallID", "VerifyCertNoFlag", "CurrencyID", "CashExchangeCode", "Digest", "BankAccType", "DeviceID", "BankSecuAccType", "BrokerIDByBank", "BankSecuAcc", "BankPwdFlag", "SecuPwdFlag", "OperNo", "TID", "UserID", "ErrorID", "ErrorMsg", "LongCustomerName", nullptr};
	char *pCancelAccountField_TradeCode = nullptr;
	char *pCancelAccountField_BankID = nullptr;
	char *pCancelAccountField_BankBranchID = nullptr;
	char *pCancelAccountField_BrokerID = nullptr;
	char *pCancelAccountField_BrokerBranchID = nullptr;
	char *pCancelAccountField_TradeDate = nullptr;
	char *pCancelAccountField_TradeTime = nullptr;
	char *pCancelAccountField_BankSerial = nullptr;
	char *pCancelAccountField_TradingDay = nullptr;
	int pCancelAccountField_PlateSerial = 0;
	char pCancelAccountField_LastFragment = 0;
	int pCancelAccountField_SessionID = 0;
	char *pCancelAccountField_CustomerName = nullptr;
	char pCancelAccountField_IdCardType = 0;
	char *pCancelAccountField_IdentifiedCardNo = nullptr;
	char pCancelAccountField_Gender = 0;
	char *pCancelAccountField_CountryCode = nullptr;
	char pCancelAccountField_CustType = 0;
	char *pCancelAccountField_Address = nullptr;
	char *pCancelAccountField_ZipCode = nullptr;
	char *pCancelAccountField_Telephone = nullptr;
	char *pCancelAccountField_MobilePhone = nullptr;
	char *pCancelAccountField_Fax = nullptr;
	char *pCancelAccountField_EMail = nullptr;
	char pCancelAccountField_MoneyAccountStatus = 0;
	char *pCancelAccountField_BankAccount = nullptr;
	char *pCancelAccountField_BankPassWord = nullptr;
	char *pCancelAccountField_AccountID = nullptr;
	char *pCancelAccountField_Password = nullptr;
	int pCancelAccountField_InstallID = 0;
	char pCancelAccountField_VerifyCertNoFlag = 0;
	char *pCancelAccountField_CurrencyID = nullptr;
	char pCancelAccountField_CashExchangeCode = 0;
	char *pCancelAccountField_Digest = nullptr;
	char pCancelAccountField_BankAccType = 0;
	char *pCancelAccountField_DeviceID = nullptr;
	char pCancelAccountField_BankSecuAccType = 0;
	char *pCancelAccountField_BrokerIDByBank = nullptr;
	char *pCancelAccountField_BankSecuAcc = nullptr;
	char pCancelAccountField_BankPwdFlag = 0;
	char pCancelAccountField_SecuPwdFlag = 0;
	char *pCancelAccountField_OperNo = nullptr;
	int pCancelAccountField_TID = 0;
	char *pCancelAccountField_UserID = nullptr;
	int pCancelAccountField_ErrorID = 0;
	char *pCancelAccountField_ErrorMsg = nullptr;
	char *pCancelAccountField_LongCustomerName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pCancelAccountField, "|yyyyyyyyyiciycycycyyyyyycyyyyicycycycyyccyiyiyy")
		, &pCancelAccountField_TradeCode
		, &pCancelAccountField_BankID
		, &pCancelAccountField_BankBranchID
		, &pCancelAccountField_BrokerID
		, &pCancelAccountField_BrokerBranchID
		, &pCancelAccountField_TradeDate
		, &pCancelAccountField_TradeTime
		, &pCancelAccountField_BankSerial
		, &pCancelAccountField_TradingDay
		, &pCancelAccountField_PlateSerial
		, &pCancelAccountField_LastFragment
		, &pCancelAccountField_SessionID
		, &pCancelAccountField_CustomerName
		, &pCancelAccountField_IdCardType
		, &pCancelAccountField_IdentifiedCardNo
		, &pCancelAccountField_Gender
		, &pCancelAccountField_CountryCode
		, &pCancelAccountField_CustType
		, &pCancelAccountField_Address
		, &pCancelAccountField_ZipCode
		, &pCancelAccountField_Telephone
		, &pCancelAccountField_MobilePhone
		, &pCancelAccountField_Fax
		, &pCancelAccountField_EMail
		, &pCancelAccountField_MoneyAccountStatus
		, &pCancelAccountField_BankAccount
		, &pCancelAccountField_BankPassWord
		, &pCancelAccountField_AccountID
		, &pCancelAccountField_Password
		, &pCancelAccountField_InstallID
		, &pCancelAccountField_VerifyCertNoFlag
		, &pCancelAccountField_CurrencyID
		, &pCancelAccountField_CashExchangeCode
		, &pCancelAccountField_Digest
		, &pCancelAccountField_BankAccType
		, &pCancelAccountField_DeviceID
		, &pCancelAccountField_BankSecuAccType
		, &pCancelAccountField_BrokerIDByBank
		, &pCancelAccountField_BankSecuAcc
		, &pCancelAccountField_BankPwdFlag
		, &pCancelAccountField_SecuPwdFlag
		, &pCancelAccountField_OperNo
		, &pCancelAccountField_TID
		, &pCancelAccountField_UserID
		, &pCancelAccountField_ErrorID
		, &pCancelAccountField_ErrorMsg
		, &pCancelAccountField_LongCustomerName
	PyCTP_PyDict_FromStruct_END
		if(pCancelAccountField_TradeCode != nullptr){ strcpy_s(pCancelAccountField->TradeCode, pCancelAccountField_TradeCode); pCancelAccountField_TradeCode = nullptr; }
		if(pCancelAccountField_BankID != nullptr){ strcpy_s(pCancelAccountField->BankID, pCancelAccountField_BankID); pCancelAccountField_BankID = nullptr; }
		if(pCancelAccountField_BankBranchID != nullptr){ strcpy_s(pCancelAccountField->BankBranchID, pCancelAccountField_BankBranchID); pCancelAccountField_BankBranchID = nullptr; }
		if(pCancelAccountField_BrokerID != nullptr){ strcpy_s(pCancelAccountField->BrokerID, pCancelAccountField_BrokerID); pCancelAccountField_BrokerID = nullptr; }
		if(pCancelAccountField_BrokerBranchID != nullptr){ strcpy_s(pCancelAccountField->BrokerBranchID, pCancelAccountField_BrokerBranchID); pCancelAccountField_BrokerBranchID = nullptr; }
		if(pCancelAccountField_TradeDate != nullptr){ strcpy_s(pCancelAccountField->TradeDate, pCancelAccountField_TradeDate); pCancelAccountField_TradeDate = nullptr; }
		if(pCancelAccountField_TradeTime != nullptr){ strcpy_s(pCancelAccountField->TradeTime, pCancelAccountField_TradeTime); pCancelAccountField_TradeTime = nullptr; }
		if(pCancelAccountField_BankSerial != nullptr){ strcpy_s(pCancelAccountField->BankSerial, pCancelAccountField_BankSerial); pCancelAccountField_BankSerial = nullptr; }
		if(pCancelAccountField_TradingDay != nullptr){ strcpy_s(pCancelAccountField->TradingDay, pCancelAccountField_TradingDay); pCancelAccountField_TradingDay = nullptr; }
		pCancelAccountField->PlateSerial = pCancelAccountField_PlateSerial;
		pCancelAccountField->LastFragment = pCancelAccountField_LastFragment;
		pCancelAccountField->SessionID = pCancelAccountField_SessionID;
		if(pCancelAccountField_CustomerName != nullptr){ strcpy_s(pCancelAccountField->CustomerName, pCancelAccountField_CustomerName); pCancelAccountField_CustomerName = nullptr; }
		pCancelAccountField->IdCardType = pCancelAccountField_IdCardType;
		if(pCancelAccountField_IdentifiedCardNo != nullptr){ strcpy_s(pCancelAccountField->IdentifiedCardNo, pCancelAccountField_IdentifiedCardNo); pCancelAccountField_IdentifiedCardNo = nullptr; }
		pCancelAccountField->Gender = pCancelAccountField_Gender;
		if(pCancelAccountField_CountryCode != nullptr){ strcpy_s(pCancelAccountField->CountryCode, pCancelAccountField_CountryCode); pCancelAccountField_CountryCode = nullptr; }
		pCancelAccountField->CustType = pCancelAccountField_CustType;
		if(pCancelAccountField_Address != nullptr){ strcpy_s(pCancelAccountField->Address, pCancelAccountField_Address); pCancelAccountField_Address = nullptr; }
		if(pCancelAccountField_ZipCode != nullptr){ strcpy_s(pCancelAccountField->ZipCode, pCancelAccountField_ZipCode); pCancelAccountField_ZipCode = nullptr; }
		if(pCancelAccountField_Telephone != nullptr){ strcpy_s(pCancelAccountField->Telephone, pCancelAccountField_Telephone); pCancelAccountField_Telephone = nullptr; }
		if(pCancelAccountField_MobilePhone != nullptr){ strcpy_s(pCancelAccountField->MobilePhone, pCancelAccountField_MobilePhone); pCancelAccountField_MobilePhone = nullptr; }
		if(pCancelAccountField_Fax != nullptr){ strcpy_s(pCancelAccountField->Fax, pCancelAccountField_Fax); pCancelAccountField_Fax = nullptr; }
		if(pCancelAccountField_EMail != nullptr){ strcpy_s(pCancelAccountField->EMail, pCancelAccountField_EMail); pCancelAccountField_EMail = nullptr; }
		pCancelAccountField->MoneyAccountStatus = pCancelAccountField_MoneyAccountStatus;
		if(pCancelAccountField_BankAccount != nullptr){ strcpy_s(pCancelAccountField->BankAccount, pCancelAccountField_BankAccount); pCancelAccountField_BankAccount = nullptr; }
		if(pCancelAccountField_BankPassWord != nullptr){ strcpy_s(pCancelAccountField->BankPassWord, pCancelAccountField_BankPassWord); pCancelAccountField_BankPassWord = nullptr; }
		if(pCancelAccountField_AccountID != nullptr){ strcpy_s(pCancelAccountField->AccountID, pCancelAccountField_AccountID); pCancelAccountField_AccountID = nullptr; }
		if(pCancelAccountField_Password != nullptr){ strcpy_s(pCancelAccountField->Password, pCancelAccountField_Password); pCancelAccountField_Password = nullptr; }
		pCancelAccountField->InstallID = pCancelAccountField_InstallID;
		pCancelAccountField->VerifyCertNoFlag = pCancelAccountField_VerifyCertNoFlag;
		if(pCancelAccountField_CurrencyID != nullptr){ strcpy_s(pCancelAccountField->CurrencyID, pCancelAccountField_CurrencyID); pCancelAccountField_CurrencyID = nullptr; }
		pCancelAccountField->CashExchangeCode = pCancelAccountField_CashExchangeCode;
		if(pCancelAccountField_Digest != nullptr){ strcpy_s(pCancelAccountField->Digest, pCancelAccountField_Digest); pCancelAccountField_Digest = nullptr; }
		pCancelAccountField->BankAccType = pCancelAccountField_BankAccType;
		if(pCancelAccountField_DeviceID != nullptr){ strcpy_s(pCancelAccountField->DeviceID, pCancelAccountField_DeviceID); pCancelAccountField_DeviceID = nullptr; }
		pCancelAccountField->BankSecuAccType = pCancelAccountField_BankSecuAccType;
		if(pCancelAccountField_BrokerIDByBank != nullptr){ strcpy_s(pCancelAccountField->BrokerIDByBank, pCancelAccountField_BrokerIDByBank); pCancelAccountField_BrokerIDByBank = nullptr; }
		if(pCancelAccountField_BankSecuAcc != nullptr){ strcpy_s(pCancelAccountField->BankSecuAcc, pCancelAccountField_BankSecuAcc); pCancelAccountField_BankSecuAcc = nullptr; }
		pCancelAccountField->BankPwdFlag = pCancelAccountField_BankPwdFlag;
		pCancelAccountField->SecuPwdFlag = pCancelAccountField_SecuPwdFlag;
		if(pCancelAccountField_OperNo != nullptr){ strcpy_s(pCancelAccountField->OperNo, pCancelAccountField_OperNo); pCancelAccountField_OperNo = nullptr; }
		pCancelAccountField->TID = pCancelAccountField_TID;
		if(pCancelAccountField_UserID != nullptr){ strcpy_s(pCancelAccountField->UserID, pCancelAccountField_UserID); pCancelAccountField_UserID = nullptr; }
		pCancelAccountField->ErrorID = pCancelAccountField_ErrorID;
		if(pCancelAccountField_ErrorMsg != nullptr){ strcpy_s(pCancelAccountField->ErrorMsg, pCancelAccountField_ErrorMsg); pCancelAccountField_ErrorMsg = nullptr; }
		if(pCancelAccountField_LongCustomerName != nullptr){ strcpy_s(pCancelAccountField->LongCustomerName, pCancelAccountField_LongCustomerName); pCancelAccountField_LongCustomerName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcCancelAccountField *pCancelAccountField)
{
	if(pCancelAccountField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:c,s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:y,s:y,s:i,s:c,s:y,s:c,s:y,s:c,s:y,s:c,s:y,s:y,s:c,s:c,s:y,s:i,s:y,s:i,s:y,s:y}"
		, "TradeCode", pCancelAccountField->TradeCode
		, "BankID", pCancelAccountField->BankID
		, "BankBranchID", pCancelAccountField->BankBranchID
		, "BrokerID", pCancelAccountField->BrokerID
		, "BrokerBranchID", pCancelAccountField->BrokerBranchID
		, "TradeDate", pCancelAccountField->TradeDate
		, "TradeTime", pCancelAccountField->TradeTime
		, "BankSerial", pCancelAccountField->BankSerial
		, "TradingDay", pCancelAccountField->TradingDay
		, "PlateSerial", pCancelAccountField->PlateSerial
		, "LastFragment", pCancelAccountField->LastFragment
		, "SessionID", pCancelAccountField->SessionID
		, "CustomerName", pCancelAccountField->CustomerName
		, "IdCardType", pCancelAccountField->IdCardType
		, "IdentifiedCardNo", pCancelAccountField->IdentifiedCardNo
		, "Gender", pCancelAccountField->Gender
		, "CountryCode", pCancelAccountField->CountryCode
		, "CustType", pCancelAccountField->CustType
		, "Address", pCancelAccountField->Address
		, "ZipCode", pCancelAccountField->ZipCode
		, "Telephone", pCancelAccountField->Telephone
		, "MobilePhone", pCancelAccountField->MobilePhone
		, "Fax", pCancelAccountField->Fax
		, "EMail", pCancelAccountField->EMail
		, "MoneyAccountStatus", pCancelAccountField->MoneyAccountStatus
		, "BankAccount", pCancelAccountField->BankAccount
		, "BankPassWord", pCancelAccountField->BankPassWord
		, "AccountID", pCancelAccountField->AccountID
		, "Password", pCancelAccountField->Password
		, "InstallID", pCancelAccountField->InstallID
		, "VerifyCertNoFlag", pCancelAccountField->VerifyCertNoFlag
		, "CurrencyID", pCancelAccountField->CurrencyID
		, "CashExchangeCode", pCancelAccountField->CashExchangeCode
		, "Digest", pCancelAccountField->Digest
		, "BankAccType", pCancelAccountField->BankAccType
		, "DeviceID", pCancelAccountField->DeviceID
		, "BankSecuAccType", pCancelAccountField->BankSecuAccType
		, "BrokerIDByBank", pCancelAccountField->BrokerIDByBank
		, "BankSecuAcc", pCancelAccountField->BankSecuAcc
		, "BankPwdFlag", pCancelAccountField->BankPwdFlag
		, "SecuPwdFlag", pCancelAccountField->SecuPwdFlag
		, "OperNo", pCancelAccountField->OperNo
		, "TID", pCancelAccountField->TID
		, "UserID", pCancelAccountField->UserID
		, "ErrorID", pCancelAccountField->ErrorID
		, "ErrorMsg", pCancelAccountField->ErrorMsg
		, "LongCustomerName", pCancelAccountField->LongCustomerName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcChangeAccountField *pChangeAccountField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "CustomerName", "IdCardType", "IdentifiedCardNo", "Gender", "CountryCode", "CustType", "Address", "ZipCode", "Telephone", "MobilePhone", "Fax", "EMail", "MoneyAccountStatus", "BankAccount", "BankPassWord", "NewBankAccount", "NewBankPassWord", "AccountID", "Password", "BankAccType", "InstallID", "VerifyCertNoFlag", "CurrencyID", "BrokerIDByBank", "BankPwdFlag", "SecuPwdFlag", "TID", "Digest", "ErrorID", "ErrorMsg", "LongCustomerName", nullptr};
	char *pChangeAccountField_TradeCode = nullptr;
	char *pChangeAccountField_BankID = nullptr;
	char *pChangeAccountField_BankBranchID = nullptr;
	char *pChangeAccountField_BrokerID = nullptr;
	char *pChangeAccountField_BrokerBranchID = nullptr;
	char *pChangeAccountField_TradeDate = nullptr;
	char *pChangeAccountField_TradeTime = nullptr;
	char *pChangeAccountField_BankSerial = nullptr;
	char *pChangeAccountField_TradingDay = nullptr;
	int pChangeAccountField_PlateSerial = 0;
	char pChangeAccountField_LastFragment = 0;
	int pChangeAccountField_SessionID = 0;
	char *pChangeAccountField_CustomerName = nullptr;
	char pChangeAccountField_IdCardType = 0;
	char *pChangeAccountField_IdentifiedCardNo = nullptr;
	char pChangeAccountField_Gender = 0;
	char *pChangeAccountField_CountryCode = nullptr;
	char pChangeAccountField_CustType = 0;
	char *pChangeAccountField_Address = nullptr;
	char *pChangeAccountField_ZipCode = nullptr;
	char *pChangeAccountField_Telephone = nullptr;
	char *pChangeAccountField_MobilePhone = nullptr;
	char *pChangeAccountField_Fax = nullptr;
	char *pChangeAccountField_EMail = nullptr;
	char pChangeAccountField_MoneyAccountStatus = 0;
	char *pChangeAccountField_BankAccount = nullptr;
	char *pChangeAccountField_BankPassWord = nullptr;
	char *pChangeAccountField_NewBankAccount = nullptr;
	char *pChangeAccountField_NewBankPassWord = nullptr;
	char *pChangeAccountField_AccountID = nullptr;
	char *pChangeAccountField_Password = nullptr;
	char pChangeAccountField_BankAccType = 0;
	int pChangeAccountField_InstallID = 0;
	char pChangeAccountField_VerifyCertNoFlag = 0;
	char *pChangeAccountField_CurrencyID = nullptr;
	char *pChangeAccountField_BrokerIDByBank = nullptr;
	char pChangeAccountField_BankPwdFlag = 0;
	char pChangeAccountField_SecuPwdFlag = 0;
	int pChangeAccountField_TID = 0;
	char *pChangeAccountField_Digest = nullptr;
	int pChangeAccountField_ErrorID = 0;
	char *pChangeAccountField_ErrorMsg = nullptr;
	char *pChangeAccountField_LongCustomerName = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pChangeAccountField, "|yyyyyyyyyiciycycycyyyyyycyyyyyycicyycciyiyy")
		, &pChangeAccountField_TradeCode
		, &pChangeAccountField_BankID
		, &pChangeAccountField_BankBranchID
		, &pChangeAccountField_BrokerID
		, &pChangeAccountField_BrokerBranchID
		, &pChangeAccountField_TradeDate
		, &pChangeAccountField_TradeTime
		, &pChangeAccountField_BankSerial
		, &pChangeAccountField_TradingDay
		, &pChangeAccountField_PlateSerial
		, &pChangeAccountField_LastFragment
		, &pChangeAccountField_SessionID
		, &pChangeAccountField_CustomerName
		, &pChangeAccountField_IdCardType
		, &pChangeAccountField_IdentifiedCardNo
		, &pChangeAccountField_Gender
		, &pChangeAccountField_CountryCode
		, &pChangeAccountField_CustType
		, &pChangeAccountField_Address
		, &pChangeAccountField_ZipCode
		, &pChangeAccountField_Telephone
		, &pChangeAccountField_MobilePhone
		, &pChangeAccountField_Fax
		, &pChangeAccountField_EMail
		, &pChangeAccountField_MoneyAccountStatus
		, &pChangeAccountField_BankAccount
		, &pChangeAccountField_BankPassWord
		, &pChangeAccountField_NewBankAccount
		, &pChangeAccountField_NewBankPassWord
		, &pChangeAccountField_AccountID
		, &pChangeAccountField_Password
		, &pChangeAccountField_BankAccType
		, &pChangeAccountField_InstallID
		, &pChangeAccountField_VerifyCertNoFlag
		, &pChangeAccountField_CurrencyID
		, &pChangeAccountField_BrokerIDByBank
		, &pChangeAccountField_BankPwdFlag
		, &pChangeAccountField_SecuPwdFlag
		, &pChangeAccountField_TID
		, &pChangeAccountField_Digest
		, &pChangeAccountField_ErrorID
		, &pChangeAccountField_ErrorMsg
		, &pChangeAccountField_LongCustomerName
	PyCTP_PyDict_FromStruct_END
		if(pChangeAccountField_TradeCode != nullptr){ strcpy_s(pChangeAccountField->TradeCode, pChangeAccountField_TradeCode); pChangeAccountField_TradeCode = nullptr; }
		if(pChangeAccountField_BankID != nullptr){ strcpy_s(pChangeAccountField->BankID, pChangeAccountField_BankID); pChangeAccountField_BankID = nullptr; }
		if(pChangeAccountField_BankBranchID != nullptr){ strcpy_s(pChangeAccountField->BankBranchID, pChangeAccountField_BankBranchID); pChangeAccountField_BankBranchID = nullptr; }
		if(pChangeAccountField_BrokerID != nullptr){ strcpy_s(pChangeAccountField->BrokerID, pChangeAccountField_BrokerID); pChangeAccountField_BrokerID = nullptr; }
		if(pChangeAccountField_BrokerBranchID != nullptr){ strcpy_s(pChangeAccountField->BrokerBranchID, pChangeAccountField_BrokerBranchID); pChangeAccountField_BrokerBranchID = nullptr; }
		if(pChangeAccountField_TradeDate != nullptr){ strcpy_s(pChangeAccountField->TradeDate, pChangeAccountField_TradeDate); pChangeAccountField_TradeDate = nullptr; }
		if(pChangeAccountField_TradeTime != nullptr){ strcpy_s(pChangeAccountField->TradeTime, pChangeAccountField_TradeTime); pChangeAccountField_TradeTime = nullptr; }
		if(pChangeAccountField_BankSerial != nullptr){ strcpy_s(pChangeAccountField->BankSerial, pChangeAccountField_BankSerial); pChangeAccountField_BankSerial = nullptr; }
		if(pChangeAccountField_TradingDay != nullptr){ strcpy_s(pChangeAccountField->TradingDay, pChangeAccountField_TradingDay); pChangeAccountField_TradingDay = nullptr; }
		pChangeAccountField->PlateSerial = pChangeAccountField_PlateSerial;
		pChangeAccountField->LastFragment = pChangeAccountField_LastFragment;
		pChangeAccountField->SessionID = pChangeAccountField_SessionID;
		if(pChangeAccountField_CustomerName != nullptr){ strcpy_s(pChangeAccountField->CustomerName, pChangeAccountField_CustomerName); pChangeAccountField_CustomerName = nullptr; }
		pChangeAccountField->IdCardType = pChangeAccountField_IdCardType;
		if(pChangeAccountField_IdentifiedCardNo != nullptr){ strcpy_s(pChangeAccountField->IdentifiedCardNo, pChangeAccountField_IdentifiedCardNo); pChangeAccountField_IdentifiedCardNo = nullptr; }
		pChangeAccountField->Gender = pChangeAccountField_Gender;
		if(pChangeAccountField_CountryCode != nullptr){ strcpy_s(pChangeAccountField->CountryCode, pChangeAccountField_CountryCode); pChangeAccountField_CountryCode = nullptr; }
		pChangeAccountField->CustType = pChangeAccountField_CustType;
		if(pChangeAccountField_Address != nullptr){ strcpy_s(pChangeAccountField->Address, pChangeAccountField_Address); pChangeAccountField_Address = nullptr; }
		if(pChangeAccountField_ZipCode != nullptr){ strcpy_s(pChangeAccountField->ZipCode, pChangeAccountField_ZipCode); pChangeAccountField_ZipCode = nullptr; }
		if(pChangeAccountField_Telephone != nullptr){ strcpy_s(pChangeAccountField->Telephone, pChangeAccountField_Telephone); pChangeAccountField_Telephone = nullptr; }
		if(pChangeAccountField_MobilePhone != nullptr){ strcpy_s(pChangeAccountField->MobilePhone, pChangeAccountField_MobilePhone); pChangeAccountField_MobilePhone = nullptr; }
		if(pChangeAccountField_Fax != nullptr){ strcpy_s(pChangeAccountField->Fax, pChangeAccountField_Fax); pChangeAccountField_Fax = nullptr; }
		if(pChangeAccountField_EMail != nullptr){ strcpy_s(pChangeAccountField->EMail, pChangeAccountField_EMail); pChangeAccountField_EMail = nullptr; }
		pChangeAccountField->MoneyAccountStatus = pChangeAccountField_MoneyAccountStatus;
		if(pChangeAccountField_BankAccount != nullptr){ strcpy_s(pChangeAccountField->BankAccount, pChangeAccountField_BankAccount); pChangeAccountField_BankAccount = nullptr; }
		if(pChangeAccountField_BankPassWord != nullptr){ strcpy_s(pChangeAccountField->BankPassWord, pChangeAccountField_BankPassWord); pChangeAccountField_BankPassWord = nullptr; }
		if(pChangeAccountField_NewBankAccount != nullptr){ strcpy_s(pChangeAccountField->NewBankAccount, pChangeAccountField_NewBankAccount); pChangeAccountField_NewBankAccount = nullptr; }
		if(pChangeAccountField_NewBankPassWord != nullptr){ strcpy_s(pChangeAccountField->NewBankPassWord, pChangeAccountField_NewBankPassWord); pChangeAccountField_NewBankPassWord = nullptr; }
		if(pChangeAccountField_AccountID != nullptr){ strcpy_s(pChangeAccountField->AccountID, pChangeAccountField_AccountID); pChangeAccountField_AccountID = nullptr; }
		if(pChangeAccountField_Password != nullptr){ strcpy_s(pChangeAccountField->Password, pChangeAccountField_Password); pChangeAccountField_Password = nullptr; }
		pChangeAccountField->BankAccType = pChangeAccountField_BankAccType;
		pChangeAccountField->InstallID = pChangeAccountField_InstallID;
		pChangeAccountField->VerifyCertNoFlag = pChangeAccountField_VerifyCertNoFlag;
		if(pChangeAccountField_CurrencyID != nullptr){ strcpy_s(pChangeAccountField->CurrencyID, pChangeAccountField_CurrencyID); pChangeAccountField_CurrencyID = nullptr; }
		if(pChangeAccountField_BrokerIDByBank != nullptr){ strcpy_s(pChangeAccountField->BrokerIDByBank, pChangeAccountField_BrokerIDByBank); pChangeAccountField_BrokerIDByBank = nullptr; }
		pChangeAccountField->BankPwdFlag = pChangeAccountField_BankPwdFlag;
		pChangeAccountField->SecuPwdFlag = pChangeAccountField_SecuPwdFlag;
		pChangeAccountField->TID = pChangeAccountField_TID;
		if(pChangeAccountField_Digest != nullptr){ strcpy_s(pChangeAccountField->Digest, pChangeAccountField_Digest); pChangeAccountField_Digest = nullptr; }
		pChangeAccountField->ErrorID = pChangeAccountField_ErrorID;
		if(pChangeAccountField_ErrorMsg != nullptr){ strcpy_s(pChangeAccountField->ErrorMsg, pChangeAccountField_ErrorMsg); pChangeAccountField_ErrorMsg = nullptr; }
		if(pChangeAccountField_LongCustomerName != nullptr){ strcpy_s(pChangeAccountField->LongCustomerName, pChangeAccountField_LongCustomerName); pChangeAccountField_LongCustomerName = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcChangeAccountField *pChangeAccountField)
{
	if(pChangeAccountField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:c,s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:c,s:i,s:c,s:y,s:y,s:c,s:c,s:i,s:y,s:i,s:y,s:y}"
		, "TradeCode", pChangeAccountField->TradeCode
		, "BankID", pChangeAccountField->BankID
		, "BankBranchID", pChangeAccountField->BankBranchID
		, "BrokerID", pChangeAccountField->BrokerID
		, "BrokerBranchID", pChangeAccountField->BrokerBranchID
		, "TradeDate", pChangeAccountField->TradeDate
		, "TradeTime", pChangeAccountField->TradeTime
		, "BankSerial", pChangeAccountField->BankSerial
		, "TradingDay", pChangeAccountField->TradingDay
		, "PlateSerial", pChangeAccountField->PlateSerial
		, "LastFragment", pChangeAccountField->LastFragment
		, "SessionID", pChangeAccountField->SessionID
		, "CustomerName", pChangeAccountField->CustomerName
		, "IdCardType", pChangeAccountField->IdCardType
		, "IdentifiedCardNo", pChangeAccountField->IdentifiedCardNo
		, "Gender", pChangeAccountField->Gender
		, "CountryCode", pChangeAccountField->CountryCode
		, "CustType", pChangeAccountField->CustType
		, "Address", pChangeAccountField->Address
		, "ZipCode", pChangeAccountField->ZipCode
		, "Telephone", pChangeAccountField->Telephone
		, "MobilePhone", pChangeAccountField->MobilePhone
		, "Fax", pChangeAccountField->Fax
		, "EMail", pChangeAccountField->EMail
		, "MoneyAccountStatus", pChangeAccountField->MoneyAccountStatus
		, "BankAccount", pChangeAccountField->BankAccount
		, "BankPassWord", pChangeAccountField->BankPassWord
		, "NewBankAccount", pChangeAccountField->NewBankAccount
		, "NewBankPassWord", pChangeAccountField->NewBankPassWord
		, "AccountID", pChangeAccountField->AccountID
		, "Password", pChangeAccountField->Password
		, "BankAccType", pChangeAccountField->BankAccType
		, "InstallID", pChangeAccountField->InstallID
		, "VerifyCertNoFlag", pChangeAccountField->VerifyCertNoFlag
		, "CurrencyID", pChangeAccountField->CurrencyID
		, "BrokerIDByBank", pChangeAccountField->BrokerIDByBank
		, "BankPwdFlag", pChangeAccountField->BankPwdFlag
		, "SecuPwdFlag", pChangeAccountField->SecuPwdFlag
		, "TID", pChangeAccountField->TID
		, "Digest", pChangeAccountField->Digest
		, "ErrorID", pChangeAccountField->ErrorID
		, "ErrorMsg", pChangeAccountField->ErrorMsg
		, "LongCustomerName", pChangeAccountField->LongCustomerName
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcSecAgentACIDMapField *pSecAgentACIDMapField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "AccountID", "CurrencyID", "BrokerSecAgentID", nullptr};
	char *pSecAgentACIDMapField_BrokerID = nullptr;
	char *pSecAgentACIDMapField_UserID = nullptr;
	char *pSecAgentACIDMapField_AccountID = nullptr;
	char *pSecAgentACIDMapField_CurrencyID = nullptr;
	char *pSecAgentACIDMapField_BrokerSecAgentID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pSecAgentACIDMapField, "|yyyyy")
		, &pSecAgentACIDMapField_BrokerID
		, &pSecAgentACIDMapField_UserID
		, &pSecAgentACIDMapField_AccountID
		, &pSecAgentACIDMapField_CurrencyID
		, &pSecAgentACIDMapField_BrokerSecAgentID
	PyCTP_PyDict_FromStruct_END
		if(pSecAgentACIDMapField_BrokerID != nullptr){ strcpy_s(pSecAgentACIDMapField->BrokerID, pSecAgentACIDMapField_BrokerID); pSecAgentACIDMapField_BrokerID = nullptr; }
		if(pSecAgentACIDMapField_UserID != nullptr){ strcpy_s(pSecAgentACIDMapField->UserID, pSecAgentACIDMapField_UserID); pSecAgentACIDMapField_UserID = nullptr; }
		if(pSecAgentACIDMapField_AccountID != nullptr){ strcpy_s(pSecAgentACIDMapField->AccountID, pSecAgentACIDMapField_AccountID); pSecAgentACIDMapField_AccountID = nullptr; }
		if(pSecAgentACIDMapField_CurrencyID != nullptr){ strcpy_s(pSecAgentACIDMapField->CurrencyID, pSecAgentACIDMapField_CurrencyID); pSecAgentACIDMapField_CurrencyID = nullptr; }
		if(pSecAgentACIDMapField_BrokerSecAgentID != nullptr){ strcpy_s(pSecAgentACIDMapField->BrokerSecAgentID, pSecAgentACIDMapField_BrokerSecAgentID); pSecAgentACIDMapField_BrokerSecAgentID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcSecAgentACIDMapField *pSecAgentACIDMapField)
{
	if(pSecAgentACIDMapField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pSecAgentACIDMapField->BrokerID
		, "UserID", pSecAgentACIDMapField->UserID
		, "AccountID", pSecAgentACIDMapField->AccountID
		, "CurrencyID", pSecAgentACIDMapField->CurrencyID
		, "BrokerSecAgentID", pSecAgentACIDMapField->BrokerSecAgentID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQrySecAgentACIDMapField *pQrySecAgentACIDMapField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "AccountID", "CurrencyID", nullptr};
	char *pQrySecAgentACIDMapField_BrokerID = nullptr;
	char *pQrySecAgentACIDMapField_UserID = nullptr;
	char *pQrySecAgentACIDMapField_AccountID = nullptr;
	char *pQrySecAgentACIDMapField_CurrencyID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQrySecAgentACIDMapField, "|yyyy")
		, &pQrySecAgentACIDMapField_BrokerID
		, &pQrySecAgentACIDMapField_UserID
		, &pQrySecAgentACIDMapField_AccountID
		, &pQrySecAgentACIDMapField_CurrencyID
	PyCTP_PyDict_FromStruct_END
		if(pQrySecAgentACIDMapField_BrokerID != nullptr){ strcpy_s(pQrySecAgentACIDMapField->BrokerID, pQrySecAgentACIDMapField_BrokerID); pQrySecAgentACIDMapField_BrokerID = nullptr; }
		if(pQrySecAgentACIDMapField_UserID != nullptr){ strcpy_s(pQrySecAgentACIDMapField->UserID, pQrySecAgentACIDMapField_UserID); pQrySecAgentACIDMapField_UserID = nullptr; }
		if(pQrySecAgentACIDMapField_AccountID != nullptr){ strcpy_s(pQrySecAgentACIDMapField->AccountID, pQrySecAgentACIDMapField_AccountID); pQrySecAgentACIDMapField_AccountID = nullptr; }
		if(pQrySecAgentACIDMapField_CurrencyID != nullptr){ strcpy_s(pQrySecAgentACIDMapField->CurrencyID, pQrySecAgentACIDMapField_CurrencyID); pQrySecAgentACIDMapField_CurrencyID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQrySecAgentACIDMapField *pQrySecAgentACIDMapField)
{
	if(pQrySecAgentACIDMapField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y}"
		, "BrokerID", pQrySecAgentACIDMapField->BrokerID
		, "UserID", pQrySecAgentACIDMapField->UserID
		, "AccountID", pQrySecAgentACIDMapField->AccountID
		, "CurrencyID", pQrySecAgentACIDMapField->CurrencyID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcUserRightsAssignField *pUserRightsAssignField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "DRIdentityID", nullptr};
	char *pUserRightsAssignField_BrokerID = nullptr;
	char *pUserRightsAssignField_UserID = nullptr;
	int pUserRightsAssignField_DRIdentityID = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pUserRightsAssignField, "|yyi")
		, &pUserRightsAssignField_BrokerID
		, &pUserRightsAssignField_UserID
		, &pUserRightsAssignField_DRIdentityID
	PyCTP_PyDict_FromStruct_END
		if(pUserRightsAssignField_BrokerID != nullptr){ strcpy_s(pUserRightsAssignField->BrokerID, pUserRightsAssignField_BrokerID); pUserRightsAssignField_BrokerID = nullptr; }
		if(pUserRightsAssignField_UserID != nullptr){ strcpy_s(pUserRightsAssignField->UserID, pUserRightsAssignField_UserID); pUserRightsAssignField_UserID = nullptr; }
		pUserRightsAssignField->DRIdentityID = pUserRightsAssignField_DRIdentityID;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcUserRightsAssignField *pUserRightsAssignField)
{
	if(pUserRightsAssignField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i}"
		, "BrokerID", pUserRightsAssignField->BrokerID
		, "UserID", pUserRightsAssignField->UserID
		, "DRIdentityID", pUserRightsAssignField->DRIdentityID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcBrokerUserRightAssignField *pBrokerUserRightAssignField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "DRIdentityID", "Tradeable", nullptr};
	char *pBrokerUserRightAssignField_BrokerID = nullptr;
	int pBrokerUserRightAssignField_DRIdentityID = 0;
	int pBrokerUserRightAssignField_Tradeable = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pBrokerUserRightAssignField, "|yii")
		, &pBrokerUserRightAssignField_BrokerID
		, &pBrokerUserRightAssignField_DRIdentityID
		, &pBrokerUserRightAssignField_Tradeable
	PyCTP_PyDict_FromStruct_END
		if(pBrokerUserRightAssignField_BrokerID != nullptr){ strcpy_s(pBrokerUserRightAssignField->BrokerID, pBrokerUserRightAssignField_BrokerID); pBrokerUserRightAssignField_BrokerID = nullptr; }
		pBrokerUserRightAssignField->DRIdentityID = pBrokerUserRightAssignField_DRIdentityID;
		pBrokerUserRightAssignField->Tradeable = pBrokerUserRightAssignField_Tradeable;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcBrokerUserRightAssignField *pBrokerUserRightAssignField)
{
	if(pBrokerUserRightAssignField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:i,s:i}"
		, "BrokerID", pBrokerUserRightAssignField->BrokerID
		, "DRIdentityID", pBrokerUserRightAssignField->DRIdentityID
		, "Tradeable", pBrokerUserRightAssignField->Tradeable
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcDRTransferField *pDRTransferField, PyObject *dict)
{
	static char *kwlist[] = {"OrigDRIdentityID", "DestDRIdentityID", "OrigBrokerID", "DestBrokerID", nullptr};
	int pDRTransferField_OrigDRIdentityID = 0;
	int pDRTransferField_DestDRIdentityID = 0;
	char *pDRTransferField_OrigBrokerID = nullptr;
	char *pDRTransferField_DestBrokerID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pDRTransferField, "|iiyy")
		, &pDRTransferField_OrigDRIdentityID
		, &pDRTransferField_DestDRIdentityID
		, &pDRTransferField_OrigBrokerID
		, &pDRTransferField_DestBrokerID
	PyCTP_PyDict_FromStruct_END
		pDRTransferField->OrigDRIdentityID = pDRTransferField_OrigDRIdentityID;
		pDRTransferField->DestDRIdentityID = pDRTransferField_DestDRIdentityID;
		if(pDRTransferField_OrigBrokerID != nullptr){ strcpy_s(pDRTransferField->OrigBrokerID, pDRTransferField_OrigBrokerID); pDRTransferField_OrigBrokerID = nullptr; }
		if(pDRTransferField_DestBrokerID != nullptr){ strcpy_s(pDRTransferField->DestBrokerID, pDRTransferField_DestBrokerID); pDRTransferField_DestBrokerID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcDRTransferField *pDRTransferField)
{
	if(pDRTransferField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i,s:i,s:y,s:y}"
		, "OrigDRIdentityID", pDRTransferField->OrigDRIdentityID
		, "DestDRIdentityID", pDRTransferField->DestDRIdentityID
		, "OrigBrokerID", pDRTransferField->OrigBrokerID
		, "DestBrokerID", pDRTransferField->DestBrokerID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcFensUserInfoField *pFensUserInfoField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "LoginMode", nullptr};
	char *pFensUserInfoField_BrokerID = nullptr;
	char *pFensUserInfoField_UserID = nullptr;
	char pFensUserInfoField_LoginMode = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pFensUserInfoField, "|yyc")
		, &pFensUserInfoField_BrokerID
		, &pFensUserInfoField_UserID
		, &pFensUserInfoField_LoginMode
	PyCTP_PyDict_FromStruct_END
		if(pFensUserInfoField_BrokerID != nullptr){ strcpy_s(pFensUserInfoField->BrokerID, pFensUserInfoField_BrokerID); pFensUserInfoField_BrokerID = nullptr; }
		if(pFensUserInfoField_UserID != nullptr){ strcpy_s(pFensUserInfoField->UserID, pFensUserInfoField_UserID); pFensUserInfoField_UserID = nullptr; }
		pFensUserInfoField->LoginMode = pFensUserInfoField_LoginMode;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcFensUserInfoField *pFensUserInfoField)
{
	if(pFensUserInfoField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c}"
		, "BrokerID", pFensUserInfoField->BrokerID
		, "UserID", pFensUserInfoField->UserID
		, "LoginMode", pFensUserInfoField->LoginMode
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcCurrTransferIdentityField *pCurrTransferIdentityField, PyObject *dict)
{
	static char *kwlist[] = {"IdentityID", nullptr};
	int pCurrTransferIdentityField_IdentityID = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pCurrTransferIdentityField, "|i")
		, &pCurrTransferIdentityField_IdentityID
	PyCTP_PyDict_FromStruct_END
		pCurrTransferIdentityField->IdentityID = pCurrTransferIdentityField_IdentityID;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcCurrTransferIdentityField *pCurrTransferIdentityField)
{
	if(pCurrTransferIdentityField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i}"
		, "IdentityID", pCurrTransferIdentityField->IdentityID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcLoginForbiddenUserField *pLoginForbiddenUserField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "IPAddress", nullptr};
	char *pLoginForbiddenUserField_BrokerID = nullptr;
	char *pLoginForbiddenUserField_UserID = nullptr;
	char *pLoginForbiddenUserField_IPAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pLoginForbiddenUserField, "|yyy")
		, &pLoginForbiddenUserField_BrokerID
		, &pLoginForbiddenUserField_UserID
		, &pLoginForbiddenUserField_IPAddress
	PyCTP_PyDict_FromStruct_END
		if(pLoginForbiddenUserField_BrokerID != nullptr){ strcpy_s(pLoginForbiddenUserField->BrokerID, pLoginForbiddenUserField_BrokerID); pLoginForbiddenUserField_BrokerID = nullptr; }
		if(pLoginForbiddenUserField_UserID != nullptr){ strcpy_s(pLoginForbiddenUserField->UserID, pLoginForbiddenUserField_UserID); pLoginForbiddenUserField_UserID = nullptr; }
		if(pLoginForbiddenUserField_IPAddress != nullptr){ strcpy_s(pLoginForbiddenUserField->IPAddress, pLoginForbiddenUserField_IPAddress); pLoginForbiddenUserField_IPAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcLoginForbiddenUserField *pLoginForbiddenUserField)
{
	if(pLoginForbiddenUserField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "BrokerID", pLoginForbiddenUserField->BrokerID
		, "UserID", pLoginForbiddenUserField->UserID
		, "IPAddress", pLoginForbiddenUserField->IPAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryLoginForbiddenUserField *pQryLoginForbiddenUserField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", nullptr};
	char *pQryLoginForbiddenUserField_BrokerID = nullptr;
	char *pQryLoginForbiddenUserField_UserID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryLoginForbiddenUserField, "|yy")
		, &pQryLoginForbiddenUserField_BrokerID
		, &pQryLoginForbiddenUserField_UserID
	PyCTP_PyDict_FromStruct_END
		if(pQryLoginForbiddenUserField_BrokerID != nullptr){ strcpy_s(pQryLoginForbiddenUserField->BrokerID, pQryLoginForbiddenUserField_BrokerID); pQryLoginForbiddenUserField_BrokerID = nullptr; }
		if(pQryLoginForbiddenUserField_UserID != nullptr){ strcpy_s(pQryLoginForbiddenUserField->UserID, pQryLoginForbiddenUserField_UserID); pQryLoginForbiddenUserField_UserID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryLoginForbiddenUserField *pQryLoginForbiddenUserField)
{
	if(pQryLoginForbiddenUserField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQryLoginForbiddenUserField->BrokerID
		, "UserID", pQryLoginForbiddenUserField->UserID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcMulticastGroupInfoField *pMulticastGroupInfoField, PyObject *dict)
{
	static char *kwlist[] = {"GroupIP", "GroupPort", "SourceIP", nullptr};
	char *pMulticastGroupInfoField_GroupIP = nullptr;
	int pMulticastGroupInfoField_GroupPort = 0;
	char *pMulticastGroupInfoField_SourceIP = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pMulticastGroupInfoField, "|yiy")
		, &pMulticastGroupInfoField_GroupIP
		, &pMulticastGroupInfoField_GroupPort
		, &pMulticastGroupInfoField_SourceIP
	PyCTP_PyDict_FromStruct_END
		if(pMulticastGroupInfoField_GroupIP != nullptr){ strcpy_s(pMulticastGroupInfoField->GroupIP, pMulticastGroupInfoField_GroupIP); pMulticastGroupInfoField_GroupIP = nullptr; }
		pMulticastGroupInfoField->GroupPort = pMulticastGroupInfoField_GroupPort;
		if(pMulticastGroupInfoField_SourceIP != nullptr){ strcpy_s(pMulticastGroupInfoField->SourceIP, pMulticastGroupInfoField_SourceIP); pMulticastGroupInfoField_SourceIP = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcMulticastGroupInfoField *pMulticastGroupInfoField)
{
	if(pMulticastGroupInfoField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:i,s:y}"
		, "GroupIP", pMulticastGroupInfoField->GroupIP
		, "GroupPort", pMulticastGroupInfoField->GroupPort
		, "SourceIP", pMulticastGroupInfoField->SourceIP
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcTradingAccountReserveField *pTradingAccountReserveField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "AccountID", "Reserve", "CurrencyID", nullptr};
	char *pTradingAccountReserveField_BrokerID = nullptr;
	char *pTradingAccountReserveField_AccountID = nullptr;
	double pTradingAccountReserveField_Reserve = 0.0;
	char *pTradingAccountReserveField_CurrencyID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pTradingAccountReserveField, "|yydy")
		, &pTradingAccountReserveField_BrokerID
		, &pTradingAccountReserveField_AccountID
		, &pTradingAccountReserveField_Reserve
		, &pTradingAccountReserveField_CurrencyID
	PyCTP_PyDict_FromStruct_END
		if(pTradingAccountReserveField_BrokerID != nullptr){ strcpy_s(pTradingAccountReserveField->BrokerID, pTradingAccountReserveField_BrokerID); pTradingAccountReserveField_BrokerID = nullptr; }
		if(pTradingAccountReserveField_AccountID != nullptr){ strcpy_s(pTradingAccountReserveField->AccountID, pTradingAccountReserveField_AccountID); pTradingAccountReserveField_AccountID = nullptr; }
		pTradingAccountReserveField->Reserve = pTradingAccountReserveField_Reserve;
		if(pTradingAccountReserveField_CurrencyID != nullptr){ strcpy_s(pTradingAccountReserveField->CurrencyID, pTradingAccountReserveField_CurrencyID); pTradingAccountReserveField_CurrencyID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcTradingAccountReserveField *pTradingAccountReserveField)
{
	if(pTradingAccountReserveField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:d,s:y}"
		, "BrokerID", pTradingAccountReserveField->BrokerID
		, "AccountID", pTradingAccountReserveField->AccountID
		, "Reserve", pTradingAccountReserveField->Reserve
		, "CurrencyID", pTradingAccountReserveField->CurrencyID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryLoginForbiddenIPField *pQryLoginForbiddenIPField, PyObject *dict)
{
	static char *kwlist[] = {"IPAddress", nullptr};
	char *pQryLoginForbiddenIPField_IPAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryLoginForbiddenIPField, "|y")
		, &pQryLoginForbiddenIPField_IPAddress
	PyCTP_PyDict_FromStruct_END
		if(pQryLoginForbiddenIPField_IPAddress != nullptr){ strcpy_s(pQryLoginForbiddenIPField->IPAddress, pQryLoginForbiddenIPField_IPAddress); pQryLoginForbiddenIPField_IPAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryLoginForbiddenIPField *pQryLoginForbiddenIPField)
{
	if(pQryLoginForbiddenIPField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y}"
		, "IPAddress", pQryLoginForbiddenIPField->IPAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryIPListField *pQryIPListField, PyObject *dict)
{
	static char *kwlist[] = {"IPAddress", nullptr};
	char *pQryIPListField_IPAddress = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryIPListField, "|y")
		, &pQryIPListField_IPAddress
	PyCTP_PyDict_FromStruct_END
		if(pQryIPListField_IPAddress != nullptr){ strcpy_s(pQryIPListField->IPAddress, pQryIPListField_IPAddress); pQryIPListField_IPAddress = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryIPListField *pQryIPListField)
{
	if(pQryIPListField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y}"
		, "IPAddress", pQryIPListField->IPAddress
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryUserRightsAssignField *pQryUserRightsAssignField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", nullptr};
	char *pQryUserRightsAssignField_BrokerID = nullptr;
	char *pQryUserRightsAssignField_UserID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQryUserRightsAssignField, "|yy")
		, &pQryUserRightsAssignField_BrokerID
		, &pQryUserRightsAssignField_UserID
	PyCTP_PyDict_FromStruct_END
		if(pQryUserRightsAssignField_BrokerID != nullptr){ strcpy_s(pQryUserRightsAssignField->BrokerID, pQryUserRightsAssignField_BrokerID); pQryUserRightsAssignField_BrokerID = nullptr; }
		if(pQryUserRightsAssignField_UserID != nullptr){ strcpy_s(pQryUserRightsAssignField->UserID, pQryUserRightsAssignField_UserID); pQryUserRightsAssignField_UserID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryUserRightsAssignField *pQryUserRightsAssignField)
{
	if(pQryUserRightsAssignField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQryUserRightsAssignField->BrokerID
		, "UserID", pQryUserRightsAssignField->UserID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReserveOpenAccountConfirmField *pReserveOpenAccountConfirmField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "CustomerName", "IdCardType", "IdentifiedCardNo", "Gender", "CountryCode", "CustType", "Address", "ZipCode", "Telephone", "MobilePhone", "Fax", "EMail", "MoneyAccountStatus", "BankAccount", "BankPassWord", "InstallID", "VerifyCertNoFlag", "CurrencyID", "Digest", "BankAccType", "BrokerIDByBank", "TID", "AccountID", "Password", "BankReserveOpenSeq", "BookDate", "BookPsw", "ErrorID", "ErrorMsg", nullptr};
	char *pReserveOpenAccountConfirmField_TradeCode = nullptr;
	char *pReserveOpenAccountConfirmField_BankID = nullptr;
	char *pReserveOpenAccountConfirmField_BankBranchID = nullptr;
	char *pReserveOpenAccountConfirmField_BrokerID = nullptr;
	char *pReserveOpenAccountConfirmField_BrokerBranchID = nullptr;
	char *pReserveOpenAccountConfirmField_TradeDate = nullptr;
	char *pReserveOpenAccountConfirmField_TradeTime = nullptr;
	char *pReserveOpenAccountConfirmField_BankSerial = nullptr;
	char *pReserveOpenAccountConfirmField_TradingDay = nullptr;
	int pReserveOpenAccountConfirmField_PlateSerial = 0;
	char pReserveOpenAccountConfirmField_LastFragment = 0;
	int pReserveOpenAccountConfirmField_SessionID = 0;
	char *pReserveOpenAccountConfirmField_CustomerName = nullptr;
	char pReserveOpenAccountConfirmField_IdCardType = 0;
	char *pReserveOpenAccountConfirmField_IdentifiedCardNo = nullptr;
	char pReserveOpenAccountConfirmField_Gender = 0;
	char *pReserveOpenAccountConfirmField_CountryCode = nullptr;
	char pReserveOpenAccountConfirmField_CustType = 0;
	char *pReserveOpenAccountConfirmField_Address = nullptr;
	char *pReserveOpenAccountConfirmField_ZipCode = nullptr;
	char *pReserveOpenAccountConfirmField_Telephone = nullptr;
	char *pReserveOpenAccountConfirmField_MobilePhone = nullptr;
	char *pReserveOpenAccountConfirmField_Fax = nullptr;
	char *pReserveOpenAccountConfirmField_EMail = nullptr;
	char pReserveOpenAccountConfirmField_MoneyAccountStatus = 0;
	char *pReserveOpenAccountConfirmField_BankAccount = nullptr;
	char *pReserveOpenAccountConfirmField_BankPassWord = nullptr;
	int pReserveOpenAccountConfirmField_InstallID = 0;
	char pReserveOpenAccountConfirmField_VerifyCertNoFlag = 0;
	char *pReserveOpenAccountConfirmField_CurrencyID = nullptr;
	char *pReserveOpenAccountConfirmField_Digest = nullptr;
	char pReserveOpenAccountConfirmField_BankAccType = 0;
	char *pReserveOpenAccountConfirmField_BrokerIDByBank = nullptr;
	int pReserveOpenAccountConfirmField_TID = 0;
	char *pReserveOpenAccountConfirmField_AccountID = nullptr;
	char *pReserveOpenAccountConfirmField_Password = nullptr;
	char *pReserveOpenAccountConfirmField_BankReserveOpenSeq = nullptr;
	char *pReserveOpenAccountConfirmField_BookDate = nullptr;
	char *pReserveOpenAccountConfirmField_BookPsw = nullptr;
	int pReserveOpenAccountConfirmField_ErrorID = 0;
	char *pReserveOpenAccountConfirmField_ErrorMsg = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pReserveOpenAccountConfirmField, "|yyyyyyyyyiciycycycyyyyyycyyicyycyiyyyyyiy")
		, &pReserveOpenAccountConfirmField_TradeCode
		, &pReserveOpenAccountConfirmField_BankID
		, &pReserveOpenAccountConfirmField_BankBranchID
		, &pReserveOpenAccountConfirmField_BrokerID
		, &pReserveOpenAccountConfirmField_BrokerBranchID
		, &pReserveOpenAccountConfirmField_TradeDate
		, &pReserveOpenAccountConfirmField_TradeTime
		, &pReserveOpenAccountConfirmField_BankSerial
		, &pReserveOpenAccountConfirmField_TradingDay
		, &pReserveOpenAccountConfirmField_PlateSerial
		, &pReserveOpenAccountConfirmField_LastFragment
		, &pReserveOpenAccountConfirmField_SessionID
		, &pReserveOpenAccountConfirmField_CustomerName
		, &pReserveOpenAccountConfirmField_IdCardType
		, &pReserveOpenAccountConfirmField_IdentifiedCardNo
		, &pReserveOpenAccountConfirmField_Gender
		, &pReserveOpenAccountConfirmField_CountryCode
		, &pReserveOpenAccountConfirmField_CustType
		, &pReserveOpenAccountConfirmField_Address
		, &pReserveOpenAccountConfirmField_ZipCode
		, &pReserveOpenAccountConfirmField_Telephone
		, &pReserveOpenAccountConfirmField_MobilePhone
		, &pReserveOpenAccountConfirmField_Fax
		, &pReserveOpenAccountConfirmField_EMail
		, &pReserveOpenAccountConfirmField_MoneyAccountStatus
		, &pReserveOpenAccountConfirmField_BankAccount
		, &pReserveOpenAccountConfirmField_BankPassWord
		, &pReserveOpenAccountConfirmField_InstallID
		, &pReserveOpenAccountConfirmField_VerifyCertNoFlag
		, &pReserveOpenAccountConfirmField_CurrencyID
		, &pReserveOpenAccountConfirmField_Digest
		, &pReserveOpenAccountConfirmField_BankAccType
		, &pReserveOpenAccountConfirmField_BrokerIDByBank
		, &pReserveOpenAccountConfirmField_TID
		, &pReserveOpenAccountConfirmField_AccountID
		, &pReserveOpenAccountConfirmField_Password
		, &pReserveOpenAccountConfirmField_BankReserveOpenSeq
		, &pReserveOpenAccountConfirmField_BookDate
		, &pReserveOpenAccountConfirmField_BookPsw
		, &pReserveOpenAccountConfirmField_ErrorID
		, &pReserveOpenAccountConfirmField_ErrorMsg
	PyCTP_PyDict_FromStruct_END
		if(pReserveOpenAccountConfirmField_TradeCode != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->TradeCode, pReserveOpenAccountConfirmField_TradeCode); pReserveOpenAccountConfirmField_TradeCode = nullptr; }
		if(pReserveOpenAccountConfirmField_BankID != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->BankID, pReserveOpenAccountConfirmField_BankID); pReserveOpenAccountConfirmField_BankID = nullptr; }
		if(pReserveOpenAccountConfirmField_BankBranchID != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->BankBranchID, pReserveOpenAccountConfirmField_BankBranchID); pReserveOpenAccountConfirmField_BankBranchID = nullptr; }
		if(pReserveOpenAccountConfirmField_BrokerID != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->BrokerID, pReserveOpenAccountConfirmField_BrokerID); pReserveOpenAccountConfirmField_BrokerID = nullptr; }
		if(pReserveOpenAccountConfirmField_BrokerBranchID != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->BrokerBranchID, pReserveOpenAccountConfirmField_BrokerBranchID); pReserveOpenAccountConfirmField_BrokerBranchID = nullptr; }
		if(pReserveOpenAccountConfirmField_TradeDate != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->TradeDate, pReserveOpenAccountConfirmField_TradeDate); pReserveOpenAccountConfirmField_TradeDate = nullptr; }
		if(pReserveOpenAccountConfirmField_TradeTime != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->TradeTime, pReserveOpenAccountConfirmField_TradeTime); pReserveOpenAccountConfirmField_TradeTime = nullptr; }
		if(pReserveOpenAccountConfirmField_BankSerial != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->BankSerial, pReserveOpenAccountConfirmField_BankSerial); pReserveOpenAccountConfirmField_BankSerial = nullptr; }
		if(pReserveOpenAccountConfirmField_TradingDay != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->TradingDay, pReserveOpenAccountConfirmField_TradingDay); pReserveOpenAccountConfirmField_TradingDay = nullptr; }
		pReserveOpenAccountConfirmField->PlateSerial = pReserveOpenAccountConfirmField_PlateSerial;
		pReserveOpenAccountConfirmField->LastFragment = pReserveOpenAccountConfirmField_LastFragment;
		pReserveOpenAccountConfirmField->SessionID = pReserveOpenAccountConfirmField_SessionID;
		if(pReserveOpenAccountConfirmField_CustomerName != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->CustomerName, pReserveOpenAccountConfirmField_CustomerName); pReserveOpenAccountConfirmField_CustomerName = nullptr; }
		pReserveOpenAccountConfirmField->IdCardType = pReserveOpenAccountConfirmField_IdCardType;
		if(pReserveOpenAccountConfirmField_IdentifiedCardNo != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->IdentifiedCardNo, pReserveOpenAccountConfirmField_IdentifiedCardNo); pReserveOpenAccountConfirmField_IdentifiedCardNo = nullptr; }
		pReserveOpenAccountConfirmField->Gender = pReserveOpenAccountConfirmField_Gender;
		if(pReserveOpenAccountConfirmField_CountryCode != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->CountryCode, pReserveOpenAccountConfirmField_CountryCode); pReserveOpenAccountConfirmField_CountryCode = nullptr; }
		pReserveOpenAccountConfirmField->CustType = pReserveOpenAccountConfirmField_CustType;
		if(pReserveOpenAccountConfirmField_Address != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->Address, pReserveOpenAccountConfirmField_Address); pReserveOpenAccountConfirmField_Address = nullptr; }
		if(pReserveOpenAccountConfirmField_ZipCode != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->ZipCode, pReserveOpenAccountConfirmField_ZipCode); pReserveOpenAccountConfirmField_ZipCode = nullptr; }
		if(pReserveOpenAccountConfirmField_Telephone != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->Telephone, pReserveOpenAccountConfirmField_Telephone); pReserveOpenAccountConfirmField_Telephone = nullptr; }
		if(pReserveOpenAccountConfirmField_MobilePhone != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->MobilePhone, pReserveOpenAccountConfirmField_MobilePhone); pReserveOpenAccountConfirmField_MobilePhone = nullptr; }
		if(pReserveOpenAccountConfirmField_Fax != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->Fax, pReserveOpenAccountConfirmField_Fax); pReserveOpenAccountConfirmField_Fax = nullptr; }
		if(pReserveOpenAccountConfirmField_EMail != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->EMail, pReserveOpenAccountConfirmField_EMail); pReserveOpenAccountConfirmField_EMail = nullptr; }
		pReserveOpenAccountConfirmField->MoneyAccountStatus = pReserveOpenAccountConfirmField_MoneyAccountStatus;
		if(pReserveOpenAccountConfirmField_BankAccount != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->BankAccount, pReserveOpenAccountConfirmField_BankAccount); pReserveOpenAccountConfirmField_BankAccount = nullptr; }
		if(pReserveOpenAccountConfirmField_BankPassWord != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->BankPassWord, pReserveOpenAccountConfirmField_BankPassWord); pReserveOpenAccountConfirmField_BankPassWord = nullptr; }
		pReserveOpenAccountConfirmField->InstallID = pReserveOpenAccountConfirmField_InstallID;
		pReserveOpenAccountConfirmField->VerifyCertNoFlag = pReserveOpenAccountConfirmField_VerifyCertNoFlag;
		if(pReserveOpenAccountConfirmField_CurrencyID != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->CurrencyID, pReserveOpenAccountConfirmField_CurrencyID); pReserveOpenAccountConfirmField_CurrencyID = nullptr; }
		if(pReserveOpenAccountConfirmField_Digest != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->Digest, pReserveOpenAccountConfirmField_Digest); pReserveOpenAccountConfirmField_Digest = nullptr; }
		pReserveOpenAccountConfirmField->BankAccType = pReserveOpenAccountConfirmField_BankAccType;
		if(pReserveOpenAccountConfirmField_BrokerIDByBank != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->BrokerIDByBank, pReserveOpenAccountConfirmField_BrokerIDByBank); pReserveOpenAccountConfirmField_BrokerIDByBank = nullptr; }
		pReserveOpenAccountConfirmField->TID = pReserveOpenAccountConfirmField_TID;
		if(pReserveOpenAccountConfirmField_AccountID != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->AccountID, pReserveOpenAccountConfirmField_AccountID); pReserveOpenAccountConfirmField_AccountID = nullptr; }
		if(pReserveOpenAccountConfirmField_Password != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->Password, pReserveOpenAccountConfirmField_Password); pReserveOpenAccountConfirmField_Password = nullptr; }
		if(pReserveOpenAccountConfirmField_BankReserveOpenSeq != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->BankReserveOpenSeq, pReserveOpenAccountConfirmField_BankReserveOpenSeq); pReserveOpenAccountConfirmField_BankReserveOpenSeq = nullptr; }
		if(pReserveOpenAccountConfirmField_BookDate != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->BookDate, pReserveOpenAccountConfirmField_BookDate); pReserveOpenAccountConfirmField_BookDate = nullptr; }
		if(pReserveOpenAccountConfirmField_BookPsw != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->BookPsw, pReserveOpenAccountConfirmField_BookPsw); pReserveOpenAccountConfirmField_BookPsw = nullptr; }
		pReserveOpenAccountConfirmField->ErrorID = pReserveOpenAccountConfirmField_ErrorID;
		if(pReserveOpenAccountConfirmField_ErrorMsg != nullptr){ strcpy_s(pReserveOpenAccountConfirmField->ErrorMsg, pReserveOpenAccountConfirmField_ErrorMsg); pReserveOpenAccountConfirmField_ErrorMsg = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReserveOpenAccountConfirmField *pReserveOpenAccountConfirmField)
{
	if(pReserveOpenAccountConfirmField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:c,s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:i,s:c,s:y,s:y,s:c,s:y,s:i,s:y,s:y,s:y,s:y,s:y,s:i,s:y}"
		, "TradeCode", pReserveOpenAccountConfirmField->TradeCode
		, "BankID", pReserveOpenAccountConfirmField->BankID
		, "BankBranchID", pReserveOpenAccountConfirmField->BankBranchID
		, "BrokerID", pReserveOpenAccountConfirmField->BrokerID
		, "BrokerBranchID", pReserveOpenAccountConfirmField->BrokerBranchID
		, "TradeDate", pReserveOpenAccountConfirmField->TradeDate
		, "TradeTime", pReserveOpenAccountConfirmField->TradeTime
		, "BankSerial", pReserveOpenAccountConfirmField->BankSerial
		, "TradingDay", pReserveOpenAccountConfirmField->TradingDay
		, "PlateSerial", pReserveOpenAccountConfirmField->PlateSerial
		, "LastFragment", pReserveOpenAccountConfirmField->LastFragment
		, "SessionID", pReserveOpenAccountConfirmField->SessionID
		, "CustomerName", pReserveOpenAccountConfirmField->CustomerName
		, "IdCardType", pReserveOpenAccountConfirmField->IdCardType
		, "IdentifiedCardNo", pReserveOpenAccountConfirmField->IdentifiedCardNo
		, "Gender", pReserveOpenAccountConfirmField->Gender
		, "CountryCode", pReserveOpenAccountConfirmField->CountryCode
		, "CustType", pReserveOpenAccountConfirmField->CustType
		, "Address", pReserveOpenAccountConfirmField->Address
		, "ZipCode", pReserveOpenAccountConfirmField->ZipCode
		, "Telephone", pReserveOpenAccountConfirmField->Telephone
		, "MobilePhone", pReserveOpenAccountConfirmField->MobilePhone
		, "Fax", pReserveOpenAccountConfirmField->Fax
		, "EMail", pReserveOpenAccountConfirmField->EMail
		, "MoneyAccountStatus", pReserveOpenAccountConfirmField->MoneyAccountStatus
		, "BankAccount", pReserveOpenAccountConfirmField->BankAccount
		, "BankPassWord", pReserveOpenAccountConfirmField->BankPassWord
		, "InstallID", pReserveOpenAccountConfirmField->InstallID
		, "VerifyCertNoFlag", pReserveOpenAccountConfirmField->VerifyCertNoFlag
		, "CurrencyID", pReserveOpenAccountConfirmField->CurrencyID
		, "Digest", pReserveOpenAccountConfirmField->Digest
		, "BankAccType", pReserveOpenAccountConfirmField->BankAccType
		, "BrokerIDByBank", pReserveOpenAccountConfirmField->BrokerIDByBank
		, "TID", pReserveOpenAccountConfirmField->TID
		, "AccountID", pReserveOpenAccountConfirmField->AccountID
		, "Password", pReserveOpenAccountConfirmField->Password
		, "BankReserveOpenSeq", pReserveOpenAccountConfirmField->BankReserveOpenSeq
		, "BookDate", pReserveOpenAccountConfirmField->BookDate
		, "BookPsw", pReserveOpenAccountConfirmField->BookPsw
		, "ErrorID", pReserveOpenAccountConfirmField->ErrorID
		, "ErrorMsg", pReserveOpenAccountConfirmField->ErrorMsg
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReserveOpenAccountField *pReserveOpenAccountField, PyObject *dict)
{
	static char *kwlist[] = {"TradeCode", "BankID", "BankBranchID", "BrokerID", "BrokerBranchID", "TradeDate", "TradeTime", "BankSerial", "TradingDay", "PlateSerial", "LastFragment", "SessionID", "CustomerName", "IdCardType", "IdentifiedCardNo", "Gender", "CountryCode", "CustType", "Address", "ZipCode", "Telephone", "MobilePhone", "Fax", "EMail", "MoneyAccountStatus", "BankAccount", "BankPassWord", "InstallID", "VerifyCertNoFlag", "CurrencyID", "Digest", "BankAccType", "BrokerIDByBank", "TID", "ReserveOpenAccStas", "ErrorID", "ErrorMsg", nullptr};
	char *pReserveOpenAccountField_TradeCode = nullptr;
	char *pReserveOpenAccountField_BankID = nullptr;
	char *pReserveOpenAccountField_BankBranchID = nullptr;
	char *pReserveOpenAccountField_BrokerID = nullptr;
	char *pReserveOpenAccountField_BrokerBranchID = nullptr;
	char *pReserveOpenAccountField_TradeDate = nullptr;
	char *pReserveOpenAccountField_TradeTime = nullptr;
	char *pReserveOpenAccountField_BankSerial = nullptr;
	char *pReserveOpenAccountField_TradingDay = nullptr;
	int pReserveOpenAccountField_PlateSerial = 0;
	char pReserveOpenAccountField_LastFragment = 0;
	int pReserveOpenAccountField_SessionID = 0;
	char *pReserveOpenAccountField_CustomerName = nullptr;
	char pReserveOpenAccountField_IdCardType = 0;
	char *pReserveOpenAccountField_IdentifiedCardNo = nullptr;
	char pReserveOpenAccountField_Gender = 0;
	char *pReserveOpenAccountField_CountryCode = nullptr;
	char pReserveOpenAccountField_CustType = 0;
	char *pReserveOpenAccountField_Address = nullptr;
	char *pReserveOpenAccountField_ZipCode = nullptr;
	char *pReserveOpenAccountField_Telephone = nullptr;
	char *pReserveOpenAccountField_MobilePhone = nullptr;
	char *pReserveOpenAccountField_Fax = nullptr;
	char *pReserveOpenAccountField_EMail = nullptr;
	char pReserveOpenAccountField_MoneyAccountStatus = 0;
	char *pReserveOpenAccountField_BankAccount = nullptr;
	char *pReserveOpenAccountField_BankPassWord = nullptr;
	int pReserveOpenAccountField_InstallID = 0;
	char pReserveOpenAccountField_VerifyCertNoFlag = 0;
	char *pReserveOpenAccountField_CurrencyID = nullptr;
	char *pReserveOpenAccountField_Digest = nullptr;
	char pReserveOpenAccountField_BankAccType = 0;
	char *pReserveOpenAccountField_BrokerIDByBank = nullptr;
	int pReserveOpenAccountField_TID = 0;
	char pReserveOpenAccountField_ReserveOpenAccStas = 0;
	int pReserveOpenAccountField_ErrorID = 0;
	char *pReserveOpenAccountField_ErrorMsg = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pReserveOpenAccountField, "|yyyyyyyyyiciycycycyyyyyycyyicyycyiciy")
		, &pReserveOpenAccountField_TradeCode
		, &pReserveOpenAccountField_BankID
		, &pReserveOpenAccountField_BankBranchID
		, &pReserveOpenAccountField_BrokerID
		, &pReserveOpenAccountField_BrokerBranchID
		, &pReserveOpenAccountField_TradeDate
		, &pReserveOpenAccountField_TradeTime
		, &pReserveOpenAccountField_BankSerial
		, &pReserveOpenAccountField_TradingDay
		, &pReserveOpenAccountField_PlateSerial
		, &pReserveOpenAccountField_LastFragment
		, &pReserveOpenAccountField_SessionID
		, &pReserveOpenAccountField_CustomerName
		, &pReserveOpenAccountField_IdCardType
		, &pReserveOpenAccountField_IdentifiedCardNo
		, &pReserveOpenAccountField_Gender
		, &pReserveOpenAccountField_CountryCode
		, &pReserveOpenAccountField_CustType
		, &pReserveOpenAccountField_Address
		, &pReserveOpenAccountField_ZipCode
		, &pReserveOpenAccountField_Telephone
		, &pReserveOpenAccountField_MobilePhone
		, &pReserveOpenAccountField_Fax
		, &pReserveOpenAccountField_EMail
		, &pReserveOpenAccountField_MoneyAccountStatus
		, &pReserveOpenAccountField_BankAccount
		, &pReserveOpenAccountField_BankPassWord
		, &pReserveOpenAccountField_InstallID
		, &pReserveOpenAccountField_VerifyCertNoFlag
		, &pReserveOpenAccountField_CurrencyID
		, &pReserveOpenAccountField_Digest
		, &pReserveOpenAccountField_BankAccType
		, &pReserveOpenAccountField_BrokerIDByBank
		, &pReserveOpenAccountField_TID
		, &pReserveOpenAccountField_ReserveOpenAccStas
		, &pReserveOpenAccountField_ErrorID
		, &pReserveOpenAccountField_ErrorMsg
	PyCTP_PyDict_FromStruct_END
		if(pReserveOpenAccountField_TradeCode != nullptr){ strcpy_s(pReserveOpenAccountField->TradeCode, pReserveOpenAccountField_TradeCode); pReserveOpenAccountField_TradeCode = nullptr; }
		if(pReserveOpenAccountField_BankID != nullptr){ strcpy_s(pReserveOpenAccountField->BankID, pReserveOpenAccountField_BankID); pReserveOpenAccountField_BankID = nullptr; }
		if(pReserveOpenAccountField_BankBranchID != nullptr){ strcpy_s(pReserveOpenAccountField->BankBranchID, pReserveOpenAccountField_BankBranchID); pReserveOpenAccountField_BankBranchID = nullptr; }
		if(pReserveOpenAccountField_BrokerID != nullptr){ strcpy_s(pReserveOpenAccountField->BrokerID, pReserveOpenAccountField_BrokerID); pReserveOpenAccountField_BrokerID = nullptr; }
		if(pReserveOpenAccountField_BrokerBranchID != nullptr){ strcpy_s(pReserveOpenAccountField->BrokerBranchID, pReserveOpenAccountField_BrokerBranchID); pReserveOpenAccountField_BrokerBranchID = nullptr; }
		if(pReserveOpenAccountField_TradeDate != nullptr){ strcpy_s(pReserveOpenAccountField->TradeDate, pReserveOpenAccountField_TradeDate); pReserveOpenAccountField_TradeDate = nullptr; }
		if(pReserveOpenAccountField_TradeTime != nullptr){ strcpy_s(pReserveOpenAccountField->TradeTime, pReserveOpenAccountField_TradeTime); pReserveOpenAccountField_TradeTime = nullptr; }
		if(pReserveOpenAccountField_BankSerial != nullptr){ strcpy_s(pReserveOpenAccountField->BankSerial, pReserveOpenAccountField_BankSerial); pReserveOpenAccountField_BankSerial = nullptr; }
		if(pReserveOpenAccountField_TradingDay != nullptr){ strcpy_s(pReserveOpenAccountField->TradingDay, pReserveOpenAccountField_TradingDay); pReserveOpenAccountField_TradingDay = nullptr; }
		pReserveOpenAccountField->PlateSerial = pReserveOpenAccountField_PlateSerial;
		pReserveOpenAccountField->LastFragment = pReserveOpenAccountField_LastFragment;
		pReserveOpenAccountField->SessionID = pReserveOpenAccountField_SessionID;
		if(pReserveOpenAccountField_CustomerName != nullptr){ strcpy_s(pReserveOpenAccountField->CustomerName, pReserveOpenAccountField_CustomerName); pReserveOpenAccountField_CustomerName = nullptr; }
		pReserveOpenAccountField->IdCardType = pReserveOpenAccountField_IdCardType;
		if(pReserveOpenAccountField_IdentifiedCardNo != nullptr){ strcpy_s(pReserveOpenAccountField->IdentifiedCardNo, pReserveOpenAccountField_IdentifiedCardNo); pReserveOpenAccountField_IdentifiedCardNo = nullptr; }
		pReserveOpenAccountField->Gender = pReserveOpenAccountField_Gender;
		if(pReserveOpenAccountField_CountryCode != nullptr){ strcpy_s(pReserveOpenAccountField->CountryCode, pReserveOpenAccountField_CountryCode); pReserveOpenAccountField_CountryCode = nullptr; }
		pReserveOpenAccountField->CustType = pReserveOpenAccountField_CustType;
		if(pReserveOpenAccountField_Address != nullptr){ strcpy_s(pReserveOpenAccountField->Address, pReserveOpenAccountField_Address); pReserveOpenAccountField_Address = nullptr; }
		if(pReserveOpenAccountField_ZipCode != nullptr){ strcpy_s(pReserveOpenAccountField->ZipCode, pReserveOpenAccountField_ZipCode); pReserveOpenAccountField_ZipCode = nullptr; }
		if(pReserveOpenAccountField_Telephone != nullptr){ strcpy_s(pReserveOpenAccountField->Telephone, pReserveOpenAccountField_Telephone); pReserveOpenAccountField_Telephone = nullptr; }
		if(pReserveOpenAccountField_MobilePhone != nullptr){ strcpy_s(pReserveOpenAccountField->MobilePhone, pReserveOpenAccountField_MobilePhone); pReserveOpenAccountField_MobilePhone = nullptr; }
		if(pReserveOpenAccountField_Fax != nullptr){ strcpy_s(pReserveOpenAccountField->Fax, pReserveOpenAccountField_Fax); pReserveOpenAccountField_Fax = nullptr; }
		if(pReserveOpenAccountField_EMail != nullptr){ strcpy_s(pReserveOpenAccountField->EMail, pReserveOpenAccountField_EMail); pReserveOpenAccountField_EMail = nullptr; }
		pReserveOpenAccountField->MoneyAccountStatus = pReserveOpenAccountField_MoneyAccountStatus;
		if(pReserveOpenAccountField_BankAccount != nullptr){ strcpy_s(pReserveOpenAccountField->BankAccount, pReserveOpenAccountField_BankAccount); pReserveOpenAccountField_BankAccount = nullptr; }
		if(pReserveOpenAccountField_BankPassWord != nullptr){ strcpy_s(pReserveOpenAccountField->BankPassWord, pReserveOpenAccountField_BankPassWord); pReserveOpenAccountField_BankPassWord = nullptr; }
		pReserveOpenAccountField->InstallID = pReserveOpenAccountField_InstallID;
		pReserveOpenAccountField->VerifyCertNoFlag = pReserveOpenAccountField_VerifyCertNoFlag;
		if(pReserveOpenAccountField_CurrencyID != nullptr){ strcpy_s(pReserveOpenAccountField->CurrencyID, pReserveOpenAccountField_CurrencyID); pReserveOpenAccountField_CurrencyID = nullptr; }
		if(pReserveOpenAccountField_Digest != nullptr){ strcpy_s(pReserveOpenAccountField->Digest, pReserveOpenAccountField_Digest); pReserveOpenAccountField_Digest = nullptr; }
		pReserveOpenAccountField->BankAccType = pReserveOpenAccountField_BankAccType;
		if(pReserveOpenAccountField_BrokerIDByBank != nullptr){ strcpy_s(pReserveOpenAccountField->BrokerIDByBank, pReserveOpenAccountField_BrokerIDByBank); pReserveOpenAccountField_BrokerIDByBank = nullptr; }
		pReserveOpenAccountField->TID = pReserveOpenAccountField_TID;
		pReserveOpenAccountField->ReserveOpenAccStas = pReserveOpenAccountField_ReserveOpenAccStas;
		pReserveOpenAccountField->ErrorID = pReserveOpenAccountField_ErrorID;
		if(pReserveOpenAccountField_ErrorMsg != nullptr){ strcpy_s(pReserveOpenAccountField->ErrorMsg, pReserveOpenAccountField_ErrorMsg); pReserveOpenAccountField_ErrorMsg = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReserveOpenAccountField *pReserveOpenAccountField)
{
	if(pReserveOpenAccountField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:i,s:y,s:c,s:y,s:c,s:y,s:c,s:y,s:y,s:y,s:y,s:y,s:y,s:c,s:y,s:y,s:i,s:c,s:y,s:y,s:c,s:y,s:i,s:c,s:i,s:y}"
		, "TradeCode", pReserveOpenAccountField->TradeCode
		, "BankID", pReserveOpenAccountField->BankID
		, "BankBranchID", pReserveOpenAccountField->BankBranchID
		, "BrokerID", pReserveOpenAccountField->BrokerID
		, "BrokerBranchID", pReserveOpenAccountField->BrokerBranchID
		, "TradeDate", pReserveOpenAccountField->TradeDate
		, "TradeTime", pReserveOpenAccountField->TradeTime
		, "BankSerial", pReserveOpenAccountField->BankSerial
		, "TradingDay", pReserveOpenAccountField->TradingDay
		, "PlateSerial", pReserveOpenAccountField->PlateSerial
		, "LastFragment", pReserveOpenAccountField->LastFragment
		, "SessionID", pReserveOpenAccountField->SessionID
		, "CustomerName", pReserveOpenAccountField->CustomerName
		, "IdCardType", pReserveOpenAccountField->IdCardType
		, "IdentifiedCardNo", pReserveOpenAccountField->IdentifiedCardNo
		, "Gender", pReserveOpenAccountField->Gender
		, "CountryCode", pReserveOpenAccountField->CountryCode
		, "CustType", pReserveOpenAccountField->CustType
		, "Address", pReserveOpenAccountField->Address
		, "ZipCode", pReserveOpenAccountField->ZipCode
		, "Telephone", pReserveOpenAccountField->Telephone
		, "MobilePhone", pReserveOpenAccountField->MobilePhone
		, "Fax", pReserveOpenAccountField->Fax
		, "EMail", pReserveOpenAccountField->EMail
		, "MoneyAccountStatus", pReserveOpenAccountField->MoneyAccountStatus
		, "BankAccount", pReserveOpenAccountField->BankAccount
		, "BankPassWord", pReserveOpenAccountField->BankPassWord
		, "InstallID", pReserveOpenAccountField->InstallID
		, "VerifyCertNoFlag", pReserveOpenAccountField->VerifyCertNoFlag
		, "CurrencyID", pReserveOpenAccountField->CurrencyID
		, "Digest", pReserveOpenAccountField->Digest
		, "BankAccType", pReserveOpenAccountField->BankAccType
		, "BrokerIDByBank", pReserveOpenAccountField->BrokerIDByBank
		, "TID", pReserveOpenAccountField->TID
		, "ReserveOpenAccStas", pReserveOpenAccountField->ReserveOpenAccStas
		, "ErrorID", pReserveOpenAccountField->ErrorID
		, "ErrorMsg", pReserveOpenAccountField->ErrorMsg
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcAccountPropertyField *pAccountPropertyField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "AccountID", "BankID", "BankAccount", "OpenName", "OpenBank", "IsActive", "AccountSourceType", "OpenDate", "CancelDate", "OperatorID", "OperateDate", "OperateTime", "CurrencyID", nullptr};
	char *pAccountPropertyField_BrokerID = nullptr;
	char *pAccountPropertyField_AccountID = nullptr;
	char *pAccountPropertyField_BankID = nullptr;
	char *pAccountPropertyField_BankAccount = nullptr;
	char *pAccountPropertyField_OpenName = nullptr;
	char *pAccountPropertyField_OpenBank = nullptr;
	int pAccountPropertyField_IsActive = 0;
	char pAccountPropertyField_AccountSourceType = 0;
	char *pAccountPropertyField_OpenDate = nullptr;
	char *pAccountPropertyField_CancelDate = nullptr;
	char *pAccountPropertyField_OperatorID = nullptr;
	char *pAccountPropertyField_OperateDate = nullptr;
	char *pAccountPropertyField_OperateTime = nullptr;
	char *pAccountPropertyField_CurrencyID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pAccountPropertyField, "|yyyyyyicyyyyyy")
		, &pAccountPropertyField_BrokerID
		, &pAccountPropertyField_AccountID
		, &pAccountPropertyField_BankID
		, &pAccountPropertyField_BankAccount
		, &pAccountPropertyField_OpenName
		, &pAccountPropertyField_OpenBank
		, &pAccountPropertyField_IsActive
		, &pAccountPropertyField_AccountSourceType
		, &pAccountPropertyField_OpenDate
		, &pAccountPropertyField_CancelDate
		, &pAccountPropertyField_OperatorID
		, &pAccountPropertyField_OperateDate
		, &pAccountPropertyField_OperateTime
		, &pAccountPropertyField_CurrencyID
	PyCTP_PyDict_FromStruct_END
		if(pAccountPropertyField_BrokerID != nullptr){ strcpy_s(pAccountPropertyField->BrokerID, pAccountPropertyField_BrokerID); pAccountPropertyField_BrokerID = nullptr; }
		if(pAccountPropertyField_AccountID != nullptr){ strcpy_s(pAccountPropertyField->AccountID, pAccountPropertyField_AccountID); pAccountPropertyField_AccountID = nullptr; }
		if(pAccountPropertyField_BankID != nullptr){ strcpy_s(pAccountPropertyField->BankID, pAccountPropertyField_BankID); pAccountPropertyField_BankID = nullptr; }
		if(pAccountPropertyField_BankAccount != nullptr){ strcpy_s(pAccountPropertyField->BankAccount, pAccountPropertyField_BankAccount); pAccountPropertyField_BankAccount = nullptr; }
		if(pAccountPropertyField_OpenName != nullptr){ strcpy_s(pAccountPropertyField->OpenName, pAccountPropertyField_OpenName); pAccountPropertyField_OpenName = nullptr; }
		if(pAccountPropertyField_OpenBank != nullptr){ strcpy_s(pAccountPropertyField->OpenBank, pAccountPropertyField_OpenBank); pAccountPropertyField_OpenBank = nullptr; }
		pAccountPropertyField->IsActive = pAccountPropertyField_IsActive;
		pAccountPropertyField->AccountSourceType = pAccountPropertyField_AccountSourceType;
		if(pAccountPropertyField_OpenDate != nullptr){ strcpy_s(pAccountPropertyField->OpenDate, pAccountPropertyField_OpenDate); pAccountPropertyField_OpenDate = nullptr; }
		if(pAccountPropertyField_CancelDate != nullptr){ strcpy_s(pAccountPropertyField->CancelDate, pAccountPropertyField_CancelDate); pAccountPropertyField_CancelDate = nullptr; }
		if(pAccountPropertyField_OperatorID != nullptr){ strcpy_s(pAccountPropertyField->OperatorID, pAccountPropertyField_OperatorID); pAccountPropertyField_OperatorID = nullptr; }
		if(pAccountPropertyField_OperateDate != nullptr){ strcpy_s(pAccountPropertyField->OperateDate, pAccountPropertyField_OperateDate); pAccountPropertyField_OperateDate = nullptr; }
		if(pAccountPropertyField_OperateTime != nullptr){ strcpy_s(pAccountPropertyField->OperateTime, pAccountPropertyField_OperateTime); pAccountPropertyField_OperateTime = nullptr; }
		if(pAccountPropertyField_CurrencyID != nullptr){ strcpy_s(pAccountPropertyField->CurrencyID, pAccountPropertyField_CurrencyID); pAccountPropertyField_CurrencyID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcAccountPropertyField *pAccountPropertyField)
{
	if(pAccountPropertyField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:i,s:c,s:y,s:y,s:y,s:y,s:y,s:y}"
		, "BrokerID", pAccountPropertyField->BrokerID
		, "AccountID", pAccountPropertyField->AccountID
		, "BankID", pAccountPropertyField->BankID
		, "BankAccount", pAccountPropertyField->BankAccount
		, "OpenName", pAccountPropertyField->OpenName
		, "OpenBank", pAccountPropertyField->OpenBank
		, "IsActive", pAccountPropertyField->IsActive
		, "AccountSourceType", pAccountPropertyField->AccountSourceType
		, "OpenDate", pAccountPropertyField->OpenDate
		, "CancelDate", pAccountPropertyField->CancelDate
		, "OperatorID", pAccountPropertyField->OperatorID
		, "OperateDate", pAccountPropertyField->OperateDate
		, "OperateTime", pAccountPropertyField->OperateTime
		, "CurrencyID", pAccountPropertyField->CurrencyID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQryCurrDRIdentityField *pQryCurrDRIdentityField, PyObject *dict)
{
	static char *kwlist[] = {"DRIdentityID", nullptr};
	int pQryCurrDRIdentityField_DRIdentityID = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pQryCurrDRIdentityField, "|i")
		, &pQryCurrDRIdentityField_DRIdentityID
	PyCTP_PyDict_FromStruct_END
		pQryCurrDRIdentityField->DRIdentityID = pQryCurrDRIdentityField_DRIdentityID;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQryCurrDRIdentityField *pQryCurrDRIdentityField)
{
	if(pQryCurrDRIdentityField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i}"
		, "DRIdentityID", pQryCurrDRIdentityField->DRIdentityID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcCurrDRIdentityField *pCurrDRIdentityField, PyObject *dict)
{
	static char *kwlist[] = {"DRIdentityID", nullptr};
	int pCurrDRIdentityField_DRIdentityID = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pCurrDRIdentityField, "|i")
		, &pCurrDRIdentityField_DRIdentityID
	PyCTP_PyDict_FromStruct_END
		pCurrDRIdentityField->DRIdentityID = pCurrDRIdentityField_DRIdentityID;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcCurrDRIdentityField *pCurrDRIdentityField)
{
	if(pCurrDRIdentityField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i}"
		, "DRIdentityID", pCurrDRIdentityField->DRIdentityID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQrySecAgentCheckModeField *pQrySecAgentCheckModeField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "InvestorID", nullptr};
	char *pQrySecAgentCheckModeField_BrokerID = nullptr;
	char *pQrySecAgentCheckModeField_InvestorID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQrySecAgentCheckModeField, "|yy")
		, &pQrySecAgentCheckModeField_BrokerID
		, &pQrySecAgentCheckModeField_InvestorID
	PyCTP_PyDict_FromStruct_END
		if(pQrySecAgentCheckModeField_BrokerID != nullptr){ strcpy_s(pQrySecAgentCheckModeField->BrokerID, pQrySecAgentCheckModeField_BrokerID); pQrySecAgentCheckModeField_BrokerID = nullptr; }
		if(pQrySecAgentCheckModeField_InvestorID != nullptr){ strcpy_s(pQrySecAgentCheckModeField->InvestorID, pQrySecAgentCheckModeField_InvestorID); pQrySecAgentCheckModeField_InvestorID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQrySecAgentCheckModeField *pQrySecAgentCheckModeField)
{
	if(pQrySecAgentCheckModeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQrySecAgentCheckModeField->BrokerID
		, "InvestorID", pQrySecAgentCheckModeField->InvestorID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQrySecAgentTradeInfoField *pQrySecAgentTradeInfoField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "BrokerSecAgentID", nullptr};
	char *pQrySecAgentTradeInfoField_BrokerID = nullptr;
	char *pQrySecAgentTradeInfoField_BrokerSecAgentID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pQrySecAgentTradeInfoField, "|yy")
		, &pQrySecAgentTradeInfoField_BrokerID
		, &pQrySecAgentTradeInfoField_BrokerSecAgentID
	PyCTP_PyDict_FromStruct_END
		if(pQrySecAgentTradeInfoField_BrokerID != nullptr){ strcpy_s(pQrySecAgentTradeInfoField->BrokerID, pQrySecAgentTradeInfoField_BrokerID); pQrySecAgentTradeInfoField_BrokerID = nullptr; }
		if(pQrySecAgentTradeInfoField_BrokerSecAgentID != nullptr){ strcpy_s(pQrySecAgentTradeInfoField->BrokerSecAgentID, pQrySecAgentTradeInfoField_BrokerSecAgentID); pQrySecAgentTradeInfoField_BrokerSecAgentID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQrySecAgentTradeInfoField *pQrySecAgentTradeInfoField)
{
	if(pQrySecAgentTradeInfoField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y}"
		, "BrokerID", pQrySecAgentTradeInfoField->BrokerID
		, "BrokerSecAgentID", pQrySecAgentTradeInfoField->BrokerSecAgentID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcUserSystemInfoField *pUserSystemInfoField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "ClientSystemInfoLen", "ClientSystemInfo", "ClientPublicIP", "ClientIPPort", "ClientLoginTime", "ClientAppID", nullptr};
	char *pUserSystemInfoField_BrokerID = nullptr;
	char *pUserSystemInfoField_UserID = nullptr;
	int pUserSystemInfoField_ClientSystemInfoLen = 0;
	char *pUserSystemInfoField_ClientSystemInfo = nullptr;
	char *pUserSystemInfoField_ClientPublicIP = nullptr;
	int pUserSystemInfoField_ClientIPPort = 0;
	char *pUserSystemInfoField_ClientLoginTime = nullptr;
	char *pUserSystemInfoField_ClientAppID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pUserSystemInfoField, "|yyiyyiyy")
		, &pUserSystemInfoField_BrokerID
		, &pUserSystemInfoField_UserID
		, &pUserSystemInfoField_ClientSystemInfoLen
		, &pUserSystemInfoField_ClientSystemInfo
		, &pUserSystemInfoField_ClientPublicIP
		, &pUserSystemInfoField_ClientIPPort
		, &pUserSystemInfoField_ClientLoginTime
		, &pUserSystemInfoField_ClientAppID
	PyCTP_PyDict_FromStruct_END
		if(pUserSystemInfoField_BrokerID != nullptr){ strcpy_s(pUserSystemInfoField->BrokerID, pUserSystemInfoField_BrokerID); pUserSystemInfoField_BrokerID = nullptr; }
		if(pUserSystemInfoField_UserID != nullptr){ strcpy_s(pUserSystemInfoField->UserID, pUserSystemInfoField_UserID); pUserSystemInfoField_UserID = nullptr; }
		pUserSystemInfoField->ClientSystemInfoLen = pUserSystemInfoField_ClientSystemInfoLen;
		if(pUserSystemInfoField_ClientSystemInfo != nullptr){ strcpy_s(pUserSystemInfoField->ClientSystemInfo, pUserSystemInfoField_ClientSystemInfo); pUserSystemInfoField_ClientSystemInfo = nullptr; }
		if(pUserSystemInfoField_ClientPublicIP != nullptr){ strcpy_s(pUserSystemInfoField->ClientPublicIP, pUserSystemInfoField_ClientPublicIP); pUserSystemInfoField_ClientPublicIP = nullptr; }
		pUserSystemInfoField->ClientIPPort = pUserSystemInfoField_ClientIPPort;
		if(pUserSystemInfoField_ClientLoginTime != nullptr){ strcpy_s(pUserSystemInfoField->ClientLoginTime, pUserSystemInfoField_ClientLoginTime); pUserSystemInfoField_ClientLoginTime = nullptr; }
		if(pUserSystemInfoField_ClientAppID != nullptr){ strcpy_s(pUserSystemInfoField->ClientAppID, pUserSystemInfoField_ClientAppID); pUserSystemInfoField_ClientAppID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcUserSystemInfoField *pUserSystemInfoField)
{
	if(pUserSystemInfoField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i,s:y,s:y,s:i,s:y,s:y}"
		, "BrokerID", pUserSystemInfoField->BrokerID
		, "UserID", pUserSystemInfoField->UserID
		, "ClientSystemInfoLen", pUserSystemInfoField->ClientSystemInfoLen
		, "ClientSystemInfo", pUserSystemInfoField->ClientSystemInfo
		, "ClientPublicIP", pUserSystemInfoField->ClientPublicIP
		, "ClientIPPort", pUserSystemInfoField->ClientIPPort
		, "ClientLoginTime", pUserSystemInfoField->ClientLoginTime
		, "ClientAppID", pUserSystemInfoField->ClientAppID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqUserAuthMethodField *pReqUserAuthMethodField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "BrokerID", "UserID", nullptr};
	char *pReqUserAuthMethodField_TradingDay = nullptr;
	char *pReqUserAuthMethodField_BrokerID = nullptr;
	char *pReqUserAuthMethodField_UserID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pReqUserAuthMethodField, "|yyy")
		, &pReqUserAuthMethodField_TradingDay
		, &pReqUserAuthMethodField_BrokerID
		, &pReqUserAuthMethodField_UserID
	PyCTP_PyDict_FromStruct_END
		if(pReqUserAuthMethodField_TradingDay != nullptr){ strcpy_s(pReqUserAuthMethodField->TradingDay, pReqUserAuthMethodField_TradingDay); pReqUserAuthMethodField_TradingDay = nullptr; }
		if(pReqUserAuthMethodField_BrokerID != nullptr){ strcpy_s(pReqUserAuthMethodField->BrokerID, pReqUserAuthMethodField_BrokerID); pReqUserAuthMethodField_BrokerID = nullptr; }
		if(pReqUserAuthMethodField_UserID != nullptr){ strcpy_s(pReqUserAuthMethodField->UserID, pReqUserAuthMethodField_UserID); pReqUserAuthMethodField_UserID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqUserAuthMethodField *pReqUserAuthMethodField)
{
	if(pReqUserAuthMethodField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "TradingDay", pReqUserAuthMethodField->TradingDay
		, "BrokerID", pReqUserAuthMethodField->BrokerID
		, "UserID", pReqUserAuthMethodField->UserID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcRspUserAuthMethodField *pRspUserAuthMethodField, PyObject *dict)
{
	static char *kwlist[] = {"UsableAuthMethod", nullptr};
	int pRspUserAuthMethodField_UsableAuthMethod = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pRspUserAuthMethodField, "|i")
		, &pRspUserAuthMethodField_UsableAuthMethod
	PyCTP_PyDict_FromStruct_END
		pRspUserAuthMethodField->UsableAuthMethod = pRspUserAuthMethodField_UsableAuthMethod;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcRspUserAuthMethodField *pRspUserAuthMethodField)
{
	if(pRspUserAuthMethodField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i}"
		, "UsableAuthMethod", pRspUserAuthMethodField->UsableAuthMethod
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqGenUserCaptchaField *pReqGenUserCaptchaField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "BrokerID", "UserID", nullptr};
	char *pReqGenUserCaptchaField_TradingDay = nullptr;
	char *pReqGenUserCaptchaField_BrokerID = nullptr;
	char *pReqGenUserCaptchaField_UserID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pReqGenUserCaptchaField, "|yyy")
		, &pReqGenUserCaptchaField_TradingDay
		, &pReqGenUserCaptchaField_BrokerID
		, &pReqGenUserCaptchaField_UserID
	PyCTP_PyDict_FromStruct_END
		if(pReqGenUserCaptchaField_TradingDay != nullptr){ strcpy_s(pReqGenUserCaptchaField->TradingDay, pReqGenUserCaptchaField_TradingDay); pReqGenUserCaptchaField_TradingDay = nullptr; }
		if(pReqGenUserCaptchaField_BrokerID != nullptr){ strcpy_s(pReqGenUserCaptchaField->BrokerID, pReqGenUserCaptchaField_BrokerID); pReqGenUserCaptchaField_BrokerID = nullptr; }
		if(pReqGenUserCaptchaField_UserID != nullptr){ strcpy_s(pReqGenUserCaptchaField->UserID, pReqGenUserCaptchaField_UserID); pReqGenUserCaptchaField_UserID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqGenUserCaptchaField *pReqGenUserCaptchaField)
{
	if(pReqGenUserCaptchaField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "TradingDay", pReqGenUserCaptchaField->TradingDay
		, "BrokerID", pReqGenUserCaptchaField->BrokerID
		, "UserID", pReqGenUserCaptchaField->UserID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcRspGenUserCaptchaField *pRspGenUserCaptchaField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "CaptchaInfoLen", "CaptchaInfo", nullptr};
	char *pRspGenUserCaptchaField_BrokerID = nullptr;
	char *pRspGenUserCaptchaField_UserID = nullptr;
	int pRspGenUserCaptchaField_CaptchaInfoLen = 0;
	char *pRspGenUserCaptchaField_CaptchaInfo = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pRspGenUserCaptchaField, "|yyiy")
		, &pRspGenUserCaptchaField_BrokerID
		, &pRspGenUserCaptchaField_UserID
		, &pRspGenUserCaptchaField_CaptchaInfoLen
		, &pRspGenUserCaptchaField_CaptchaInfo
	PyCTP_PyDict_FromStruct_END
		if(pRspGenUserCaptchaField_BrokerID != nullptr){ strcpy_s(pRspGenUserCaptchaField->BrokerID, pRspGenUserCaptchaField_BrokerID); pRspGenUserCaptchaField_BrokerID = nullptr; }
		if(pRspGenUserCaptchaField_UserID != nullptr){ strcpy_s(pRspGenUserCaptchaField->UserID, pRspGenUserCaptchaField_UserID); pRspGenUserCaptchaField_UserID = nullptr; }
		pRspGenUserCaptchaField->CaptchaInfoLen = pRspGenUserCaptchaField_CaptchaInfoLen;
		if(pRspGenUserCaptchaField_CaptchaInfo != nullptr){ strcpy_s(pRspGenUserCaptchaField->CaptchaInfo, pRspGenUserCaptchaField_CaptchaInfo); pRspGenUserCaptchaField_CaptchaInfo = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcRspGenUserCaptchaField *pRspGenUserCaptchaField)
{
	if(pRspGenUserCaptchaField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:i,s:y}"
		, "BrokerID", pRspGenUserCaptchaField->BrokerID
		, "UserID", pRspGenUserCaptchaField->UserID
		, "CaptchaInfoLen", pRspGenUserCaptchaField->CaptchaInfoLen
		, "CaptchaInfo", pRspGenUserCaptchaField->CaptchaInfo
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqGenUserTextField *pReqGenUserTextField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "BrokerID", "UserID", nullptr};
	char *pReqGenUserTextField_TradingDay = nullptr;
	char *pReqGenUserTextField_BrokerID = nullptr;
	char *pReqGenUserTextField_UserID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pReqGenUserTextField, "|yyy")
		, &pReqGenUserTextField_TradingDay
		, &pReqGenUserTextField_BrokerID
		, &pReqGenUserTextField_UserID
	PyCTP_PyDict_FromStruct_END
		if(pReqGenUserTextField_TradingDay != nullptr){ strcpy_s(pReqGenUserTextField->TradingDay, pReqGenUserTextField_TradingDay); pReqGenUserTextField_TradingDay = nullptr; }
		if(pReqGenUserTextField_BrokerID != nullptr){ strcpy_s(pReqGenUserTextField->BrokerID, pReqGenUserTextField_BrokerID); pReqGenUserTextField_BrokerID = nullptr; }
		if(pReqGenUserTextField_UserID != nullptr){ strcpy_s(pReqGenUserTextField->UserID, pReqGenUserTextField_UserID); pReqGenUserTextField_UserID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqGenUserTextField *pReqGenUserTextField)
{
	if(pReqGenUserTextField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y}"
		, "TradingDay", pReqGenUserTextField->TradingDay
		, "BrokerID", pReqGenUserTextField->BrokerID
		, "UserID", pReqGenUserTextField->UserID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcRspGenUserTextField *pRspGenUserTextField, PyObject *dict)
{
	static char *kwlist[] = {"UserTextSeq", nullptr};
	int pRspGenUserTextField_UserTextSeq = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pRspGenUserTextField, "|i")
		, &pRspGenUserTextField_UserTextSeq
	PyCTP_PyDict_FromStruct_END
		pRspGenUserTextField->UserTextSeq = pRspGenUserTextField_UserTextSeq;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcRspGenUserTextField *pRspGenUserTextField)
{
	if(pRspGenUserTextField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i}"
		, "UserTextSeq", pRspGenUserTextField->UserTextSeq
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqUserLoginWithCaptchaField *pReqUserLoginWithCaptchaField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "BrokerID", "UserID", "Password", "UserProductInfo", "InterfaceProductInfo", "ProtocolInfo", "MacAddress", "ClientIPAddress", "LoginRemark", "Captcha", "ClientIPPort", nullptr};
	char *pReqUserLoginWithCaptchaField_TradingDay = nullptr;
	char *pReqUserLoginWithCaptchaField_BrokerID = nullptr;
	char *pReqUserLoginWithCaptchaField_UserID = nullptr;
	char *pReqUserLoginWithCaptchaField_Password = nullptr;
	char *pReqUserLoginWithCaptchaField_UserProductInfo = nullptr;
	char *pReqUserLoginWithCaptchaField_InterfaceProductInfo = nullptr;
	char *pReqUserLoginWithCaptchaField_ProtocolInfo = nullptr;
	char *pReqUserLoginWithCaptchaField_MacAddress = nullptr;
	char *pReqUserLoginWithCaptchaField_ClientIPAddress = nullptr;
	char *pReqUserLoginWithCaptchaField_LoginRemark = nullptr;
	char *pReqUserLoginWithCaptchaField_Captcha = nullptr;
	int pReqUserLoginWithCaptchaField_ClientIPPort = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pReqUserLoginWithCaptchaField, "|yyyyyyyyyyyi")
		, &pReqUserLoginWithCaptchaField_TradingDay
		, &pReqUserLoginWithCaptchaField_BrokerID
		, &pReqUserLoginWithCaptchaField_UserID
		, &pReqUserLoginWithCaptchaField_Password
		, &pReqUserLoginWithCaptchaField_UserProductInfo
		, &pReqUserLoginWithCaptchaField_InterfaceProductInfo
		, &pReqUserLoginWithCaptchaField_ProtocolInfo
		, &pReqUserLoginWithCaptchaField_MacAddress
		, &pReqUserLoginWithCaptchaField_ClientIPAddress
		, &pReqUserLoginWithCaptchaField_LoginRemark
		, &pReqUserLoginWithCaptchaField_Captcha
		, &pReqUserLoginWithCaptchaField_ClientIPPort
	PyCTP_PyDict_FromStruct_END
		if(pReqUserLoginWithCaptchaField_TradingDay != nullptr){ strcpy_s(pReqUserLoginWithCaptchaField->TradingDay, pReqUserLoginWithCaptchaField_TradingDay); pReqUserLoginWithCaptchaField_TradingDay = nullptr; }
		if(pReqUserLoginWithCaptchaField_BrokerID != nullptr){ strcpy_s(pReqUserLoginWithCaptchaField->BrokerID, pReqUserLoginWithCaptchaField_BrokerID); pReqUserLoginWithCaptchaField_BrokerID = nullptr; }
		if(pReqUserLoginWithCaptchaField_UserID != nullptr){ strcpy_s(pReqUserLoginWithCaptchaField->UserID, pReqUserLoginWithCaptchaField_UserID); pReqUserLoginWithCaptchaField_UserID = nullptr; }
		if(pReqUserLoginWithCaptchaField_Password != nullptr){ strcpy_s(pReqUserLoginWithCaptchaField->Password, pReqUserLoginWithCaptchaField_Password); pReqUserLoginWithCaptchaField_Password = nullptr; }
		if(pReqUserLoginWithCaptchaField_UserProductInfo != nullptr){ strcpy_s(pReqUserLoginWithCaptchaField->UserProductInfo, pReqUserLoginWithCaptchaField_UserProductInfo); pReqUserLoginWithCaptchaField_UserProductInfo = nullptr; }
		if(pReqUserLoginWithCaptchaField_InterfaceProductInfo != nullptr){ strcpy_s(pReqUserLoginWithCaptchaField->InterfaceProductInfo, pReqUserLoginWithCaptchaField_InterfaceProductInfo); pReqUserLoginWithCaptchaField_InterfaceProductInfo = nullptr; }
		if(pReqUserLoginWithCaptchaField_ProtocolInfo != nullptr){ strcpy_s(pReqUserLoginWithCaptchaField->ProtocolInfo, pReqUserLoginWithCaptchaField_ProtocolInfo); pReqUserLoginWithCaptchaField_ProtocolInfo = nullptr; }
		if(pReqUserLoginWithCaptchaField_MacAddress != nullptr){ strcpy_s(pReqUserLoginWithCaptchaField->MacAddress, pReqUserLoginWithCaptchaField_MacAddress); pReqUserLoginWithCaptchaField_MacAddress = nullptr; }
		if(pReqUserLoginWithCaptchaField_ClientIPAddress != nullptr){ strcpy_s(pReqUserLoginWithCaptchaField->ClientIPAddress, pReqUserLoginWithCaptchaField_ClientIPAddress); pReqUserLoginWithCaptchaField_ClientIPAddress = nullptr; }
		if(pReqUserLoginWithCaptchaField_LoginRemark != nullptr){ strcpy_s(pReqUserLoginWithCaptchaField->LoginRemark, pReqUserLoginWithCaptchaField_LoginRemark); pReqUserLoginWithCaptchaField_LoginRemark = nullptr; }
		if(pReqUserLoginWithCaptchaField_Captcha != nullptr){ strcpy_s(pReqUserLoginWithCaptchaField->Captcha, pReqUserLoginWithCaptchaField_Captcha); pReqUserLoginWithCaptchaField_Captcha = nullptr; }
		pReqUserLoginWithCaptchaField->ClientIPPort = pReqUserLoginWithCaptchaField_ClientIPPort;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqUserLoginWithCaptchaField *pReqUserLoginWithCaptchaField)
{
	if(pReqUserLoginWithCaptchaField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i}"
		, "TradingDay", pReqUserLoginWithCaptchaField->TradingDay
		, "BrokerID", pReqUserLoginWithCaptchaField->BrokerID
		, "UserID", pReqUserLoginWithCaptchaField->UserID
		, "Password", pReqUserLoginWithCaptchaField->Password
		, "UserProductInfo", pReqUserLoginWithCaptchaField->UserProductInfo
		, "InterfaceProductInfo", pReqUserLoginWithCaptchaField->InterfaceProductInfo
		, "ProtocolInfo", pReqUserLoginWithCaptchaField->ProtocolInfo
		, "MacAddress", pReqUserLoginWithCaptchaField->MacAddress
		, "ClientIPAddress", pReqUserLoginWithCaptchaField->ClientIPAddress
		, "LoginRemark", pReqUserLoginWithCaptchaField->LoginRemark
		, "Captcha", pReqUserLoginWithCaptchaField->Captcha
		, "ClientIPPort", pReqUserLoginWithCaptchaField->ClientIPPort
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqUserLoginWithTextField *pReqUserLoginWithTextField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "BrokerID", "UserID", "Password", "UserProductInfo", "InterfaceProductInfo", "ProtocolInfo", "MacAddress", "ClientIPAddress", "LoginRemark", "Text", "ClientIPPort", nullptr};
	char *pReqUserLoginWithTextField_TradingDay = nullptr;
	char *pReqUserLoginWithTextField_BrokerID = nullptr;
	char *pReqUserLoginWithTextField_UserID = nullptr;
	char *pReqUserLoginWithTextField_Password = nullptr;
	char *pReqUserLoginWithTextField_UserProductInfo = nullptr;
	char *pReqUserLoginWithTextField_InterfaceProductInfo = nullptr;
	char *pReqUserLoginWithTextField_ProtocolInfo = nullptr;
	char *pReqUserLoginWithTextField_MacAddress = nullptr;
	char *pReqUserLoginWithTextField_ClientIPAddress = nullptr;
	char *pReqUserLoginWithTextField_LoginRemark = nullptr;
	char *pReqUserLoginWithTextField_Text = nullptr;
	int pReqUserLoginWithTextField_ClientIPPort = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pReqUserLoginWithTextField, "|yyyyyyyyyyyi")
		, &pReqUserLoginWithTextField_TradingDay
		, &pReqUserLoginWithTextField_BrokerID
		, &pReqUserLoginWithTextField_UserID
		, &pReqUserLoginWithTextField_Password
		, &pReqUserLoginWithTextField_UserProductInfo
		, &pReqUserLoginWithTextField_InterfaceProductInfo
		, &pReqUserLoginWithTextField_ProtocolInfo
		, &pReqUserLoginWithTextField_MacAddress
		, &pReqUserLoginWithTextField_ClientIPAddress
		, &pReqUserLoginWithTextField_LoginRemark
		, &pReqUserLoginWithTextField_Text
		, &pReqUserLoginWithTextField_ClientIPPort
	PyCTP_PyDict_FromStruct_END
		if(pReqUserLoginWithTextField_TradingDay != nullptr){ strcpy_s(pReqUserLoginWithTextField->TradingDay, pReqUserLoginWithTextField_TradingDay); pReqUserLoginWithTextField_TradingDay = nullptr; }
		if(pReqUserLoginWithTextField_BrokerID != nullptr){ strcpy_s(pReqUserLoginWithTextField->BrokerID, pReqUserLoginWithTextField_BrokerID); pReqUserLoginWithTextField_BrokerID = nullptr; }
		if(pReqUserLoginWithTextField_UserID != nullptr){ strcpy_s(pReqUserLoginWithTextField->UserID, pReqUserLoginWithTextField_UserID); pReqUserLoginWithTextField_UserID = nullptr; }
		if(pReqUserLoginWithTextField_Password != nullptr){ strcpy_s(pReqUserLoginWithTextField->Password, pReqUserLoginWithTextField_Password); pReqUserLoginWithTextField_Password = nullptr; }
		if(pReqUserLoginWithTextField_UserProductInfo != nullptr){ strcpy_s(pReqUserLoginWithTextField->UserProductInfo, pReqUserLoginWithTextField_UserProductInfo); pReqUserLoginWithTextField_UserProductInfo = nullptr; }
		if(pReqUserLoginWithTextField_InterfaceProductInfo != nullptr){ strcpy_s(pReqUserLoginWithTextField->InterfaceProductInfo, pReqUserLoginWithTextField_InterfaceProductInfo); pReqUserLoginWithTextField_InterfaceProductInfo = nullptr; }
		if(pReqUserLoginWithTextField_ProtocolInfo != nullptr){ strcpy_s(pReqUserLoginWithTextField->ProtocolInfo, pReqUserLoginWithTextField_ProtocolInfo); pReqUserLoginWithTextField_ProtocolInfo = nullptr; }
		if(pReqUserLoginWithTextField_MacAddress != nullptr){ strcpy_s(pReqUserLoginWithTextField->MacAddress, pReqUserLoginWithTextField_MacAddress); pReqUserLoginWithTextField_MacAddress = nullptr; }
		if(pReqUserLoginWithTextField_ClientIPAddress != nullptr){ strcpy_s(pReqUserLoginWithTextField->ClientIPAddress, pReqUserLoginWithTextField_ClientIPAddress); pReqUserLoginWithTextField_ClientIPAddress = nullptr; }
		if(pReqUserLoginWithTextField_LoginRemark != nullptr){ strcpy_s(pReqUserLoginWithTextField->LoginRemark, pReqUserLoginWithTextField_LoginRemark); pReqUserLoginWithTextField_LoginRemark = nullptr; }
		if(pReqUserLoginWithTextField_Text != nullptr){ strcpy_s(pReqUserLoginWithTextField->Text, pReqUserLoginWithTextField_Text); pReqUserLoginWithTextField_Text = nullptr; }
		pReqUserLoginWithTextField->ClientIPPort = pReqUserLoginWithTextField_ClientIPPort;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqUserLoginWithTextField *pReqUserLoginWithTextField)
{
	if(pReqUserLoginWithTextField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i}"
		, "TradingDay", pReqUserLoginWithTextField->TradingDay
		, "BrokerID", pReqUserLoginWithTextField->BrokerID
		, "UserID", pReqUserLoginWithTextField->UserID
		, "Password", pReqUserLoginWithTextField->Password
		, "UserProductInfo", pReqUserLoginWithTextField->UserProductInfo
		, "InterfaceProductInfo", pReqUserLoginWithTextField->InterfaceProductInfo
		, "ProtocolInfo", pReqUserLoginWithTextField->ProtocolInfo
		, "MacAddress", pReqUserLoginWithTextField->MacAddress
		, "ClientIPAddress", pReqUserLoginWithTextField->ClientIPAddress
		, "LoginRemark", pReqUserLoginWithTextField->LoginRemark
		, "Text", pReqUserLoginWithTextField->Text
		, "ClientIPPort", pReqUserLoginWithTextField->ClientIPPort
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqUserLoginWithOTPField *pReqUserLoginWithOTPField, PyObject *dict)
{
	static char *kwlist[] = {"TradingDay", "BrokerID", "UserID", "Password", "UserProductInfo", "InterfaceProductInfo", "ProtocolInfo", "MacAddress", "ClientIPAddress", "LoginRemark", "OTPPassword", "ClientIPPort", nullptr};
	char *pReqUserLoginWithOTPField_TradingDay = nullptr;
	char *pReqUserLoginWithOTPField_BrokerID = nullptr;
	char *pReqUserLoginWithOTPField_UserID = nullptr;
	char *pReqUserLoginWithOTPField_Password = nullptr;
	char *pReqUserLoginWithOTPField_UserProductInfo = nullptr;
	char *pReqUserLoginWithOTPField_InterfaceProductInfo = nullptr;
	char *pReqUserLoginWithOTPField_ProtocolInfo = nullptr;
	char *pReqUserLoginWithOTPField_MacAddress = nullptr;
	char *pReqUserLoginWithOTPField_ClientIPAddress = nullptr;
	char *pReqUserLoginWithOTPField_LoginRemark = nullptr;
	char *pReqUserLoginWithOTPField_OTPPassword = nullptr;
	int pReqUserLoginWithOTPField_ClientIPPort = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pReqUserLoginWithOTPField, "|yyyyyyyyyyyi")
		, &pReqUserLoginWithOTPField_TradingDay
		, &pReqUserLoginWithOTPField_BrokerID
		, &pReqUserLoginWithOTPField_UserID
		, &pReqUserLoginWithOTPField_Password
		, &pReqUserLoginWithOTPField_UserProductInfo
		, &pReqUserLoginWithOTPField_InterfaceProductInfo
		, &pReqUserLoginWithOTPField_ProtocolInfo
		, &pReqUserLoginWithOTPField_MacAddress
		, &pReqUserLoginWithOTPField_ClientIPAddress
		, &pReqUserLoginWithOTPField_LoginRemark
		, &pReqUserLoginWithOTPField_OTPPassword
		, &pReqUserLoginWithOTPField_ClientIPPort
	PyCTP_PyDict_FromStruct_END
		if(pReqUserLoginWithOTPField_TradingDay != nullptr){ strcpy_s(pReqUserLoginWithOTPField->TradingDay, pReqUserLoginWithOTPField_TradingDay); pReqUserLoginWithOTPField_TradingDay = nullptr; }
		if(pReqUserLoginWithOTPField_BrokerID != nullptr){ strcpy_s(pReqUserLoginWithOTPField->BrokerID, pReqUserLoginWithOTPField_BrokerID); pReqUserLoginWithOTPField_BrokerID = nullptr; }
		if(pReqUserLoginWithOTPField_UserID != nullptr){ strcpy_s(pReqUserLoginWithOTPField->UserID, pReqUserLoginWithOTPField_UserID); pReqUserLoginWithOTPField_UserID = nullptr; }
		if(pReqUserLoginWithOTPField_Password != nullptr){ strcpy_s(pReqUserLoginWithOTPField->Password, pReqUserLoginWithOTPField_Password); pReqUserLoginWithOTPField_Password = nullptr; }
		if(pReqUserLoginWithOTPField_UserProductInfo != nullptr){ strcpy_s(pReqUserLoginWithOTPField->UserProductInfo, pReqUserLoginWithOTPField_UserProductInfo); pReqUserLoginWithOTPField_UserProductInfo = nullptr; }
		if(pReqUserLoginWithOTPField_InterfaceProductInfo != nullptr){ strcpy_s(pReqUserLoginWithOTPField->InterfaceProductInfo, pReqUserLoginWithOTPField_InterfaceProductInfo); pReqUserLoginWithOTPField_InterfaceProductInfo = nullptr; }
		if(pReqUserLoginWithOTPField_ProtocolInfo != nullptr){ strcpy_s(pReqUserLoginWithOTPField->ProtocolInfo, pReqUserLoginWithOTPField_ProtocolInfo); pReqUserLoginWithOTPField_ProtocolInfo = nullptr; }
		if(pReqUserLoginWithOTPField_MacAddress != nullptr){ strcpy_s(pReqUserLoginWithOTPField->MacAddress, pReqUserLoginWithOTPField_MacAddress); pReqUserLoginWithOTPField_MacAddress = nullptr; }
		if(pReqUserLoginWithOTPField_ClientIPAddress != nullptr){ strcpy_s(pReqUserLoginWithOTPField->ClientIPAddress, pReqUserLoginWithOTPField_ClientIPAddress); pReqUserLoginWithOTPField_ClientIPAddress = nullptr; }
		if(pReqUserLoginWithOTPField_LoginRemark != nullptr){ strcpy_s(pReqUserLoginWithOTPField->LoginRemark, pReqUserLoginWithOTPField_LoginRemark); pReqUserLoginWithOTPField_LoginRemark = nullptr; }
		if(pReqUserLoginWithOTPField_OTPPassword != nullptr){ strcpy_s(pReqUserLoginWithOTPField->OTPPassword, pReqUserLoginWithOTPField_OTPPassword); pReqUserLoginWithOTPField_OTPPassword = nullptr; }
		pReqUserLoginWithOTPField->ClientIPPort = pReqUserLoginWithOTPField_ClientIPPort;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqUserLoginWithOTPField *pReqUserLoginWithOTPField)
{
	if(pReqUserLoginWithOTPField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:y,s:i}"
		, "TradingDay", pReqUserLoginWithOTPField->TradingDay
		, "BrokerID", pReqUserLoginWithOTPField->BrokerID
		, "UserID", pReqUserLoginWithOTPField->UserID
		, "Password", pReqUserLoginWithOTPField->Password
		, "UserProductInfo", pReqUserLoginWithOTPField->UserProductInfo
		, "InterfaceProductInfo", pReqUserLoginWithOTPField->InterfaceProductInfo
		, "ProtocolInfo", pReqUserLoginWithOTPField->ProtocolInfo
		, "MacAddress", pReqUserLoginWithOTPField->MacAddress
		, "ClientIPAddress", pReqUserLoginWithOTPField->ClientIPAddress
		, "LoginRemark", pReqUserLoginWithOTPField->LoginRemark
		, "OTPPassword", pReqUserLoginWithOTPField->OTPPassword
		, "ClientIPPort", pReqUserLoginWithOTPField->ClientIPPort
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqApiHandshakeField *pReqApiHandshakeField, PyObject *dict)
{
	static char *kwlist[] = {"CryptoKeyVersion", nullptr};
	char *pReqApiHandshakeField_CryptoKeyVersion = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pReqApiHandshakeField, "|y")
		, &pReqApiHandshakeField_CryptoKeyVersion
	PyCTP_PyDict_FromStruct_END
		if(pReqApiHandshakeField_CryptoKeyVersion != nullptr){ strcpy_s(pReqApiHandshakeField->CryptoKeyVersion, pReqApiHandshakeField_CryptoKeyVersion); pReqApiHandshakeField_CryptoKeyVersion = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqApiHandshakeField *pReqApiHandshakeField)
{
	if(pReqApiHandshakeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y}"
		, "CryptoKeyVersion", pReqApiHandshakeField->CryptoKeyVersion
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcRspApiHandshakeField *pRspApiHandshakeField, PyObject *dict)
{
	static char *kwlist[] = {"FrontHandshakeDataLen", "FrontHandshakeData", "IsApiAuthEnabled", nullptr};
	int pRspApiHandshakeField_FrontHandshakeDataLen = 0;
	char *pRspApiHandshakeField_FrontHandshakeData = nullptr;
	int pRspApiHandshakeField_IsApiAuthEnabled = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pRspApiHandshakeField, "|iyi")
		, &pRspApiHandshakeField_FrontHandshakeDataLen
		, &pRspApiHandshakeField_FrontHandshakeData
		, &pRspApiHandshakeField_IsApiAuthEnabled
	PyCTP_PyDict_FromStruct_END
		pRspApiHandshakeField->FrontHandshakeDataLen = pRspApiHandshakeField_FrontHandshakeDataLen;
		if(pRspApiHandshakeField_FrontHandshakeData != nullptr){ strcpy_s(pRspApiHandshakeField->FrontHandshakeData, pRspApiHandshakeField_FrontHandshakeData); pRspApiHandshakeField_FrontHandshakeData = nullptr; }
		pRspApiHandshakeField->IsApiAuthEnabled = pRspApiHandshakeField_IsApiAuthEnabled;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcRspApiHandshakeField *pRspApiHandshakeField)
{
	if(pRspApiHandshakeField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i,s:y,s:i}"
		, "FrontHandshakeDataLen", pRspApiHandshakeField->FrontHandshakeDataLen
		, "FrontHandshakeData", pRspApiHandshakeField->FrontHandshakeData
		, "IsApiAuthEnabled", pRspApiHandshakeField->IsApiAuthEnabled
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcReqVerifyApiKeyField *pReqVerifyApiKeyField, PyObject *dict)
{
	static char *kwlist[] = {"ApiHandshakeDataLen", "ApiHandshakeData", nullptr};
	int pReqVerifyApiKeyField_ApiHandshakeDataLen = 0;
	char *pReqVerifyApiKeyField_ApiHandshakeData = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pReqVerifyApiKeyField, "|iy")
		, &pReqVerifyApiKeyField_ApiHandshakeDataLen
		, &pReqVerifyApiKeyField_ApiHandshakeData
	PyCTP_PyDict_FromStruct_END
		pReqVerifyApiKeyField->ApiHandshakeDataLen = pReqVerifyApiKeyField_ApiHandshakeDataLen;
		if(pReqVerifyApiKeyField_ApiHandshakeData != nullptr){ strcpy_s(pReqVerifyApiKeyField->ApiHandshakeData, pReqVerifyApiKeyField_ApiHandshakeData); pReqVerifyApiKeyField_ApiHandshakeData = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcReqVerifyApiKeyField *pReqVerifyApiKeyField)
{
	if(pReqVerifyApiKeyField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i,s:y}"
		, "ApiHandshakeDataLen", pReqVerifyApiKeyField->ApiHandshakeDataLen
		, "ApiHandshakeData", pReqVerifyApiKeyField->ApiHandshakeData
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcDepartmentUserField *pDepartmentUserField, PyObject *dict)
{
	static char *kwlist[] = {"BrokerID", "UserID", "InvestorRange", "InvestorID", nullptr};
	char *pDepartmentUserField_BrokerID = nullptr;
	char *pDepartmentUserField_UserID = nullptr;
	char pDepartmentUserField_InvestorRange = 0;
	char *pDepartmentUserField_InvestorID = nullptr;
	PyCTP_PyDict_FromStruct_BEGIN(pDepartmentUserField, "|yycy")
		, &pDepartmentUserField_BrokerID
		, &pDepartmentUserField_UserID
		, &pDepartmentUserField_InvestorRange
		, &pDepartmentUserField_InvestorID
	PyCTP_PyDict_FromStruct_END
		if(pDepartmentUserField_BrokerID != nullptr){ strcpy_s(pDepartmentUserField->BrokerID, pDepartmentUserField_BrokerID); pDepartmentUserField_BrokerID = nullptr; }
		if(pDepartmentUserField_UserID != nullptr){ strcpy_s(pDepartmentUserField->UserID, pDepartmentUserField_UserID); pDepartmentUserField_UserID = nullptr; }
		pDepartmentUserField->InvestorRange = pDepartmentUserField_InvestorRange;
		if(pDepartmentUserField_InvestorID != nullptr){ strcpy_s(pDepartmentUserField->InvestorID, pDepartmentUserField_InvestorID); pDepartmentUserField_InvestorID = nullptr; }
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcDepartmentUserField *pDepartmentUserField)
{
	if(pDepartmentUserField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:y,s:y,s:c,s:y}"
		, "BrokerID", pDepartmentUserField->BrokerID
		, "UserID", pDepartmentUserField->UserID
		, "InvestorRange", pDepartmentUserField->InvestorRange
		, "InvestorID", pDepartmentUserField->InvestorID
		);
}

int PyCTP_Struct_FromPyDict(CThostFtdcQueryFreqField *pQueryFreqField, PyObject *dict)
{
	static char *kwlist[] = {"QueryFreq", nullptr};
	int pQueryFreqField_QueryFreq = 0;
	PyCTP_PyDict_FromStruct_BEGIN(pQueryFreqField, "|i")
		, &pQueryFreqField_QueryFreq
	PyCTP_PyDict_FromStruct_END
		pQueryFreqField->QueryFreq = pQueryFreqField_QueryFreq;
	PyCTP_PyDict_FromStruct_RETURN
}
PyObject *PyCTP_PyDict_FromStruct(CThostFtdcQueryFreqField *pQueryFreqField)
{
	if(pQueryFreqField == nullptr) Py_RETURN_NONE;
	return Py_BuildValue("{s:i}"
		, "QueryFreq", pQueryFreqField->QueryFreq
		);
}
